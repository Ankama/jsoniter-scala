[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 16, 2018 12:05:45 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1400:83: dead code following this construct
[warn]       yearDigits < 10 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                   ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1430:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != 'Z' && tokenOrDigitError('Z')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1465:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1496:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1524:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1559:86: dead code following this construct
[warn]           nanoDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                      ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1603:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1906:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '"' && tokenOrDigitError('"')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1933:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1962:82: dead code following this construct
[warn]       yearDigits < 9 && ((b >= '0' && b <= '9') || (b != '-' && tokenOrDigitError('-')))
[warn]                                                                                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:990:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1076:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("a");
[info]       private[this] val f1: Array[String] = Array("b");
[info]       private[this] val f2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("properties", "geometry");
[info]       private[this] val f1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d9(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d15(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e9(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e9(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "bd", "os");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("destination_addresses", "origin_addresses", "rows", "status");
[info]       private[this] val f1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val f2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val f0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val f1: Array[String] = Array("screen_name", "name", "id", "id_str", "indices");
[info]       private[this] val f2: Array[String] = Array("url", "expanded_url", "display_url", "indices");
[info]       private[this] val f3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val f4: Array[String] = Array("url", "description");
[info]       private[this] val f5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "in_reply_to_status_id", "in_reply_to_status_id_str", "in_reply_to_user_id", "in_reply_to_user_id_str", "in_reply_to_screen_name", "user", "geo", "coordinates", "place", "contributors", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.26.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java -prof gc -rf json -rff graalvmce1.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27992.643 ops/s
[info] # Warmup Iteration   2: 267637.840 ops/s
[info] # Warmup Iteration   3: 752644.939 ops/s
[info] # Warmup Iteration   4: 806104.270 ops/s
[info] # Warmup Iteration   5: 803410.021 ops/s
[info] Iteration   1: 799600.922 ops/s
[info]                  ·gc.alloc.rate:                   2305.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              4538.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5278.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.208 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 813090.180 ops/s
[info]                  ·gc.alloc.rate:                   2342.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              4533.215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3890.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 797943.203 ops/s
[info]                  ·gc.alloc.rate:               2326.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          4586.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5271.497 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 805571.671 ops/s
[info]                  ·gc.alloc.rate:                   2336.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4563.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3917.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 798630.434 ops/s
[info]                  ·gc.alloc.rate:               2317.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          4565.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3958.084 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   802967.282 ±(99.9%) 24704.056 ops/s [Average]
[info]   (min, avg, max) = (797943.203, 802967.282, 813090.180), stdev = 6415.565
[info]   CI (99.9%): [778263.225, 827671.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2325.818 ±(99.9%) 56.800 MB/sec [Average]
[info]   (min, avg, max) = (2305.613, 2325.818, 2342.464), stdev = 14.751
[info]   CI (99.9%): [2269.018, 2382.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4557.407 ±(99.9%) 84.536 B/op [Average]
[info]   (min, avg, max) = (4533.215, 4557.407, 4586.963), stdev = 21.954
[info]   CI (99.9%): [4472.870, 4641.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2276.253 ±(99.9%) 1411.845 MB/sec [Average]
[info]   (min, avg, max) = (2005.948, 2276.253, 2681.895), stdev = 366.652
[info]   CI (99.9%): [864.408, 3688.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4463.194 ±(99.9%) 2855.697 B/op [Average]
[info]   (min, avg, max) = (3890.358, 4463.194, 5278.820), stdev = 741.615
[info]   CI (99.9%): [1607.497, 7318.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.797 ±(99.9%) 5.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.797, 3.154), stdev = 1.363
[info]   CI (99.9%): [≈ 0, 6.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.564 ±(99.9%) 10.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.564, 6.208), stdev = 2.682
[info]   CI (99.9%): [≈ 0, 11.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:59:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.926 ops/s
[info] # Warmup Iteration   2: 1157326.277 ops/s
[info] # Warmup Iteration   3: 1702299.659 ops/s
[info] # Warmup Iteration   4: 1740632.751 ops/s
[info] # Warmup Iteration   5: 1735473.433 ops/s
[info] Iteration   1: 1769414.347 ops/s
[info]                  ·gc.alloc.rate:                   1184.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1053.189 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1186.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1745786.228 ops/s
[info]                  ·gc.alloc.rate:                   1162.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              1047.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1203.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1759897.301 ops/s
[info]                  ·gc.alloc.rate:               1151.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          1029.508 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 597.230 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1754170.590 ops/s
[info]                  ·gc.alloc.rate:                   1172.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1051.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1198.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1731667.065 ops/s
[info]                  ·gc.alloc.rate:                   1145.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1041.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1215.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1752187.106 ±(99.9%) 55206.823 ops/s [Average]
[info]   (min, avg, max) = (1731667.065, 1752187.106, 1769414.347), stdev = 14337.037
[info]   CI (99.9%): [1696980.283, 1807393.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1163.516 ±(99.9%) 60.482 MB/sec [Average]
[info]   (min, avg, max) = (1145.932, 1163.516, 1184.555), stdev = 15.707
[info]   CI (99.9%): [1103.035, 1223.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1044.658 ±(99.9%) 37.380 B/op [Average]
[info]   (min, avg, max) = (1029.508, 1044.658, 1053.189), stdev = 9.708
[info]   CI (99.9%): [1007.277, 1082.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.595 ±(99.9%) 1150.785 MB/sec [Average]
[info]   (min, avg, max) = (667.994, 1202.595, 1338.265), stdev = 298.855
[info]   CI (99.9%): [51.811, 2353.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1080.335 ±(99.9%) 1040.715 B/op [Average]
[info]   (min, avg, max) = (597.230, 1080.335, 1215.737), stdev = 270.270
[info]   CI (99.9%): [39.621, 2121.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.837 ±(99.9%) 6.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 4.061), stdev = 1.802
[info]   CI (99.9%): [≈ 0, 7.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.760 ±(99.9%) 6.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.760, 3.689), stdev = 1.638
[info]   CI (99.9%): [≈ 0, 7.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:55:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1694517.435 ops/s
[info] # Warmup Iteration   2: 5215506.144 ops/s
[info] # Warmup Iteration   3: 5508005.545 ops/s
[info] # Warmup Iteration   4: 5635646.088 ops/s
[info] # Warmup Iteration   5: 5661072.662 ops/s
[info] Iteration   1: 5811396.029 ops/s
[info]                  ·gc.alloc.rate:               402.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 138.553 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 5658011.448 ops/s
[info]                  ·gc.alloc.rate:               395.967 MB/sec
[info]                  ·gc.alloc.rate.norm:          110.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5653309.341 ops/s
[info]                  ·gc.alloc.rate:      373.722 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5566482.200 ops/s
[info]                  ·gc.alloc.rate:               382.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          108.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 189.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 5691284.920 ops/s
[info]                  ·gc.alloc.rate:      376.242 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   5676096.788 ±(99.9%) 341158.517 ops/s [Average]
[info]   (min, avg, max) = (5566482.200, 5676096.788, 5811396.029), stdev = 88597.783
[info]   CI (99.9%): [5334938.271, 6017255.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   386.126 ±(99.9%) 47.660 MB/sec [Average]
[info]   (min, avg, max) = (373.722, 386.126, 402.017), stdev = 12.377
[info]   CI (99.9%): [338.467, 433.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   107.019 ±(99.9%) 10.950 B/op [Average]
[info]   (min, avg, max) = (104.000, 107.019, 110.109), stdev = 2.844
[info]   CI (99.9%): [96.069, 117.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339.136 ±(99.9%) 1218.447 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339.136, 672.082), stdev = 316.427
[info]   CI (99.9%): [≈ 0, 1557.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   94.163 ±(99.9%) 340.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.163, 189.953), stdev = 88.315
[info]   CI (99.9%): [≈ 0, 434.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:54:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 379.770 ops/s
[info] # Warmup Iteration   2: 82525.619 ops/s
[info] # Warmup Iteration   3: 216982.128 ops/s
[info] # Warmup Iteration   4: 241387.093 ops/s
[info] # Warmup Iteration   5: 246159.512 ops/s
[info] Iteration   1: 244713.685 ops/s
[info]                  ·gc.alloc.rate:               2119.577 MB/sec
[info]                  ·gc.alloc.rate.norm:          13627.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12914.574 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 243676.064 ops/s
[info]                  ·gc.alloc.rate:                   2140.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              13821.878 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12991.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.756 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 240592.212 ops/s
[info]                  ·gc.alloc.rate:                   2101.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              13746.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13167.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 248701.476 ops/s
[info]                  ·gc.alloc.rate:               2171.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          13743.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12746.126 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 248869.077 ops/s
[info]                  ·gc.alloc.rate:                   2170.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              13723.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12763.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   245310.503 ±(99.9%) 13539.271 ops/s [Average]
[info]   (min, avg, max) = (240592.212, 245310.503, 248869.077), stdev = 3516.106
[info]   CI (99.9%): [231771.231, 258849.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2140.725 ±(99.9%) 118.879 MB/sec [Average]
[info]   (min, avg, max) = (2101.553, 2140.725, 2171.849), stdev = 30.872
[info]   CI (99.9%): [2021.846, 2259.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13732.509 ±(99.9%) 268.999 B/op [Average]
[info]   (min, avg, max) = (13627.038, 13732.509, 13821.878), stdev = 69.858
[info]   CI (99.9%): [13463.510, 14001.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2013.221 ±(99.9%) 13.302 MB/sec [Average]
[info]   (min, avg, max) = (2008.759, 2013.221, 2018.230), stdev = 3.454
[info]   CI (99.9%): [1999.920, 2026.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12916.447 ±(99.9%) 669.760 B/op [Average]
[info]   (min, avg, max) = (12746.126, 12916.447, 13167.120), stdev = 173.935
[info]   CI (99.9%): [12246.686, 13586.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.358, 1.666), stdev = 0.732
[info]   CI (99.9%): [≈ 0, 3.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.314 ±(99.9%) 18.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.314, 10.756), stdev = 4.728
[info]   CI (99.9%): [≈ 0, 20.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41022.258 ops/s
[info] # Warmup Iteration   2: 789313.601 ops/s
[info] # Warmup Iteration   3: 895207.566 ops/s
[info] # Warmup Iteration   4: 896580.962 ops/s
[info] # Warmup Iteration   5: 918195.363 ops/s
[info] Iteration   1: 914650.824 ops/s
[info]                  ·gc.alloc.rate:                   2463.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.796 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4613.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 905180.495 ops/s
[info]                  ·gc.alloc.rate:                   2424.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3487.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 920151.452 ops/s
[info]                  ·gc.alloc.rate:               2464.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          4214.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2674.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4575.141 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 919308.927 ops/s
[info]                  ·gc.alloc.rate:                   2462.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              4215.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3438.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 907921.271 ops/s
[info]                  ·gc.alloc.rate:               2461.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          4264.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4655.986 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   913442.594 ±(99.9%) 25804.324 ops/s [Average]
[info]   (min, avg, max) = (905180.495, 913442.594, 920151.452), stdev = 6701.301
[info]   CI (99.9%): [887638.270, 939246.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   2455.320 ±(99.9%) 65.941 MB/sec [Average]
[info]   (min, avg, max) = (2424.758, 2455.320, 2464.214), stdev = 17.125
[info]   CI (99.9%): [2389.379, 2521.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4230.033 ±(99.9%) 84.603 B/op [Average]
[info]   (min, avg, max) = (4214.632, 4230.033, 4264.928), stdev = 21.971
[info]   CI (99.9%): [4145.430, 4314.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2411.616 ±(99.9%) 1421.379 MB/sec [Average]
[info]   (min, avg, max) = (2005.803, 2411.616, 2686.906), stdev = 369.128
[info]   CI (99.9%): [990.236, 3832.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4154.212 ±(99.9%) 2432.278 B/op [Average]
[info]   (min, avg, max) = (3438.988, 4154.212, 4655.986), stdev = 631.655
[info]   CI (99.9%): [1721.933, 6586.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.810), stdev = 1.682
[info]   CI (99.9%): [≈ 0, 7.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.383 ±(99.9%) 11.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.383, 6.555), stdev = 2.894
[info]   CI (99.9%): [≈ 0, 12.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 9.000), stdev = 1.924
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:52:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205080.017 ops/s
[info] # Warmup Iteration   2: 2476796.823 ops/s
[info] # Warmup Iteration   3: 2802802.165 ops/s
[info] # Warmup Iteration   4: 2885241.259 ops/s
[info] # Warmup Iteration   5: 2840248.811 ops/s
[info] Iteration   1: 2858632.297 ops/s
[info]                  ·gc.alloc.rate:               1226.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          675.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 735.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2862606.962 ops/s
[info]                  ·gc.alloc.rate:                   1224.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              673.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2814864.819 ops/s
[info]                  ·gc.alloc.rate:                   1201.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              671.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2813095.802 ops/s
[info]                  ·gc.alloc.rate:               1199.241 MB/sec
[info]                  ·gc.alloc.rate.norm:          670.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 374.365 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2814931.867 ops/s
[info]                  ·gc.alloc.rate:                   1212.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              677.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2832826.349 ±(99.9%) 97888.099 ops/s [Average]
[info]   (min, avg, max) = (2813095.802, 2832826.349, 2862606.962), stdev = 25421.229
[info]   CI (99.9%): [2734938.250, 2930714.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1212.697 ±(99.9%) 48.221 MB/sec [Average]
[info]   (min, avg, max) = (1199.241, 1212.697, 1226.298), stdev = 12.523
[info]   CI (99.9%): [1164.476, 1260.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   673.669 ±(99.9%) 10.914 B/op [Average]
[info]   (min, avg, max) = (670.824, 673.669, 677.830), stdev = 2.834
[info]   CI (99.9%): [662.755, 684.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.731 ±(99.9%) 1150.502 MB/sec [Average]
[info]   (min, avg, max) = (669.258, 1203.731, 1338.878), stdev = 298.782
[info]   CI (99.9%): [53.229, 2354.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   668.226 ±(99.9%) 633.065 B/op [Average]
[info]   (min, avg, max) = (374.365, 668.226, 748.596), stdev = 164.405
[info]   CI (99.9%): [35.162, 1301.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.793 ±(99.9%) 6.762 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.934), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.443 ±(99.9%) 3.781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.443, 2.200), stdev = 0.982
[info]   CI (99.9%): [≈ 0, 4.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:52:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1960536.668 ops/s
[info] # Warmup Iteration   2: 14394049.962 ops/s
[info] # Warmup Iteration   3: 15077740.897 ops/s
[info] # Warmup Iteration   4: 14940079.726 ops/s
[info] # Warmup Iteration   5: 14986984.697 ops/s
[info] Iteration   1: 15008813.648 ops/s
[info]                  ·gc.alloc.rate:               788.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 14896322.469 ops/s
[info]                  ·gc.alloc.rate:               789.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          83.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.873 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15003068.969 ops/s
[info]                  ·gc.alloc.rate:               779.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.370 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 15014410.761 ops/s
[info]                  ·gc.alloc.rate:               788.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 14966048.030 ops/s
[info]                  ·gc.alloc.rate:               777.536 MB/sec
[info]                  ·gc.alloc.rate.norm:          81.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70.614 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   14977732.775 ±(99.9%) 189792.115 ops/s [Average]
[info]   (min, avg, max) = (14896322.469, 14977732.775, 15014410.761), stdev = 49288.410
[info]   CI (99.9%): [14787940.660, 15167524.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   784.780 ±(99.9%) 21.533 MB/sec [Average]
[info]   (min, avg, max) = (777.536, 784.780, 789.437), stdev = 5.592
[info]   CI (99.9%): [763.247, 806.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   82.465 ±(99.9%) 2.640 B/op [Average]
[info]   (min, avg, max) = (81.764, 82.465, 83.407), stdev = 0.686
[info]   CI (99.9%): [79.825, 85.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.951 ±(99.9%) 2.139 MB/sec [Average]
[info]   (min, avg, max) = (670.166, 670.951, 671.501), stdev = 0.556
[info]   CI (99.9%): [668.811, 673.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   70.503 ±(99.9%) 0.929 B/op [Average]
[info]   (min, avg, max) = (70.274, 70.503, 70.873), stdev = 0.241
[info]   CI (99.9%): [69.574, 71.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:51:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1535593.797 ops/s
[info] # Warmup Iteration   2: 17017687.551 ops/s
[info] # Warmup Iteration   3: 17241838.875 ops/s
[info] # Warmup Iteration   4: 17243738.003 ops/s
[info] # Warmup Iteration   5: 17265754.369 ops/s
[info] Iteration   1: 17236822.229 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 17246720.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 17273859.834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17244376.097 ops/s
[info]                  ·gc.alloc.rate:      0.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17269375.875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   17254230.848 ±(99.9%) 63015.845 ops/s [Average]
[info]   (min, avg, max) = (17236822.229, 17254230.848, 17273859.834), stdev = 16365.015
[info]   CI (99.9%): [17191215.003, 17317246.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13927.201 ops/s
[info] # Warmup Iteration   2: 535326.271 ops/s
[info] # Warmup Iteration   3: 701588.353 ops/s
[info] # Warmup Iteration   4: 710026.671 ops/s
[info] # Warmup Iteration   5: 706271.641 ops/s
[info] Iteration   1: 698224.866 ops/s
[info]                  ·gc.alloc.rate:                   2065.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4512.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 713484.819 ops/s
[info]                  ·gc.alloc.rate:                   2104.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              4642.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4408.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.964 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 703346.175 ops/s
[info]                  ·gc.alloc.rate:               2076.423 MB/sec
[info]                  ·gc.alloc.rate.norm:          4646.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1994.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4462.933 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 713773.444 ops/s
[info]                  ·gc.alloc.rate:               2108.074 MB/sec
[info]                  ·gc.alloc.rate.norm:          4647.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1995.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4398.999 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 688450.492 ops/s
[info]                  ·gc.alloc.rate:                        2050.267 MB/sec
[info]                  ·gc.alloc.rate.norm:                   4685.947 B/op
[info]                  ·gc.churn.Compressed_Class_Space:      0.017 MB/sec
[info]                  ·gc.churn.Compressed_Class_Space.norm: 0.039 B/op
[info]                  ·gc.churn.Metaspace:                   0.050 MB/sec
[info]                  ·gc.churn.Metaspace.norm:              0.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:               2012.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:          4599.885 B/op
[info]                  ·gc.churn.PS_Old_Gen:                  2.261 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:             5.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:           0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:      0.381 B/op
[info]                  ·gc.count:                             5.000 counts
[info]                  ·gc.time:                              36.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   703455.959 ±(99.9%) 41274.204 ops/s [Average]
[info]   (min, avg, max) = (688450.492, 703455.959, 713773.444), stdev = 10718.780
[info]   CI (99.9%): [662181.756, 744730.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2080.946 ±(99.9%) 95.947 MB/sec [Average]
[info]   (min, avg, max) = (2050.267, 2080.946, 2108.074), stdev = 24.917
[info]   CI (99.9%): [1984.999, 2176.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4655.679 ±(99.9%) 68.046 B/op [Average]
[info]   (min, avg, max) = (4642.044, 4655.679, 4685.947), stdev = 17.671
[info]   CI (99.9%): [4587.633, 4723.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space":
[info]   0.003 ±(99.9%) 0.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm":
[info]   0.008 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Metaspace":
[info]   0.010 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.Metaspace.norm":
[info]   0.023 ±(99.9%) 0.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2000.599 ±(99.9%) 28.383 MB/sec [Average]
[info]   (min, avg, max) = (1994.446, 2000.599, 2012.612), stdev = 7.371
[info]   CI (99.9%): [1972.216, 2028.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4476.734 ±(99.9%) 318.182 B/op [Average]
[info]   (min, avg, max) = (4398.999, 4476.734, 4599.885), stdev = 82.631
[info]   CI (99.9%): [4158.552, 4794.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen":
[info]   0.452 ±(99.9%) 3.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 2.261), stdev = 1.011
[info]   CI (99.9%): [≈ 0, 4.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm":
[info]   1.033 ±(99.9%) 8.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 5.166), stdev = 2.311
[info]   CI (99.9%): [≈ 0, 9.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.999 ±(99.9%) 7.336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.999, 4.392), stdev = 1.905
[info]   CI (99.9%): [≈ 0, 8.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.249 ±(99.9%) 16.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.249, 9.901), stdev = 4.296
[info]   CI (99.9%): [≈ 0, 18.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 12.400, 36.000), stdev = 13.576
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184531.126 ops/s
[info] # Warmup Iteration   2: 1906143.147 ops/s
[info] # Warmup Iteration   3: 2099498.023 ops/s
[info] # Warmup Iteration   4: 2093952.298 ops/s
[info] # Warmup Iteration   5: 2103222.398 ops/s
[info] Iteration   1: 2101060.305 ops/s
[info]                  ·gc.alloc.rate:               2959.998 MB/sec
[info]                  ·gc.alloc.rate.norm:          2216.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3346.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2505.882 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 2114761.626 ops/s
[info]                  ·gc.alloc.rate:                   2963.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              2205.576 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1992.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2099115.795 ops/s
[info]                  ·gc.alloc.rate:                   2945.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              2207.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2011.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2113567.810 ops/s
[info]                  ·gc.alloc.rate:               2965.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.835 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2691.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2004.011 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2106848.981 ops/s
[info]                  ·gc.alloc.rate:               2982.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          2227.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2520.715 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2107070.904 ±(99.9%) 27283.742 ops/s [Average]
[info]   (min, avg, max) = (2099115.795, 2107070.904, 2114761.626), stdev = 7085.501
[info]   CI (99.9%): [2079787.161, 2134354.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2963.418 ±(99.9%) 50.257 MB/sec [Average]
[info]   (min, avg, max) = (2945.866, 2963.418, 2982.334), stdev = 13.052
[info]   CI (99.9%): [2913.161, 3013.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2213.046 ±(99.9%) 35.399 B/op [Average]
[info]   (min, avg, max) = (2205.576, 2213.046, 2227.726), stdev = 9.193
[info]   CI (99.9%): [2177.647, 2248.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2954.784 ±(99.9%) 1427.151 MB/sec [Average]
[info]   (min, avg, max) = (2676.608, 2954.784, 3374.568), stdev = 370.627
[info]   CI (99.9%): [1527.633, 4381.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2206.897 ±(99.9%) 1077.575 B/op [Average]
[info]   (min, avg, max) = (1992.033, 2206.897, 2520.715), stdev = 279.843
[info]   CI (99.9%): [1129.322, 3284.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:50:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.714 ops/s
[info] # Warmup Iteration   2: 9079098.787 ops/s
[info] # Warmup Iteration   3: 9753909.232 ops/s
[info] # Warmup Iteration   4: 10291080.651 ops/s
[info] # Warmup Iteration   5: 10303562.627 ops/s
[info] Iteration   1: 10184518.891 ops/s
[info]                  ·gc.alloc.rate:                   1278.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              197.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10104633.777 ops/s
[info]                  ·gc.alloc.rate:               1281.751 MB/sec
[info]                  ·gc.alloc.rate.norm:          199.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 207.935 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 9959105.076 ops/s
[info]                  ·gc.alloc.rate:                   1243.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10013978.004 ops/s
[info]                  ·gc.alloc.rate:                   1274.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 10389221.688 ops/s
[info]                  ·gc.alloc.rate:                   1294.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              196.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10130291.487 ±(99.9%) 648571.765 ops/s [Average]
[info]   (min, avg, max) = (9959105.076, 10130291.487, 10389221.688), stdev = 168432.028
[info]   CI (99.9%): [9481719.722, 10778863.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1274.533 ±(99.9%) 73.750 MB/sec [Average]
[info]   (min, avg, max) = (1243.170, 1274.533, 1294.973), stdev = 19.153
[info]   CI (99.9%): [1200.783, 1348.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   198.017 ±(99.9%) 7.157 B/op [Average]
[info]   (min, avg, max) = (196.176, 198.017, 200.317), stdev = 1.859
[info]   CI (99.9%): [190.861, 205.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1202.349 ±(99.9%) 1149.929 MB/sec [Average]
[info]   (min, avg, max) = (668.143, 1202.349, 1337.634), stdev = 298.633
[info]   CI (99.9%): [52.420, 2352.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   187.355 ±(99.9%) 185.571 B/op [Average]
[info]   (min, avg, max) = (101.217, 187.355, 211.184), stdev = 48.192
[info]   CI (99.9%): [1.785, 372.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.868 ±(99.9%) 7.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.868, 4.206), stdev = 1.867
[info]   CI (99.9%): [≈ 0, 8.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.136 ±(99.9%) 1.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.661), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:50:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124613.262 ops/s
[info] # Warmup Iteration   2: 3073003.768 ops/s
[info] # Warmup Iteration   3: 3229779.290 ops/s
[info] # Warmup Iteration   4: 3296459.475 ops/s
[info] # Warmup Iteration   5: 3300435.854 ops/s
[info] Iteration   1: 3329354.126 ops/s
[info]                  ·gc.alloc.rate:                   2077.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              981.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 3353268.963 ops/s
[info]                  ·gc.alloc.rate:                   2093.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              982.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3368718.969 ops/s
[info]                  ·gc.alloc.rate:               2102.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          982.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1998.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 933.684 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 3358355.039 ops/s
[info]                  ·gc.alloc.rate:               2110.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.184 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 3367136.838 ops/s
[info]                  ·gc.alloc.rate:               2116.439 MB/sec
[info]                  ·gc.alloc.rate.norm:          989.303 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 936.769 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   3355366.787 ±(99.9%) 61090.800 ops/s [Average]
[info]   (min, avg, max) = (3329354.126, 3355366.787, 3368718.969), stdev = 15865.087
[info]   CI (99.9%): [3294275.987, 3416457.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2099.975 ±(99.9%) 59.154 MB/sec [Average]
[info]   (min, avg, max) = (2077.326, 2099.975, 2116.439), stdev = 15.362
[info]   CI (99.9%): [2040.821, 2159.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   985.006 ±(99.9%) 14.761 B/op [Average]
[info]   (min, avg, max) = (981.951, 985.006, 989.303), stdev = 3.833
[info]   CI (99.9%): [970.245, 999.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2002.676 ±(99.9%) 13.529 MB/sec [Average]
[info]   (min, avg, max) = (1998.412, 2002.676, 2006.898), stdev = 3.513
[info]   CI (99.9%): [1989.147, 2016.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   939.395 ±(99.9%) 22.110 B/op [Average]
[info]   (min, avg, max) = (933.684, 939.395, 948.660), stdev = 5.742
[info]   CI (99.9%): [917.284, 961.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.856 ±(99.9%) 7.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.856, 4.257), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 8.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 3.461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 2.012), stdev = 0.899
[info]   CI (99.9%): [≈ 0, 3.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 10.000), stdev = 2.608
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3960749.716 ops/s
[info] # Warmup Iteration   2: 12245872.265 ops/s
[info] # Warmup Iteration   3: 13035576.379 ops/s
[info] # Warmup Iteration   4: 13507531.975 ops/s
[info] # Warmup Iteration   5: 13456213.112 ops/s
[info] Iteration   1: 13280597.875 ops/s
[info]                  ·gc.alloc.rate:               1727.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          204.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159.662 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 13482123.209 ops/s
[info]                  ·gc.alloc.rate:                   1780.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 12848554.449 ops/s
[info]                  ·gc.alloc.rate:                   1672.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              204.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12776348.154 ops/s
[info]                  ·gc.alloc.rate:                   1687.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              207.905 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13003905.071 ops/s
[info]                  ·gc.alloc.rate:               1706.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          206.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.697 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   13078305.752 ±(99.9%) 1144700.906 ops/s [Average]
[info]   (min, avg, max) = (12776348.154, 13078305.752, 13482123.209), stdev = 297275.190
[info]   CI (99.9%): [11933604.846, 14223006.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1714.902 ±(99.9%) 161.113 MB/sec [Average]
[info]   (min, avg, max) = (1672.690, 1714.902, 1780.048), stdev = 41.840
[info]   CI (99.9%): [1553.790, 1876.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   206.370 ±(99.9%) 5.848 B/op [Average]
[info]   (min, avg, max) = (204.744, 206.370, 207.905), stdev = 1.519
[info]   CI (99.9%): [200.522, 212.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1615.169 ±(99.9%) 1420.623 MB/sec [Average]
[info]   (min, avg, max) = (1344.390, 1615.169, 2022.183), stdev = 368.931
[info]   CI (99.9%): [194.547, 3035.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   194.330 ±(99.9%) 169.368 B/op [Average]
[info]   (min, avg, max) = (159.662, 194.330, 248.405), stdev = 43.984
[info]   CI (99.9%): [24.962, 363.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.895 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.873), stdev = 1.271
[info]   CI (99.9%): [≈ 0, 5.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.335), stdev = 0.148
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:49:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7671.274 ops/s
[info] # Warmup Iteration   2: 190434.292 ops/s
[info] # Warmup Iteration   3: 555205.797 ops/s
[info] # Warmup Iteration   4: 1025179.832 ops/s
[info] # Warmup Iteration   5: 1152521.126 ops/s
[info] Iteration   1: 1153092.240 ops/s
[info]                  ·gc.alloc.rate:                   2651.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              3618.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3657.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1127708.573 ops/s
[info]                  ·gc.alloc.rate:                   2576.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              3595.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3748.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1126775.158 ops/s
[info]                  ·gc.alloc.rate:                   2594.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2688.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3755.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1139472.335 ops/s
[info]                  ·gc.alloc.rate:                   2622.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              3622.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3720.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.086 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1173735.191 ops/s
[info]                  ·gc.alloc.rate:               2699.793 MB/sec
[info]                  ·gc.alloc.rate.norm:          3620.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2714.146 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   1144156.700 ±(99.9%) 75783.695 ops/s [Average]
[info]   (min, avg, max) = (1126775.158, 1144156.700, 1173735.191), stdev = 19680.785
[info]   CI (99.9%): [1068373.005, 1219940.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2628.944 ±(99.9%) 187.432 MB/sec [Average]
[info]   (min, avg, max) = (2576.257, 2628.944, 2699.793), stdev = 48.675
[info]   CI (99.9%): [2441.512, 2816.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3616.167 ±(99.9%) 45.442 B/op [Average]
[info]   (min, avg, max) = (3595.431, 3616.167, 3624.336), stdev = 11.801
[info]   CI (99.9%): [3570.725, 3661.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2554.546 ±(99.9%) 1141.853 MB/sec [Average]
[info]   (min, avg, max) = (2024.164, 2554.546, 2693.846), stdev = 296.536
[info]   CI (99.9%): [1412.693, 3696.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3519.371 ±(99.9%) 1739.638 B/op [Average]
[info]   (min, avg, max) = (2714.146, 3519.371, 3755.439), stdev = 451.779
[info]   CI (99.9%): [1779.732, 5259.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.329 ±(99.9%) 1.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.329, 1.166), stdev = 0.477
[info]   CI (99.9%): [≈ 0, 2.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.452 ±(99.9%) 2.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 1.591), stdev = 0.650
[info]   CI (99.9%): [≈ 0, 2.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 1.517
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 216647.119 ops/s
[info] # Warmup Iteration   2: 2185190.082 ops/s
[info] # Warmup Iteration   3: 2345869.314 ops/s
[info] # Warmup Iteration   4: 2345982.585 ops/s
[info] # Warmup Iteration   5: 2305437.125 ops/s
[info] Iteration   1: 2374035.375 ops/s
[info]                  ·gc.alloc.rate:                   2093.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1387.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1334.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2361790.326 ops/s
[info]                  ·gc.alloc.rate:                   2065.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              1376.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1339.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2384410.359 ops/s
[info]                  ·gc.alloc.rate:                   2102.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              1387.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1324.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2374874.382 ops/s
[info]                  ·gc.alloc.rate:               2105.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          1395.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1329.684 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 2388721.736 ops/s
[info]                  ·gc.alloc.rate:               2119.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          1396.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1324.411 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2376766.436 ±(99.9%) 40233.295 ops/s [Average]
[info]   (min, avg, max) = (2361790.326, 2376766.436, 2388721.736), stdev = 10448.459
[info]   CI (99.9%): [2336533.141, 2416999.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2097.395 ±(99.9%) 77.084 MB/sec [Average]
[info]   (min, avg, max) = (2065.859, 2097.395, 2119.610), stdev = 20.019
[info]   CI (99.9%): [2020.311, 2174.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1388.804 ±(99.9%) 30.542 B/op [Average]
[info]   (min, avg, max) = (1376.618, 1388.804, 1396.399), stdev = 7.932
[info]   CI (99.9%): [1358.262, 1419.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2009.256 ±(99.9%) 10.527 MB/sec [Average]
[info]   (min, avg, max) = (2006.463, 2009.256, 2012.752), stdev = 2.734
[info]   CI (99.9%): [1998.728, 2019.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1330.485 ±(99.9%) 25.263 B/op [Average]
[info]   (min, avg, max) = (1324.393, 1330.485, 1339.561), stdev = 6.561
[info]   CI (99.9%): [1305.222, 1355.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 5.801 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.435), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.494 ±(99.9%) 3.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.494, 2.277), stdev = 0.999
[info]   CI (99.9%): [≈ 0, 4.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.709 ops/s
[info] # Warmup Iteration   2: 18485871.310 ops/s
[info] # Warmup Iteration   3: 18880051.288 ops/s
[info] # Warmup Iteration   4: 18893374.214 ops/s
[info] # Warmup Iteration   5: 19420654.537 ops/s
[info] Iteration   1: 19363204.845 ops/s
[info]                  ·gc.alloc.rate:               603.437 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.119 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 19372941.332 ops/s
[info]                  ·gc.alloc.rate:                   605.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19155573.836 ops/s
[info]                  ·gc.alloc.rate:               599.655 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 20466051.158 ops/s
[info]                  ·gc.alloc.rate:                   646.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51.227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20165633.959 ops/s
[info]                  ·gc.alloc.rate:               635.719 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52.044 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   19704681.026 ±(99.9%) 2212309.714 ops/s [Average]
[info]   (min, avg, max) = (19155573.836, 19704681.026, 20466051.158), stdev = 574529.807
[info]   CI (99.9%): [17492371.312, 21916990.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   618.244 ±(99.9%) 82.591 MB/sec [Average]
[info]   (min, avg, max) = (599.655, 618.244, 646.738), stdev = 21.449
[info]   CI (99.9%): [535.653, 700.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   49.375 ±(99.9%) 1.114 B/op [Average]
[info]   (min, avg, max) = (49.050, 49.375, 49.734), stdev = 0.289
[info]   CI (99.9%): [48.261, 50.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.154 ±(99.9%) 1.544 MB/sec [Average]
[info]   (min, avg, max) = (665.805, 666.154, 666.800), stdev = 0.401
[info]   CI (99.9%): [664.611, 667.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   53.243 ±(99.9%) 5.843 B/op [Average]
[info]   (min, avg, max) = (51.227, 53.243, 54.733), stdev = 1.517
[info]   CI (99.9%): [47.400, 59.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613544.820 ops/s
[info] # Warmup Iteration   2: 6006997.681 ops/s
[info] # Warmup Iteration   3: 6445134.104 ops/s
[info] # Warmup Iteration   4: 6522014.756 ops/s
[info] # Warmup Iteration   5: 6505901.244 ops/s
[info] Iteration   1: 6490786.280 ops/s
[info]                  ·gc.alloc.rate:                   1848.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              448.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6545709.685 ops/s
[info]                  ·gc.alloc.rate:                   1836.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.916 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6503400.237 ops/s
[info]                  ·gc.alloc.rate:               1860.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 484.935 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6512442.737 ops/s
[info]                  ·gc.alloc.rate:               1838.611 MB/sec
[info]                  ·gc.alloc.rate.norm:          444.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483.933 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 6427099.680 ops/s
[info]                  ·gc.alloc.rate:               1817.485 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 327.063 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6495887.724 ±(99.9%) 167520.204 ops/s [Average]
[info]   (min, avg, max) = (6427099.680, 6495887.724, 6545709.685), stdev = 43504.465
[info]   CI (99.9%): [6328367.520, 6663407.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1840.272 ±(99.9%) 60.746 MB/sec [Average]
[info]   (min, avg, max) = (1817.485, 1840.272, 1860.186), stdev = 15.776
[info]   CI (99.9%): [1779.526, 1901.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   445.821 ±(99.9%) 12.823 B/op [Average]
[info]   (min, avg, max) = (441.564, 445.821, 450.084), stdev = 3.330
[info]   CI (99.9%): [432.998, 458.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.547 ±(99.9%) 1406.233 MB/sec [Average]
[info]   (min, avg, max) = (1335.801, 1737.547, 2006.107), stdev = 365.194
[info]   CI (99.9%): [331.314, 3143.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   420.849 ±(99.9%) 338.747 B/op [Average]
[info]   (min, avg, max) = (321.948, 420.849, 486.364), stdev = 87.972
[info]   CI (99.9%): [82.102, 759.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.768 ±(99.9%) 6.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.768, 3.810), stdev = 1.701
[info]   CI (99.9%): [≈ 0, 7.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.185 ±(99.9%) 1.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.916), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5957768.314 ops/s
[info] # Warmup Iteration   2: 27209939.881 ops/s
[info] # Warmup Iteration   3: 28282843.305 ops/s
[info] # Warmup Iteration   4: 28802139.935 ops/s
[info] # Warmup Iteration   5: 28251808.175 ops/s
[info] Iteration   1: 28892345.233 ops/s
[info]                  ·gc.alloc.rate:                   906.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.376 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28896747.734 ops/s
[info]                  ·gc.alloc.rate:               896.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.538 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 28790331.134 ops/s
[info]                  ·gc.alloc.rate:                   912.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              49.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28844724.581 ops/s
[info]                  ·gc.alloc.rate:               894.839 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 28875336.840 ops/s
[info]                  ·gc.alloc.rate:               907.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          49.429 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36.618 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   28859897.104 ±(99.9%) 169153.150 ops/s [Average]
[info]   (min, avg, max) = (28790331.134, 28859897.104, 28896747.734), stdev = 43928.536
[info]   CI (99.9%): [28690743.954, 29029050.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   903.455 ±(99.9%) 28.917 MB/sec [Average]
[info]   (min, avg, max) = (894.839, 903.455, 912.393), stdev = 7.510
[info]   CI (99.9%): [874.537, 932.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   49.266 ±(99.9%) 1.725 B/op [Average]
[info]   (min, avg, max) = (48.823, 49.266, 49.876), stdev = 0.448
[info]   CI (99.9%): [47.541, 50.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.737 ±(99.9%) 1156.635 MB/sec [Average]
[info]   (min, avg, max) = (670.862, 805.737, 1343.062), stdev = 300.374
[info]   CI (99.9%): [≈ 0, 1962.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.955 ±(99.9%) 63.422 B/op [Average]
[info]   (min, avg, max) = (36.538, 43.955, 73.418), stdev = 16.471
[info]   CI (99.9%): [≈ 0, 107.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10013801.764 ops/s
[info] # Warmup Iteration   2: 33961966.531 ops/s
[info] # Warmup Iteration   3: 34945507.222 ops/s
[info] # Warmup Iteration   4: 34919928.308 ops/s
[info] # Warmup Iteration   5: 34767819.999 ops/s
[info] Iteration   1: 34767482.586 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34890676.112 ops/s
[info]                  ·gc.alloc.rate:      0.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34913371.169 ops/s
[info]                  ·gc.alloc.rate:      0.499 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34928751.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34941501.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   34888356.622 ±(99.9%) 270216.596 ops/s [Average]
[info]   (min, avg, max) = (34767482.586, 34888356.622, 34941501.384), stdev = 70174.392
[info]   CI (99.9%): [34618140.026, 35158573.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.161 ±(99.9%) 0.888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.161, 0.499), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.007 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.007, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61510.117 ops/s
[info] # Warmup Iteration   2: 1775986.654 ops/s
[info] # Warmup Iteration   3: 1885248.088 ops/s
[info] # Warmup Iteration   4: 1906397.494 ops/s
[info] # Warmup Iteration   5: 1905735.504 ops/s
[info] Iteration   1: 1927145.198 ops/s
[info]                  ·gc.alloc.rate:                   2996.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2447.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2173.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1933269.840 ops/s
[info]                  ·gc.alloc.rate:                   3032.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              2469.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2666.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2170.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1928732.126 ops/s
[info]                  ·gc.alloc.rate:                   3053.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              2491.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2729.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1916118.829 ops/s
[info]                  ·gc.alloc.rate:                   3010.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              2471.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2206.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1913301.980 ops/s
[info]                  ·gc.alloc.rate:                   3005.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              2471.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2217.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1923713.595 ±(99.9%) 33032.912 ops/s [Average]
[info]   (min, avg, max) = (1913301.980, 1923713.595, 1933269.840), stdev = 8578.542
[info]   CI (99.9%): [1890680.682, 1956746.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3019.889 ±(99.9%) 89.309 MB/sec [Average]
[info]   (min, avg, max) = (2996.896, 3019.889, 3053.839), stdev = 23.193
[info]   CI (99.9%): [2930.579, 3109.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2470.471 ±(99.9%) 60.503 B/op [Average]
[info]   (min, avg, max) = (2447.594, 2470.471, 2491.877), stdev = 15.713
[info]   CI (99.9%): [2409.968, 2530.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2811.369 ±(99.9%) 1150.195 MB/sec [Average]
[info]   (min, avg, max) = (2661.803, 2811.369, 3345.109), stdev = 298.702
[info]   CI (99.9%): [1661.174, 3961.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2299.677 ±(99.9%) 928.576 B/op [Average]
[info]   (min, avg, max) = (2170.900, 2299.677, 2729.548), stdev = 241.148
[info]   CI (99.9%): [1371.101, 3228.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.046, 0.062), stdev = 0.009
[info]   CI (99.9%): [0.010, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.037, 0.051), stdev = 0.007
[info]   CI (99.9%): [0.009, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 15.000), stdev = 3.937
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69882.167 ops/s
[info] # Warmup Iteration   2: 285458.445 ops/s
[info] # Warmup Iteration   3: 316175.265 ops/s
[info] # Warmup Iteration   4: 319666.817 ops/s
[info] # Warmup Iteration   5: 319256.909 ops/s
[info] Iteration   1: 319835.424 ops/s
[info]                  ·gc.alloc.rate:               1940.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          9548.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6577.181 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 320476.478 ops/s
[info]                  ·gc.alloc.rate:                   1969.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              9672.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9858.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 320016.366 ops/s
[info]                  ·gc.alloc.rate:               1967.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          9678.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9897.295 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 320234.680 ops/s
[info]                  ·gc.alloc.rate:               1968.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          9675.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9910.140 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 317797.651 ops/s
[info]                  ·gc.alloc.rate:               1967.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          9744.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10014.103 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   319672.120 ±(99.9%) 4139.340 ops/s [Average]
[info]   (min, avg, max) = (317797.651, 319672.120, 320476.478), stdev = 1074.974
[info]   CI (99.9%): [315532.779, 323811.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1962.817 ±(99.9%) 48.364 MB/sec [Average]
[info]   (min, avg, max) = (1940.393, 1962.817, 1969.626), stdev = 12.560
[info]   CI (99.9%): [1914.453, 2011.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9663.877 ±(99.9%) 273.719 B/op [Average]
[info]   (min, avg, max) = (9548.526, 9663.877, 9744.434), stdev = 71.084
[info]   CI (99.9%): [9390.158, 9937.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.968 ±(99.9%) 1167.727 MB/sec [Average]
[info]   (min, avg, max) = (1336.574, 1878.968, 2022.054), stdev = 303.255
[info]   CI (99.9%): [711.242, 3046.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9251.449 ±(99.9%) 5760.827 B/op [Average]
[info]   (min, avg, max) = (6577.181, 9251.449, 10014.103), stdev = 1496.068
[info]   CI (99.9%): [3490.622, 15012.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:47:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117081.691 ops/s
[info] # Warmup Iteration   2: 493790.126 ops/s
[info] # Warmup Iteration   3: 511911.119 ops/s
[info] # Warmup Iteration   4: 509784.650 ops/s
[info] # Warmup Iteration   5: 511107.696 ops/s
[info] Iteration   1: 510012.897 ops/s
[info]                  ·gc.alloc.rate:               667.327 MB/sec
[info]                  ·gc.alloc.rate.norm:          2059.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2052.641 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 510175.423 ops/s
[info]                  ·gc.alloc.rate:               665.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          2052.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2051.937 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 500217.951 ops/s
[info]                  ·gc.alloc.rate:               669.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          2107.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2095.903 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 508741.274 ops/s
[info]                  ·gc.alloc.rate:               665.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          2059.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2060.771 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 511550.324 ops/s
[info]                  ·gc.alloc.rate:                   667.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              2053.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   508139.574 ±(99.9%) 17477.151 ops/s [Average]
[info]   (min, avg, max) = (500217.951, 508139.574, 511550.324), stdev = 4538.761
[info]   CI (99.9%): [490662.423, 525616.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   667.090 ±(99.9%) 6.648 MB/sec [Average]
[info]   (min, avg, max) = (665.461, 667.090, 669.733), stdev = 1.726
[info]   CI (99.9%): [660.443, 673.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2066.334 ±(99.9%) 88.445 B/op [Average]
[info]   (min, avg, max) = (2052.941, 2066.334, 2107.038), stdev = 22.969
[info]   CI (99.9%): [1977.889, 2154.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   665.877 ±(99.9%) 2.780 MB/sec [Average]
[info]   (min, avg, max) = (665.136, 665.877, 666.790), stdev = 0.722
[info]   CI (99.9%): [663.097, 668.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2062.549 ±(99.9%) 73.281 B/op [Average]
[info]   (min, avg, max) = (2051.490, 2062.549, 2095.903), stdev = 19.031
[info]   CI (99.9%): [1989.268, 2135.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.221 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:47:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531390.450 ops/s
[info] # Warmup Iteration   2: 1229262.481 ops/s
[info] # Warmup Iteration   3: 1315865.302 ops/s
[info] # Warmup Iteration   4: 1335285.034 ops/s
[info] # Warmup Iteration   5: 1331501.951 ops/s
[info] Iteration   1: 1323523.027 ops/s
[info]                  ·gc.alloc.rate:               912.378 MB/sec
[info]                  ·gc.alloc.rate.norm:          1084.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 798.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1341521.793 ops/s
[info]                  ·gc.alloc.rate:               909.951 MB/sec
[info]                  ·gc.alloc.rate.norm:          1067.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 787.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1322843.705 ops/s
[info]                  ·gc.alloc.rate:                   913.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1086.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1336391.635 ops/s
[info]                  ·gc.alloc.rate:                   904.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1338247.811 ops/s
[info]                  ·gc.alloc.rate:               905.308 MB/sec
[info]                  ·gc.alloc.rate.norm:          1064.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 790.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1332505.594 ±(99.9%) 33536.257 ops/s [Average]
[info]   (min, avg, max) = (1322843.705, 1332505.594, 1341521.793), stdev = 8709.260
[info]   CI (99.9%): [1298969.337, 1366041.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   908.999 ±(99.9%) 15.915 MB/sec [Average]
[info]   (min, avg, max) = (904.087, 908.999, 913.272), stdev = 4.133
[info]   CI (99.9%): [893.084, 924.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1073.615 ±(99.9%) 42.976 B/op [Average]
[info]   (min, avg, max) = (1064.551, 1073.615, 1086.563), stdev = 11.161
[info]   CI (99.9%): [1030.639, 1116.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.356 ±(99.9%) 1156.585 MB/sec [Average]
[info]   (min, avg, max) = (671.438, 806.356, 1343.658), stdev = 300.361
[info]   CI (99.9%): [≈ 0, 1962.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   953.531 ±(99.9%) 1388.668 B/op [Average]
[info]   (min, avg, max) = (787.767, 953.531, 1598.613), stdev = 360.633
[info]   CI (99.9%): [≈ 0, 2342.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:47:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21944.807 ops/s
[info] # Warmup Iteration   2: 102155.716 ops/s
[info] # Warmup Iteration   3: 111167.845 ops/s
[info] # Warmup Iteration   4: 113754.815 ops/s
[info] # Warmup Iteration   5: 114407.626 ops/s
[info] Iteration   1: 114390.500 ops/s
[info]                  ·gc.alloc.rate:                   3635.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              50018.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3342.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45991.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 115209.492 ops/s
[info]                  ·gc.alloc.rate:                   3663.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              50042.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3353.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45809.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.284 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 114499.114 ops/s
[info]                  ·gc.alloc.rate:               3642.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          50066.552 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46272.421 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 114969.606 ops/s
[info]                  ·gc.alloc.rate:               3684.354 MB/sec
[info]                  ·gc.alloc.rate.norm:          50436.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4053.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55493.697 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   5: 115869.421 ops/s
[info]                  ·gc.alloc.rate:                   3685.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              50067.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46019.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   114987.627 ±(99.9%) 2296.156 ops/s [Average]
[info]   (min, avg, max) = (114390.500, 114987.627, 115869.421), stdev = 596.304
[info]   CI (99.9%): [112691.471, 117283.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3662.321 ±(99.9%) 89.436 MB/sec [Average]
[info]   (min, avg, max) = (3635.482, 3662.321, 3685.903), stdev = 23.226
[info]   CI (99.9%): [3572.885, 3751.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50126.249 ±(99.9%) 672.010 B/op [Average]
[info]   (min, avg, max) = (50018.913, 50126.249, 50436.389), stdev = 174.519
[info]   CI (99.9%): [49454.239, 50798.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3500.881 ±(99.9%) 1191.930 MB/sec [Average]
[info]   (min, avg, max) = (3342.734, 3500.881, 4053.788), stdev = 309.541
[info]   CI (99.9%): [2308.951, 4692.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   47917.235 ±(99.9%) 16321.252 B/op [Average]
[info]   (min, avg, max) = (45809.850, 47917.235, 55493.697), stdev = 4238.577
[info]   CI (99.9%): [31595.983, 64238.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.227 ±(99.9%) 0.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.227, 0.566), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:47:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113179.447 ops/s
[info] # Warmup Iteration   2: 322404.280 ops/s
[info] # Warmup Iteration   3: 337242.216 ops/s
[info] # Warmup Iteration   4: 350044.231 ops/s
[info] # Warmup Iteration   5: 345336.691 ops/s
[info] Iteration   1: 354729.732 ops/s
[info]                  ·gc.alloc.rate:                   1207.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              5353.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2974.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 353897.491 ops/s
[info]                  ·gc.alloc.rate:               1217.562 MB/sec
[info]                  ·gc.alloc.rate.norm:          5414.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5965.124 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 353987.161 ops/s
[info]                  ·gc.alloc.rate:                   1215.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              5405.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5967.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 353810.289 ops/s
[info]                  ·gc.alloc.rate:                   1227.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              5461.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5973.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 355989.079 ops/s
[info]                  ·gc.alloc.rate:                   1220.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              5394.337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2968.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.657 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   354482.750 ±(99.9%) 3534.613 ops/s [Average]
[info]   (min, avg, max) = (353810.289, 354482.750, 355989.079), stdev = 917.928
[info]   CI (99.9%): [350948.137, 358017.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1217.608 ±(99.9%) 28.726 MB/sec [Average]
[info]   (min, avg, max) = (1207.055, 1217.608, 1227.667), stdev = 7.460
[info]   CI (99.9%): [1188.883, 1246.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5405.769 ±(99.9%) 148.852 B/op [Average]
[info]   (min, avg, max) = (5353.771, 5405.769, 5461.148), stdev = 38.656
[info]   CI (99.9%): [5256.917, 5554.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.739 ±(99.9%) 1415.421 MB/sec [Average]
[info]   (min, avg, max) = (670.700, 1073.739, 1342.925), stdev = 367.580
[info]   CI (99.9%): [≈ 0, 2489.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4770.070 ±(99.9%) 6321.459 B/op [Average]
[info]   (min, avg, max) = (2968.626, 4770.070, 5973.863), stdev = 1641.663
[info]   CI (99.9%): [≈ 0, 11091.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 5.187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.102), stdev = 1.347
[info]   CI (99.9%): [≈ 0, 5.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.146 ±(99.9%) 23.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.146, 13.798), stdev = 5.993
[info]   CI (99.9%): [≈ 0, 26.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274440.734 ops/s
[info] # Warmup Iteration   2: 858985.558 ops/s
[info] # Warmup Iteration   3: 907619.864 ops/s
[info] # Warmup Iteration   4: 913482.064 ops/s
[info] # Warmup Iteration   5: 914711.783 ops/s
[info] Iteration   1: 920100.080 ops/s
[info]                  ·gc.alloc.rate:               683.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          1170.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1138.869 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 919217.889 ops/s
[info]                  ·gc.alloc.rate:               685.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          1173.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1140.012 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 915049.750 ops/s
[info]                  ·gc.alloc.rate:               683.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          1175.430 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1146.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 869403.803 ops/s
[info]                  ·gc.alloc.rate:                   655.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1186.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1207.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 920598.249 ops/s
[info]                  ·gc.alloc.rate:               690.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          1180.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1141.133 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   908873.954 ±(99.9%) 85379.189 ops/s [Average]
[info]   (min, avg, max) = (869403.803, 908873.954, 920598.249), stdev = 22172.704
[info]   CI (99.9%): [823494.765, 994253.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   679.712 ±(99.9%) 53.556 MB/sec [Average]
[info]   (min, avg, max) = (655.303, 679.712, 690.249), stdev = 13.908
[info]   CI (99.9%): [626.156, 733.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1177.098 ±(99.9%) 24.191 B/op [Average]
[info]   (min, avg, max) = (1170.005, 1177.098, 1186.277), stdev = 6.282
[info]   CI (99.9%): [1152.906, 1201.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.570 ±(99.9%) 2.643 MB/sec [Average]
[info]   (min, avg, max) = (665.785, 666.570, 667.465), stdev = 0.686
[info]   CI (99.9%): [663.927, 669.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1154.815 ±(99.9%) 113.274 B/op [Average]
[info]   (min, avg, max) = (1138.869, 1154.815, 1207.145), stdev = 29.417
[info]   CI (99.9%): [1041.541, 1268.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.015 ±(99.9%) 0.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1292677.175 ops/s
[info] # Warmup Iteration   2: 2370110.750 ops/s
[info] # Warmup Iteration   3: 2569750.127 ops/s
[info] # Warmup Iteration   4: 2528155.327 ops/s
[info] # Warmup Iteration   5: 2569606.992 ops/s
[info] Iteration   1: 2548849.984 ops/s
[info]                  ·gc.alloc.rate:                   1209.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2522834.196 ops/s
[info]                  ·gc.alloc.rate:               1194.953 MB/sec
[info]                  ·gc.alloc.rate.norm:          745.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 419.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 2554450.810 ops/s
[info]                  ·gc.alloc.rate:                   1216.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              749.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     828.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2564565.150 ops/s
[info]                  ·gc.alloc.rate:                   1226.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              752.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2585626.610 ops/s
[info]                  ·gc.alloc.rate:                   1249.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2555265.350 ±(99.9%) 88269.084 ops/s [Average]
[info]   (min, avg, max) = (2522834.196, 2555265.350, 2585626.610), stdev = 22923.201
[info]   CI (99.9%): [2466996.266, 2643534.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1219.414 ±(99.9%) 78.560 MB/sec [Average]
[info]   (min, avg, max) = (1194.953, 1219.414, 1249.664), stdev = 20.402
[info]   CI (99.9%): [1140.854, 1297.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   750.913 ±(99.9%) 22.886 B/op [Average]
[info]   (min, avg, max) = (745.454, 750.913, 760.330), stdev = 5.943
[info]   CI (99.9%): [728.027, 773.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.074 ±(99.9%) 1157.924 MB/sec [Average]
[info]   (min, avg, max) = (672.151, 1210.074, 1345.283), stdev = 300.709
[info]   CI (99.9%): [52.150, 2367.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   744.179 ±(99.9%) 699.501 B/op [Average]
[info]   (min, avg, max) = (419.312, 744.179, 829.265), stdev = 181.658
[info]   CI (99.9%): [44.678, 1443.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.831), stdev = 1.232
[info]   CI (99.9%): [≈ 0, 5.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 2.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.737), stdev = 0.756
[info]   CI (99.9%): [≈ 0, 3.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1766390.332 ops/s
[info] # Warmup Iteration   2: 2870110.195 ops/s
[info] # Warmup Iteration   3: 2902830.627 ops/s
[info] # Warmup Iteration   4: 2929821.448 ops/s
[info] # Warmup Iteration   5: 2930458.463 ops/s
[info] Iteration   1: 2928455.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2931583.605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2931070.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2915849.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2921563.211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2925704.335 ±(99.9%) 26201.495 ops/s [Average]
[info]   (min, avg, max) = (2915849.186, 2925704.335, 2931583.605), stdev = 6804.445
[info]   CI (99.9%): [2899502.840, 2951905.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138409.796 ops/s
[info] # Warmup Iteration   2: 413076.568 ops/s
[info] # Warmup Iteration   3: 460071.206 ops/s
[info] # Warmup Iteration   4: 459308.080 ops/s
[info] # Warmup Iteration   5: 459539.932 ops/s
[info] Iteration   1: 459839.858 ops/s
[info]                  ·gc.alloc.rate:                   687.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              2353.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2286.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 458752.139 ops/s
[info]                  ·gc.alloc.rate:               677.959 MB/sec
[info]                  ·gc.alloc.rate.norm:          2325.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2292.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 457358.857 ops/s
[info]                  ·gc.alloc.rate:                   683.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              2351.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2301.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 459637.016 ops/s
[info]                  ·gc.alloc.rate:               681.721 MB/sec
[info]                  ·gc.alloc.rate.norm:          2334.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2290.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 457704.063 ops/s
[info]                  ·gc.alloc.rate:               678.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          2333.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2302.046 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   458658.387 ±(99.9%) 4288.711 ops/s [Average]
[info]   (min, avg, max) = (457358.857, 458658.387, 459839.858), stdev = 1113.765
[info]   CI (99.9%): [454369.675, 462947.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   681.836 ±(99.9%) 14.903 MB/sec [Average]
[info]   (min, avg, max) = (677.959, 681.836, 687.504), stdev = 3.870
[info]   CI (99.9%): [666.932, 696.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2339.597 ±(99.9%) 47.114 B/op [Average]
[info]   (min, avg, max) = (2325.320, 2339.597, 2353.199), stdev = 12.235
[info]   CI (99.9%): [2292.483, 2386.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.699 ±(99.9%) 2.028 MB/sec [Average]
[info]   (min, avg, max) = (668.104, 668.699, 669.463), stdev = 0.527
[info]   CI (99.9%): [666.671, 670.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2294.533 ±(99.9%) 26.548 B/op [Average]
[info]   (min, avg, max) = (2286.794, 2294.533, 2302.046), stdev = 6.894
[info]   CI (99.9%): [2267.986, 2321.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.057 ±(99.9%) 0.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.214), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:45:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5830.439 ops/s
[info] # Warmup Iteration   2: 14905.907 ops/s
[info] # Warmup Iteration   3: 16840.672 ops/s
[info] # Warmup Iteration   4: 17457.494 ops/s
[info] # Warmup Iteration   5: 17207.377 ops/s
[info] Iteration   1: 17039.049 ops/s
[info]                  ·gc.alloc.rate:                   1359.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              125572.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124065.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.845 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16893.977 ops/s
[info]                  ·gc.alloc.rate:                   1356.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              126333.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125199.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.879 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17197.408 ops/s
[info]                  ·gc.alloc.rate:                   1379.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              126232.082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123024.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17609.220 ops/s
[info]                  ·gc.alloc.rate:                   1409.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              126004.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120027.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17310.545 ops/s
[info]                  ·gc.alloc.rate:                   1399.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              127162.577 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121851.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   17210.040 ±(99.9%) 1052.323 ops/s [Average]
[info]   (min, avg, max) = (16893.977, 17210.040, 17609.220), stdev = 273.285
[info]   CI (99.9%): [16157.716, 18262.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1380.842 ±(99.9%) 91.145 MB/sec [Average]
[info]   (min, avg, max) = (1356.149, 1380.842, 1409.807), stdev = 23.670
[info]   CI (99.9%): [1289.697, 1471.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   126261.079 ±(99.9%) 2244.230 B/op [Average]
[info]   (min, avg, max) = (125572.437, 126261.079, 127162.577), stdev = 582.819
[info]   CI (99.9%): [124016.849, 128505.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1343.073 ±(99.9%) 5.538 MB/sec [Average]
[info]   (min, avg, max) = (1340.746, 1343.073, 1344.486), stdev = 1.438
[info]   CI (99.9%): [1337.535, 1348.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122833.924 ±(99.9%) 7699.233 B/op [Average]
[info]   (min, avg, max) = (120027.777, 122833.924, 125199.863), stdev = 1999.466
[info]   CI (99.9%): [115134.691, 130533.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.427 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.749, 2.686), stdev = 1.150
[info]   CI (99.9%): [≈ 0, 5.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68.199 ±(99.9%) 404.760 B/op [Average]
[info]   (min, avg, max) = (3.785, 68.199, 245.760), stdev = 105.115
[info]   CI (99.9%): [≈ 0, 472.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:45:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9937.865 ops/s
[info] # Warmup Iteration   2: 34059.136 ops/s
[info] # Warmup Iteration   3: 35560.871 ops/s
[info] # Warmup Iteration   4: 35409.829 ops/s
[info] # Warmup Iteration   5: 36885.070 ops/s
[info] Iteration   1: 36565.704 ops/s
[info]                  ·gc.alloc.rate:               1025.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          44157.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57488.034 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 36789.900 ops/s
[info]                  ·gc.alloc.rate:               1003.743 MB/sec
[info]                  ·gc.alloc.rate.norm:          42938.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28597.527 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 36636.614 ops/s
[info]                  ·gc.alloc.rate:                   1013.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              43542.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57448.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 36903.690 ops/s
[info]                  ·gc.alloc.rate:               1003.689 MB/sec
[info]                  ·gc.alloc.rate.norm:          42806.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28523.404 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 36740.703 ops/s
[info]                  ·gc.alloc.rate:               1012.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          43380.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57356.930 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   36727.322 ±(99.9%) 507.749 ops/s [Average]
[info]   (min, avg, max) = (36565.704, 36727.322, 36903.690), stdev = 131.861
[info]   CI (99.9%): [36219.574, 37235.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1011.923 ±(99.9%) 35.167 MB/sec [Average]
[info]   (min, avg, max) = (1003.689, 1011.923, 1025.906), stdev = 9.133
[info]   CI (99.9%): [976.756, 1047.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43364.951 ±(99.9%) 2068.179 B/op [Average]
[info]   (min, avg, max) = (42806.124, 43364.951, 44157.526), stdev = 537.100
[info]   CI (99.9%): [41296.772, 45433.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.834 ±(99.9%) 1410.226 MB/sec [Average]
[info]   (min, avg, max) = (668.503, 1069.834, 1338.940), stdev = 366.231
[info]   CI (99.9%): [≈ 0, 2480.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45882.816 ±(99.9%) 60890.860 B/op [Average]
[info]   (min, avg, max) = (28523.404, 45882.816, 57488.034), stdev = 15813.163
[info]   CI (99.9%): [≈ 0, 106773.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.179 ±(99.9%) 1.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.894), stdev = 0.400
[info]   CI (99.9%): [≈ 0, 1.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:45:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16979.985 ops/s
[info] # Warmup Iteration   2: 39501.338 ops/s
[info] # Warmup Iteration   3: 41588.986 ops/s
[info] # Warmup Iteration   4: 40714.965 ops/s
[info] # Warmup Iteration   5: 41561.100 ops/s
[info] Iteration   1: 41722.482 ops/s
[info]                  ·gc.alloc.rate:               616.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          23259.094 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25291.566 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 41597.316 ops/s
[info]                  ·gc.alloc.rate:               614.725 MB/sec
[info]                  ·gc.alloc.rate.norm:          23258.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25367.555 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 40850.118 ops/s
[info]                  ·gc.alloc.rate:               610.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          23508.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25857.654 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 41156.087 ops/s
[info]                  ·gc.alloc.rate:               627.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          24004.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25666.051 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 41764.056 ops/s
[info]                  ·gc.alloc.rate:               618.176 MB/sec
[info]                  ·gc.alloc.rate.norm:          23294.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25303.790 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   41418.012 ±(99.9%) 1535.083 ops/s [Average]
[info]   (min, avg, max) = (40850.118, 41418.012, 41764.056), stdev = 398.656
[info]   CI (99.9%): [39882.928, 42953.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   617.516 ±(99.9%) 24.976 MB/sec [Average]
[info]   (min, avg, max) = (610.205, 617.516, 627.806), stdev = 6.486
[info]   CI (99.9%): [592.540, 642.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23465.096 ±(99.9%) 1228.602 B/op [Average]
[info]   (min, avg, max) = (23258.862, 23465.096, 24004.686), stdev = 319.064
[info]   CI (99.9%): [22236.494, 24693.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.990 ±(99.9%) 1.770 MB/sec [Average]
[info]   (min, avg, max) = (670.457, 670.990, 671.505), stdev = 0.460
[info]   CI (99.9%): [669.221, 672.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25497.323 ±(99.9%) 972.123 B/op [Average]
[info]   (min, avg, max) = (25291.566, 25497.323, 25857.654), stdev = 252.457
[info]   CI (99.9%): [24525.200, 26469.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4267.132 ops/s
[info] # Warmup Iteration   2: 28340.320 ops/s
[info] # Warmup Iteration   3: 30716.355 ops/s
[info] # Warmup Iteration   4: 30731.135 ops/s
[info] # Warmup Iteration   5: 29767.599 ops/s
[info] Iteration   1: 30756.719 ops/s
[info]                  ·gc.alloc.rate:                   1542.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              78916.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68516.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 30747.302 ops/s
[info]                  ·gc.alloc.rate:                   1552.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              79448.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68532.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 30798.699 ops/s
[info]                  ·gc.alloc.rate:                   1553.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              79395.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68491.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.396 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30962.736 ops/s
[info]                  ·gc.alloc.rate:                   1589.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              80768.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101816.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30985.827 ops/s
[info]                  ·gc.alloc.rate:               1561.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          79296.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67735.195 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   30850.257 ±(99.9%) 443.402 ops/s [Average]
[info]   (min, avg, max) = (30747.302, 30850.257, 30985.827), stdev = 115.150
[info]   CI (99.9%): [30406.854, 31293.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1559.746 ±(99.9%) 68.888 MB/sec [Average]
[info]   (min, avg, max) = (1542.227, 1559.746, 1589.387), stdev = 17.890
[info]   CI (99.9%): [1490.858, 1628.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79565.323 ±(99.9%) 2710.981 B/op [Average]
[info]   (min, avg, max) = (78916.692, 79565.323, 80768.449), stdev = 704.033
[info]   CI (99.9%): [76854.341, 82276.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1471.077 ±(99.9%) 1146.311 MB/sec [Average]
[info]   (min, avg, max) = (1333.540, 1471.077, 2003.586), stdev = 297.693
[info]   CI (99.9%): [324.766, 2617.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75018.418 ±(99.9%) 57700.527 B/op [Average]
[info]   (min, avg, max) = (67735.195, 75018.418, 101816.973), stdev = 14984.644
[info]   CI (99.9%): [17317.891, 132718.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.903 ±(99.9%) 7.467 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.903, 4.372), stdev = 1.939
[info]   CI (99.9%): [≈ 0, 8.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   46.164 ±(99.9%) 381.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.164, 223.396), stdev = 99.097
[info]   CI (99.9%): [≈ 0, 427.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9370.812 ops/s
[info] # Warmup Iteration   2: 22753.629 ops/s
[info] # Warmup Iteration   3: 24946.178 ops/s
[info] # Warmup Iteration   4: 24863.501 ops/s
[info] # Warmup Iteration   5: 24755.136 ops/s
[info] Iteration   1: 24152.682 ops/s
[info]                  ·gc.alloc.rate:               1800.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          117303.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131175.091 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 25074.449 ops/s
[info]                  ·gc.alloc.rate:                   1807.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              113472.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126357.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25115.973 ops/s
[info]                  ·gc.alloc.rate:                   1822.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              114193.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83947.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.609 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25121.221 ops/s
[info]                  ·gc.alloc.rate:                   1835.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              115027.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125829.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25166.052 ops/s
[info]                  ·gc.alloc.rate:                   1826.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              114195.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125624.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   24926.075 ±(99.9%) 1669.470 ops/s [Average]
[info]   (min, avg, max) = (24152.682, 24926.075, 25166.052), stdev = 433.556
[info]   CI (99.9%): [23256.605, 26595.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1818.496 ±(99.9%) 55.190 MB/sec [Average]
[info]   (min, avg, max) = (1800.216, 1818.496, 1835.961), stdev = 14.333
[info]   CI (99.9%): [1763.306, 1873.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   114838.508 ±(99.9%) 5713.682 B/op [Average]
[info]   (min, avg, max) = (113472.369, 114838.508, 117303.308), stdev = 1483.825
[info]   CI (99.9%): [109124.827, 120552.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.630 ±(99.9%) 1155.845 MB/sec [Average]
[info]   (min, avg, max) = (1339.687, 1876.630, 2013.247), stdev = 300.169
[info]   CI (99.9%): [720.785, 3032.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   118586.938 ±(99.9%) 75080.008 B/op [Average]
[info]   (min, avg, max) = (83947.862, 118586.938, 131175.091), stdev = 19498.040
[info]   CI (99.9%): [43506.930, 193666.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.745 ±(99.9%) 6.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.622), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 6.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.775 ±(99.9%) 388.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.775, 227.356), stdev = 100.954
[info]   CI (99.9%): [≈ 0, 435.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7510.653 ops/s
[info] # Warmup Iteration   2: 21060.162 ops/s
[info] # Warmup Iteration   3: 24960.658 ops/s
[info] # Warmup Iteration   4: 25052.485 ops/s
[info] # Warmup Iteration   5: 24982.471 ops/s
[info] Iteration   1: 25064.209 ops/s
[info]                  ·gc.alloc.rate:               1561.760 MB/sec
[info]                  ·gc.alloc.rate.norm:          98066.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83906.157 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 25128.889 ops/s
[info]                  ·gc.alloc.rate:                   1564.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              97997.591 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83775.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25099.752 ops/s
[info]                  ·gc.alloc.rate:                   1589.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              99682.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125804.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257.132 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25209.104 ops/s
[info]                  ·gc.alloc.rate:               1568.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          97922.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83302.175 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 25256.586 ops/s
[info]                  ·gc.alloc.rate:               1572.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          98019.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83102.377 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   25151.708 ±(99.9%) 305.454 ops/s [Average]
[info]   (min, avg, max) = (25064.209, 25151.708, 25256.586), stdev = 79.325
[info]   CI (99.9%): [24846.254, 25457.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1571.573 ±(99.9%) 42.291 MB/sec [Average]
[info]   (min, avg, max) = (1561.760, 1571.573, 1589.757), stdev = 10.983
[info]   CI (99.9%): [1529.282, 1613.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   98337.510 ±(99.9%) 2901.268 B/op [Average]
[info]   (min, avg, max) = (97922.135, 98337.510, 99682.097), stdev = 753.450
[info]   CI (99.9%): [95436.242, 101238.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.659 ±(99.9%) 1155.300 MB/sec [Average]
[info]   (min, avg, max) = (1333.554, 1469.659, 2006.357), stdev = 300.028
[info]   CI (99.9%): [314.359, 2624.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   91978.141 ±(99.9%) 72823.949 B/op [Average]
[info]   (min, avg, max) = (83102.377, 91978.141, 125804.059), stdev = 18912.148
[info]   CI (99.9%): [19154.192, 164802.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.828 ±(99.9%) 7.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.828, 4.101), stdev = 1.829
[info]   CI (99.9%): [≈ 0, 7.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   51.948 ±(99.9%) 441.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51.948, 257.132), stdev = 114.707
[info]   CI (99.9%): [≈ 0, 493.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:44:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10896.491 ops/s
[info] # Warmup Iteration   2: 26629.944 ops/s
[info] # Warmup Iteration   3: 27310.222 ops/s
[info] # Warmup Iteration   4: 27474.568 ops/s
[info] # Warmup Iteration   5: 27182.198 ops/s
[info] Iteration   1: 27548.662 ops/s
[info]                  ·gc.alloc.rate:                   1613.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              92143.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76814.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 27577.691 ops/s
[info]                  ·gc.alloc.rate:                   1627.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              92876.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76771.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.498 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 142.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 27616.780 ops/s
[info]                  ·gc.alloc.rate:                   1641.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              93542.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114876.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26790.036 ops/s
[info]                  ·gc.alloc.rate:               1593.066 MB/sec
[info]                  ·gc.alloc.rate.norm:          93586.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78736.142 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 27558.491 ops/s
[info]                  ·gc.alloc.rate:               1638.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          93578.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76536.728 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   27418.332 ±(99.9%) 1356.175 ops/s [Average]
[info]   (min, avg, max) = (26790.036, 27418.332, 27616.780), stdev = 352.194
[info]   CI (99.9%): [26062.157, 28774.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1622.789 ±(99.9%) 77.112 MB/sec [Average]
[info]   (min, avg, max) = (1593.066, 1622.789, 1641.394), stdev = 20.026
[info]   CI (99.9%): [1545.677, 1699.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   93145.375 ±(99.9%) 2447.027 B/op [Average]
[info]   (min, avg, max) = (92143.503, 93145.375, 93586.165), stdev = 635.485
[info]   CI (99.9%): [90698.349, 95592.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1477.297 ±(99.9%) 1159.057 MB/sec [Average]
[info]   (min, avg, max) = (1340.282, 1477.297, 2015.732), stdev = 301.003
[info]   CI (99.9%): [318.240, 2636.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   84747.089 ±(99.9%) 64944.233 B/op [Average]
[info]   (min, avg, max) = (76536.728, 84747.089, 114876.035), stdev = 16865.811
[info]   CI (99.9%): [19802.856, 149691.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.498), stdev = 1.093
[info]   CI (99.9%): [≈ 0, 4.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.375 ±(99.9%) 240.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.375, 142.557), stdev = 62.354
[info]   CI (99.9%): [≈ 0, 280.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10252.107 ops/s
[info] # Warmup Iteration   2: 26730.071 ops/s
[info] # Warmup Iteration   3: 26896.070 ops/s
[info] # Warmup Iteration   4: 27419.469 ops/s
[info] # Warmup Iteration   5: 27058.192 ops/s
[info] Iteration   1: 27364.306 ops/s
[info]                  ·gc.alloc.rate:                   1609.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              92554.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115933.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 27483.368 ops/s
[info]                  ·gc.alloc.rate:                   1604.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              91864.877 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76999.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 27568.624 ops/s
[info]                  ·gc.alloc.rate:                   1608.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              91848.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76682.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27524.846 ops/s
[info]                  ·gc.alloc.rate:               1631.640 MB/sec
[info]                  ·gc.alloc.rate.norm:          93294.463 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114989.137 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 27510.867 ops/s
[info]                  ·gc.alloc.rate:               1603.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          91743.476 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76673.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   27490.402 ±(99.9%) 296.235 ops/s [Average]
[info]   (min, avg, max) = (27364.306, 27490.402, 27568.624), stdev = 76.931
[info]   CI (99.9%): [27194.168, 27786.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1611.544 ±(99.9%) 44.363 MB/sec [Average]
[info]   (min, avg, max) = (1603.696, 1611.544, 1631.640), stdev = 11.521
[info]   CI (99.9%): [1567.182, 1655.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   92261.147 ±(99.9%) 2546.223 B/op [Average]
[info]   (min, avg, max) = (91743.476, 92261.147, 93294.463), stdev = 661.246
[info]   CI (99.9%): [89714.924, 94807.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1610.986 ±(99.9%) 1414.479 MB/sec [Average]
[info]   (min, avg, max) = (1340.261, 1610.986, 2015.687), stdev = 367.336
[info]   CI (99.9%): [196.507, 3025.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   92255.573 ±(99.9%) 81583.614 B/op [Average]
[info]   (min, avg, max) = (76673.023, 92255.573, 115933.756), stdev = 21187.006
[info]   CI (99.9%): [10671.959, 173839.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 4.594 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 2.769), stdev = 1.193
[info]   CI (99.9%): [≈ 0, 5.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   40.507 ±(99.9%) 263.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.507, 158.547), stdev = 68.317
[info]   CI (99.9%): [≈ 0, 303.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 9.000), stdev = 2.449
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:43:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2367.042 ops/s
[info] # Warmup Iteration   2: 7246.619 ops/s
[info] # Warmup Iteration   3: 7895.797 ops/s
[info] # Warmup Iteration   4: 7916.479 ops/s
[info] # Warmup Iteration   5: 7984.615 ops/s
[info] Iteration   1: 7928.465 ops/s
[info]                  ·gc.alloc.rate:               1191.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          236566.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 264722.466 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 7978.157 ops/s
[info]                  ·gc.alloc.rate:                   1185.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              233809.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262801.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7939.568 ops/s
[info]                  ·gc.alloc.rate:               1201.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          238145.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 264223.722 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 7790.576 ops/s
[info]                  ·gc.alloc.rate:               1146.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          231592.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134772.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 7963.080 ops/s
[info]                  ·gc.alloc.rate:                   1186.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              234400.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263888.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7919.969 ±(99.9%) 288.433 ops/s [Average]
[info]   (min, avg, max) = (7790.576, 7919.969, 7978.157), stdev = 74.905
[info]   CI (99.9%): [7631.536, 8208.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1182.281 ±(99.9%) 80.754 MB/sec [Average]
[info]   (min, avg, max) = (1146.610, 1182.281, 1201.599), stdev = 20.972
[info]   CI (99.9%): [1101.527, 1263.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   234902.738 ±(99.9%) 9758.378 B/op [Average]
[info]   (min, avg, max) = (231592.117, 234902.738, 238145.455), stdev = 2534.220
[info]   CI (99.9%): [225144.360, 244661.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1200.334 ±(99.9%) 1147.493 MB/sec [Average]
[info]   (min, avg, max) = (667.258, 1200.334, 1335.226), stdev = 298.000
[info]   CI (99.9%): [52.841, 2347.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   238081.645 ±(99.9%) 222396.872 B/op [Average]
[info]   (min, avg, max) = (134772.698, 238081.645, 264722.466), stdev = 57755.761
[info]   CI (99.9%): [15684.773, 460478.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.644 ±(99.9%) 8.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.644, 4.114), stdev = 2.251
[info]   CI (99.9%): [≈ 0, 10.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:43:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6355.065 ops/s
[info] # Warmup Iteration   2: 16064.212 ops/s
[info] # Warmup Iteration   3: 17932.032 ops/s
[info] # Warmup Iteration   4: 18053.119 ops/s
[info] # Warmup Iteration   5: 17891.330 ops/s
[info] Iteration   1: 17828.985 ops/s
[info]                  ·gc.alloc.rate:                   1634.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              144282.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177839.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.837 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 17884.142 ops/s
[info]                  ·gc.alloc.rate:                   1647.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              145007.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118263.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 18231.989 ops/s
[info]                  ·gc.alloc.rate:                   1669.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              144125.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173708.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 18223.398 ops/s
[info]                  ·gc.alloc.rate:               1672.706 MB/sec
[info]                  ·gc.alloc.rate.norm:          144459.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115632.729 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 18221.315 ops/s
[info]                  ·gc.alloc.rate:               1660.024 MB/sec
[info]                  ·gc.alloc.rate.norm:          143311.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115530.349 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   18077.966 ±(99.9%) 782.027 ops/s [Average]
[info]   (min, avg, max) = (17828.985, 18077.966, 18231.989), stdev = 203.090
[info]   CI (99.9%): [17295.938, 18859.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1656.934 ±(99.9%) 61.146 MB/sec [Average]
[info]   (min, avg, max) = (1634.455, 1656.934, 1672.706), stdev = 15.880
[info]   CI (99.9%): [1595.788, 1718.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   144237.318 ±(99.9%) 2369.049 B/op [Average]
[info]   (min, avg, max) = (143311.532, 144237.318, 145007.573), stdev = 615.234
[info]   CI (99.9%): [141868.270, 146606.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.606 ±(99.9%) 1419.716 MB/sec [Average]
[info]   (min, avg, max) = (1338.225, 1609.606, 2014.597), stdev = 368.696
[info]   CI (99.9%): [189.890, 3029.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   140195.037 ±(99.9%) 125263.153 B/op [Average]
[info]   (min, avg, max) = (115530.349, 140195.037, 177839.854), stdev = 32530.443
[info]   CI (99.9%): [14931.884, 265458.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 4.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 2.706), stdev = 1.184
[info]   CI (99.9%): [≈ 0, 5.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   67.042 ±(99.9%) 400.680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.042, 238.140), stdev = 104.055
[info]   CI (99.9%): [≈ 0, 467.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:43:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17434.851 ops/s
[info] # Warmup Iteration   2: 40825.755 ops/s
[info] # Warmup Iteration   3: 41733.824 ops/s
[info] # Warmup Iteration   4: 40154.248 ops/s
[info] # Warmup Iteration   5: 43026.044 ops/s
[info] Iteration   1: 43065.909 ops/s
[info]                  ·gc.alloc.rate:               1223.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          44702.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48884.208 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 43072.663 ops/s
[info]                  ·gc.alloc.rate:               1201.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          43920.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24461.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 43061.923 ops/s
[info]                  ·gc.alloc.rate:                   1216.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              44450.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48948.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.522 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 43020.699 ops/s
[info]                  ·gc.alloc.rate:                   1226.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              44875.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49020.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 43195.154 ops/s
[info]                  ·gc.alloc.rate:                   1218.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              44378.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48784.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   43083.270 ±(99.9%) 253.257 ops/s [Average]
[info]   (min, avg, max) = (43020.699, 43083.270, 43195.154), stdev = 65.770
[info]   CI (99.9%): [42830.013, 43336.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217.251 ±(99.9%) 36.573 MB/sec [Average]
[info]   (min, avg, max) = (1201.994, 1217.251, 1226.651), stdev = 9.498
[info]   CI (99.9%): [1180.678, 1253.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44465.669 ±(99.9%) 1401.149 B/op [Average]
[info]   (min, avg, max) = (43920.418, 44465.669, 44875.841), stdev = 363.874
[info]   CI (99.9%): [43064.520, 45866.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.088 ±(99.9%) 1152.978 MB/sec [Average]
[info]   (min, avg, max) = (669.462, 1205.088, 1339.946), stdev = 299.425
[info]   CI (99.9%): [52.110, 2358.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44019.949 ±(99.9%) 42101.490 B/op [Average]
[info]   (min, avg, max) = (24461.905, 44019.949, 49020.629), stdev = 10933.623
[info]   CI (99.9%): [1918.459, 86121.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.820 ±(99.9%) 5.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.820, 3.185), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   29.979 ±(99.9%) 193.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.979, 116.520), stdev = 50.250
[info]   CI (99.9%): [≈ 0, 223.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:43:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27538.219 ops/s
[info] # Warmup Iteration   2: 60931.630 ops/s
[info] # Warmup Iteration   3: 61701.855 ops/s
[info] # Warmup Iteration   4: 62719.525 ops/s
[info] # Warmup Iteration   5: 63005.245 ops/s
[info] Iteration   1: 62644.698 ops/s
[info]                  ·gc.alloc.rate:                   845.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              21243.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33730.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 62826.977 ops/s
[info]                  ·gc.alloc.rate:               830.892 MB/sec
[info]                  ·gc.alloc.rate.norm:          20813.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16819.933 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 62934.624 ops/s
[info]                  ·gc.alloc.rate:               830.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          20772.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16808.801 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 62753.369 ops/s
[info]                  ·gc.alloc.rate:                   826.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              20738.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16857.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.522 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 62282.756 ops/s
[info]                  ·gc.alloc.rate:               832.666 MB/sec
[info]                  ·gc.alloc.rate.norm:          21040.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16992.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   62688.485 ±(99.9%) 963.638 ops/s [Average]
[info]   (min, avg, max) = (62282.756, 62688.485, 62934.624), stdev = 250.254
[info]   CI (99.9%): [61724.847, 63652.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   833.380 ±(99.9%) 27.543 MB/sec [Average]
[info]   (min, avg, max) = (826.870, 833.380, 845.598), stdev = 7.153
[info]   CI (99.9%): [805.837, 860.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20921.706 ±(99.9%) 829.054 B/op [Average]
[info]   (min, avg, max) = (20738.344, 20921.706, 21243.682), stdev = 215.303
[info]   CI (99.9%): [20092.652, 21750.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.208 ±(99.9%) 1154.723 MB/sec [Average]
[info]   (min, avg, max) = (671.458, 806.208, 1342.645), stdev = 299.878
[info]   CI (99.9%): [≈ 0, 1960.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20241.890 ±(99.9%) 29037.327 B/op [Average]
[info]   (min, avg, max) = (16808.801, 20241.890, 33730.826), stdev = 7540.902
[info]   CI (99.9%): [≈ 0, 49279.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 1.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.046), stdev = 0.468
[info]   CI (99.9%): [≈ 0, 2.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:42:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2569.886 ops/s
[info] # Warmup Iteration   2: 23891.830 ops/s
[info] # Warmup Iteration   3: 33190.842 ops/s
[info] # Warmup Iteration   4: 33281.668 ops/s
[info] # Warmup Iteration   5: 32769.535 ops/s
[info] Iteration   1: 33360.572 ops/s
[info]                  ·gc.alloc.rate:                   2197.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              103660.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94737.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.962 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 33418.400 ops/s
[info]                  ·gc.alloc.rate:                   2202.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              103688.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94808.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33184.293 ops/s
[info]                  ·gc.alloc.rate:                   2186.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              103714.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95566.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.987 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 33172.408 ops/s
[info]                  ·gc.alloc.rate:               2200.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          104382.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95761.808 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 33103.555 ops/s
[info]                  ·gc.alloc.rate:               2196.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          104404.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96148.497 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   33247.846 ±(99.9%) 517.857 ops/s [Average]
[info]   (min, avg, max) = (33103.555, 33247.846, 33418.400), stdev = 134.486
[info]   CI (99.9%): [32729.988, 33765.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2196.554 ±(99.9%) 22.757 MB/sec [Average]
[info]   (min, avg, max) = (2186.880, 2196.554, 2202.127), stdev = 5.910
[info]   CI (99.9%): [2173.797, 2219.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   103970.099 ±(99.9%) 1490.540 B/op [Average]
[info]   (min, avg, max) = (103660.196, 103970.099, 104404.711), stdev = 387.088
[info]   CI (99.9%): [102479.559, 105460.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.572 ±(99.9%) 20.730 MB/sec [Average]
[info]   (min, avg, max) = (2008.170, 2015.572, 2022.461), stdev = 5.384
[info]   CI (99.9%): [1994.842, 2036.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   95404.696 ±(99.9%) 2363.083 B/op [Average]
[info]   (min, avg, max) = (94737.969, 95404.696, 96148.497), stdev = 613.685
[info]   CI (99.9%): [93041.613, 97767.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.258 ±(99.9%) 2.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.258, 1.207), stdev = 0.531
[info]   CI (99.9%): [≈ 0, 2.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12.178 ±(99.9%) 96.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.178, 56.962), stdev = 25.064
[info]   CI (99.9%): [≈ 0, 108.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:42:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5458.192 ops/s
[info] # Warmup Iteration   2: 25789.459 ops/s
[info] # Warmup Iteration   3: 27097.532 ops/s
[info] # Warmup Iteration   4: 27521.851 ops/s
[info] # Warmup Iteration   5: 27137.806 ops/s
[info] Iteration   1: 27559.000 ops/s
[info]                  ·gc.alloc.rate:                   1766.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              100900.775 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76428.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.189 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 27340.904 ops/s
[info]                  ·gc.alloc.rate:                   1767.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              101741.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115652.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.879 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 27625.812 ops/s
[info]                  ·gc.alloc.rate:                   1769.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              100792.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76128.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 27605.741 ops/s
[info]                  ·gc.alloc.rate:               1782.357 MB/sec
[info]                  ·gc.alloc.rate.norm:          101589.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114162.240 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 27485.330 ops/s
[info]                  ·gc.alloc.rate:               1801.375 MB/sec
[info]                  ·gc.alloc.rate.norm:          103123.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114694.556 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   27523.358 ±(99.9%) 444.452 ops/s [Average]
[info]   (min, avg, max) = (27340.904, 27523.358, 27625.812), stdev = 115.423
[info]   CI (99.9%): [27078.905, 27967.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1777.468 ±(99.9%) 56.940 MB/sec [Average]
[info]   (min, avg, max) = (1766.970, 1777.468, 1801.375), stdev = 14.787
[info]   CI (99.9%): [1720.528, 1834.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   101629.618 ±(99.9%) 3591.463 B/op [Average]
[info]   (min, avg, max) = (100792.069, 101629.618, 103123.901), stdev = 932.691
[info]   CI (99.9%): [98038.155, 105221.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1738.042 ±(99.9%) 1408.522 MB/sec [Average]
[info]   (min, avg, max) = (1336.294, 1738.042, 2009.085), stdev = 365.789
[info]   CI (99.9%): [329.520, 3146.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   99413.193 ±(99.9%) 81348.485 B/op [Average]
[info]   (min, avg, max) = (76128.971, 99413.193, 115652.047), stdev = 21125.943
[info]   CI (99.9%): [18064.709, 180761.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.829 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.976), stdev = 1.774
[info]   CI (99.9%): [≈ 0, 7.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.251 ±(99.9%) 393.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.251, 228.879), stdev = 102.094
[info]   CI (99.9%): [≈ 0, 439.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:42:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17966.026 ops/s
[info] # Warmup Iteration   2: 33038.919 ops/s
[info] # Warmup Iteration   3: 33385.526 ops/s
[info] # Warmup Iteration   4: 33788.172 ops/s
[info] # Warmup Iteration   5: 34395.269 ops/s
[info] Iteration   1: 34320.832 ops/s
[info]                  ·gc.alloc.rate:               1533.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          70308.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61675.550 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 33802.090 ops/s
[info]                  ·gc.alloc.rate:                   1533.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              71393.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93980.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.921 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 34421.490 ops/s
[info]                  ·gc.alloc.rate:                   1561.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              71389.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61464.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.410 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 34036.031 ops/s
[info]                  ·gc.alloc.rate:                   1531.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              70804.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62066.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.963 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 34116.879 ops/s
[info]                  ·gc.alloc.rate:               1535.231 MB/sec
[info]                  ·gc.alloc.rate.norm:          70821.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61859.899 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   34139.464 ±(99.9%) 938.212 ops/s [Average]
[info]   (min, avg, max) = (33802.090, 34139.464, 34421.490), stdev = 243.651
[info]   CI (99.9%): [33201.252, 35077.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1538.996 ±(99.9%) 48.490 MB/sec [Average]
[info]   (min, avg, max) = (1531.868, 1538.996, 1561.419), stdev = 12.593
[info]   CI (99.9%): [1490.506, 1587.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   70943.577 ±(99.9%) 1763.186 B/op [Average]
[info]   (min, avg, max) = (70308.688, 70943.577, 71393.973), stdev = 457.894
[info]   CI (99.9%): [69180.391, 72706.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.281 ±(99.9%) 1162.574 MB/sec [Average]
[info]   (min, avg, max) = (1340.965, 1478.281, 2018.359), stdev = 301.917
[info]   CI (99.9%): [315.707, 2640.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   68209.316 ±(99.9%) 55480.194 B/op [Average]
[info]   (min, avg, max) = (61464.152, 68209.316, 93980.101), stdev = 14408.030
[info]   CI (99.9%): [12729.122, 123689.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.764 ±(99.9%) 5.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.112), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   35.459 ±(99.9%) 241.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.459, 144.921), stdev = 62.656
[info]   CI (99.9%): [≈ 0, 276.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 9.000), stdev = 2.775
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:42:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14859.620 ops/s
[info] # Warmup Iteration   2: 34452.782 ops/s
[info] # Warmup Iteration   3: 33806.605 ops/s
[info] # Warmup Iteration   4: 34243.747 ops/s
[info] # Warmup Iteration   5: 34767.808 ops/s
[info] Iteration   1: 34888.334 ops/s
[info]                  ·gc.alloc.rate:                   1505.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              67903.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60671.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34813.652 ops/s
[info]                  ·gc.alloc.rate:                   1517.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              68600.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60834.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34915.219 ops/s
[info]                  ·gc.alloc.rate:                   1509.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              68032.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60688.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34948.661 ops/s
[info]                  ·gc.alloc.rate:               1522.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          68545.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60537.460 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34843.797 ops/s
[info]                  ·gc.alloc.rate:                   1533.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              69271.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90896.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   34881.933 ±(99.9%) 208.416 ops/s [Average]
[info]   (min, avg, max) = (34813.652, 34881.933, 34948.661), stdev = 54.125
[info]   CI (99.9%): [34673.516, 35090.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1517.605 ±(99.9%) 42.702 MB/sec [Average]
[info]   (min, avg, max) = (1505.295, 1517.605, 1533.568), stdev = 11.090
[info]   CI (99.9%): [1474.903, 1560.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   68470.838 ±(99.9%) 2088.354 B/op [Average]
[info]   (min, avg, max) = (67903.512, 68470.838, 69271.114), stdev = 542.339
[info]   CI (99.9%): [66382.485, 70559.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1478.773 ±(99.9%) 1148.522 MB/sec [Average]
[info]   (min, avg, max) = (1344.270, 1478.773, 2012.327), stdev = 298.267
[info]   CI (99.9%): [330.251, 2627.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   66725.617 ±(99.9%) 52031.535 B/op [Average]
[info]   (min, avg, max) = (60537.460, 66725.617, 90896.646), stdev = 13512.424
[info]   CI (99.9%): [14694.082, 118757.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.019), stdev = 1.318
[info]   CI (99.9%): [≈ 0, 5.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   30.222 ±(99.9%) 228.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.222, 136.068), stdev = 59.419
[info]   CI (99.9%): [≈ 0, 259.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:41:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76497.025 ops/s
[info] # Warmup Iteration   2: 302522.354 ops/s
[info] # Warmup Iteration   3: 318869.484 ops/s
[info] # Warmup Iteration   4: 326825.040 ops/s
[info] # Warmup Iteration   5: 327523.698 ops/s
[info] Iteration   1: 325285.848 ops/s
[info]                  ·gc.alloc.rate:               1848.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          8942.856 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9746.760 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 327311.247 ops/s
[info]                  ·gc.alloc.rate:                   1862.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              8954.301 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9686.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.017 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 328386.764 ops/s
[info]                  ·gc.alloc.rate:               1838.783 MB/sec
[info]                  ·gc.alloc.rate.norm:          8812.586 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6420.192 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 323707.822 ops/s
[info]                  ·gc.alloc.rate:               1841.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          8948.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9765.057 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 327584.750 ops/s
[info]                  ·gc.alloc.rate:               1876.661 MB/sec
[info]                  ·gc.alloc.rate.norm:          9016.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9652.820 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   326455.286 ±(99.9%) 7370.517 ops/s [Average]
[info]   (min, avg, max) = (323707.822, 326455.286, 328386.764), stdev = 1914.100
[info]   CI (99.9%): [319084.770, 333825.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1853.426 ±(99.9%) 61.097 MB/sec [Average]
[info]   (min, avg, max) = (1838.783, 1853.426, 1876.661), stdev = 15.867
[info]   CI (99.9%): [1792.329, 1914.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8934.945 ±(99.9%) 287.105 B/op [Average]
[info]   (min, avg, max) = (8812.586, 8934.945, 9016.451), stdev = 74.560
[info]   CI (99.9%): [8647.840, 9222.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.359 ±(99.9%) 1157.610 MB/sec [Average]
[info]   (min, avg, max) = (1339.600, 1877.359, 2014.447), stdev = 300.628
[info]   CI (99.9%): [719.749, 3034.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9054.235 ±(99.9%) 5672.651 B/op [Average]
[info]   (min, avg, max) = (6420.192, 9054.235, 9765.057), stdev = 1473.169
[info]   CI (99.9%): [3381.585, 14726.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.708 ±(99.9%) 6.094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.708, 3.539), stdev = 1.583
[info]   CI (99.9%): [≈ 0, 6.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.403 ±(99.9%) 29.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.403, 17.017), stdev = 7.610
[info]   CI (99.9%): [≈ 0, 32.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.817 ops/s
[info] # Warmup Iteration   2: 1417968.126 ops/s
[info] # Warmup Iteration   3: 1508131.570 ops/s
[info] # Warmup Iteration   4: 1517328.430 ops/s
[info] # Warmup Iteration   5: 1499382.444 ops/s
[info] Iteration   1: 1524564.529 ops/s
[info]                  ·gc.alloc.rate:      480.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1509316.051 ops/s
[info]                  ·gc.alloc.rate:               489.958 MB/sec
[info]                  ·gc.alloc.rate.norm:          510.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 694.602 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1515527.593 ops/s
[info]                  ·gc.alloc.rate:                   492.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              511.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     691.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1509731.418 ops/s
[info]                  ·gc.alloc.rate:               491.818 MB/sec
[info]                  ·gc.alloc.rate.norm:          512.575 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 694.813 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1526586.862 ops/s
[info]                  ·gc.alloc.rate:      481.101 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1517145.291 ±(99.9%) 31227.500 ops/s [Average]
[info]   (min, avg, max) = (1509316.051, 1517145.291, 1526586.862), stdev = 8109.683
[info]   CI (99.9%): [1485917.790, 1548372.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   487.096 ±(99.9%) 22.461 MB/sec [Average]
[info]   (min, avg, max) = (480.455, 487.096, 492.150), stdev = 5.833
[info]   CI (99.9%): [464.636, 509.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   505.317 ±(99.9%) 32.844 B/op [Average]
[info]   (min, avg, max) = (496.000, 505.317, 512.575), stdev = 8.530
[info]   CI (99.9%): [472.473, 538.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.786 ±(99.9%) 1405.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.786, 666.676), stdev = 364.953
[info]   CI (99.9%): [≈ 0, 1805.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   416.240 ±(99.9%) 1463.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 416.240, 694.813), stdev = 379.976
[info]   CI (99.9%): [≈ 0, 1879.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:41:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 197855.047 ops/s
[info] # Warmup Iteration   2: 619177.007 ops/s
[info] # Warmup Iteration   3: 647431.192 ops/s
[info] # Warmup Iteration   4: 670567.917 ops/s
[info] # Warmup Iteration   5: 646331.849 ops/s
[info] Iteration   1: 679844.209 ops/s
[info]                  ·gc.alloc.rate:      563.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 1304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 672961.284 ops/s
[info]                  ·gc.alloc.rate:               582.253 MB/sec
[info]                  ·gc.alloc.rate.norm:          1361.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1558.570 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 677726.519 ops/s
[info]                  ·gc.alloc.rate:               584.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          1357.760 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1547.743 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 677406.451 ops/s
[info]                  ·gc.alloc.rate:                   583.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1356.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1550.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 676930.005 ops/s
[info]                  ·gc.alloc.rate:               580.245 MB/sec
[info]                  ·gc.alloc.rate.norm:          1349.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1551.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   676973.694 ±(99.9%) 9644.925 ops/s [Average]
[info]   (min, avg, max) = (672961.284, 676973.694, 679844.209), stdev = 2504.757
[info]   CI (99.9%): [667328.768, 686618.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   578.890 ±(99.9%) 34.073 MB/sec [Average]
[info]   (min, avg, max) = (563.356, 578.890, 584.675), stdev = 8.849
[info]   CI (99.9%): [544.817, 612.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1345.836 ±(99.9%) 91.738 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1345.836, 1361.655), stdev = 23.824
[info]   CI (99.9%): [1254.098, 1437.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.445 ±(99.9%) 1148.281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.445, 667.149), stdev = 298.205
[info]   CI (99.9%): [≈ 0, 1681.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1241.494 ±(99.9%) 2672.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1241.494, 1558.570), stdev = 694.028
[info]   CI (99.9%): [≈ 0, 3913.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004639.795 ops/s
[info] # Warmup Iteration   2: 1817901.762 ops/s
[info] # Warmup Iteration   3: 1862842.749 ops/s
[info] # Warmup Iteration   4: 1886968.035 ops/s
[info] # Warmup Iteration   5: 1878840.368 ops/s
[info] Iteration   1: 1878834.877 ops/s
[info]                  ·gc.alloc.rate:               373.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          312.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 428.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1877235.411 ops/s
[info]                  ·gc.alloc.rate:               376.477 MB/sec
[info]                  ·gc.alloc.rate.norm:          315.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 428.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1887581.734 ops/s
[info]                  ·gc.alloc.rate:      364.607 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1879761.203 ops/s
[info]                  ·gc.alloc.rate:                   377.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              316.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     561.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1888348.625 ops/s
[info]                  ·gc.alloc.rate:      364.848 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.073 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1882352.370 ±(99.9%) 20061.401 ops/s [Average]
[info]   (min, avg, max) = (1877235.411, 1882352.370, 1888348.625), stdev = 5209.882
[info]   CI (99.9%): [1862290.969, 1902413.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   371.482 ±(99.9%) 24.464 MB/sec [Average]
[info]   (min, avg, max) = (364.607, 371.482, 377.857), stdev = 6.353
[info]   CI (99.9%): [347.019, 395.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   310.593 ±(99.9%) 23.537 B/op [Average]
[info]   (min, avg, max) = (304.000, 310.593, 316.290), stdev = 6.113
[info]   CI (99.9%): [287.055, 334.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.769 ±(99.9%) 1216.779 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.769, 670.634), stdev = 315.994
[info]   CI (99.9%): [≈ 0, 1555.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   283.767 ±(99.9%) 1019.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 283.767, 561.363), stdev = 264.641
[info]   CI (99.9%): [≈ 0, 1302.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.007 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:40:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11488.506 ops/s
[info] # Warmup Iteration   2: 91084.815 ops/s
[info] # Warmup Iteration   3: 99852.326 ops/s
[info] # Warmup Iteration   4: 102259.443 ops/s
[info] # Warmup Iteration   5: 102946.055 ops/s
[info] Iteration   1: 104076.003 ops/s
[info]                  ·gc.alloc.rate:               3476.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          52576.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50443.303 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 104104.161 ops/s
[info]                  ·gc.alloc.rate:                   3510.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              53066.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3345.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50560.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 104320.200 ops/s
[info]                  ·gc.alloc.rate:                   3507.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              52918.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3357.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50656.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.314 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 103248.756 ops/s
[info]                  ·gc.alloc.rate:               3479.285 MB/sec
[info]                  ·gc.alloc.rate.norm:          53036.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3370.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51374.304 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 104641.326 ops/s
[info]                  ·gc.alloc.rate:               3524.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          53013.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50862.303 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104078.089 ±(99.9%) 1986.287 ops/s [Average]
[info]   (min, avg, max) = (103248.756, 104078.089, 104641.326), stdev = 515.832
[info]   CI (99.9%): [102091.802, 106064.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3499.862 ±(99.9%) 80.590 MB/sec [Average]
[info]   (min, avg, max) = (3476.744, 3499.862, 3524.532), stdev = 20.929
[info]   CI (99.9%): [3419.272, 3580.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52922.303 ±(99.9%) 773.336 B/op [Average]
[info]   (min, avg, max) = (52576.928, 52922.303, 53066.043), stdev = 200.833
[info]   CI (99.9%): [52148.967, 53695.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.091 ±(99.9%) 71.211 MB/sec [Average]
[info]   (min, avg, max) = (3335.654, 3358.091, 3381.534), stdev = 18.493
[info]   CI (99.9%): [3286.880, 3429.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50779.414 ±(99.9%) 1410.483 B/op [Average]
[info]   (min, avg, max) = (50443.303, 50779.414, 51374.304), stdev = 366.298
[info]   CI (99.9%): [49368.931, 52189.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.126 ±(99.9%) 0.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.315), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:40:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112646.821 ops/s
[info] # Warmup Iteration   2: 334124.244 ops/s
[info] # Warmup Iteration   3: 360335.155 ops/s
[info] # Warmup Iteration   4: 363981.677 ops/s
[info] # Warmup Iteration   5: 358974.856 ops/s
[info] Iteration   1: 364376.022 ops/s
[info]                  ·gc.alloc.rate:               1255.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          5424.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5792.014 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 363554.885 ops/s
[info]                  ·gc.alloc.rate:               1249.692 MB/sec
[info]                  ·gc.alloc.rate.norm:          5403.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5788.299 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 365267.366 ops/s
[info]                  ·gc.alloc.rate:                   1239.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              5338.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2891.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 355829.096 ops/s
[info]                  ·gc.alloc.rate:                   1260.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              5574.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5938.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.720 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 365733.951 ops/s
[info]                  ·gc.alloc.rate:                   1254.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              5396.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5773.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   362952.264 ±(99.9%) 15668.294 ops/s [Average]
[info]   (min, avg, max) = (355829.096, 362952.264, 365733.951), stdev = 4069.006
[info]   CI (99.9%): [347283.970, 378620.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1251.911 ±(99.9%) 31.621 MB/sec [Average]
[info]   (min, avg, max) = (1239.050, 1251.911, 1260.787), stdev = 8.212
[info]   CI (99.9%): [1220.290, 1283.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5427.472 ±(99.9%) 339.322 B/op [Average]
[info]   (min, avg, max) = (5338.471, 5427.472, 5574.457), stdev = 88.121
[info]   CI (99.9%): [5088.150, 5766.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.144 ±(99.9%) 1153.721 MB/sec [Average]
[info]   (min, avg, max) = (671.180, 1207.144, 1343.153), stdev = 299.618
[info]   CI (99.9%): [53.423, 2360.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5236.810 ±(99.9%) 5054.438 B/op [Average]
[info]   (min, avg, max) = (2891.790, 5236.810, 5938.633), stdev = 1312.622
[info]   CI (99.9%): [182.372, 10291.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 5.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.103), stdev = 1.347
[info]   CI (99.9%): [≈ 0, 5.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.192 ±(99.9%) 22.936 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.192, 13.720), stdev = 5.956
[info]   CI (99.9%): [≈ 0, 26.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.819 ops/s
[info] # Warmup Iteration   2: 1503960.662 ops/s
[info] # Warmup Iteration   3: 1517607.409 ops/s
[info] # Warmup Iteration   4: 1551020.166 ops/s
[info] # Warmup Iteration   5: 1579754.163 ops/s
[info] Iteration   1: 1580505.344 ops/s
[info]                  ·gc.alloc.rate:                   744.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              741.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     663.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1586563.160 ops/s
[info]                  ·gc.alloc.rate:               748.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1569450.390 ops/s
[info]                  ·gc.alloc.rate:                   763.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              764.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1332.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1576478.755 ops/s
[info]                  ·gc.alloc.rate:                   747.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              745.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     666.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1580461.967 ops/s
[info]                  ·gc.alloc.rate:               749.971 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.841 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 664.688 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1578691.923 ±(99.9%) 24253.095 ops/s [Average]
[info]   (min, avg, max) = (1569450.390, 1578691.923, 1586563.160), stdev = 6298.452
[info]   CI (99.9%): [1554438.828, 1602945.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   750.635 ±(99.9%) 27.753 MB/sec [Average]
[info]   (min, avg, max) = (744.946, 750.635, 763.113), stdev = 7.207
[info]   CI (99.9%): [722.882, 778.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   748.164 ±(99.9%) 35.739 B/op [Average]
[info]   (min, avg, max) = (741.797, 748.164, 764.287), stdev = 9.281
[info]   CI (99.9%): [712.424, 783.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.640 ±(99.9%) 1143.519 MB/sec [Average]
[info]   (min, avg, max) = (666.195, 799.640, 1330.872), stdev = 296.968
[info]   CI (99.9%): [≈ 0, 1943.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   797.637 ±(99.9%) 1152.261 B/op [Average]
[info]   (min, avg, max) = (661.160, 797.637, 1332.921), stdev = 299.238
[info]   CI (99.9%): [≈ 0, 1949.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 315083.287 ops/s
[info] # Warmup Iteration   2: 983143.085 ops/s
[info] # Warmup Iteration   3: 1036655.482 ops/s
[info] # Warmup Iteration   4: 1001361.444 ops/s
[info] # Warmup Iteration   5: 1021413.142 ops/s
[info] Iteration   1: 1015866.898 ops/s
[info]                  ·gc.alloc.rate:               743.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          1150.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1033.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1040454.847 ops/s
[info]                  ·gc.alloc.rate:               758.373 MB/sec
[info]                  ·gc.alloc.rate.norm:          1147.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1010.181 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1041657.770 ops/s
[info]                  ·gc.alloc.rate:                   755.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              1140.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1009.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1041077.675 ops/s
[info]                  ·gc.alloc.rate:                   753.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              1138.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1010.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1023358.738 ops/s
[info]                  ·gc.alloc.rate:               737.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          1133.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1028.067 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1032483.185 ±(99.9%) 46405.539 ops/s [Average]
[info]   (min, avg, max) = (1015866.898, 1032483.185, 1041657.770), stdev = 12051.371
[info]   CI (99.9%): [986077.646, 1078888.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   749.482 ±(99.9%) 34.282 MB/sec [Average]
[info]   (min, avg, max) = (737.313, 749.482, 758.373), stdev = 8.903
[info]   CI (99.9%): [715.200, 783.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1142.311 ±(99.9%) 25.964 B/op [Average]
[info]   (min, avg, max) = (1133.949, 1142.311, 1150.996), stdev = 6.743
[info]   CI (99.9%): [1116.347, 1168.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.977 ±(99.9%) 2.413 MB/sec [Average]
[info]   (min, avg, max) = (666.943, 667.977, 668.467), stdev = 0.627
[info]   CI (99.9%): [665.563, 670.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1018.181 ±(99.9%) 44.148 B/op [Average]
[info]   (min, avg, max) = (1009.011, 1018.181, 1033.080), stdev = 11.465
[info]   CI (99.9%): [974.033, 1062.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.013 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:39:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266481.991 ops/s
[info] # Warmup Iteration   2: 2407128.549 ops/s
[info] # Warmup Iteration   3: 2660886.751 ops/s
[info] # Warmup Iteration   4: 2648554.711 ops/s
[info] # Warmup Iteration   5: 2667037.313 ops/s
[info] Iteration   1: 2663004.653 ops/s
[info]                  ·gc.alloc.rate:                   1262.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              746.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2665358.511 ops/s
[info]                  ·gc.alloc.rate:                   1261.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793.810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2670118.697 ops/s
[info]                  ·gc.alloc.rate:                   1274.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     792.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2659738.427 ops/s
[info]                  ·gc.alloc.rate:                   1284.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              759.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.934 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2678291.948 ops/s
[info]                  ·gc.alloc.rate:                   1263.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              742.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     394.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2667302.447 ±(99.9%) 27778.382 ops/s [Average]
[info]   (min, avg, max) = (2659738.427, 2667302.447, 2678291.948), stdev = 7213.958
[info]   CI (99.9%): [2639524.065, 2695080.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1269.131 ±(99.9%) 38.217 MB/sec [Average]
[info]   (min, avg, max) = (1261.061, 1269.131, 1284.226), stdev = 9.925
[info]   CI (99.9%): [1230.914, 1307.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.860 ±(99.9%) 26.812 B/op [Average]
[info]   (min, avg, max) = (742.374, 748.860, 759.919), stdev = 6.963
[info]   CI (99.9%): [722.048, 775.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.026 ±(99.9%) 1159.256 MB/sec [Average]
[info]   (min, avg, max) = (671.483, 1210.026, 1345.608), stdev = 301.055
[info]   CI (99.9%): [50.769, 2369.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   714.304 ±(99.9%) 688.224 B/op [Average]
[info]   (min, avg, max) = (394.591, 714.304, 796.242), stdev = 178.729
[info]   CI (99.9%): [26.080, 1402.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.575 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.679, 3.268), stdev = 1.448
[info]   CI (99.9%): [≈ 0, 6.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 3.299 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.402, 1.934), stdev = 0.857
[info]   CI (99.9%): [≈ 0, 3.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 6.000), stdev = 2.074
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:39:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1879267.554 ops/s
[info] # Warmup Iteration   2: 3109199.099 ops/s
[info] # Warmup Iteration   3: 3247406.681 ops/s
[info] # Warmup Iteration   4: 3260715.645 ops/s
[info] # Warmup Iteration   5: 3262684.661 ops/s
[info] Iteration   1: 3260535.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3255771.304 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3256723.328 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3254613.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3255961.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3256720.954 ±(99.9%) 8711.195 ops/s [Average]
[info]   (min, avg, max) = (3254613.440, 3256720.954, 3260535.501), stdev = 2262.270
[info]   CI (99.9%): [3248009.759, 3265432.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139569.513 ops/s
[info] # Warmup Iteration   2: 464430.965 ops/s
[info] # Warmup Iteration   3: 478678.826 ops/s
[info] # Warmup Iteration   4: 481963.904 ops/s
[info] # Warmup Iteration   5: 480741.429 ops/s
[info] Iteration   1: 483633.595 ops/s
[info]                  ·gc.alloc.rate:               579.385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1885.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2174.407 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 485268.048 ops/s
[info]                  ·gc.alloc.rate:      557.497 MB/sec
[info]                  ·gc.alloc.rate.norm: 1808.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490559.313 ops/s
[info]                  ·gc.alloc.rate:               580.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          1862.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2143.663 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 487096.517 ops/s
[info]                  ·gc.alloc.rate:                   583.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              1885.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2160.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 489106.861 ops/s
[info]                  ·gc.alloc.rate:               582.199 MB/sec
[info]                  ·gc.alloc.rate.norm:          1873.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2152.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   487132.867 ±(99.9%) 10781.969 ops/s [Average]
[info]   (min, avg, max) = (483633.595, 487132.867, 490559.313), stdev = 2800.043
[info]   CI (99.9%): [476350.898, 497914.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   576.623 ±(99.9%) 41.646 MB/sec [Average]
[info]   (min, avg, max) = (557.497, 576.623, 583.626), stdev = 10.815
[info]   CI (99.9%): [534.977, 618.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1862.936 ±(99.9%) 124.137 B/op [Average]
[info]   (min, avg, max) = (1808.001, 1862.936, 1885.785), stdev = 32.238
[info]   CI (99.9%): [1738.800, 1987.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   534.793 ±(99.9%) 1151.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.793, 668.806), stdev = 298.958
[info]   CI (99.9%): [≈ 0, 1685.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1726.222 ±(99.9%) 3716.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1726.222, 2174.407), stdev = 965.055
[info]   CI (99.9%): [≈ 0, 5442.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:38:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42169.867 ops/s
[info] # Warmup Iteration   2: 143795.178 ops/s
[info] # Warmup Iteration   3: 151318.259 ops/s
[info] # Warmup Iteration   4: 160704.531 ops/s
[info] # Warmup Iteration   5: 158917.836 ops/s
[info] Iteration   1: 160371.016 ops/s
[info]                  ·gc.alloc.rate:                   2022.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              19847.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19789.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 161473.891 ops/s
[info]                  ·gc.alloc.rate:                   2032.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              19810.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19615.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 161560.026 ops/s
[info]                  ·gc.alloc.rate:                   2045.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              19927.647 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19559.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 161584.098 ops/s
[info]                  ·gc.alloc.rate:               2034.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          19812.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19550.008 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 154930.314 ops/s
[info]                  ·gc.alloc.rate:               1980.027 MB/sec
[info]                  ·gc.alloc.rate.norm:          20105.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20419.862 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   159983.869 ±(99.9%) 11052.331 ops/s [Average]
[info]   (min, avg, max) = (154930.314, 159983.869, 161584.098), stdev = 2870.255
[info]   CI (99.9%): [148931.538, 171036.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2022.930 ±(99.9%) 97.688 MB/sec [Average]
[info]   (min, avg, max) = (1980.027, 2022.930, 2045.622), stdev = 25.369
[info]   CI (99.9%): [1925.242, 2120.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19900.814 ±(99.9%) 476.839 B/op [Average]
[info]   (min, avg, max) = (19810.915, 19900.814, 20105.559), stdev = 123.834
[info]   CI (99.9%): [19423.975, 20377.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2010.975 ±(99.9%) 14.529 MB/sec [Average]
[info]   (min, avg, max) = (2007.121, 2010.975, 2016.428), stdev = 3.773
[info]   CI (99.9%): [1996.446, 2025.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19786.810 ±(99.9%) 1412.111 B/op [Average]
[info]   (min, avg, max) = (19550.008, 19786.810, 20419.862), stdev = 366.721
[info]   CI (99.9%): [18374.698, 21198.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 4.753 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 2.852), stdev = 1.234
[info]   CI (99.9%): [≈ 0, 5.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7.586 ±(99.9%) 46.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.586, 27.989), stdev = 12.111
[info]   CI (99.9%): [≈ 0, 54.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:38:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117413.936 ops/s
[info] # Warmup Iteration   2: 428327.875 ops/s
[info] # Warmup Iteration   3: 424519.838 ops/s
[info] # Warmup Iteration   4: 455305.543 ops/s
[info] # Warmup Iteration   5: 454019.682 ops/s
[info] Iteration   1: 453267.504 ops/s
[info]                  ·gc.alloc.rate:               377.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          1310.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1776.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 453938.767 ops/s
[info]                  ·gc.alloc.rate:               381.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          1322.208 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1773.838 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 455201.281 ops/s
[info]                  ·gc.alloc.rate:      365.588 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 454704.981 ops/s
[info]                  ·gc.alloc.rate:                   386.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              1338.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2307.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 455924.697 ops/s
[info]                  ·gc.alloc.rate:      366.160 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   454607.446 ±(99.9%) 4010.903 ops/s [Average]
[info]   (min, avg, max) = (453267.504, 454607.446, 455924.697), stdev = 1041.619
[info]   CI (99.9%): [450596.542, 458618.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   375.464 ±(99.9%) 35.980 MB/sec [Average]
[info]   (min, avg, max) = (365.588, 375.464, 386.680), stdev = 9.344
[info]   CI (99.9%): [339.483, 411.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1299.882 ±(99.9%) 131.680 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1299.882, 1338.427), stdev = 34.197
[info]   CI (99.9%): [1168.202, 1431.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   338.013 ±(99.9%) 1212.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.013, 666.795), stdev = 314.997
[info]   CI (99.9%): [≈ 0, 1550.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1171.653 ±(99.9%) 4202.851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1171.653, 2307.998), stdev = 1091.467
[info]   CI (99.9%): [≈ 0, 5374.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:38:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 666714.779 ops/s
[info] # Warmup Iteration   2: 1173282.489 ops/s
[info] # Warmup Iteration   3: 1262125.408 ops/s
[info] # Warmup Iteration   4: 1253831.245 ops/s
[info] # Warmup Iteration   5: 1265600.508 ops/s
[info] Iteration   1: 1243090.852 ops/s
[info]                  ·gc.alloc.rate:               256.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 647.750 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1210420.467 ops/s
[info]                  ·gc.alloc.rate:      233.891 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1251219.745 ops/s
[info]                  ·gc.alloc.rate:               257.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          323.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 643.525 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1222655.578 ops/s
[info]                  ·gc.alloc.rate:      236.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1271544.463 ops/s
[info]                  ·gc.alloc.rate:               263.472 MB/sec
[info]                  ·gc.alloc.rate.norm:          326.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 633.245 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1239786.221 ±(99.9%) 92456.327 ops/s [Average]
[info]   (min, avg, max) = (1210420.467, 1239786.221, 1271544.463), stdev = 24010.614
[info]   CI (99.9%): [1147329.894, 1332242.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   249.408 ±(99.9%) 51.748 MB/sec [Average]
[info]   (min, avg, max) = (233.891, 249.408, 263.472), stdev = 13.439
[info]   CI (99.9%): [197.660, 301.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   316.379 ±(99.9%) 43.667 B/op [Average]
[info]   (min, avg, max) = (304.000, 316.379, 326.129), stdev = 11.340
[info]   CI (99.9%): [272.713, 360.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.044 ±(99.9%) 1079.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.044, 511.822), stdev = 280.291
[info]   CI (99.9%): [≈ 0, 1386.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   384.904 ±(99.9%) 1353.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 384.904, 647.750), stdev = 351.407
[info]   CI (99.9%): [≈ 0, 1738.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:38:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13114.415 ops/s
[info] # Warmup Iteration   2: 74673.405 ops/s
[info] # Warmup Iteration   3: 85349.015 ops/s
[info] # Warmup Iteration   4: 83167.372 ops/s
[info] # Warmup Iteration   5: 85369.159 ops/s
[info] Iteration   1: 87967.776 ops/s
[info]                  ·gc.alloc.rate:               3505.840 MB/sec
[info]                  ·gc.alloc.rate.norm:          62721.248 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3335.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59680.435 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 87020.963 ops/s
[info]                  ·gc.alloc.rate:                   3496.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              63229.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60484.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 87329.823 ops/s
[info]                  ·gc.alloc.rate:                   3511.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              63251.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60536.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 87002.076 ops/s
[info]                  ·gc.alloc.rate:               3496.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          63255.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3371.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60994.408 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 87497.656 ops/s
[info]                  ·gc.alloc.rate:               3516.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          63252.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60831.642 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   87363.659 ±(99.9%) 1530.891 ops/s [Average]
[info]   (min, avg, max) = (87002.076, 87363.659, 87967.776), stdev = 397.568
[info]   CI (99.9%): [85832.768, 88894.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3505.291 ±(99.9%) 33.979 MB/sec [Average]
[info]   (min, avg, max) = (3496.142, 3505.291, 3516.380), stdev = 8.824
[info]   CI (99.9%): [3471.312, 3539.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63142.040 ±(99.9%) 906.647 B/op [Average]
[info]   (min, avg, max) = (62721.248, 63142.040, 63255.028), stdev = 235.453
[info]   CI (99.9%): [62235.393, 64048.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3358.882 ±(99.9%) 73.040 MB/sec [Average]
[info]   (min, avg, max) = (3335.872, 3358.882, 3381.801), stdev = 18.968
[info]   CI (99.9%): [3285.842, 3431.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60505.477 ±(99.9%) 1951.658 B/op [Average]
[info]   (min, avg, max) = (59680.435, 60505.477, 60994.408), stdev = 506.839
[info]   CI (99.9%): [58553.819, 62457.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.376), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:37:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100493.030 ops/s
[info] # Warmup Iteration   2: 282905.072 ops/s
[info] # Warmup Iteration   3: 302820.876 ops/s
[info] # Warmup Iteration   4: 307677.741 ops/s
[info] # Warmup Iteration   5: 281171.925 ops/s
[info] Iteration   1: 306145.660 ops/s
[info]                  ·gc.alloc.rate:               1708.060 MB/sec
[info]                  ·gc.alloc.rate.norm:          8778.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6900.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 306497.805 ops/s
[info]                  ·gc.alloc.rate:                   1741.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              8940.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10343.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.850 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 309182.471 ops/s
[info]                  ·gc.alloc.rate:                   1741.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              8866.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6822.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 308889.068 ops/s
[info]                  ·gc.alloc.rate:                   1765.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              8994.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10233.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 309570.065 ops/s
[info]                  ·gc.alloc.rate:               1743.827 MB/sec
[info]                  ·gc.alloc.rate.norm:          8866.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6807.374 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   308057.014 ±(99.9%) 6188.854 ops/s [Average]
[info]   (min, avg, max) = (306145.660, 308057.014, 309570.065), stdev = 1607.226
[info]   CI (99.9%): [301868.160, 314245.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1740.030 ±(99.9%) 78.996 MB/sec [Average]
[info]   (min, avg, max) = (1708.060, 1740.030, 1765.383), stdev = 20.515
[info]   CI (99.9%): [1661.034, 1819.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8889.334 ±(99.9%) 317.021 B/op [Average]
[info]   (min, avg, max) = (8778.421, 8889.334, 8994.942), stdev = 82.329
[info]   CI (99.9%): [8572.313, 9206.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1608.924 ±(99.9%) 1414.740 MB/sec [Average]
[info]   (min, avg, max) = (1338.909, 1608.924, 2014.309), stdev = 367.403
[info]   CI (99.9%): [194.184, 3023.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8221.517 ±(99.9%) 7268.326 B/op [Average]
[info]   (min, avg, max) = (6807.374, 8221.517, 10343.401), stdev = 1887.561
[info]   CI (99.9%): [953.191, 15489.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 5.927 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.476), stdev = 1.539
[info]   CI (99.9%): [≈ 0, 6.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.718 ±(99.9%) 30.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.718, 17.850), stdev = 7.904
[info]   CI (99.9%): [≈ 0, 34.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:37:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669966.167 ops/s
[info] # Warmup Iteration   2: 1867010.646 ops/s
[info] # Warmup Iteration   3: 1906058.045 ops/s
[info] # Warmup Iteration   4: 1872653.267 ops/s
[info] # Warmup Iteration   5: 1909909.568 ops/s
[info] Iteration   1: 1912206.960 ops/s
[info]                  ·gc.alloc.rate:                   1025.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              843.852 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1923339.794 ops/s
[info]                  ·gc.alloc.rate:               1003.054 MB/sec
[info]                  ·gc.alloc.rate.norm:          820.756 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1910445.105 ops/s
[info]                  ·gc.alloc.rate:                   1011.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1102.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1905941.131 ops/s
[info]                  ·gc.alloc.rate:               992.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          819.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 552.840 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1902330.007 ops/s
[info]                  ·gc.alloc.rate:                   1017.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              841.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1910852.599 ±(99.9%) 30726.079 ops/s [Average]
[info]   (min, avg, max) = (1902330.007, 1910852.599, 1923339.794), stdev = 7979.465
[info]   CI (99.9%): [1880126.520, 1941578.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1009.874 ±(99.9%) 49.397 MB/sec [Average]
[info]   (min, avg, max) = (992.306, 1009.874, 1025.589), stdev = 12.828
[info]   CI (99.9%): [960.477, 1059.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   831.653 ±(99.9%) 43.528 B/op [Average]
[info]   (min, avg, max) = (819.441, 831.653, 843.852), stdev = 11.304
[info]   CI (99.9%): [788.124, 875.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.896 ±(99.9%) 1412.107 MB/sec [Average]
[info]   (min, avg, max) = (668.891, 1070.896, 1340.857), stdev = 366.720
[info]   CI (99.9%): [≈ 0, 2483.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   882.305 ±(99.9%) 1167.902 B/op [Average]
[info]   (min, avg, max) = (547.325, 882.305, 1108.915), stdev = 303.300
[info]   CI (99.9%): [≈ 0, 2050.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.021 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.051), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:37:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1560580.937 ops/s
[info] # Warmup Iteration   2: 2769545.680 ops/s
[info] # Warmup Iteration   3: 2753645.918 ops/s
[info] # Warmup Iteration   4: 2804059.420 ops/s
[info] # Warmup Iteration   5: 2811129.995 ops/s
[info] Iteration   1: 2791785.174 ops/s
[info]                  ·gc.alloc.rate:               768.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          433.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 378.160 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2304280.202 ops/s
[info]                  ·gc.alloc.rate:               636.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          434.350 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458.402 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2777891.082 ops/s
[info]                  ·gc.alloc.rate:               768.312 MB/sec
[info]                  ·gc.alloc.rate.norm:          435.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 380.252 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 2799616.673 ops/s
[info]                  ·gc.alloc.rate:                   785.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     752.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2817887.410 ops/s
[info]                  ·gc.alloc.rate:               774.185 MB/sec
[info]                  ·gc.alloc.rate.norm:          432.423 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 375.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2698292.108 ±(99.9%) 849963.765 ops/s [Average]
[info]   (min, avg, max) = (2304280.202, 2698292.108, 2817887.410), stdev = 220732.891
[info]   CI (99.9%): [1848328.343, 3548255.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   746.615 ±(99.9%) 239.649 MB/sec [Average]
[info]   (min, avg, max) = (636.018, 746.615, 785.944), stdev = 62.236
[info]   CI (99.9%): [506.966, 986.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   435.301 ±(99.9%) 13.492 B/op [Average]
[info]   (min, avg, max) = (432.423, 435.301, 441.293), stdev = 3.504
[info]   CI (99.9%): [421.809, 448.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.274 ±(99.9%) 1152.757 MB/sec [Average]
[info]   (min, avg, max) = (670.798, 805.274, 1340.798), stdev = 299.367
[info]   CI (99.9%): [≈ 0, 1958.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   469.013 ±(99.9%) 625.534 B/op [Average]
[info]   (min, avg, max) = (375.419, 469.013, 752.833), stdev = 162.449
[info]   CI (99.9%): [≈ 0, 1094.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:37:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1486668.276 ops/s
[info] # Warmup Iteration   2: 3061575.492 ops/s
[info] # Warmup Iteration   3: 3109871.922 ops/s
[info] # Warmup Iteration   4: 3112568.231 ops/s
[info] # Warmup Iteration   5: 3115821.177 ops/s
[info] Iteration   1: 3113237.148 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3114815.738 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3115573.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3114128.622 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3114944.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   3114539.887 ±(99.9%) 3430.496 ops/s [Average]
[info]   (min, avg, max) = (3113237.148, 3114539.887, 3115573.788), stdev = 890.889
[info]   CI (99.9%): [3111109.390, 3117970.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7691.358 ops/s
[info] # Warmup Iteration   2: 42468.581 ops/s
[info] # Warmup Iteration   3: 47636.277 ops/s
[info] # Warmup Iteration   4: 47070.651 ops/s
[info] # Warmup Iteration   5: 48426.047 ops/s
[info] Iteration   1: 48610.755 ops/s
[info]                  ·gc.alloc.rate:                   2193.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              71008.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65178.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.713 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 48641.282 ops/s
[info]                  ·gc.alloc.rate:                   2196.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              71054.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64943.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 48568.258 ops/s
[info]                  ·gc.alloc.rate:               2179.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          70627.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64953.170 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 48596.494 ops/s
[info]                  ·gc.alloc.rate:                   2234.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              72364.317 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86599.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 48913.048 ops/s
[info]                  ·gc.alloc.rate:               2222.336 MB/sec
[info]                  ·gc.alloc.rate.norm:          71495.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64673.332 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   48665.967 ±(99.9%) 541.424 ops/s [Average]
[info]   (min, avg, max) = (48568.258, 48665.967, 48913.048), stdev = 140.606
[info]   CI (99.9%): [48124.544, 49207.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2205.318 ±(99.9%) 86.082 MB/sec [Average]
[info]   (min, avg, max) = (2179.990, 2205.318, 2234.412), stdev = 22.355
[info]   CI (99.9%): [2119.236, 2291.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71310.062 ±(99.9%) 2560.020 B/op [Average]
[info]   (min, avg, max) = (70627.439, 71310.062, 72364.317), stdev = 664.829
[info]   CI (99.9%): [68750.043, 73870.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2141.987 ±(99.9%) 1145.149 MB/sec [Average]
[info]   (min, avg, max) = (2004.848, 2141.987, 2673.948), stdev = 297.391
[info]   CI (99.9%): [996.839, 3287.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69269.560 ±(99.9%) 37309.869 B/op [Average]
[info]   (min, avg, max) = (64673.332, 69269.560, 86599.265), stdev = 9689.254
[info]   CI (99.9%): [31959.691, 106579.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.648 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.914), stdev = 1.726
[info]   CI (99.9%): [≈ 0, 7.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.825 ±(99.9%) 215.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.825, 126.713), stdev = 55.895
[info]   CI (99.9%): [≈ 0, 242.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:36:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52558.664 ops/s
[info] # Warmup Iteration   2: 218622.094 ops/s
[info] # Warmup Iteration   3: 236911.730 ops/s
[info] # Warmup Iteration   4: 239874.715 ops/s
[info] # Warmup Iteration   5: 240242.714 ops/s
[info] Iteration   1: 241485.876 ops/s
[info]                  ·gc.alloc.rate:                   2650.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              17274.724 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17470.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 241692.619 ops/s
[info]                  ·gc.alloc.rate:                   2654.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              17280.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17438.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.407 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 245942.927 ops/s
[info]                  ·gc.alloc.rate:               2686.463 MB/sec
[info]                  ·gc.alloc.rate.norm:          17191.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12869.546 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 245630.719 ops/s
[info]                  ·gc.alloc.rate:                   2710.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17215.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 246318.988 ops/s
[info]                  ·gc.alloc.rate:               2717.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          17366.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17212.517 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   244214.226 ±(99.9%) 9279.028 ops/s [Average]
[info]   (min, avg, max) = (241485.876, 244214.226, 246318.988), stdev = 2409.734
[info]   CI (99.9%): [234935.198, 253493.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2683.981 ±(99.9%) 119.087 MB/sec [Average]
[info]   (min, avg, max) = (2650.800, 2683.981, 2717.867), stdev = 30.927
[info]   CI (99.9%): [2564.894, 2803.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17294.705 ±(99.9%) 276.875 B/op [Average]
[info]   (min, avg, max) = (17191.441, 17294.705, 17366.032), stdev = 71.904
[info]   CI (99.9%): [17017.830, 17571.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2550.430 ±(99.9%) 1161.197 MB/sec [Average]
[info]   (min, avg, max) = (2011.091, 2550.430, 2693.841), stdev = 301.559
[info]   CI (99.9%): [1389.233, 3711.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16441.338 ±(99.9%) 7702.586 B/op [Average]
[info]   (min, avg, max) = (12869.546, 16441.338, 17470.695), stdev = 2000.337
[info]   CI (99.9%): [8738.752, 24143.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.167), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.352 ±(99.9%) 1.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.085), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 2.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:36:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145311.455 ops/s
[info] # Warmup Iteration   2: 360499.831 ops/s
[info] # Warmup Iteration   3: 381564.383 ops/s
[info] # Warmup Iteration   4: 383470.244 ops/s
[info] # Warmup Iteration   5: 383106.729 ops/s
[info] Iteration   1: 364613.660 ops/s
[info]                  ·gc.alloc.rate:                   1861.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              8037.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5782.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 378973.630 ops/s
[info]                  ·gc.alloc.rate:                   1958.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              8134.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8338.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.594 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 380298.546 ops/s
[info]                  ·gc.alloc.rate:               1965.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          8135.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2002.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8287.068 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 379483.956 ops/s
[info]                  ·gc.alloc.rate:               1976.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          8197.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8307.473 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 386876.468 ops/s
[info]                  ·gc.alloc.rate:                   2011.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              8181.781 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8162.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   378049.252 ±(99.9%) 31425.067 ops/s [Average]
[info]   (min, avg, max) = (364613.660, 378049.252, 386876.468), stdev = 8160.990
[info]   CI (99.9%): [346624.185, 409474.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1954.941 ±(99.9%) 215.067 MB/sec [Average]
[info]   (min, avg, max) = (1861.914, 1954.941, 2011.731), stdev = 55.852
[info]   CI (99.9%): [1739.874, 2170.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8137.186 ±(99.9%) 240.662 B/op [Average]
[info]   (min, avg, max) = (8037.098, 8137.186, 8197.246), stdev = 62.499
[info]   CI (99.9%): [7896.524, 8377.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1872.001 ±(99.9%) 1146.078 MB/sec [Average]
[info]   (min, avg, max) = (1339.595, 1872.001, 2007.822), stdev = 297.633
[info]   CI (99.9%): [725.922, 3018.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7775.589 ±(99.9%) 4298.055 B/op [Average]
[info]   (min, avg, max) = (5782.467, 7775.589, 8338.390), stdev = 1116.191
[info]   CI (99.9%): [3477.535, 12073.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.351), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.429 ±(99.9%) 24.142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.429, 14.467), stdev = 6.270
[info]   CI (99.9%): [≈ 0, 27.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266803.624 ops/s
[info] # Warmup Iteration   2: 1918210.355 ops/s
[info] # Warmup Iteration   3: 2259353.307 ops/s
[info] # Warmup Iteration   4: 2258210.108 ops/s
[info] # Warmup Iteration   5: 2269638.692 ops/s
[info] Iteration   1: 2265304.354 ops/s
[info]                  ·gc.alloc.rate:               809.232 MB/sec
[info]                  ·gc.alloc.rate.norm:          562.214 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466.081 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1986068.314 ops/s
[info]                  ·gc.alloc.rate:               702.438 MB/sec
[info]                  ·gc.alloc.rate.norm:          556.617 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532.144 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2256724.842 ops/s
[info]                  ·gc.alloc.rate:               816.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          569.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 937.107 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2274257.426 ops/s
[info]                  ·gc.alloc.rate:                   801.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              554.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2273431.420 ops/s
[info]                  ·gc.alloc.rate:               801.553 MB/sec
[info]                  ·gc.alloc.rate.norm:          554.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465.568 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   2211157.271 ±(99.9%) 485292.087 ops/s [Average]
[info]   (min, avg, max) = (1986068.314, 2211157.271, 2274257.426), stdev = 126028.814
[info]   CI (99.9%): [1725865.184, 2696449.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   786.145 ±(99.9%) 181.697 MB/sec [Average]
[info]   (min, avg, max) = (702.438, 786.145, 816.056), stdev = 47.186
[info]   CI (99.9%): [604.448, 967.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.458 ±(99.9%) 23.892 B/op [Average]
[info]   (min, avg, max) = (554.491, 559.458, 569.087), stdev = 6.205
[info]   CI (99.9%): [535.566, 583.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.214 ±(99.9%) 1157.169 MB/sec [Average]
[info]   (min, avg, max) = (670.861, 806.214, 1343.787), stdev = 300.513
[info]   CI (99.9%): [≈ 0, 1963.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   573.212 ±(99.9%) 791.130 B/op [Average]
[info]   (min, avg, max) = (465.160, 573.212, 937.107), stdev = 205.454
[info]   CI (99.9%): [≈ 0, 1364.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4095.373 ops/s
[info] # Warmup Iteration   2: 65796.544 ops/s
[info] # Warmup Iteration   3: 85353.823 ops/s
[info] # Warmup Iteration   4: 87279.358 ops/s
[info] # Warmup Iteration   5: 88148.132 ops/s
[info] Iteration   1: 89093.802 ops/s
[info]                  ·gc.alloc.rate:                   3470.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              61311.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59407.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.839 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 88951.381 ops/s
[info]                  ·gc.alloc.rate:                   3535.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              62506.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4046.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71537.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 89080.596 ops/s
[info]                  ·gc.alloc.rate:               3525.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          62279.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59776.388 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 88794.130 ops/s
[info]                  ·gc.alloc.rate:               3515.580 MB/sec
[info]                  ·gc.alloc.rate.norm:          62300.804 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60076.449 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 89133.173 ops/s
[info]                  ·gc.alloc.rate:               3529.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          62285.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59928.033 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   89010.616 ±(99.9%) 534.991 ops/s [Average]
[info]   (min, avg, max) = (88794.130, 89010.616, 89133.173), stdev = 138.935
[info]   CI (99.9%): [88475.626, 89545.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3515.224 ±(99.9%) 99.690 MB/sec [Average]
[info]   (min, avg, max) = (3470.763, 3515.224, 3535.602), stdev = 25.889
[info]   CI (99.9%): [3415.534, 3614.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   62136.865 ±(99.9%) 1813.087 B/op [Average]
[info]   (min, avg, max) = (61311.802, 62136.865, 62506.675), stdev = 470.853
[info]   CI (99.9%): [60323.778, 63949.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3515.668 ±(99.9%) 1143.421 MB/sec [Average]
[info]   (min, avg, max) = (3362.959, 3515.668, 4046.398), stdev = 296.943
[info]   CI (99.9%): [2372.246, 4659.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   62145.089 ±(99.9%) 20239.799 B/op [Average]
[info]   (min, avg, max) = (59407.422, 62145.089, 71537.153), stdev = 5256.211
[info]   CI (99.9%): [41905.290, 82384.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 3.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 1.839), stdev = 0.797
[info]   CI (99.9%): [≈ 0, 3.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95836.989 ops/s
[info] # Warmup Iteration   2: 244354.749 ops/s
[info] # Warmup Iteration   3: 253323.685 ops/s
[info] # Warmup Iteration   4: 258393.672 ops/s
[info] # Warmup Iteration   5: 258512.495 ops/s
[info] Iteration   1: 259109.805 ops/s
[info]                  ·gc.alloc.rate:                   2109.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              12806.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12235.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 257790.937 ops/s
[info]                  ·gc.alloc.rate:                   2085.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              12734.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12269.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 256447.566 ops/s
[info]                  ·gc.alloc.rate:               2084.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          12790.840 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12317.863 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 259382.453 ops/s
[info]                  ·gc.alloc.rate:                   2110.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              12806.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12188.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 247269.832 ops/s
[info]                  ·gc.alloc.rate:               2016.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          12830.367 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12802.145 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   256000.119 ±(99.9%) 19323.893 ops/s [Average]
[info]   (min, avg, max) = (247269.832, 256000.119, 259382.453), stdev = 5018.354
[info]   CI (99.9%): [236676.226, 275324.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2081.219 ±(99.9%) 147.799 MB/sec [Average]
[info]   (min, avg, max) = (2016.286, 2081.219, 2110.502), stdev = 38.383
[info]   CI (99.9%): [1933.420, 2229.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12793.727 ±(99.9%) 138.682 B/op [Average]
[info]   (min, avg, max) = (12734.465, 12793.727, 12830.367), stdev = 36.015
[info]   CI (99.9%): [12655.045, 12932.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2010.520 ±(99.9%) 12.175 MB/sec [Average]
[info]   (min, avg, max) = (2007.080, 2010.520, 2015.261), stdev = 3.162
[info]   CI (99.9%): [1998.345, 2022.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12362.771 ±(99.9%) 963.107 B/op [Average]
[info]   (min, avg, max) = (12188.608, 12362.771, 12802.145), stdev = 250.116
[info]   CI (99.9%): [11399.665, 13325.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.729 ±(99.9%) 5.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.729, 3.332), stdev = 1.460
[info]   CI (99.9%): [≈ 0, 6.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.427 ±(99.9%) 34.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.427, 20.231), stdev = 8.867
[info]   CI (99.9%): [≈ 0, 38.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 649076.165 ops/s
[info] # Warmup Iteration   2: 1426429.918 ops/s
[info] # Warmup Iteration   3: 1511041.087 ops/s
[info] # Warmup Iteration   4: 1502663.697 ops/s
[info] # Warmup Iteration   5: 1515630.436 ops/s
[info] Iteration   1: 1486314.420 ops/s
[info]                  ·gc.alloc.rate:               900.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          953.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 707.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1497652.894 ops/s
[info]                  ·gc.alloc.rate:               912.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          958.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1405.645 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1472770.155 ops/s
[info]                  ·gc.alloc.rate:                   876.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1511054.188 ops/s
[info]                  ·gc.alloc.rate:               898.267 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 697.293 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1507366.108 ops/s
[info]                  ·gc.alloc.rate:               895.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 699.006 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1495031.553 ±(99.9%) 60496.047 ops/s [Average]
[info]   (min, avg, max) = (1472770.155, 1495031.553, 1511054.188), stdev = 15710.631
[info]   CI (99.9%): [1434535.506, 1555527.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   896.701 ±(99.9%) 49.363 MB/sec [Average]
[info]   (min, avg, max) = (876.810, 896.701, 912.388), stdev = 12.819
[info]   CI (99.9%): [847.338, 946.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   943.950 ±(99.9%) 43.211 B/op [Average]
[info]   (min, avg, max) = (935.081, 943.950, 958.785), stdev = 11.222
[info]   CI (99.9%): [900.739, 987.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.861 ±(99.9%) 1151.119 MB/sec [Average]
[info]   (min, avg, max) = (668.437, 802.861, 1337.624), stdev = 298.942
[info]   CI (99.9%): [≈ 0, 1953.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   844.966 ±(99.9%) 1207.216 B/op [Average]
[info]   (min, avg, max) = (697.293, 844.966, 1405.645), stdev = 313.510
[info]   CI (99.9%): [≈ 0, 2052.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1232932.066 ops/s
[info] # Warmup Iteration   2: 2824111.809 ops/s
[info] # Warmup Iteration   3: 2844180.342 ops/s
[info] # Warmup Iteration   4: 2874794.436 ops/s
[info] # Warmup Iteration   5: 2831875.478 ops/s
[info] Iteration   1: 2870174.072 ops/s
[info]                  ·gc.alloc.rate:               996.105 MB/sec
[info]                  ·gc.alloc.rate.norm:          546.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2868590.475 ops/s
[info]                  ·gc.alloc.rate:               991.912 MB/sec
[info]                  ·gc.alloc.rate.norm:          544.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368.585 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2858583.594 ops/s
[info]                  ·gc.alloc.rate:               1003.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          552.737 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.922 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2870990.186 ops/s
[info]                  ·gc.alloc.rate:                   991.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              543.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2864740.618 ops/s
[info]                  ·gc.alloc.rate:               1028.168 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 739.267 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2866615.789 ±(99.9%) 19608.867 ops/s [Average]
[info]   (min, avg, max) = (2858583.594, 2866615.789, 2870990.186), stdev = 5092.360
[info]   CI (99.9%): [2847006.922, 2886224.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1002.415 ±(99.9%) 58.579 MB/sec [Average]
[info]   (min, avg, max) = (991.912, 1002.415, 1028.168), stdev = 15.213
[info]   CI (99.9%): [943.836, 1060.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   550.364 ±(99.9%) 34.172 B/op [Average]
[info]   (min, avg, max) = (543.780, 550.364, 564.886), stdev = 8.874
[info]   CI (99.9%): [516.193, 584.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.988 ±(99.9%) 1419.317 MB/sec [Average]
[info]   (min, avg, max) = (671.476, 940.988, 1345.565), stdev = 368.592
[info]   CI (99.9%): [≈ 0, 2360.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   516.889 ±(99.9%) 782.843 B/op [Average]
[info]   (min, avg, max) = (368.201, 516.889, 739.922), stdev = 203.302
[info]   CI (99.9%): [≈ 0, 1299.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1801319.139 ops/s
[info] # Warmup Iteration   2: 3120234.529 ops/s
[info] # Warmup Iteration   3: 3160931.674 ops/s
[info] # Warmup Iteration   4: 3160827.814 ops/s
[info] # Warmup Iteration   5: 3160081.975 ops/s
[info] Iteration   1: 3144849.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3152221.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3141384.058 ops/s
[info]                  ·gc.alloc.rate:      0.500 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.251 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3150641.908 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3152673.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3148354.066 ±(99.9%) 19225.439 ops/s [Average]
[info]   (min, avg, max) = (3141384.058, 3148354.066, 3152673.342), stdev = 4992.785
[info]   CI (99.9%): [3129128.627, 3167579.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.100 ±(99.9%) 0.861 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.100, 0.500), stdev = 0.224
[info]   CI (99.9%): [≈ 0, 0.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.050 ±(99.9%) 0.431 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.050, 0.251), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64249.941 ops/s
[info] # Warmup Iteration   2: 374263.193 ops/s
[info] # Warmup Iteration   3: 396333.733 ops/s
[info] # Warmup Iteration   4: 396731.304 ops/s
[info] # Warmup Iteration   5: 389000.625 ops/s
[info] Iteration   1: 399478.561 ops/s
[info]                  ·gc.alloc.rate:                   2579.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              10161.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10503.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 400789.793 ops/s
[info]                  ·gc.alloc.rate:                   2568.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              10082.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10474.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 401575.359 ops/s
[info]                  ·gc.alloc.rate:                   2575.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              10094.897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7862.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 400877.167 ops/s
[info]                  ·gc.alloc.rate:                   2600.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              10208.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10528.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 402252.981 ops/s
[info]                  ·gc.alloc.rate:                   2609.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10209.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10529.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   400994.772 ±(99.9%) 3980.770 ops/s [Average]
[info]   (min, avg, max) = (399478.561, 400994.772, 402252.981), stdev = 1033.793
[info]   CI (99.9%): [397014.002, 404975.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2586.759 ±(99.9%) 67.130 MB/sec [Average]
[info]   (min, avg, max) = (2568.824, 2586.759, 2609.854), stdev = 17.433
[info]   CI (99.9%): [2519.629, 2653.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10151.527 ±(99.9%) 233.904 B/op [Average]
[info]   (min, avg, max) = (10082.565, 10151.527, 10209.997), stdev = 60.744
[info]   CI (99.9%): [9917.623, 10385.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2542.802 ±(99.9%) 1155.834 MB/sec [Average]
[info]   (min, avg, max) = (2006.168, 2542.802, 2691.576), stdev = 300.166
[info]   CI (99.9%): [1386.968, 3698.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9979.727 ±(99.9%) 4558.321 B/op [Average]
[info]   (min, avg, max) = (7862.505, 9979.727, 10529.703), stdev = 1183.781
[info]   CI (99.9%): [5421.406, 14538.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.147 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.147, 0.245), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8009.019 ops/s
[info] # Warmup Iteration   2: 23336.039 ops/s
[info] # Warmup Iteration   3: 26104.718 ops/s
[info] # Warmup Iteration   4: 25657.534 ops/s
[info] # Warmup Iteration   5: 25096.233 ops/s
[info] Iteration   1: 26005.877 ops/s
[info]                  ·gc.alloc.rate:                   1685.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              101977.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121981.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 26268.035 ops/s
[info]                  ·gc.alloc.rate:                   1667.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              99936.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80559.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 26288.743 ops/s
[info]                  ·gc.alloc.rate:                   1682.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              100735.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120573.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.296 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 26360.288 ops/s
[info]                  ·gc.alloc.rate:               1681.596 MB/sec
[info]                  ·gc.alloc.rate.norm:          100398.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80020.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 26323.169 ops/s
[info]                  ·gc.alloc.rate:                   1695.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              101338.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120099.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26249.223 ±(99.9%) 540.931 ops/s [Average]
[info]   (min, avg, max) = (26005.877, 26249.223, 26360.288), stdev = 140.478
[info]   CI (99.9%): [25708.292, 26790.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1682.506 ±(99.9%) 37.535 MB/sec [Average]
[info]   (min, avg, max) = (1667.950, 1682.506, 1695.175), stdev = 9.748
[info]   CI (99.9%): [1644.971, 1720.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   100877.145 ±(99.9%) 3078.898 B/op [Average]
[info]   (min, avg, max) = (99936.046, 100877.145, 101977.084), stdev = 799.580
[info]   CI (99.9%): [97798.247, 103956.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1744.721 ±(99.9%) 1414.201 MB/sec [Average]
[info]   (min, avg, max) = (1340.273, 1744.721, 2015.690), stdev = 367.264
[info]   CI (99.9%): [330.519, 3158.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   104647.089 ±(99.9%) 85662.875 B/op [Average]
[info]   (min, avg, max) = (80020.289, 104647.089, 121981.815), stdev = 22246.377
[info]   CI (99.9%): [18984.214, 190309.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 4.266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 2.540), stdev = 1.108
[info]   CI (99.9%): [≈ 0, 5.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   44.890 ±(99.9%) 255.578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.890, 152.160), stdev = 66.373
[info]   CI (99.9%): [≈ 0, 300.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.700 ops/s
[info] # Warmup Iteration   2: 87081.042 ops/s
[info] # Warmup Iteration   3: 98565.132 ops/s
[info] # Warmup Iteration   4: 99773.795 ops/s
[info] # Warmup Iteration   5: 99182.749 ops/s
[info] Iteration   1: 99845.094 ops/s
[info]                  ·gc.alloc.rate:               956.368 MB/sec
[info]                  ·gc.alloc.rate.norm:          15075.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10500.776 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 96407.977 ops/s
[info]                  ·gc.alloc.rate:               931.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          15197.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10885.963 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 99364.662 ops/s
[info]                  ·gc.alloc.rate:                   973.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              15412.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21128.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 99414.883 ops/s
[info]                  ·gc.alloc.rate:               964.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          15270.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10561.690 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 98843.209 ops/s
[info]                  ·gc.alloc.rate:                   972.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              15479.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21255.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   98775.165 ±(99.9%) 5276.121 ops/s [Average]
[info]   (min, avg, max) = (96407.977, 98775.165, 99845.094), stdev = 1370.192
[info]   CI (99.9%): [93499.045, 104051.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   959.583 ±(99.9%) 65.960 MB/sec [Average]
[info]   (min, avg, max) = (931.391, 959.583, 973.078), stdev = 17.130
[info]   CI (99.9%): [893.624, 1025.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   15287.096 ±(99.9%) 626.498 B/op [Average]
[info]   (min, avg, max) = (15075.276, 15287.096, 15479.391), stdev = 162.700
[info]   CI (99.9%): [14660.598, 15913.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.913 ±(99.9%) 1407.884 MB/sec [Average]
[info]   (min, avg, max) = (666.164, 933.913, 1334.893), stdev = 365.623
[info]   CI (99.9%): [≈ 0, 2341.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14866.545 ±(99.9%) 22243.195 B/op [Average]
[info]   (min, avg, max) = (10500.776, 14866.545, 21255.349), stdev = 5776.487
[info]   CI (99.9%): [≈ 0, 37109.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.011 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.041), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.181 ±(99.9%) 1.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.648), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20948.930 ops/s
[info] # Warmup Iteration   2: 63491.023 ops/s
[info] # Warmup Iteration   3: 65090.831 ops/s
[info] # Warmup Iteration   4: 69199.442 ops/s
[info] # Warmup Iteration   5: 69193.704 ops/s
[info] Iteration   1: 69030.408 ops/s
[info]                  ·gc.alloc.rate:                   1245.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              28387.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30527.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68982.792 ops/s
[info]                  ·gc.alloc.rate:               1222.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          27900.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15281.222 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 69488.710 ops/s
[info]                  ·gc.alloc.rate:                   1244.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              28186.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30347.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.471 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 69349.335 ops/s
[info]                  ·gc.alloc.rate:                   1241.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              28172.201 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30423.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.696 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 69519.918 ops/s
[info]                  ·gc.alloc.rate:                   1243.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              28155.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30318.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.678 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69274.233 ±(99.9%) 974.887 ops/s [Average]
[info]   (min, avg, max) = (68982.792, 69274.233, 69519.918), stdev = 253.175
[info]   CI (99.9%): [68299.346, 70249.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1239.526 ±(99.9%) 36.187 MB/sec [Average]
[info]   (min, avg, max) = (1222.906, 1239.526, 1245.065), stdev = 9.398
[info]   CI (99.9%): [1203.340, 1275.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28160.401 ±(99.9%) 667.496 B/op [Average]
[info]   (min, avg, max) = (27900.129, 28160.401, 28387.626), stdev = 173.346
[info]   CI (99.9%): [27492.906, 28827.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.713 ±(99.9%) 1153.597 MB/sec [Average]
[info]   (min, avg, max) = (669.799, 1205.713, 1340.582), stdev = 299.586
[info]   CI (99.9%): [52.116, 2359.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   27379.753 ±(99.9%) 26044.861 B/op [Average]
[info]   (min, avg, max) = (15281.222, 27379.753, 30527.778), stdev = 6763.768
[info]   CI (99.9%): [1334.892, 53424.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 5.397 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 3.247), stdev = 1.401
[info]   CI (99.9%): [≈ 0, 6.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19.264 ±(99.9%) 122.467 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.264, 73.696), stdev = 31.804
[info]   CI (99.9%): [≈ 0, 141.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:33:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52592.149 ops/s
[info] # Warmup Iteration   2: 131264.815 ops/s
[info] # Warmup Iteration   3: 135612.595 ops/s
[info] # Warmup Iteration   4: 137066.784 ops/s
[info] # Warmup Iteration   5: 138035.142 ops/s
[info] Iteration   1: 137487.997 ops/s
[info]                  ·gc.alloc.rate:                   963.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              11016.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15328.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.238 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 138180.246 ops/s
[info]                  ·gc.alloc.rate:               946.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          10782.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7655.667 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 137965.782 ops/s
[info]                  ·gc.alloc.rate:               943.805 MB/sec
[info]                  ·gc.alloc.rate.norm:          10766.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7667.540 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 136351.258 ops/s
[info]                  ·gc.alloc.rate:                   957.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              11054.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15524.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 137950.567 ops/s
[info]                  ·gc.alloc.rate:                   941.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              10745.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7675.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   137587.170 ±(99.9%) 2832.552 ops/s [Average]
[info]   (min, avg, max) = (136351.258, 137587.170, 138180.246), stdev = 735.605
[info]   CI (99.9%): [134754.619, 140419.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   950.714 ±(99.9%) 36.298 MB/sec [Average]
[info]   (min, avg, max) = (941.837, 950.714, 963.553), stdev = 9.426
[info]   CI (99.9%): [914.416, 987.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10873.046 ±(99.9%) 575.407 B/op [Average]
[info]   (min, avg, max) = (10745.373, 10873.046, 11054.017), stdev = 149.431
[info]   CI (99.9%): [10297.639, 11448.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.542 ±(99.9%) 1414.018 MB/sec [Average]
[info]   (min, avg, max) = (672.134, 940.542, 1344.976), stdev = 367.216
[info]   CI (99.9%): [≈ 0, 2354.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10770.390 ±(99.9%) 16369.370 B/op [Average]
[info]   (min, avg, max) = (7655.667, 10770.390, 15524.833), stdev = 4251.073
[info]   CI (99.9%): [≈ 0, 27139.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.240), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:33:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5054.933 ops/s
[info] # Warmup Iteration   2: 32224.609 ops/s
[info] # Warmup Iteration   3: 36211.954 ops/s
[info] # Warmup Iteration   4: 37164.751 ops/s
[info] # Warmup Iteration   5: 38045.015 ops/s
[info] Iteration   1: 37577.868 ops/s
[info]                  ·gc.alloc.rate:                   1881.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              78814.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84144.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 37823.105 ops/s
[info]                  ·gc.alloc.rate:                   1891.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              78688.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83572.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183.637 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 37962.053 ops/s
[info]                  ·gc.alloc.rate:               1909.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          79159.854 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82990.173 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 38066.462 ops/s
[info]                  ·gc.alloc.rate:                   1888.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              78075.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55137.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 37997.613 ops/s
[info]                  ·gc.alloc.rate:               1911.788 MB/sec
[info]                  ·gc.alloc.rate.norm:          79187.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82897.763 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   37885.420 ±(99.9%) 744.947 ops/s [Average]
[info]   (min, avg, max) = (37577.868, 37885.420, 38066.462), stdev = 193.460
[info]   CI (99.9%): [37140.474, 38630.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1896.484 ±(99.9%) 51.402 MB/sec [Average]
[info]   (min, avg, max) = (1881.752, 1896.484, 1911.788), stdev = 13.349
[info]   CI (99.9%): [1845.083, 1947.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78785.360 ±(99.9%) 1738.535 B/op [Average]
[info]   (min, avg, max) = (78075.868, 78785.360, 79187.319), stdev = 451.492
[info]   CI (99.9%): [77046.825, 80523.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1870.841 ±(99.9%) 1156.543 MB/sec [Average]
[info]   (min, avg, max) = (1333.596, 1870.841, 2009.011), stdev = 300.351
[info]   CI (99.9%): [714.298, 3027.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77748.541 ±(99.9%) 48710.271 B/op [Average]
[info]   (min, avg, max) = (55137.477, 77748.541, 84144.988), stdev = 12649.903
[info]   CI (99.9%): [29038.270, 126458.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 7.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 4.413), stdev = 1.967
[info]   CI (99.9%): [≈ 0, 8.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.248 ±(99.9%) 315.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.248, 183.637), stdev = 81.837
[info]   CI (99.9%): [≈ 0, 352.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:32:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12370.173 ops/s
[info] # Warmup Iteration   2: 31221.822 ops/s
[info] # Warmup Iteration   3: 32135.541 ops/s
[info] # Warmup Iteration   4: 31611.993 ops/s
[info] # Warmup Iteration   5: 31886.455 ops/s
[info] Iteration   1: 32531.535 ops/s
[info]                  ·gc.alloc.rate:      519.007 MB/sec
[info]                  ·gc.alloc.rate.norm: 25104.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 32418.884 ops/s
[info]                  ·gc.alloc.rate:               537.435 MB/sec
[info]                  ·gc.alloc.rate.norm:          26090.808 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32451.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 32390.016 ops/s
[info]                  ·gc.alloc.rate:               537.393 MB/sec
[info]                  ·gc.alloc.rate.norm:          26100.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32480.739 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 32429.684 ops/s
[info]                  ·gc.alloc.rate:                   542.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              26305.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32458.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32506.274 ops/s
[info]                  ·gc.alloc.rate:      519.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 25169.706 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   32455.279 ±(99.9%) 233.071 ops/s [Average]
[info]   (min, avg, max) = (32390.016, 32455.279, 32531.535), stdev = 60.528
[info]   CI (99.9%): [32222.208, 32688.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   531.150 ±(99.9%) 41.846 MB/sec [Average]
[info]   (min, avg, max) = (519.007, 531.150, 542.056), stdev = 10.867
[info]   CI (99.9%): [489.304, 572.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25754.124 ±(99.9%) 2196.721 B/op [Average]
[info]   (min, avg, max) = (25104.013, 25754.124, 26305.975), stdev = 570.481
[info]   CI (99.9%): [23557.403, 27950.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   401.214 ±(99.9%) 1410.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 401.214, 668.841), stdev = 366.257
[info]   CI (99.9%): [≈ 0, 1811.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19478.255 ±(99.9%) 68468.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19478.255, 32480.739), stdev = 17781.136
[info]   CI (99.9%): [≈ 0, 87947.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.404 ±(99.9%) 3.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.404, 2.021), stdev = 0.904
[info]   CI (99.9%): [≈ 0, 3.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:32:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9217.982 ops/s
[info] # Warmup Iteration   2: 30745.978 ops/s
[info] # Warmup Iteration   3: 32283.717 ops/s
[info] # Warmup Iteration   4: 32327.242 ops/s
[info] # Warmup Iteration   5: 32474.686 ops/s
[info] Iteration   1: 32374.285 ops/s
[info]                  ·gc.alloc.rate:               408.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          19866.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24870.487 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 32325.320 ops/s
[info]                  ·gc.alloc.rate:               408.512 MB/sec
[info]                  ·gc.alloc.rate.norm:          19885.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24907.410 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 32494.880 ops/s
[info]                  ·gc.alloc.rate:      396.719 MB/sec
[info]                  ·gc.alloc.rate.norm: 19208.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 32365.701 ops/s
[info]                  ·gc.alloc.rate:                   420.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              20420.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32442.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32001.208 ops/s
[info]                  ·gc.alloc.rate:               408.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          20067.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32809.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   32312.279 ±(99.9%) 712.569 ops/s [Average]
[info]   (min, avg, max) = (32001.208, 32312.279, 32494.880), stdev = 185.052
[info]   CI (99.9%): [31599.710, 33024.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   408.433 ±(99.9%) 31.741 MB/sec [Average]
[info]   (min, avg, max) = (396.719, 408.433, 420.028), stdev = 8.243
[info]   CI (99.9%): [376.692, 440.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19889.646 ±(99.9%) 1699.306 B/op [Average]
[info]   (min, avg, max) = (19208.014, 19889.646, 20420.985), stdev = 441.304
[info]   CI (99.9%): [18190.341, 21588.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.606 ±(99.9%) 1058.507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.606, 667.439), stdev = 274.891
[info]   CI (99.9%): [≈ 0, 1530.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23005.982 ±(99.9%) 51716.474 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23005.982, 32809.975), stdev = 13430.604
[info]   CI (99.9%): [≈ 0, 74722.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.202 ±(99.9%) 1.743 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 1.012), stdev = 0.453
[info]   CI (99.9%): [≈ 0, 1.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 1.789
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:32:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17965.029 ops/s
[info] # Warmup Iteration   2: 33595.162 ops/s
[info] # Warmup Iteration   3: 33328.943 ops/s
[info] # Warmup Iteration   4: 33577.080 ops/s
[info] # Warmup Iteration   5: 34291.971 ops/s
[info] Iteration   1: 34237.239 ops/s
[info]                  ·gc.alloc.rate:                   422.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              19401.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23517.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34459.685 ops/s
[info]                  ·gc.alloc.rate:      413.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 18905.258 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 34348.352 ops/s
[info]                  ·gc.alloc.rate:               438.044 MB/sec
[info]                  ·gc.alloc.rate.norm:          20070.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30720.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 34463.216 ops/s
[info]                  ·gc.alloc.rate:      413.862 MB/sec
[info]                  ·gc.alloc.rate.norm: 18896.016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34352.558 ops/s
[info]                  ·gc.alloc.rate:               431.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          19754.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30718.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   34372.210 ±(99.9%) 360.742 ops/s [Average]
[info]   (min, avg, max) = (34237.239, 34372.210, 34463.216), stdev = 93.684
[info]   CI (99.9%): [34011.468, 34732.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   423.829 ±(99.9%) 41.192 MB/sec [Average]
[info]   (min, avg, max) = (413.862, 423.829, 438.044), stdev = 10.697
[info]   CI (99.9%): [382.637, 465.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   19405.514 ±(99.9%) 1995.214 B/op [Average]
[info]   (min, avg, max) = (18896.016, 19405.514, 20070.461), stdev = 518.151
[info]   CI (99.9%): [17410.300, 21400.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.535 ±(99.9%) 1326.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.535, 670.603), stdev = 344.418
[info]   CI (99.9%): [≈ 0, 1696.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16991.194 ±(99.9%) 60790.000 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16991.194, 30720.179), stdev = 15786.970
[info]   CI (99.9%): [≈ 0, 77781.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.574 ±(99.9%) 4.944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.871), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16510.174 ops/s
[info] # Warmup Iteration   2: 33607.843 ops/s
[info] # Warmup Iteration   3: 34373.055 ops/s
[info] # Warmup Iteration   4: 34038.661 ops/s
[info] # Warmup Iteration   5: 34456.611 ops/s
[info] Iteration   1: 34406.081 ops/s
[info]                  ·gc.alloc.rate:               391.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          17896.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23401.905 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 34206.140 ops/s
[info]                  ·gc.alloc.rate:               385.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          17720.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23538.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 34504.320 ops/s
[info]                  ·gc.alloc.rate:      374.812 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 34352.503 ops/s
[info]                  ·gc.alloc.rate:               388.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          17785.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30718.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 34516.099 ops/s
[info]                  ·gc.alloc.rate:      374.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 17096.013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   34397.028 ±(99.9%) 487.802 ops/s [Average]
[info]   (min, avg, max) = (34206.140, 34397.028, 34516.099), stdev = 126.681
[info]   CI (99.9%): [33909.226, 34884.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   382.864 ±(99.9%) 29.302 MB/sec [Average]
[info]   (min, avg, max) = (374.812, 382.864, 391.238), stdev = 7.610
[info]   CI (99.9%): [353.561, 412.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   17518.854 ±(99.9%) 1506.078 B/op [Average]
[info]   (min, avg, max) = (17096.013, 17518.854, 17896.779), stdev = 391.124
[info]   CI (99.9%): [16012.776, 19024.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   338.737 ±(99.9%) 1216.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.737, 670.483), stdev = 315.953
[info]   CI (99.9%): [≈ 0, 1555.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   15531.801 ±(99.9%) 55773.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15531.801, 30718.391), stdev = 14484.089
[info]   CI (99.9%): [≈ 0, 71304.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:31:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1956.274 ops/s
[info] # Warmup Iteration   2: 5893.273 ops/s
[info] # Warmup Iteration   3: 13102.143 ops/s
[info] # Warmup Iteration   4: 13983.087 ops/s
[info] # Warmup Iteration   5: 14064.810 ops/s
[info] Iteration   1: 14172.789 ops/s
[info]                  ·gc.alloc.rate:               1059.729 MB/sec
[info]                  ·gc.alloc.rate.norm:          117686.919 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 149120.289 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 14048.484 ops/s
[info]                  ·gc.alloc.rate:               1017.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          113916.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75298.070 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13910.577 ops/s
[info]                  ·gc.alloc.rate:                   1035.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              117197.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152089.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.710 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13953.118 ops/s
[info]                  ·gc.alloc.rate:               1047.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          118132.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 75816.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 13962.010 ops/s
[info]                  ·gc.alloc.rate:               1051.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          118459.533 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151598.635 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   14009.395 ±(99.9%) 401.110 ops/s [Average]
[info]   (min, avg, max) = (13910.577, 14009.395, 14172.789), stdev = 104.167
[info]   CI (99.9%): [13608.285, 14410.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1042.303 ±(99.9%) 63.478 MB/sec [Average]
[info]   (min, avg, max) = (1017.132, 1042.303, 1059.729), stdev = 16.485
[info]   CI (99.9%): [978.825, 1105.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   117078.671 ±(99.9%) 7049.035 B/op [Average]
[info]   (min, avg, max) = (113916.043, 117078.671, 118459.533), stdev = 1830.612
[info]   CI (99.9%): [110029.635, 124127.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1075.421 ±(99.9%) 1417.207 MB/sec [Average]
[info]   (min, avg, max) = (672.181, 1075.421, 1345.545), stdev = 368.044
[info]   CI (99.9%): [≈ 0, 2492.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   120784.586 ±(99.9%) 159041.728 B/op [Average]
[info]   (min, avg, max) = (75298.070, 120784.586, 152089.870), stdev = 41302.632
[info]   CI (99.9%): [≈ 0, 279826.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.942 ±(99.9%) 8.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.942, 4.710), stdev = 2.107
[info]   CI (99.9%): [≈ 0, 9.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:31:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4371.587 ops/s
[info] # Warmup Iteration   2: 14694.621 ops/s
[info] # Warmup Iteration   3: 15804.807 ops/s
[info] # Warmup Iteration   4: 15880.481 ops/s
[info] # Warmup Iteration   5: 15808.521 ops/s
[info] Iteration   1: 15905.469 ops/s
[info]                  ·gc.alloc.rate:               1027.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          101648.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66141.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15830.218 ops/s
[info]                  ·gc.alloc.rate:               1038.504 MB/sec
[info]                  ·gc.alloc.rate.norm:          103250.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132984.312 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 15609.179 ops/s
[info]                  ·gc.alloc.rate:                   1016.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              102503.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67500.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15788.798 ops/s
[info]                  ·gc.alloc.rate:               1034.495 MB/sec
[info]                  ·gc.alloc.rate.norm:          103117.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133504.024 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 15884.096 ops/s
[info]                  ·gc.alloc.rate:                   1018.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              100916.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66365.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   15803.552 ±(99.9%) 453.920 ops/s [Average]
[info]   (min, avg, max) = (15609.179, 15803.552, 15905.469), stdev = 117.882
[info]   CI (99.9%): [15349.632, 16257.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1027.138 ±(99.9%) 36.726 MB/sec [Average]
[info]   (min, avg, max) = (1016.649, 1027.138, 1038.504), stdev = 9.538
[info]   CI (99.9%): [990.412, 1063.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   102287.362 ±(99.9%) 3825.670 B/op [Average]
[info]   (min, avg, max) = (100916.924, 102287.362, 103250.176), stdev = 993.514
[info]   CI (99.9%): [98461.692, 106113.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.959 ±(99.9%) 1411.324 MB/sec [Average]
[info]   (min, avg, max) = (668.451, 936.959, 1339.339), stdev = 366.516
[info]   CI (99.9%): [≈ 0, 2348.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   93299.123 ±(99.9%) 140428.264 B/op [Average]
[info]   (min, avg, max) = (66141.556, 93299.123, 133504.024), stdev = 36468.774
[info]   CI (99.9%): [≈ 0, 233727.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.657 ±(99.9%) 10.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.657, 6.188), stdev = 2.691
[info]   CI (99.9%): [≈ 0, 12.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:31:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61434.025 ops/s
[info] # Warmup Iteration   2: 103266.641 ops/s
[info] # Warmup Iteration   3: 107497.687 ops/s
[info] # Warmup Iteration   4: 102542.748 ops/s
[info] # Warmup Iteration   5: 107406.287 ops/s
[info] Iteration   1: 107602.067 ops/s
[info]                  ·gc.alloc.rate:      280.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106769.328 ops/s
[info]                  ·gc.alloc.rate:               288.771 MB/sec
[info]                  ·gc.alloc.rate.norm:          4256.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7541.381 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 107672.877 ops/s
[info]                  ·gc.alloc.rate:      280.225 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107360.135 ops/s
[info]                  ·gc.alloc.rate:                   292.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              4286.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7499.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 107869.783 ops/s
[info]                  ·gc.alloc.rate:      280.780 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   107454.838 ±(99.9%) 1634.018 ops/s [Average]
[info]   (min, avg, max) = (106769.328, 107454.838, 107869.783), stdev = 424.349
[info]   CI (99.9%): [105820.820, 109088.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   284.454 ±(99.9%) 22.188 MB/sec [Average]
[info]   (min, avg, max) = (280.068, 284.454, 292.426), stdev = 5.762
[info]   CI (99.9%): [262.266, 306.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4166.242 ±(99.9%) 372.545 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4166.242, 4286.448), stdev = 96.749
[info]   CI (99.9%): [3793.697, 4538.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.648 ±(99.9%) 1079.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.648, 511.645), stdev = 280.226
[info]   CI (99.9%): [≈ 0, 1283.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3008.237 ±(99.9%) 15861.666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3008.237, 7541.381), stdev = 4119.224
[info]   CI (99.9%): [≈ 0, 18869.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.183 ±(99.9%) 1.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.183, 0.916), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275.397 ops/s
[info] # Warmup Iteration   2: 10827.354 ops/s
[info] # Warmup Iteration   3: 13903.105 ops/s
[info] # Warmup Iteration   4: 13897.975 ops/s
[info] # Warmup Iteration   5: 13885.241 ops/s
[info] Iteration   1: 13773.893 ops/s
[info]                  ·gc.alloc.rate:                   1338.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              152970.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152590.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.378 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13693.345 ops/s
[info]                  ·gc.alloc.rate:                   1335.738 MB/sec
[info]                  ·gc.alloc.rate.norm:              153457.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153657.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 13912.617 ops/s
[info]                  ·gc.alloc.rate:               1343.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          152028.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151314.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 13888.021 ops/s
[info]                  ·gc.alloc.rate:                   1352.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              153225.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151737.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 467.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 13945.482 ops/s
[info]                  ·gc.alloc.rate:                   1371.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              154793.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150655.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13842.671 ±(99.9%) 406.366 ops/s [Average]
[info]   (min, avg, max) = (13693.345, 13842.671, 13945.482), stdev = 105.532
[info]   CI (99.9%): [13436.306, 14249.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1348.475 ±(99.9%) 55.323 MB/sec [Average]
[info]   (min, avg, max) = (1335.738, 1348.475, 1371.638), stdev = 14.367
[info]   CI (99.9%): [1293.151, 1403.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   153295.054 ±(99.9%) 3843.868 B/op [Average]
[info]   (min, avg, max) = (152028.743, 153295.054, 154793.554), stdev = 998.240
[info]   CI (99.9%): [149451.186, 157138.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.937 ±(99.9%) 6.447 MB/sec [Average]
[info]   (min, avg, max) = (1334.973, 1336.937, 1339.051), stdev = 1.674
[info]   CI (99.9%): [1330.490, 1343.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   151991.222 ±(99.9%) 4491.147 B/op [Average]
[info]   (min, avg, max) = (150655.743, 151991.222, 153657.421), stdev = 1166.337
[info]   CI (99.9%): [147500.075, 156482.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 6.924 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.920, 4.122), stdev = 1.798
[info]   CI (99.9%): [≈ 0, 7.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   104.251 ±(99.9%) 784.627 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.251, 467.103), stdev = 203.765
[info]   CI (99.9%): [≈ 0, 888.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15365.914 ops/s
[info] # Warmup Iteration   2: 44429.325 ops/s
[info] # Warmup Iteration   3: 44854.267 ops/s
[info] # Warmup Iteration   4: 45373.788 ops/s
[info] # Warmup Iteration   5: 43545.412 ops/s
[info] Iteration   1: 44672.079 ops/s
[info]                  ·gc.alloc.rate:               1143.113 MB/sec
[info]                  ·gc.alloc.rate.norm:          40272.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47231.567 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 45563.659 ops/s
[info]                  ·gc.alloc.rate:                   1171.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              40454.951 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46329.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 45935.444 ops/s
[info]                  ·gc.alloc.rate:               1162.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          39831.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22982.175 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 45634.126 ops/s
[info]                  ·gc.alloc.rate:               1156.307 MB/sec
[info]                  ·gc.alloc.rate.norm:          39879.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46316.453 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 45711.590 ops/s
[info]                  ·gc.alloc.rate:                   1157.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              39864.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46237.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   45503.379 ±(99.9%) 1868.475 ops/s [Average]
[info]   (min, avg, max) = (44672.079, 45503.379, 45935.444), stdev = 485.237
[info]   CI (99.9%): [43634.904, 47371.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1158.270 ±(99.9%) 39.538 MB/sec [Average]
[info]   (min, avg, max) = (1143.113, 1158.270, 1171.190), stdev = 10.268
[info]   CI (99.9%): [1118.731, 1197.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   40060.262 ±(99.9%) 1096.850 B/op [Average]
[info]   (min, avg, max) = (39831.041, 40060.262, 40454.951), stdev = 284.848
[info]   CI (99.9%): [38963.412, 41157.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.765 ±(99.9%) 1155.522 MB/sec [Average]
[info]   (min, avg, max) = (670.959, 1207.765, 1343.004), stdev = 300.085
[info]   CI (99.9%): [52.243, 2363.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41819.337 ±(99.9%) 40578.740 B/op [Average]
[info]   (min, avg, max) = (22982.175, 41819.337, 47231.567), stdev = 10538.170
[info]   CI (99.9%): [1240.597, 82398.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 6.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.581), stdev = 1.599
[info]   CI (99.9%): [≈ 0, 6.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.799 ±(99.9%) 211.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.799, 123.277), stdev = 55.052
[info]   CI (99.9%): [≈ 0, 236.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:30:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14863.978 ops/s
[info] # Warmup Iteration   2: 59886.162 ops/s
[info] # Warmup Iteration   3: 63308.758 ops/s
[info] # Warmup Iteration   4: 63874.458 ops/s
[info] # Warmup Iteration   5: 62466.444 ops/s
[info] Iteration   1: 63607.200 ops/s
[info]                  ·gc.alloc.rate:               1124.012 MB/sec
[info]                  ·gc.alloc.rate.norm:          27812.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33063.653 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 63789.447 ops/s
[info]                  ·gc.alloc.rate:               1106.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          27305.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16493.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 63527.781 ops/s
[info]                  ·gc.alloc.rate:                   1127.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              27920.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33139.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.516 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 63576.081 ops/s
[info]                  ·gc.alloc.rate:                   1127.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              27909.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33097.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 63614.608 ops/s
[info]                  ·gc.alloc.rate:                   1114.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              27571.818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16578.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.240 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   63623.023 ±(99.9%) 381.645 ops/s [Average]
[info]   (min, avg, max) = (63527.781, 63623.023, 63789.447), stdev = 99.112
[info]   CI (99.9%): [63241.378, 64004.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1120.035 ±(99.9%) 35.278 MB/sec [Average]
[info]   (min, avg, max) = (1106.722, 1120.035, 1127.976), stdev = 9.162
[info]   CI (99.9%): [1084.756, 1155.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   27704.003 ±(99.9%) 1013.210 B/op [Average]
[info]   (min, avg, max) = (27305.787, 27704.003, 27920.394), stdev = 263.127
[info]   CI (99.9%): [26690.793, 28717.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.033 ±(99.9%) 1408.631 MB/sec [Average]
[info]   (min, avg, max) = (668.478, 1070.033, 1337.664), stdev = 365.817
[info]   CI (99.9%): [≈ 0, 2478.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26474.580 ±(99.9%) 34935.734 B/op [Average]
[info]   (min, avg, max) = (16493.143, 26474.580, 33139.332), stdev = 9072.699
[info]   CI (99.9%): [≈ 0, 61410.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.728), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.757 ±(99.9%) 158.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.757, 92.240), stdev = 41.080
[info]   CI (99.9%): [≈ 0, 176.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:30:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75508.716 ops/s
[info] # Warmup Iteration   2: 164615.387 ops/s
[info] # Warmup Iteration   3: 174986.468 ops/s
[info] # Warmup Iteration   4: 174083.074 ops/s
[info] # Warmup Iteration   5: 174719.242 ops/s
[info] Iteration   1: 174482.138 ops/s
[info]                  ·gc.alloc.rate:                   286.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              2585.827 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4614.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 174939.250 ops/s
[info]                  ·gc.alloc.rate:      277.472 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 174130.655 ops/s
[info]                  ·gc.alloc.rate:               293.879 MB/sec
[info]                  ·gc.alloc.rate.norm:          2656.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4624.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 174474.238 ops/s
[info]                  ·gc.alloc.rate:                   291.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              2628.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4614.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 174707.356 ops/s
[info]                  ·gc.alloc.rate:      277.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   174546.727 ±(99.9%) 1159.067 ops/s [Average]
[info]   (min, avg, max) = (174130.655, 174546.727, 174939.250), stdev = 301.006
[info]   CI (99.9%): [173387.661, 175705.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   285.316 ±(99.9%) 29.989 MB/sec [Average]
[info]   (min, avg, max) = (277.077, 285.316, 293.879), stdev = 7.788
[info]   CI (99.9%): [255.327, 315.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2572.579 ±(99.9%) 285.968 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2572.579, 2656.147), stdev = 74.265
[info]   CI (99.9%): [2286.612, 2858.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.976 ±(99.9%) 1079.062 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.976, 511.682), stdev = 280.229
[info]   CI (99.9%): [≈ 0, 1386.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2770.727 ±(99.9%) 9739.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2770.727, 4624.025), stdev = 2529.319
[info]   CI (99.9%): [≈ 0, 12510.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.188), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84616.313 ops/s
[info] # Warmup Iteration   2: 180471.848 ops/s
[info] # Warmup Iteration   3: 179871.722 ops/s
[info] # Warmup Iteration   4: 185032.778 ops/s
[info] # Warmup Iteration   5: 184091.305 ops/s
[info] Iteration   1: 185087.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 184693.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 184790.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 185562.799 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 185590.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   185145.030 ±(99.9%) 1616.725 ops/s [Average]
[info]   (min, avg, max) = (184693.657, 185145.030, 185590.086), stdev = 419.858
[info]   CI (99.9%): [183528.305, 186761.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13774.868 ops/s
[info] # Warmup Iteration   2: 57775.462 ops/s
[info] # Warmup Iteration   3: 58526.750 ops/s
[info] # Warmup Iteration   4: 58932.118 ops/s
[info] # Warmup Iteration   5: 58746.324 ops/s
[info] Iteration   1: 58207.067 ops/s
[info]                  ·gc.alloc.rate:                   1136.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              30733.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36184.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 58740.086 ops/s
[info]                  ·gc.alloc.rate:                   1149.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              30789.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35886.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 59011.634 ops/s
[info]                  ·gc.alloc.rate:               1137.962 MB/sec
[info]                  ·gc.alloc.rate.norm:          30348.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17863.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 59090.270 ops/s
[info]                  ·gc.alloc.rate:                   1155.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              30757.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35698.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 59117.630 ops/s
[info]                  ·gc.alloc.rate:                   1156.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              30755.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35646.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.985 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   58833.337 ±(99.9%) 1465.696 ops/s [Average]
[info]   (min, avg, max) = (58207.067, 58833.337, 59117.630), stdev = 380.636
[info]   CI (99.9%): [57367.642, 60299.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1146.993 ±(99.9%) 35.692 MB/sec [Average]
[info]   (min, avg, max) = (1136.588, 1146.993, 1156.002), stdev = 9.269
[info]   CI (99.9%): [1111.301, 1182.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30676.957 ±(99.9%) 711.067 B/op [Average]
[info]   (min, avg, max) = (30348.610, 30676.957, 30789.884), stdev = 184.662
[info]   CI (99.9%): [29965.890, 31388.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1205.613 ±(99.9%) 1153.320 MB/sec [Average]
[info]   (min, avg, max) = (669.829, 1205.613, 1340.813), stdev = 299.513
[info]   CI (99.9%): [52.293, 2358.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   32255.936 ±(99.9%) 30990.628 B/op [Average]
[info]   (min, avg, max) = (17863.865, 32255.936, 36184.499), stdev = 8048.168
[info]   CI (99.9%): [1265.308, 63246.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.798 ±(99.9%) 6.695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.798, 3.908), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   21.244 ±(99.9%) 178.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.244, 103.985), stdev = 46.256
[info]   CI (99.9%): [≈ 0, 199.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19337.708 ops/s
[info] # Warmup Iteration   2: 84963.080 ops/s
[info] # Warmup Iteration   3: 96071.544 ops/s
[info] # Warmup Iteration   4: 94675.252 ops/s
[info] # Warmup Iteration   5: 97028.910 ops/s
[info] Iteration   1: 96509.594 ops/s
[info]                  ·gc.alloc.rate:                   2144.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              34961.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32813.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 97250.362 ops/s
[info]                  ·gc.alloc.rate:                   2155.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              34884.280 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32459.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 97779.398 ops/s
[info]                  ·gc.alloc.rate:               2155.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          34689.937 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32263.382 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 97659.579 ops/s
[info]                  ·gc.alloc.rate:                   2180.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              35144.772 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32313.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 97598.343 ops/s
[info]                  ·gc.alloc.rate:               2206.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          35585.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43199.660 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   97359.455 ±(99.9%) 1980.051 ops/s [Average]
[info]   (min, avg, max) = (96509.594, 97359.455, 97779.398), stdev = 514.213
[info]   CI (99.9%): [95379.404, 99339.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   2168.470 ±(99.9%) 97.351 MB/sec [Average]
[info]   (min, avg, max) = (2144.079, 2168.470, 2206.768), stdev = 25.282
[info]   CI (99.9%): [2071.120, 2265.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35053.193 ±(99.9%) 1307.353 B/op [Average]
[info]   (min, avg, max) = (34689.937, 35053.193, 35585.858), stdev = 339.515
[info]   CI (99.9%): [33745.839, 36360.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2141.295 ±(99.9%) 1157.340 MB/sec [Average]
[info]   (min, avg, max) = (2004.459, 2141.295, 2678.918), stdev = 300.558
[info]   CI (99.9%): [983.954, 3298.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34609.740 ±(99.9%) 18508.969 B/op [Average]
[info]   (min, avg, max) = (32263.382, 34609.740, 43199.660), stdev = 4806.720
[info]   CI (99.9%): [16100.771, 53118.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.956), stdev = 1.756
[info]   CI (99.9%): [≈ 0, 7.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.304 ±(99.9%) 110.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.304, 64.502), stdev = 28.629
[info]   CI (99.9%): [≈ 0, 123.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25795.889 ops/s
[info] # Warmup Iteration   2: 115208.824 ops/s
[info] # Warmup Iteration   3: 118172.746 ops/s
[info] # Warmup Iteration   4: 127070.511 ops/s
[info] # Warmup Iteration   5: 126794.662 ops/s
[info] Iteration   1: 127681.893 ops/s
[info]                  ·gc.alloc.rate:                   1776.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              21900.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16496.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 124602.633 ops/s
[info]                  ·gc.alloc.rate:                   1772.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              22383.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25377.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 127651.078 ops/s
[info]                  ·gc.alloc.rate:                   1813.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              22353.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24697.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.053 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 127712.777 ops/s
[info]                  ·gc.alloc.rate:                   1800.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              22182.866 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16434.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 127345.108 ops/s
[info]                  ·gc.alloc.rate:               1809.718 MB/sec
[info]                  ·gc.alloc.rate.norm:          22366.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24730.100 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   126998.698 ±(99.9%) 5188.873 ops/s [Average]
[info]   (min, avg, max) = (124602.633, 126998.698, 127712.777), stdev = 1347.534
[info]   CI (99.9%): [121809.825, 132187.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1794.497 ±(99.9%) 72.332 MB/sec [Average]
[info]   (min, avg, max) = (1772.362, 1794.497, 1813.145), stdev = 18.784
[info]   CI (99.9%): [1722.165, 1866.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22237.361 ±(99.9%) 787.973 B/op [Average]
[info]   (min, avg, max) = (21900.968, 22237.361, 22383.148), stdev = 204.634
[info]   CI (99.9%): [21449.387, 23025.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1737.185 ±(99.9%) 1409.856 MB/sec [Average]
[info]   (min, avg, max) = (1333.785, 1737.185, 2009.471), stdev = 366.135
[info]   CI (99.9%): [327.330, 3147.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21547.154 ±(99.9%) 17893.361 B/op [Average]
[info]   (min, avg, max) = (16434.408, 21547.154, 25377.596), stdev = 4646.849
[info]   CI (99.9%): [3653.793, 39440.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.858 ±(99.9%) 6.898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.858, 4.060), stdev = 1.791
[info]   CI (99.9%): [≈ 0, 7.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.820 ±(99.9%) 87.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.820, 51.275), stdev = 22.629
[info]   CI (99.9%): [≈ 0, 97.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 8.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64387.547 ops/s
[info] # Warmup Iteration   2: 151173.727 ops/s
[info] # Warmup Iteration   3: 166836.514 ops/s
[info] # Warmup Iteration   4: 162571.318 ops/s
[info] # Warmup Iteration   5: 166401.542 ops/s
[info] Iteration   1: 167322.029 ops/s
[info]                  ·gc.alloc.rate:                   1564.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              14717.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12644.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 167545.151 ops/s
[info]                  ·gc.alloc.rate:               1565.799 MB/sec
[info]                  ·gc.alloc.rate.norm:          14706.184 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12640.231 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 164836.055 ops/s
[info]                  ·gc.alloc.rate:                   1566.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              14954.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19258.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 169436.143 ops/s
[info]                  ·gc.alloc.rate:                   1596.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              14827.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12468.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 169594.983 ops/s
[info]                  ·gc.alloc.rate:                   1584.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              14706.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12450.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   167746.872 ±(99.9%) 7447.584 ops/s [Average]
[info]   (min, avg, max) = (164836.055, 167746.872, 169594.983), stdev = 1934.114
[info]   CI (99.9%): [160299.288, 175194.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1575.513 ±(99.9%) 54.808 MB/sec [Average]
[info]   (min, avg, max) = (1564.653, 1575.513, 1596.190), stdev = 14.233
[info]   CI (99.9%): [1520.705, 1630.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14782.358 ±(99.9%) 418.991 B/op [Average]
[info]   (min, avg, max) = (14706.184, 14782.358, 14954.394), stdev = 108.811
[info]   CI (99.9%): [14363.367, 15201.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.197 ±(99.9%) 1159.962 MB/sec [Average]
[info]   (min, avg, max) = (1341.635, 1478.197, 2017.060), stdev = 301.238
[info]   CI (99.9%): [318.235, 2638.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13892.452 ±(99.9%) 11557.190 B/op [Average]
[info]   (min, avg, max) = (12450.592, 13892.452, 19258.949), stdev = 3001.365
[info]   CI (99.9%): [2335.262, 25449.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.658 ±(99.9%) 5.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.143), stdev = 1.390
[info]   CI (99.9%): [≈ 0, 6.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.274 ±(99.9%) 51.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.274, 30.013), stdev = 13.273
[info]   CI (99.9%): [≈ 0, 57.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:28:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3713.305 ops/s
[info] # Warmup Iteration   2: 41931.252 ops/s
[info] # Warmup Iteration   3: 50455.611 ops/s
[info] # Warmup Iteration   4: 50122.585 ops/s
[info] # Warmup Iteration   5: 51802.606 ops/s
[info] Iteration   1: 51943.626 ops/s
[info]                  ·gc.alloc.rate:                   2778.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              84158.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81297.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.892 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 51824.493 ops/s
[info]                  ·gc.alloc.rate:                   2771.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              84177.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81705.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52049.917 ops/s
[info]                  ·gc.alloc.rate:               2811.155 MB/sec
[info]                  ·gc.alloc.rate.norm:          85002.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81587.020 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 52053.928 ops/s
[info]                  ·gc.alloc.rate:               2812.503 MB/sec
[info]                  ·gc.alloc.rate.norm:          85037.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81773.661 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 51905.363 ops/s
[info]                  ·gc.alloc.rate:                   2804.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              85048.293 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82169.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   51955.465 ±(99.9%) 377.383 ops/s [Average]
[info]   (min, avg, max) = (51824.493, 51955.465, 52053.928), stdev = 98.005
[info]   CI (99.9%): [51578.082, 52332.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2795.773 ±(99.9%) 73.778 MB/sec [Average]
[info]   (min, avg, max) = (2771.860, 2795.773, 2812.503), stdev = 19.160
[info]   CI (99.9%): [2721.995, 2869.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84684.880 ±(99.9%) 1818.585 B/op [Average]
[info]   (min, avg, max) = (84158.474, 84684.880, 85048.293), stdev = 472.281
[info]   CI (99.9%): [82866.295, 86503.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2697.437 ±(99.9%) 40.114 MB/sec [Average]
[info]   (min, avg, max) = (2684.066, 2697.437, 2709.909), stdev = 10.417
[info]   CI (99.9%): [2657.323, 2737.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81706.763 ±(99.9%) 1218.637 B/op [Average]
[info]   (min, avg, max) = (81297.791, 81706.763, 82169.964), stdev = 316.476
[info]   CI (99.9%): [80488.126, 82925.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.010 ±(99.9%) 3.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.010, 1.896), stdev = 0.958
[info]   CI (99.9%): [≈ 0, 4.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:28:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67926.500 ops/s
[info] # Warmup Iteration   2: 174631.234 ops/s
[info] # Warmup Iteration   3: 173529.458 ops/s
[info] # Warmup Iteration   4: 179778.446 ops/s
[info] # Warmup Iteration   5: 180128.865 ops/s
[info] Iteration   1: 180633.411 ops/s
[info]                  ·gc.alloc.rate:               1187.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          10347.554 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5841.673 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 179246.238 ops/s
[info]                  ·gc.alloc.rate:                   1193.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              10482.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11777.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179891.913 ops/s
[info]                  ·gc.alloc.rate:               1205.702 MB/sec
[info]                  ·gc.alloc.rate.norm:          10548.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11740.140 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 179911.561 ops/s
[info]                  ·gc.alloc.rate:                   1207.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              10562.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11744.988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 180180.888 ops/s
[info]                  ·gc.alloc.rate:                   1195.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              10442.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5865.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.637 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   179972.802 ±(99.9%) 1942.470 ops/s [Average]
[info]   (min, avg, max) = (179246.238, 179972.802, 180633.411), stdev = 504.453
[info]   CI (99.9%): [178030.333, 181915.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1198.055 ±(99.9%) 32.217 MB/sec [Average]
[info]   (min, avg, max) = (1187.625, 1198.055, 1207.507), stdev = 8.367
[info]   CI (99.9%): [1165.837, 1230.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10476.742 ±(99.9%) 336.257 B/op [Average]
[info]   (min, avg, max) = (10347.554, 10476.742, 10562.960), stdev = 87.325
[info]   CI (99.9%): [10140.485, 10812.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.585 ±(99.9%) 1415.245 MB/sec [Average]
[info]   (min, avg, max) = (670.469, 1073.585, 1342.630), stdev = 367.535
[info]   CI (99.9%): [≈ 0, 2488.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9393.840 ±(99.9%) 12445.153 B/op [Average]
[info]   (min, avg, max) = (5841.673, 9393.840, 11777.185), stdev = 3231.967
[info]   CI (99.9%): [≈ 0, 21838.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 2.998), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.045 ±(99.9%) 43.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.045, 26.223), stdev = 11.383
[info]   CI (99.9%): [≈ 0, 49.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143136.475 ops/s
[info] # Warmup Iteration   2: 505810.492 ops/s
[info] # Warmup Iteration   3: 531448.210 ops/s
[info] # Warmup Iteration   4: 530754.751 ops/s
[info] # Warmup Iteration   5: 534708.691 ops/s
[info] Iteration   1: 531849.268 ops/s
[info]                  ·gc.alloc.rate:      538.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 1593.175 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 536644.557 ops/s
[info]                  ·gc.alloc.rate:               564.942 MB/sec
[info]                  ·gc.alloc.rate.norm:          1656.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1956.557 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 537226.177 ops/s
[info]                  ·gc.alloc.rate:                   559.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              1638.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1954.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 533981.098 ops/s
[info]                  ·gc.alloc.rate:               558.972 MB/sec
[info]                  ·gc.alloc.rate.norm:          1647.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1968.273 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 533507.936 ops/s
[info]                  ·gc.alloc.rate:               559.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          1650.873 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1970.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   534641.807 ±(99.9%) 8655.485 ops/s [Average]
[info]   (min, avg, max) = (531849.268, 534641.807, 537226.177), stdev = 2247.802
[info]   CI (99.9%): [525986.322, 543297.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556.311 ±(99.9%) 39.729 MB/sec [Average]
[info]   (min, avg, max) = (538.366, 556.311, 564.942), stdev = 10.318
[info]   CI (99.9%): [516.581, 596.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1637.477 ±(99.9%) 98.559 B/op [Average]
[info]   (min, avg, max) = (1593.175, 1637.477, 1656.833), stdev = 25.595
[info]   CI (99.9%): [1538.918, 1736.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.027 ±(99.9%) 1149.535 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.027, 668.070), stdev = 298.531
[info]   CI (99.9%): [≈ 0, 1683.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1569.870 ±(99.9%) 3379.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1569.870, 1970.054), stdev = 877.611
[info]   CI (99.9%): [≈ 0, 4949.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459301.360 ops/s
[info] # Warmup Iteration   2: 725451.230 ops/s
[info] # Warmup Iteration   3: 644148.713 ops/s
[info] # Warmup Iteration   4: 717685.947 ops/s
[info] # Warmup Iteration   5: 713187.721 ops/s
[info] Iteration   1: 719773.831 ops/s
[info]                  ·gc.alloc.rate:               572.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          1252.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1466.799 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 724444.503 ops/s
[info]                  ·gc.alloc.rate:      556.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 726156.738 ops/s
[info]                  ·gc.alloc.rate:               585.274 MB/sec
[info]                  ·gc.alloc.rate.norm:          1268.359 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1453.915 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 651533.900 ops/s
[info]                  ·gc.alloc.rate:                   519.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1255.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1622.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 727933.394 ops/s
[info]                  ·gc.alloc.rate:                   577.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              1249.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1451.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   709968.473 ±(99.9%) 126326.624 ops/s [Average]
[info]   (min, avg, max) = (651533.900, 709968.473, 727933.394), stdev = 32806.623
[info]   CI (99.9%): [583641.849, 836295.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   562.333 ±(99.9%) 100.505 MB/sec [Average]
[info]   (min, avg, max) = (519.790, 562.333, 585.274), stdev = 26.101
[info]   CI (99.9%): [461.828, 662.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1246.621 ±(99.9%) 87.699 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1246.621, 1268.359), stdev = 22.775
[info]   CI (99.9%): [1158.922, 1334.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.990 ±(99.9%) 1155.912 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.990, 671.761), stdev = 300.187
[info]   CI (99.9%): [≈ 0, 1692.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1198.912 ±(99.9%) 2595.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1198.912, 1622.039), stdev = 674.013
[info]   CI (99.9%): [≈ 0, 3794.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.050), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:27:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 370478.440 ops/s
[info] # Warmup Iteration   2: 771540.065 ops/s
[info] # Warmup Iteration   3: 783858.067 ops/s
[info] # Warmup Iteration   4: 781867.443 ops/s
[info] # Warmup Iteration   5: 783349.272 ops/s
[info] Iteration   1: 783337.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 782674.953 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 782707.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 782471.325 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 781124.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   782463.215 ±(99.9%) 3140.986 ops/s [Average]
[info]   (min, avg, max) = (781124.425, 782463.215, 783337.504), stdev = 815.704
[info]   CI (99.9%): [779322.229, 785604.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96509.359 ops/s
[info] # Warmup Iteration   2: 308745.832 ops/s
[info] # Warmup Iteration   3: 325328.146 ops/s
[info] # Warmup Iteration   4: 325677.257 ops/s
[info] # Warmup Iteration   5: 321898.486 ops/s
[info] Iteration   1: 332767.107 ops/s
[info]                  ·gc.alloc.rate:               931.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          4402.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3153.844 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 329433.593 ops/s
[info]                  ·gc.alloc.rate:                   948.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              4530.171 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6374.545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 332541.862 ops/s
[info]                  ·gc.alloc.rate:                   933.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4416.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3159.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 329108.917 ops/s
[info]                  ·gc.alloc.rate:               923.410 MB/sec
[info]                  ·gc.alloc.rate.norm:          4414.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3195.198 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 332473.451 ops/s
[info]                  ·gc.alloc.rate:               943.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          4464.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6328.843 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   331264.986 ±(99.9%) 7034.622 ops/s [Average]
[info]   (min, avg, max) = (329108.917, 331264.986, 332767.107), stdev = 1826.869
[info]   CI (99.9%): [324230.364, 338299.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   935.868 ±(99.9%) 38.139 MB/sec [Average]
[info]   (min, avg, max) = (923.410, 935.868, 948.302), stdev = 9.905
[info]   CI (99.9%): [897.729, 974.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4445.629 ±(99.9%) 204.026 B/op [Average]
[info]   (min, avg, max) = (4402.036, 4445.629, 4530.171), stdev = 52.985
[info]   CI (99.9%): [4241.603, 4649.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   934.876 ±(99.9%) 1408.862 MB/sec [Average]
[info]   (min, avg, max) = (667.137, 934.876, 1336.960), stdev = 365.877
[info]   CI (99.9%): [≈ 0, 2343.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4442.297 ±(99.9%) 6712.367 B/op [Average]
[info]   (min, avg, max) = (3153.844, 4442.297, 6374.545), stdev = 1743.180
[info]   CI (99.9%): [≈ 0, 11154.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.199), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10657.258 ops/s
[info] # Warmup Iteration   2: 32378.166 ops/s
[info] # Warmup Iteration   3: 36178.635 ops/s
[info] # Warmup Iteration   4: 37574.769 ops/s
[info] # Warmup Iteration   5: 38201.263 ops/s
[info] Iteration   1: 38648.583 ops/s
[info]                  ·gc.alloc.rate:                   1965.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              80057.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82123.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 38645.284 ops/s
[info]                  ·gc.alloc.rate:                   1949.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              79410.896 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54706.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 37735.283 ops/s
[info]                  ·gc.alloc.rate:                   1945.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              81128.688 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83878.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 38794.814 ops/s
[info]                  ·gc.alloc.rate:                   1971.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              79986.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81561.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.601 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38726.545 ops/s
[info]                  ·gc.alloc.rate:                   1994.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              81062.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81727.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.384 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38510.102 ±(99.9%) 1684.744 ops/s [Average]
[info]   (min, avg, max) = (37735.283, 38510.102, 38794.814), stdev = 437.523
[info]   CI (99.9%): [36825.358, 40194.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1965.459 ±(99.9%) 75.737 MB/sec [Average]
[info]   (min, avg, max) = (1945.133, 1965.459, 1994.675), stdev = 19.669
[info]   CI (99.9%): [1889.722, 2041.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80329.068 ±(99.9%) 2862.783 B/op [Average]
[info]   (min, avg, max) = (79410.896, 80329.068, 81128.688), stdev = 743.456
[info]   CI (99.9%): [77466.285, 83191.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.514 ±(99.9%) 1152.165 MB/sec [Average]
[info]   (min, avg, max) = (1343.284, 1878.514, 2016.694), stdev = 299.213
[info]   CI (99.9%): [726.350, 3030.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76799.587 ±(99.9%) 47689.463 B/op [Average]
[info]   (min, avg, max) = (54706.308, 76799.587, 83878.301), stdev = 12384.802
[info]   CI (99.9%): [29110.123, 124489.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 4.472 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.762, 2.789), stdev = 1.161
[info]   CI (99.9%): [≈ 0, 5.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31.031 ±(99.9%) 182.109 B/op [Average]
[info]   (min, avg, max) = (2.605, 31.031, 113.589), stdev = 47.293
[info]   CI (99.9%): [≈ 0, 213.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:26:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.686 ops/s
[info] # Warmup Iteration   2: 277959.307 ops/s
[info] # Warmup Iteration   3: 296310.286 ops/s
[info] # Warmup Iteration   4: 297265.390 ops/s
[info] # Warmup Iteration   5: 295765.063 ops/s
[info] Iteration   1: 297804.588 ops/s
[info]                  ·gc.alloc.rate:      308.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 296374.286 ops/s
[info]                  ·gc.alloc.rate:               322.206 MB/sec
[info]                  ·gc.alloc.rate.norm:          1711.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2716.720 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 297668.168 ops/s
[info]                  ·gc.alloc.rate:      308.679 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 296876.710 ops/s
[info]                  ·gc.alloc.rate:                   321.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1706.373 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3529.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.221 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 299017.186 ops/s
[info]                  ·gc.alloc.rate:      310.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   297548.188 ±(99.9%) 3882.768 ops/s [Average]
[info]   (min, avg, max) = (296374.286, 297548.188, 299017.186), stdev = 1008.343
[info]   CI (99.9%): [293665.420, 301430.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.325 ±(99.9%) 27.210 MB/sec [Average]
[info]   (min, avg, max) = (308.679, 314.325, 322.206), stdev = 7.066
[info]   CI (99.9%): [287.115, 341.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1662.689 ±(99.9%) 161.932 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1662.689, 1711.067), stdev = 42.053
[info]   CI (99.9%): [1500.757, 1824.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   235.478 ±(99.9%) 1259.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235.478, 665.812), stdev = 327.020
[info]   CI (99.9%): [≈ 0, 1494.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1249.276 ±(99.9%) 6679.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1249.276, 3529.661), stdev = 1734.620
[info]   CI (99.9%): [≈ 0, 7928.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.044 ±(99.9%) 0.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.221), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39476.320 ops/s
[info] # Warmup Iteration   2: 108663.711 ops/s
[info] # Warmup Iteration   3: 110240.258 ops/s
[info] # Warmup Iteration   4: 112528.144 ops/s
[info] # Warmup Iteration   5: 112600.520 ops/s
[info] Iteration   1: 114032.476 ops/s
[info]                  ·gc.alloc.rate:               1359.513 MB/sec
[info]                  ·gc.alloc.rate.norm:          18761.527 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18471.237 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 113952.562 ops/s
[info]                  ·gc.alloc.rate:               1355.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          18723.843 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18498.167 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 114425.573 ops/s
[info]                  ·gc.alloc.rate:                   1360.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              18703.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18430.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.808 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 112621.283 ops/s
[info]                  ·gc.alloc.rate:                   1352.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              18889.793 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18712.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 113692.108 ops/s
[info]                  ·gc.alloc.rate:                   1375.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              19036.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18498.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   113744.800 ±(99.9%) 2621.862 ops/s [Average]
[info]   (min, avg, max) = (112621.283, 113744.800, 114425.573), stdev = 680.889
[info]   CI (99.9%): [111122.938, 116366.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1360.628 ±(99.9%) 33.752 MB/sec [Average]
[info]   (min, avg, max) = (1352.334, 1360.628, 1375.212), stdev = 8.765
[info]   CI (99.9%): [1326.876, 1394.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18822.928 ±(99.9%) 536.927 B/op [Average]
[info]   (min, avg, max) = (18703.411, 18822.928, 19036.068), stdev = 139.438
[info]   CI (99.9%): [18286.002, 19359.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1338.879 ±(99.9%) 6.048 MB/sec [Average]
[info]   (min, avg, max) = (1336.399, 1338.879, 1340.545), stdev = 1.571
[info]   CI (99.9%): [1332.831, 1344.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18522.206 ±(99.9%) 423.313 B/op [Average]
[info]   (min, avg, max) = (18430.389, 18522.206, 18712.436), stdev = 109.933
[info]   CI (99.9%): [18098.894, 18945.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.796 ±(99.9%) 5.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.796, 3.186), stdev = 1.374
[info]   CI (99.9%): [≈ 0, 6.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.972 ±(99.9%) 72.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.972, 43.808), stdev = 18.890
[info]   CI (99.9%): [≈ 0, 83.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:26:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284261.746 ops/s
[info] # Warmup Iteration   2: 460069.571 ops/s
[info] # Warmup Iteration   3: 476667.885 ops/s
[info] # Warmup Iteration   4: 479198.295 ops/s
[info] # Warmup Iteration   5: 477942.095 ops/s
[info] Iteration   1: 480088.113 ops/s
[info]                  ·gc.alloc.rate:      312.364 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 477970.384 ops/s
[info]                  ·gc.alloc.rate:               326.140 MB/sec
[info]                  ·gc.alloc.rate.norm:          1073.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1684.664 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 478258.668 ops/s
[info]                  ·gc.alloc.rate:                   329.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1083.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1683.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 480989.879 ops/s
[info]                  ·gc.alloc.rate:      312.982 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 478337.320 ops/s
[info]                  ·gc.alloc.rate:               327.478 MB/sec
[info]                  ·gc.alloc.rate.norm:          1077.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2205.916 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   479128.873 ±(99.9%) 5133.572 ops/s [Average]
[info]   (min, avg, max) = (477970.384, 479128.873, 480989.879), stdev = 1333.172
[info]   CI (99.9%): [473995.301, 484262.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   321.660 ±(99.9%) 31.902 MB/sec [Average]
[info]   (min, avg, max) = (312.364, 321.660, 329.335), stdev = 8.285
[info]   CI (99.9%): [289.758, 353.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1056.632 ±(99.9%) 115.502 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1056.632, 1083.755), stdev = 29.995
[info]   CI (99.9%): [941.130, 1172.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.740 ±(99.9%) 1216.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.740, 670.436), stdev = 315.949
[info]   CI (99.9%): [≈ 0, 1555.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1114.851 ±(99.9%) 4003.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1114.851, 2205.916), stdev = 1039.766
[info]   CI (99.9%): [≈ 0, 5118.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5167.185 ops/s
[info] # Warmup Iteration   2: 37547.495 ops/s
[info] # Warmup Iteration   3: 42108.355 ops/s
[info] # Warmup Iteration   4: 41145.505 ops/s
[info] # Warmup Iteration   5: 42453.480 ops/s
[info] Iteration   1: 42607.413 ops/s
[info]                  ·gc.alloc.rate:                   2114.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              78122.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74251.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 42557.737 ops/s
[info]                  ·gc.alloc.rate:                   2112.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              78100.922 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74101.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42838.107 ops/s
[info]                  ·gc.alloc.rate:                   2111.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              77539.967 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73519.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42315.337 ops/s
[info]                  ·gc.alloc.rate:                   2121.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              78900.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74464.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42673.053 ops/s
[info]                  ·gc.alloc.rate:                   2095.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              77282.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73961.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.535 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   42598.329 ±(99.9%) 732.868 ops/s [Average]
[info]   (min, avg, max) = (42315.337, 42598.329, 42838.107), stdev = 190.323
[info]   CI (99.9%): [41865.461, 43331.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2111.109 ±(99.9%) 36.885 MB/sec [Average]
[info]   (min, avg, max) = (2095.476, 2111.109, 2121.436), stdev = 9.579
[info]   CI (99.9%): [2074.224, 2147.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77989.406 ±(99.9%) 2406.489 B/op [Average]
[info]   (min, avg, max) = (77282.862, 77989.406, 78900.996), stdev = 624.958
[info]   CI (99.9%): [75582.917, 80395.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.749 ±(99.9%) 12.825 MB/sec [Average]
[info]   (min, avg, max) = (2001.904, 2004.749, 2010.113), stdev = 3.331
[info]   CI (99.9%): [1991.923, 2017.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74059.515 ±(99.9%) 1367.609 B/op [Average]
[info]   (min, avg, max) = (73519.017, 74059.515, 74464.703), stdev = 355.164
[info]   CI (99.9%): [72691.906, 75427.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.920 ±(99.9%) 7.342 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.920, 4.330), stdev = 1.907
[info]   CI (99.9%): [≈ 0, 8.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   33.994 ±(99.9%) 271.180 B/op [Average]
[info]   (min, avg, max) = (0.765, 33.994, 159.945), stdev = 70.425
[info]   CI (99.9%): [≈ 0, 305.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:25:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27939.869 ops/s
[info] # Warmup Iteration   2: 70585.907 ops/s
[info] # Warmup Iteration   3: 73934.328 ops/s
[info] # Warmup Iteration   4: 73958.342 ops/s
[info] # Warmup Iteration   5: 74987.895 ops/s
[info] Iteration   1: 75437.368 ops/s
[info]                  ·gc.alloc.rate:               615.102 MB/sec
[info]                  ·gc.alloc.rate.norm:          12831.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13953.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75510.418 ops/s
[info]                  ·gc.alloc.rate:               618.099 MB/sec
[info]                  ·gc.alloc.rate.norm:          12880.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13938.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 75518.595 ops/s
[info]                  ·gc.alloc.rate:               612.061 MB/sec
[info]                  ·gc.alloc.rate.norm:          12754.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13952.322 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 75274.585 ops/s
[info]                  ·gc.alloc.rate:                   618.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              12931.146 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13997.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 68965.716 ops/s
[info]                  ·gc.alloc.rate:      547.693 MB/sec
[info]                  ·gc.alloc.rate.norm: 12498.458 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   74141.336 ±(99.9%) 11147.303 ops/s [Average]
[info]   (min, avg, max) = (68965.716, 74141.336, 75518.595), stdev = 2894.919
[info]   CI (99.9%): [62994.033, 85288.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   602.278 ±(99.9%) 117.917 MB/sec [Average]
[info]   (min, avg, max) = (547.693, 602.278, 618.434), stdev = 30.623
[info]   CI (99.9%): [484.361, 720.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12779.186 ±(99.9%) 654.525 B/op [Average]
[info]   (min, avg, max) = (12498.458, 12779.186, 12931.146), stdev = 169.978
[info]   CI (99.9%): [12124.661, 13433.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   535.354 ±(99.9%) 1152.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 535.354, 669.554), stdev = 299.272
[info]   CI (99.9%): [≈ 0, 1687.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11168.489 ±(99.9%) 24041.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11168.489, 13997.727), stdev = 6243.414
[info]   CI (99.9%): [≈ 0, 35209.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 1.499 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.871), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.723 ops/s
[info] # Warmup Iteration   2: 81644.356 ops/s
[info] # Warmup Iteration   3: 83999.462 ops/s
[info] # Warmup Iteration   4: 87605.052 ops/s
[info] # Warmup Iteration   5: 87569.143 ops/s
[info] Iteration   1: 88033.933 ops/s
[info]                  ·gc.alloc.rate:                   519.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              9287.721 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11903.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.873 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 88274.714 ops/s
[info]                  ·gc.alloc.rate:      499.161 MB/sec
[info]                  ·gc.alloc.rate.norm: 8897.945 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80151.731 ops/s
[info]                  ·gc.alloc.rate:               467.624 MB/sec
[info]                  ·gc.alloc.rate.norm:          9177.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13074.171 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 87201.100 ops/s
[info]                  ·gc.alloc.rate:                   511.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              9238.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12022.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87019.252 ops/s
[info]                  ·gc.alloc.rate:               505.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          9140.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12048.305 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   86136.146 ±(99.9%) 13044.294 ops/s [Average]
[info]   (min, avg, max) = (80151.731, 86136.146, 88274.714), stdev = 3387.562
[info]   CI (99.9%): [73091.852, 99180.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   500.727 ±(99.9%) 77.002 MB/sec [Average]
[info]   (min, avg, max) = (467.624, 500.727, 519.570), stdev = 19.997
[info]   CI (99.9%): [423.725, 577.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   9148.592 ±(99.9%) 581.478 B/op [Average]
[info]   (min, avg, max) = (8897.945, 9148.592, 9287.721), stdev = 151.008
[info]   CI (99.9%): [8567.114, 9730.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.867 ±(99.9%) 1147.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.867, 666.162), stdev = 297.882
[info]   CI (99.9%): [≈ 0, 1679.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   9809.709 ±(99.9%) 21194.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9809.709, 13074.171), stdev = 5504.070
[info]   CI (99.9%): [≈ 0, 31003.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 1.529 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.273, 0.873), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32923.251 ops/s
[info] # Warmup Iteration   2: 75649.505 ops/s
[info] # Warmup Iteration   3: 77923.586 ops/s
[info] # Warmup Iteration   4: 78440.046 ops/s
[info] # Warmup Iteration   5: 74951.575 ops/s
[info] Iteration   1: 78396.567 ops/s
[info]                  ·gc.alloc.rate:                   477.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              9596.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10270.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 78206.868 ops/s
[info]                  ·gc.alloc.rate:               474.216 MB/sec
[info]                  ·gc.alloc.rate.norm:          9541.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13425.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 78552.862 ops/s
[info]                  ·gc.alloc.rate:      463.195 MB/sec
[info]                  ·gc.alloc.rate.norm: 9280.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 78205.598 ops/s
[info]                  ·gc.alloc.rate:                   477.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              9601.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13425.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 78246.886 ops/s
[info]                  ·gc.alloc.rate:               486.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          9789.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13432.117 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   78321.756 ±(99.9%) 581.767 ops/s [Average]
[info]   (min, avg, max) = (78205.598, 78321.756, 78552.862), stdev = 151.083
[info]   CI (99.9%): [77739.989, 78903.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   475.830 ±(99.9%) 32.560 MB/sec [Average]
[info]   (min, avg, max) = (463.195, 475.830, 486.670), stdev = 8.456
[info]   CI (99.9%): [443.270, 508.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   9561.566 ±(99.9%) 705.295 B/op [Average]
[info]   (min, avg, max) = (9280.005, 9561.566, 9789.050), stdev = 183.163
[info]   CI (99.9%): [8856.271, 10266.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.749 ±(99.9%) 1112.949 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.749, 667.788), stdev = 289.029
[info]   CI (99.9%): [≈ 0, 1615.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10110.764 ±(99.9%) 22391.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10110.764, 13432.117), stdev = 5815.053
[info]   CI (99.9%): [≈ 0, 32502.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.335 ±(99.9%) 1.765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 0.838), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 2.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50140.850 ops/s
[info] # Warmup Iteration   2: 83565.113 ops/s
[info] # Warmup Iteration   3: 84870.955 ops/s
[info] # Warmup Iteration   4: 86337.753 ops/s
[info] # Warmup Iteration   5: 86232.844 ops/s
[info] Iteration   1: 85927.437 ops/s
[info]                  ·gc.alloc.rate:                   503.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              9221.482 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9371.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85983.136 ops/s
[info]                  ·gc.alloc.rate:               506.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          9265.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12272.853 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 86247.784 ops/s
[info]                  ·gc.alloc.rate:                   503.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              9184.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12234.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 86565.397 ops/s
[info]                  ·gc.alloc.rate:      489.356 MB/sec
[info]                  ·gc.alloc.rate.norm: 8896.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86224.831 ops/s
[info]                  ·gc.alloc.rate:               512.941 MB/sec
[info]                  ·gc.alloc.rate.norm:          9362.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12250.288 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   86189.717 ±(99.9%) 976.438 ops/s [Average]
[info]   (min, avg, max) = (85927.437, 86189.717, 86565.397), stdev = 253.578
[info]   CI (99.9%): [85213.279, 87166.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   503.079 ±(99.9%) 33.128 MB/sec [Average]
[info]   (min, avg, max) = (489.356, 503.079, 512.941), stdev = 8.603
[info]   CI (99.9%): [469.951, 536.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   9186.036 ±(99.9%) 674.908 B/op [Average]
[info]   (min, avg, max) = (8896.005, 9186.036, 9362.863), stdev = 175.271
[info]   CI (99.9%): [8511.128, 9860.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.777 ±(99.9%) 1118.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.777, 671.127), stdev = 290.469
[info]   CI (99.9%): [≈ 0, 1623.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9225.745 ±(99.9%) 20432.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9225.745, 12272.853), stdev = 5306.159
[info]   CI (99.9%): [≈ 0, 29657.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.152 ±(99.9%) 0.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.381), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47497.657 ops/s
[info] # Warmup Iteration   2: 82480.208 ops/s
[info] # Warmup Iteration   3: 85511.419 ops/s
[info] # Warmup Iteration   4: 85626.763 ops/s
[info] # Warmup Iteration   5: 87827.585 ops/s
[info] Iteration   1: 86322.401 ops/s
[info]                  ·gc.alloc.rate:               449.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          8194.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9327.909 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 88550.069 ops/s
[info]                  ·gc.alloc.rate:      430.840 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 88193.620 ops/s
[info]                  ·gc.alloc.rate:               451.214 MB/sec
[info]                  ·gc.alloc.rate.norm:          8051.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11970.887 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 88290.487 ops/s
[info]                  ·gc.alloc.rate:                   446.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              7955.624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11957.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 88504.063 ops/s
[info]                  ·gc.alloc.rate:      430.620 MB/sec
[info]                  ·gc.alloc.rate.norm: 7656.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   87972.128 ±(99.9%) 3596.273 ops/s [Average]
[info]   (min, avg, max) = (86322.401, 87972.128, 88550.069), stdev = 933.941
[info]   CI (99.9%): [84375.855, 91568.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   441.696 ±(99.9%) 39.118 MB/sec [Average]
[info]   (min, avg, max) = (430.620, 441.696, 451.214), stdev = 10.159
[info]   CI (99.9%): [402.578, 480.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   7902.743 ±(99.9%) 927.009 B/op [Average]
[info]   (min, avg, max) = (7656.005, 7902.743, 8194.483), stdev = 240.741
[info]   CI (99.9%): [6975.734, 8829.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   370.674 ±(99.9%) 1326.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.674, 670.925), stdev = 344.570
[info]   CI (99.9%): [≈ 0, 1697.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   6651.307 ±(99.9%) 23744.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6651.307, 11970.887), stdev = 6166.444
[info]   CI (99.9%): [≈ 0, 30396.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.074 ±(99.9%) 0.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.074, 0.371), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1639.971 ops/s
[info] # Warmup Iteration   2: 9269.713 ops/s
[info] # Warmup Iteration   3: 10166.671 ops/s
[info] # Warmup Iteration   4: 10130.371 ops/s
[info] # Warmup Iteration   5: 10178.382 ops/s
[info] Iteration   1: 10124.227 ops/s
[info]                  ·gc.alloc.rate:               1671.528 MB/sec
[info]                  ·gc.alloc.rate.norm:          259776.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313040.218 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 10122.490 ops/s
[info]                  ·gc.alloc.rate:                   1652.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              256873.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208783.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 10155.085 ops/s
[info]                  ·gc.alloc.rate:                   1671.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              259008.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311713.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 138.697 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10183.976 ops/s
[info]                  ·gc.alloc.rate:                   1677.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              259154.445 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206709.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 10182.692 ops/s
[info]                  ·gc.alloc.rate:                   1664.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              257224.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206729.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.217 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   10153.694 ±(99.9%) 115.548 ops/s [Average]
[info]   (min, avg, max) = (10122.490, 10153.694, 10183.976), stdev = 30.007
[info]   CI (99.9%): [10038.146, 10269.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1667.427 ±(99.9%) 36.774 MB/sec [Average]
[info]   (min, avg, max) = (1652.501, 1667.427, 1677.412), stdev = 9.550
[info]   CI (99.9%): [1630.653, 1704.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258407.471 ±(99.9%) 4925.807 B/op [Average]
[info]   (min, avg, max) = (256873.117, 258407.471, 259776.408), stdev = 1279.216
[info]   CI (99.9%): [253481.665, 263333.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.886 ±(99.9%) 1420.125 MB/sec [Average]
[info]   (min, avg, max) = (1337.585, 1608.886, 2014.254), stdev = 368.802
[info]   CI (99.9%): [188.761, 3029.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   249395.177 ±(99.9%) 221420.979 B/op [Average]
[info]   (min, avg, max) = (206709.268, 249395.177, 313040.218), stdev = 57502.325
[info]   CI (99.9%): [27974.198, 470816.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.081), stdev = 1.329
[info]   CI (99.9%): [≈ 0, 5.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   124.822 ±(99.9%) 795.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 124.822, 478.979), stdev = 206.625
[info]   CI (99.9%): [≈ 0, 920.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.435
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 850.618 ops/s
[info] # Warmup Iteration   2: 7843.106 ops/s
[info] # Warmup Iteration   3: 9305.249 ops/s
[info] # Warmup Iteration   4: 9308.312 ops/s
[info] # Warmup Iteration   5: 9392.021 ops/s
[info] Iteration   1: 9393.790 ops/s
[info]                  ·gc.alloc.rate:               1471.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          246528.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 223754.244 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 9381.023 ops/s
[info]                  ·gc.alloc.rate:                   1478.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              248069.334 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224287.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.969 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9327.665 ops/s
[info]                  ·gc.alloc.rate:                   1465.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              247267.202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225730.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 664.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 9447.543 ops/s
[info]                  ·gc.alloc.rate:                   1479.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              246509.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222642.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9375.438 ops/s
[info]                  ·gc.alloc.rate:                   1516.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              254550.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335660.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9385.092 ±(99.9%) 165.436 ops/s [Average]
[info]   (min, avg, max) = (9327.665, 9385.092, 9447.543), stdev = 42.963
[info]   CI (99.9%): [9219.655, 9550.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1482.406 ±(99.9%) 76.547 MB/sec [Average]
[info]   (min, avg, max) = (1465.571, 1482.406, 1516.432), stdev = 19.879
[info]   CI (99.9%): [1405.860, 1558.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   248585.042 ±(99.9%) 13076.214 B/op [Average]
[info]   (min, avg, max) = (246509.603, 248585.042, 254550.585), stdev = 3395.851
[info]   CI (99.9%): [235508.828, 261661.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1469.321 ±(99.9%) 1141.530 MB/sec [Average]
[info]   (min, avg, max) = (1335.555, 1469.321, 1999.627), stdev = 296.452
[info]   CI (99.9%): [327.790, 2610.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   246415.025 ±(99.9%) 192155.480 B/op [Average]
[info]   (min, avg, max) = (222642.089, 246415.025, 335660.605), stdev = 49902.168
[info]   CI (99.9%): [54259.545, 438570.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.896 ±(99.9%) 6.569 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.896, 3.937), stdev = 1.706
[info]   CI (99.9%): [≈ 0, 7.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150.904 ±(99.9%) 1108.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.904, 664.159), stdev = 287.895
[info]   CI (99.9%): [≈ 0, 1259.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99338.170 ops/s
[info] # Warmup Iteration   2: 150021.731 ops/s
[info] # Warmup Iteration   3: 157353.759 ops/s
[info] # Warmup Iteration   4: 157648.275 ops/s
[info] # Warmup Iteration   5: 153880.545 ops/s
[info] Iteration   1: 158789.182 ops/s
[info]                  ·gc.alloc.rate:      413.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 157219.430 ops/s
[info]                  ·gc.alloc.rate:               420.801 MB/sec
[info]                  ·gc.alloc.rate.norm:          4211.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5121.446 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 157796.457 ops/s
[info]                  ·gc.alloc.rate:                   427.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              4258.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6693.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.415 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 158811.050 ops/s
[info]                  ·gc.alloc.rate:      413.466 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 157093.225 ops/s
[info]                  ·gc.alloc.rate:                   435.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              4360.312 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6723.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.209 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   157941.869 ±(99.9%) 3185.041 ops/s [Average]
[info]   (min, avg, max) = (157093.225, 157941.869, 158811.050), stdev = 827.145
[info]   CI (99.9%): [154756.828, 161126.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   421.962 ±(99.9%) 36.112 MB/sec [Average]
[info]   (min, avg, max) = (413.238, 421.962, 435.227), stdev = 9.378
[info]   CI (99.9%): [385.850, 458.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4204.560 ±(99.9%) 434.035 B/op [Average]
[info]   (min, avg, max) = (4096.003, 4204.560, 4360.312), stdev = 112.718
[info]   CI (99.9%): [3770.524, 4638.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.823 ±(99.9%) 1327.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.823, 671.266), stdev = 344.720
[info]   CI (99.9%): [≈ 0, 1698.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3707.828 ±(99.9%) 13270.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3707.828, 6723.908), stdev = 3446.266
[info]   CI (99.9%): [≈ 0, 16978.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.125 ±(99.9%) 0.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.415), stdev = 0.186
[info]   CI (99.9%): [≈ 0, 0.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400.789 ops/s
[info] # Warmup Iteration   2: 4748.457 ops/s
[info] # Warmup Iteration   3: 5436.757 ops/s
[info] # Warmup Iteration   4: 5699.701 ops/s
[info] # Warmup Iteration   5: 5747.643 ops/s
[info] Iteration   1: 5743.581 ops/s
[info]                  ·gc.alloc.rate:               1509.236 MB/sec
[info]                  ·gc.alloc.rate.norm:          413516.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366043.371 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 5633.401 ops/s
[info]                  ·gc.alloc.rate:               1472.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          411220.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 373467.974 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 5716.094 ops/s
[info]                  ·gc.alloc.rate:                   1490.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              410445.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368321.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1188.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 5721.957 ops/s
[info]                  ·gc.alloc.rate:                   1518.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              417584.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     550855.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.965 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5744.661 ops/s
[info]                  ·gc.alloc.rate:                   1522.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              416976.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364611.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.811 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5711.939 ±(99.9%) 176.015 ops/s [Average]
[info]   (min, avg, max) = (5633.401, 5711.939, 5744.661), stdev = 45.711
[info]   CI (99.9%): [5535.924, 5887.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1502.495 ±(99.9%) 80.299 MB/sec [Average]
[info]   (min, avg, max) = (1472.052, 1502.495, 1522.036), stdev = 20.854
[info]   CI (99.9%): [1422.196, 1582.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   413948.786 ±(99.9%) 12520.831 B/op [Average]
[info]   (min, avg, max) = (410445.671, 413948.786, 417584.630), stdev = 3251.620
[info]   CI (99.9%): [401427.955, 426469.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.896 ±(99.9%) 1149.447 MB/sec [Average]
[info]   (min, avg, max) = (1330.892, 1468.896, 2002.861), stdev = 298.508
[info]   CI (99.9%): [319.449, 2618.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   404659.880 ±(99.9%) 314962.725 B/op [Average]
[info]   (min, avg, max) = (364611.007, 404659.880, 550855.101), stdev = 81794.820
[info]   CI (99.9%): [89697.155, 719622.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.971 ±(99.9%) 7.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.971, 4.315), stdev = 1.879
[info]   CI (99.9%): [≈ 0, 8.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   267.374 ±(99.9%) 1992.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 267.374, 1188.097), stdev = 517.329
[info]   CI (99.9%): [≈ 0, 2259.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8184.204 ops/s
[info] # Warmup Iteration   2: 18402.216 ops/s
[info] # Warmup Iteration   3: 19645.698 ops/s
[info] # Warmup Iteration   4: 19878.390 ops/s
[info] # Warmup Iteration   5: 19725.368 ops/s
[info] Iteration   1: 19764.698 ops/s
[info]                  ·gc.alloc.rate:               1524.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          121420.696 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 106777.797 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 19279.055 ops/s
[info]                  ·gc.alloc.rate:                   1519.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              124002.855 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109523.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 19868.699 ops/s
[info]                  ·gc.alloc.rate:                   1557.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              123370.614 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159460.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 20035.168 ops/s
[info]                  ·gc.alloc.rate:                   1554.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              122115.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105234.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20044.636 ops/s
[info]                  ·gc.alloc.rate:                   1553.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              122008.968 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105072.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   19798.451 ±(99.9%) 1206.193 ops/s [Average]
[info]   (min, avg, max) = (19279.055, 19798.451, 20044.636), stdev = 313.245
[info]   CI (99.9%): [18592.258, 21004.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1541.953 ±(99.9%) 71.136 MB/sec [Average]
[info]   (min, avg, max) = (1519.027, 1541.953, 1557.475), stdev = 18.474
[info]   CI (99.9%): [1470.817, 1613.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   122583.803 ±(99.9%) 4100.070 B/op [Average]
[info]   (min, avg, max) = (121420.696, 122583.803, 124002.855), stdev = 1064.775
[info]   CI (99.9%): [118483.733, 126683.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1474.701 ±(99.9%) 1158.925 MB/sec [Average]
[info]   (min, avg, max) = (1338.257, 1474.701, 2013.086), stdev = 300.969
[info]   CI (99.9%): [315.776, 2633.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   117213.616 ±(99.9%) 91199.184 B/op [Average]
[info]   (min, avg, max) = (105072.033, 117213.616, 159460.380), stdev = 23684.139
[info]   CI (99.9%): [26014.431, 208412.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.560), stdev = 1.570
[info]   CI (99.9%): [≈ 0, 6.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   59.676 ±(99.9%) 478.929 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.676, 281.971), stdev = 124.376
[info]   CI (99.9%): [≈ 0, 538.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8736.348 ops/s
[info] # Warmup Iteration   2: 21476.932 ops/s
[info] # Warmup Iteration   3: 22367.256 ops/s
[info] # Warmup Iteration   4: 22945.304 ops/s
[info] # Warmup Iteration   5: 23076.060 ops/s
[info] Iteration   1: 22922.021 ops/s
[info]                  ·gc.alloc.rate:                   1548.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              106331.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91936.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 23101.608 ops/s
[info]                  ·gc.alloc.rate:                   1546.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              105371.765 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91306.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 23041.025 ops/s
[info]                  ·gc.alloc.rate:                   1582.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              108064.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137271.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 22825.146 ops/s
[info]                  ·gc.alloc.rate:               1543.091 MB/sec
[info]                  ·gc.alloc.rate.norm:          106355.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92185.029 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 22884.855 ops/s
[info]                  ·gc.alloc.rate:                   1543.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              106114.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91878.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   22954.931 ±(99.9%) 438.045 ops/s [Average]
[info]   (min, avg, max) = (22825.146, 22954.931, 23101.608), stdev = 113.759
[info]   CI (99.9%): [22516.886, 23392.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1552.735 ±(99.9%) 64.054 MB/sec [Average]
[info]   (min, avg, max) = (1543.016, 1552.735, 1582.176), stdev = 16.635
[info]   CI (99.9%): [1488.681, 1616.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   106447.488 ±(99.9%) 3804.515 B/op [Average]
[info]   (min, avg, max) = (105371.765, 106447.488, 108064.443), stdev = 988.021
[info]   CI (99.9%): [102642.972, 110252.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.516 ±(99.9%) 1156.548 MB/sec [Average]
[info]   (min, avg, max) = (1336.017, 1472.516, 2009.794), stdev = 300.352
[info]   CI (99.9%): [315.968, 2629.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   100915.599 ±(99.9%) 78268.122 B/op [Average]
[info]   (min, avg, max) = (91306.800, 100915.599, 137271.274), stdev = 20325.983
[info]   CI (99.9%): [22647.478, 179183.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.636 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.874), stdev = 1.723
[info]   CI (99.9%): [≈ 0, 7.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   54.062 ±(99.9%) 453.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.062, 264.614), stdev = 117.708
[info]   CI (99.9%): [≈ 0, 507.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:22:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93492.510 ops/s
[info] # Warmup Iteration   2: 126943.645 ops/s
[info] # Warmup Iteration   3: 135727.609 ops/s
[info] # Warmup Iteration   4: 134721.645 ops/s
[info] # Warmup Iteration   5: 134653.978 ops/s
[info] Iteration   1: 135451.163 ops/s
[info]                  ·gc.alloc.rate:      299.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 134528.633 ops/s
[info]                  ·gc.alloc.rate:               316.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          3703.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5985.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 135484.348 ops/s
[info]                  ·gc.alloc.rate:      299.636 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 133954.971 ops/s
[info]                  ·gc.alloc.rate:               308.403 MB/sec
[info]                  ·gc.alloc.rate.norm:          3623.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6010.826 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 129767.781 ops/s
[info]                  ·gc.alloc.rate:      286.993 MB/sec
[info]                  ·gc.alloc.rate.norm: 3480.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   133837.379 ±(99.9%) 9106.201 ops/s [Average]
[info]   (min, avg, max) = (129767.781, 133837.379, 135484.348), stdev = 2364.852
[info]   CI (99.9%): [124731.178, 142943.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   302.216 ±(99.9%) 42.554 MB/sec [Average]
[info]   (min, avg, max) = (286.993, 302.216, 316.521), stdev = 11.051
[info]   CI (99.9%): [259.662, 344.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3553.300 ±(99.9%) 401.359 B/op [Average]
[info]   (min, avg, max) = (3480.003, 3553.300, 3703.020), stdev = 104.232
[info]   CI (99.9%): [3151.941, 3954.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.639 ±(99.9%) 1079.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.639, 511.599), stdev = 280.214
[info]   CI (99.9%): [≈ 0, 1283.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2399.220 ±(99.9%) 12650.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2399.220, 6010.826), stdev = 3285.279
[info]   CI (99.9%): [≈ 0, 15049.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:22:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80792.144 ops/s
[info] # Warmup Iteration   2: 134253.326 ops/s
[info] # Warmup Iteration   3: 140472.812 ops/s
[info] # Warmup Iteration   4: 140403.372 ops/s
[info] # Warmup Iteration   5: 140509.532 ops/s
[info] Iteration   1: 140489.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 140464.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 139756.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 140495.748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 140466.735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   140334.553 ±(99.9%) 1245.649 ops/s [Average]
[info]   (min, avg, max) = (139756.403, 140334.553, 140495.748), stdev = 323.491
[info]   CI (99.9%): [139088.903, 141580.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:22:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9424.234 ops/s
[info] # Warmup Iteration   2: 20437.918 ops/s
[info] # Warmup Iteration   3: 22856.918 ops/s
[info] # Warmup Iteration   4: 23129.304 ops/s
[info] # Warmup Iteration   5: 23195.117 ops/s
[info] Iteration   1: 23003.826 ops/s
[info]                  ·gc.alloc.rate:                   1609.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              110128.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137543.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 23146.492 ops/s
[info]                  ·gc.alloc.rate:                   1603.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              109037.623 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91178.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 23133.930 ops/s
[info]                  ·gc.alloc.rate:                   1602.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              108948.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91131.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23218.201 ops/s
[info]                  ·gc.alloc.rate:                   1634.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              110794.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135908.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23232.975 ops/s
[info]                  ·gc.alloc.rate:               1621.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          109860.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90427.158 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   23147.085 ±(99.9%) 350.446 ops/s [Average]
[info]   (min, avg, max) = (23003.826, 23147.085, 23232.975), stdev = 91.010
[info]   CI (99.9%): [22796.638, 23497.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1614.340 ±(99.9%) 52.481 MB/sec [Average]
[info]   (min, avg, max) = (1602.195, 1614.340, 1634.434), stdev = 13.629
[info]   CI (99.9%): [1561.859, 1666.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   109753.796 ±(99.9%) 2979.973 B/op [Average]
[info]   (min, avg, max) = (108948.313, 109753.796, 110794.128), stdev = 773.890
[info]   CI (99.9%): [106773.822, 112733.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1606.270 ±(99.9%) 1410.973 MB/sec [Average]
[info]   (min, avg, max) = (1334.891, 1606.270, 2010.383), stdev = 366.425
[info]   CI (99.9%): [195.297, 3017.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109237.900 ±(99.9%) 96657.882 B/op [Average]
[info]   (min, avg, max) = (90427.158, 109237.900, 137543.566), stdev = 25101.745
[info]   CI (99.9%): [12580.018, 205895.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 3.081), stdev = 1.325
[info]   CI (99.9%): [≈ 0, 5.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   56.344 ±(99.9%) 346.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.344, 209.489), stdev = 90.081
[info]   CI (99.9%): [≈ 0, 403.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.286
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28419.404 ops/s
[info] # Warmup Iteration   2: 112460.078 ops/s
[info] # Warmup Iteration   3: 115006.690 ops/s
[info] # Warmup Iteration   4: 125013.078 ops/s
[info] # Warmup Iteration   5: 123668.594 ops/s
[info] Iteration   1: 124846.009 ops/s
[info]                  ·gc.alloc.rate:                   1752.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              22092.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16929.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 124815.154 ops/s
[info]                  ·gc.alloc.rate:                   1801.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              22718.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25416.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.572 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 125725.679 ops/s
[info]                  ·gc.alloc.rate:                   1788.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              22383.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16778.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.606 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 125143.647 ops/s
[info]                  ·gc.alloc.rate:                   1794.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              22563.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25259.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 123817.095 ops/s
[info]                  ·gc.alloc.rate:                   1777.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              22583.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25530.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   124869.517 ±(99.9%) 2667.290 ops/s [Average]
[info]   (min, avg, max) = (123817.095, 124869.517, 125725.679), stdev = 692.687
[info]   CI (99.9%): [122202.226, 127536.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1782.773 ±(99.9%) 73.629 MB/sec [Average]
[info]   (min, avg, max) = (1752.471, 1782.773, 1801.656), stdev = 19.121
[info]   CI (99.9%): [1709.145, 1856.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22468.178 ±(99.9%) 929.227 B/op [Average]
[info]   (min, avg, max) = (22092.800, 22468.178, 22718.347), stdev = 241.317
[info]   CI (99.9%): [21538.951, 23397.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1743.374 ±(99.9%) 1412.197 MB/sec [Average]
[info]   (min, avg, max) = (1340.361, 1743.374, 2015.659), stdev = 366.743
[info]   CI (99.9%): [331.177, 3155.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21982.868 ±(99.9%) 18034.166 B/op [Average]
[info]   (min, avg, max) = (16778.017, 21982.868, 25530.620), stdev = 4683.416
[info]   CI (99.9%): [3948.702, 40017.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 5.815 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.758, 3.455), stdev = 1.510
[info]   CI (99.9%): [≈ 0, 6.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.551 ±(99.9%) 73.327 B/op [Average]
[info]   (min, avg, max) = (0.262, 9.551, 43.572), stdev = 19.043
[info]   CI (99.9%): [≈ 0, 82.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:21:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.659 ops/s
[info] # Warmup Iteration   2: 526601.597 ops/s
[info] # Warmup Iteration   3: 547643.385 ops/s
[info] # Warmup Iteration   4: 556977.523 ops/s
[info] # Warmup Iteration   5: 560592.645 ops/s
[info] Iteration   1: 555804.287 ops/s
[info]                  ·gc.alloc.rate:               599.772 MB/sec
[info]                  ·gc.alloc.rate.norm:          1698.356 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1882.546 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 566159.706 ops/s
[info]                  ·gc.alloc.rate:               609.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          1694.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1848.034 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 567054.854 ops/s
[info]                  ·gc.alloc.rate:                   604.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1676.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 566714.070 ops/s
[info]                  ·gc.alloc.rate:                   601.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1669.946 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1848.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 562144.914 ops/s
[info]                  ·gc.alloc.rate:               604.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          1691.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1864.954 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   563575.566 ±(99.9%) 18373.763 ops/s [Average]
[info]   (min, avg, max) = (555804.287, 563575.566, 567054.854), stdev = 4771.608
[info]   CI (99.9%): [545201.803, 581949.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   603.838 ±(99.9%) 14.491 MB/sec [Average]
[info]   (min, avg, max) = (599.772, 603.838, 609.616), stdev = 3.763
[info]   CI (99.9%): [589.346, 618.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1686.319 ±(99.9%) 47.087 B/op [Average]
[info]   (min, avg, max) = (1669.946, 1686.319, 1698.356), stdev = 12.228
[info]   CI (99.9%): [1639.231, 1733.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   665.355 ±(99.9%) 2.098 MB/sec [Average]
[info]   (min, avg, max) = (664.819, 665.355, 666.127), stdev = 0.545
[info]   CI (99.9%): [663.257, 667.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1858.157 ±(99.9%) 59.835 B/op [Average]
[info]   (min, avg, max) = (1847.094, 1858.157, 1882.546), stdev = 15.539
[info]   CI (99.9%): [1798.323, 1917.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.035 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.098), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98825.616 ops/s
[info] # Warmup Iteration   2: 310494.331 ops/s
[info] # Warmup Iteration   3: 316194.457 ops/s
[info] # Warmup Iteration   4: 323947.726 ops/s
[info] # Warmup Iteration   5: 325565.508 ops/s
[info] Iteration   1: 324894.395 ops/s
[info]                  ·gc.alloc.rate:               463.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          2244.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2478.300 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 326714.900 ops/s
[info]                  ·gc.alloc.rate:      453.374 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 326008.218 ops/s
[info]                  ·gc.alloc.rate:               475.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          2293.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3217.438 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 326138.135 ops/s
[info]                  ·gc.alloc.rate:               471.780 MB/sec
[info]                  ·gc.alloc.rate.norm:          2276.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3216.146 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 327129.014 ops/s
[info]                  ·gc.alloc.rate:      453.926 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   326176.933 ±(99.9%) 3262.123 ops/s [Average]
[info]   (min, avg, max) = (324894.395, 326176.933, 327129.014), stdev = 847.163
[info]   CI (99.9%): [322914.810, 329439.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   463.500 ±(99.9%) 38.319 MB/sec [Average]
[info]   (min, avg, max) = (453.374, 463.500, 475.047), stdev = 9.951
[info]   CI (99.9%): [425.181, 501.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2236.549 ±(99.9%) 196.580 B/op [Average]
[info]   (min, avg, max) = (2184.001, 2236.549, 2293.329), stdev = 51.051
[info]   CI (99.9%): [2039.968, 2433.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.903 ±(99.9%) 1319.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.903, 666.470), stdev = 342.645
[info]   CI (99.9%): [≈ 0, 1688.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1782.377 ±(99.9%) 6371.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1782.377, 3217.438), stdev = 1654.776
[info]   CI (99.9%): [≈ 0, 8154.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 2.302
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 404734.665 ops/s
[info] # Warmup Iteration   2: 710616.722 ops/s
[info] # Warmup Iteration   3: 755980.817 ops/s
[info] # Warmup Iteration   4: 759678.656 ops/s
[info] # Warmup Iteration   5: 765262.909 ops/s
[info] Iteration   1: 761904.495 ops/s
[info]                  ·gc.alloc.rate:               509.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          1051.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1056.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 765127.930 ops/s
[info]                  ·gc.alloc.rate:               512.763 MB/sec
[info]                  ·gc.alloc.rate.norm:          1054.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1379.923 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 757206.647 ops/s
[info]                  ·gc.alloc.rate:                   518.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              1077.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1394.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 765511.561 ops/s
[info]                  ·gc.alloc.rate:      498.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 764818.808 ops/s
[info]                  ·gc.alloc.rate:               519.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          1068.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1381.089 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   762913.888 ±(99.9%) 13459.375 ops/s [Average]
[info]   (min, avg, max) = (757206.647, 762913.888, 765511.561), stdev = 3495.357
[info]   CI (99.9%): [749454.513, 776373.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   511.561 ±(99.9%) 33.202 MB/sec [Average]
[info]   (min, avg, max) = (498.144, 511.561, 519.309), stdev = 8.622
[info]   CI (99.9%): [478.359, 544.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1055.305 ±(99.9%) 78.837 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1055.305, 1077.816), stdev = 20.474
[info]   CI (99.9%): [976.468, 1134.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.911 ±(99.9%) 1118.893 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.911, 671.211), stdev = 290.573
[info]   CI (99.9%): [≈ 0, 1623.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1042.433 ±(99.9%) 2309.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1042.433, 1394.355), stdev = 599.856
[info]   CI (99.9%): [≈ 0, 3352.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6406.692 ops/s
[info] # Warmup Iteration   2: 61525.493 ops/s
[info] # Warmup Iteration   3: 74021.752 ops/s
[info] # Warmup Iteration   4: 75693.111 ops/s
[info] # Warmup Iteration   5: 75074.366 ops/s
[info] Iteration   1: 76248.044 ops/s
[info]                  ·gc.alloc.rate:                   3131.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              64629.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55053.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.578 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 76342.736 ops/s
[info]                  ·gc.alloc.rate:                   3162.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              65201.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3338.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68822.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 75754.197 ops/s
[info]                  ·gc.alloc.rate:               3153.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          65521.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3349.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69578.912 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 76191.020 ops/s
[info]                  ·gc.alloc.rate:               3144.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          64948.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55551.053 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 76004.082 ops/s
[info]                  ·gc.alloc.rate:               3164.656 MB/sec
[info]                  ·gc.alloc.rate.norm:          65534.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3372.840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69845.753 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   76108.016 ±(99.9%) 898.078 ops/s [Average]
[info]   (min, avg, max) = (75754.197, 76108.016, 76342.736), stdev = 233.228
[info]   CI (99.9%): [75209.938, 77006.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3151.566 ±(99.9%) 52.218 MB/sec [Average]
[info]   (min, avg, max) = (3131.992, 3151.566, 3164.656), stdev = 13.561
[info]   CI (99.9%): [3099.348, 3203.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65166.994 ±(99.9%) 1489.378 B/op [Average]
[info]   (min, avg, max) = (64629.544, 65166.994, 65534.621), stdev = 386.787
[info]   CI (99.9%): [63677.615, 66656.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3083.590 ±(99.9%) 1424.143 MB/sec [Average]
[info]   (min, avg, max) = (2667.935, 3083.590, 3372.840), stdev = 369.846
[info]   CI (99.9%): [1659.446, 4507.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   63770.356 ±(99.9%) 29809.065 B/op [Average]
[info]   (min, avg, max) = (55053.609, 63770.356, 69845.753), stdev = 7741.320
[info]   CI (99.9%): [33961.291, 93579.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.146), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.116 ±(99.9%) 5.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.116, 3.004), stdev = 1.536
[info]   CI (99.9%): [≈ 0, 7.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70331.129 ops/s
[info] # Warmup Iteration   2: 188002.030 ops/s
[info] # Warmup Iteration   3: 199526.041 ops/s
[info] # Warmup Iteration   4: 201949.858 ops/s
[info] # Warmup Iteration   5: 202194.135 ops/s
[info] Iteration   1: 200425.620 ops/s
[info]                  ·gc.alloc.rate:                   1465.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              11504.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10472.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 202225.517 ops/s
[info]                  ·gc.alloc.rate:                   1476.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              11487.326 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10384.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 201462.088 ops/s
[info]                  ·gc.alloc.rate:               1511.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          11808.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15661.612 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 202153.782 ops/s
[info]                  ·gc.alloc.rate:               1478.403 MB/sec
[info]                  ·gc.alloc.rate.norm:          11510.289 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10424.303 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 202631.946 ops/s
[info]                  ·gc.alloc.rate:               1479.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          11487.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10415.444 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   201779.791 ±(99.9%) 3334.434 ops/s [Average]
[info]   (min, avg, max) = (200425.620, 201779.791, 202631.946), stdev = 865.942
[info]   CI (99.9%): [198445.357, 205114.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1482.145 ±(99.9%) 67.084 MB/sec [Average]
[info]   (min, avg, max) = (1465.035, 1482.145, 1511.586), stdev = 17.422
[info]   CI (99.9%): [1415.061, 1549.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11559.700 ±(99.9%) 537.503 B/op [Average]
[info]   (min, avg, max) = (11487.326, 11559.700, 11808.741), stdev = 139.588
[info]   CI (99.9%): [11022.197, 12097.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1470.630 ±(99.9%) 1149.848 MB/sec [Average]
[info]   (min, avg, max) = (1333.581, 1470.630, 2004.775), stdev = 298.612
[info]   CI (99.9%): [320.782, 2620.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11471.595 ±(99.9%) 9020.142 B/op [Average]
[info]   (min, avg, max) = (10384.404, 11471.595, 15661.612), stdev = 2342.502
[info]   CI (99.9%): [2451.454, 20491.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.065 ±(99.9%) 0.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.163), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.687 ops/s
[info] # Warmup Iteration   2: 627739.463 ops/s
[info] # Warmup Iteration   3: 646349.930 ops/s
[info] # Warmup Iteration   4: 658599.861 ops/s
[info] # Warmup Iteration   5: 618095.183 ops/s
[info] Iteration   1: 607634.884 ops/s
[info]                  ·gc.alloc.rate:               342.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          886.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1325.112 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 658854.472 ops/s
[info]                  ·gc.alloc.rate:      358.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 656998.285 ops/s
[info]                  ·gc.alloc.rate:               373.032 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.608 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1595.812 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 658947.825 ops/s
[info]                  ·gc.alloc.rate:      358.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 630311.166 ops/s
[info]                  ·gc.alloc.rate:                   359.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              897.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1663.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.208 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   642549.326 ±(99.9%) 88488.011 ops/s [Average]
[info]   (min, avg, max) = (607634.884, 642549.326, 658947.825), stdev = 22980.056
[info]   CI (99.9%): [554061.315, 731037.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   358.368 ±(99.9%) 41.787 MB/sec [Average]
[info]   (min, avg, max) = (342.420, 358.368, 373.032), stdev = 10.852
[info]   CI (99.9%): [316.581, 400.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   878.037 ±(99.9%) 78.942 B/op [Average]
[info]   (min, avg, max) = (856.001, 878.037, 897.824), stdev = 20.501
[info]   CI (99.9%): [799.096, 956.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   368.836 ±(99.9%) 1319.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.836, 666.324), stdev = 342.560
[info]   CI (99.9%): [≈ 0, 1687.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   916.857 ±(99.9%) 3259.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 916.857, 1663.361), stdev = 846.489
[info]   CI (99.9%): [≈ 0, 4176.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.208), stdev = 0.093
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299734.931 ops/s
[info] # Warmup Iteration   2: 633539.439 ops/s
[info] # Warmup Iteration   3: 650144.914 ops/s
[info] # Warmup Iteration   4: 662878.287 ops/s
[info] # Warmup Iteration   5: 661735.841 ops/s
[info] Iteration   1: 661394.057 ops/s
[info]                  ·gc.alloc.rate:               507.853 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1217.466 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 661921.353 ops/s
[info]                  ·gc.alloc.rate:               516.458 MB/sec
[info]                  ·gc.alloc.rate.norm:          1227.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1587.163 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 661055.515 ops/s
[info]                  ·gc.alloc.rate:               514.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          1225.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1589.239 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 662415.389 ops/s
[info]                  ·gc.alloc.rate:      491.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168.368 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 662875.630 ops/s
[info]                  ·gc.alloc.rate:                   509.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.684 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586.413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   661932.389 ±(99.9%) 2843.892 ops/s [Average]
[info]   (min, avg, max) = (661055.515, 661932.389, 662875.630), stdev = 738.550
[info]   CI (99.9%): [659088.497, 664776.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   507.963 ±(99.9%) 37.582 MB/sec [Average]
[info]   (min, avg, max) = (491.757, 507.963, 516.458), stdev = 9.760
[info]   CI (99.9%): [470.381, 545.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1207.709 ±(99.9%) 91.644 B/op [Average]
[info]   (min, avg, max) = (1168.368, 1207.709, 1227.916), stdev = 23.800
[info]   CI (99.9%): [1116.065, 1299.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.996 ±(99.9%) 1113.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.996, 668.167), stdev = 289.189
[info]   CI (99.9%): [≈ 0, 1616.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1196.056 ±(99.9%) 2647.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1196.056, 1589.239), stdev = 687.558
[info]   CI (99.9%): [≈ 0, 3843.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 653135.467 ops/s
[info] # Warmup Iteration   2: 1012882.250 ops/s
[info] # Warmup Iteration   3: 1110855.630 ops/s
[info] # Warmup Iteration   4: 1080392.270 ops/s
[info] # Warmup Iteration   5: 1102519.731 ops/s
[info] Iteration   1: 1092853.489 ops/s
[info]                  ·gc.alloc.rate:               620.324 MB/sec
[info]                  ·gc.alloc.rate.norm:          893.235 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 966.062 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1111035.824 ops/s
[info]                  ·gc.alloc.rate:               618.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          876.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 950.267 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1089757.657 ops/s
[info]                  ·gc.alloc.rate:                   611.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              882.387 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1110437.398 ops/s
[info]                  ·gc.alloc.rate:                   620.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              879.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1111365.260 ops/s
[info]                  ·gc.alloc.rate:               622.000 MB/sec
[info]                  ·gc.alloc.rate.norm:          880.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 951.364 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1103089.926 ±(99.9%) 41657.215 ops/s [Average]
[info]   (min, avg, max) = (1089757.657, 1103089.926, 1111365.260), stdev = 10818.247
[info]   CI (99.9%): [1061432.710, 1144747.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   618.590 ±(99.9%) 16.324 MB/sec [Average]
[info]   (min, avg, max) = (611.281, 618.590, 622.000), stdev = 4.239
[info]   CI (99.9%): [602.266, 634.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   882.511 ±(99.9%) 24.511 B/op [Average]
[info]   (min, avg, max) = (876.574, 882.511, 893.235), stdev = 6.365
[info]   CI (99.9%): [858.001, 907.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.364 ±(99.9%) 1.850 MB/sec [Average]
[info]   (min, avg, max) = (670.829, 671.364, 671.851), stdev = 0.481
[info]   CI (99.9%): [669.514, 673.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   957.836 ±(99.9%) 35.942 B/op [Average]
[info]   (min, avg, max) = (950.267, 957.836, 969.820), stdev = 9.334
[info]   CI (99.9%): [921.894, 993.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691881.744 ops/s
[info] # Warmup Iteration   2: 1096308.142 ops/s
[info] # Warmup Iteration   3: 1196552.187 ops/s
[info] # Warmup Iteration   4: 1196547.930 ops/s
[info] # Warmup Iteration   5: 1196200.057 ops/s
[info] Iteration   1: 1195256.872 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1196769.643 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1198210.667 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1196468.779 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1196699.811 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1196681.154 ±(99.9%) 4048.340 ops/s [Average]
[info]   (min, avg, max) = (1195256.872, 1196681.154, 1198210.667), stdev = 1051.341
[info]   CI (99.9%): [1192632.814, 1200729.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10233.615 ops/s
[info] # Warmup Iteration   2: 32304.666 ops/s
[info] # Warmup Iteration   3: 34763.725 ops/s
[info] # Warmup Iteration   4: 34543.880 ops/s
[info] # Warmup Iteration   5: 34531.402 ops/s
[info] Iteration   1: 34951.345 ops/s
[info]                  ·gc.alloc.rate:                   1971.206 MB/sec
[info]                  ·gc.alloc.rate.norm:              88762.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90651.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 139.674 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 34648.932 ops/s
[info]                  ·gc.alloc.rate:                   1964.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              89244.999 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91319.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.605 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35277.332 ops/s
[info]                  ·gc.alloc.rate:                   2012.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              89787.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89424.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.929 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35267.359 ops/s
[info]                  ·gc.alloc.rate:                   1998.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              89207.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89479.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.645 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 35279.747 ops/s
[info]                  ·gc.alloc.rate:                   2025.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              90369.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89550.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   35084.943 ±(99.9%) 1082.627 ops/s [Average]
[info]   (min, avg, max) = (34648.932, 35084.943, 35279.747), stdev = 281.155
[info]   CI (99.9%): [34002.317, 36167.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1994.708 ±(99.9%) 101.326 MB/sec [Average]
[info]   (min, avg, max) = (1964.659, 1994.708, 2025.741), stdev = 26.314
[info]   CI (99.9%): [1893.382, 2096.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89474.196 ±(99.9%) 2381.651 B/op [Average]
[info]   (min, avg, max) = (88762.046, 89474.196, 90369.439), stdev = 618.507
[info]   CI (99.9%): [87092.546, 91855.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2008.157 ±(99.9%) 13.735 MB/sec [Average]
[info]   (min, avg, max) = (2004.833, 2008.157, 2013.155), stdev = 3.567
[info]   CI (99.9%): [1994.422, 2021.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   90085.146 ±(99.9%) 3297.771 B/op [Average]
[info]   (min, avg, max) = (89424.516, 90085.146, 91319.974), stdev = 856.421
[info]   CI (99.9%): [86787.375, 93382.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.845 ±(99.9%) 5.060 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.845, 3.102), stdev = 1.314
[info]   CI (99.9%): [≈ 0, 5.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   38.113 ±(99.9%) 227.911 B/op [Average]
[info]   (min, avg, max) = (0.929, 38.113, 139.674), stdev = 59.188
[info]   CI (99.9%): [≈ 0, 266.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24964.442 ops/s
[info] # Warmup Iteration   2: 115122.520 ops/s
[info] # Warmup Iteration   3: 127685.206 ops/s
[info] # Warmup Iteration   4: 130117.995 ops/s
[info] # Warmup Iteration   5: 130396.254 ops/s
[info] Iteration   1: 130312.474 ops/s
[info]                  ·gc.alloc.rate:               1665.184 MB/sec
[info]                  ·gc.alloc.rate.norm:          20111.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24289.130 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     10.000 ms
[info] Iteration   2: 131319.902 ops/s
[info]                  ·gc.alloc.rate:                   1673.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              20055.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16082.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 131290.928 ops/s
[info]                  ·gc.alloc.rate:                   1671.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              20040.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16070.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 130814.166 ops/s
[info]                  ·gc.alloc.rate:                   1705.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              20522.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24133.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.256 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 131474.951 ops/s
[info]                  ·gc.alloc.rate:               1675.197 MB/sec
[info]                  ·gc.alloc.rate.norm:          20044.543 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15996.741 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   131042.484 ±(99.9%) 1837.404 ops/s [Average]
[info]   (min, avg, max) = (130312.474, 131042.484, 131474.951), stdev = 477.168
[info]   CI (99.9%): [129205.080, 132879.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1678.361 ±(99.9%) 61.236 MB/sec [Average]
[info]   (min, avg, max) = (1665.184, 1678.361, 1705.976), stdev = 15.903
[info]   CI (99.9%): [1617.125, 1739.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20154.929 ±(99.9%) 798.353 B/op [Average]
[info]   (min, avg, max) = (20040.747, 20154.929, 20522.347), stdev = 207.330
[info]   CI (99.9%): [19356.576, 20953.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.378 ±(99.9%) 1410.483 MB/sec [Average]
[info]   (min, avg, max) = (1336.907, 1607.378, 2011.124), stdev = 366.298
[info]   CI (99.9%): [196.896, 3017.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19314.534 ±(99.9%) 17213.969 B/op [Average]
[info]   (min, avg, max) = (15996.741, 19314.534, 24289.130), stdev = 4470.413
[info]   CI (99.9%): [2100.565, 36528.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 5.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.269), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 6.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.633 ±(99.9%) 64.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.633, 39.170), stdev = 16.687
[info]   CI (99.9%): [≈ 0, 73.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 10.000), stdev = 3.162
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29438.114 ops/s
[info] # Warmup Iteration   2: 187666.891 ops/s
[info] # Warmup Iteration   3: 200594.599 ops/s
[info] # Warmup Iteration   4: 206368.195 ops/s
[info] # Warmup Iteration   5: 206409.022 ops/s
[info] Iteration   1: 204253.734 ops/s
[info]                  ·gc.alloc.rate:                   1219.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              9397.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5143.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 202237.050 ops/s
[info]                  ·gc.alloc.rate:               1233.088 MB/sec
[info]                  ·gc.alloc.rate.norm:          9596.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10391.154 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 203217.227 ops/s
[info]                  ·gc.alloc.rate:                   1233.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              9554.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10348.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 203351.684 ops/s
[info]                  ·gc.alloc.rate:                   1237.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              9572.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10352.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.546 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 206798.696 ops/s
[info]                  ·gc.alloc.rate:                   1257.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              9570.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10172.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   203971.678 ±(99.9%) 6678.983 ops/s [Average]
[info]   (min, avg, max) = (202237.050, 203971.678, 206798.696), stdev = 1734.511
[info]   CI (99.9%): [197292.696, 210650.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1236.265 ±(99.9%) 52.477 MB/sec [Average]
[info]   (min, avg, max) = (1219.609, 1236.265, 1257.462), stdev = 13.628
[info]   CI (99.9%): [1183.788, 1288.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9538.357 ±(99.9%) 308.069 B/op [Average]
[info]   (min, avg, max) = (9397.725, 9538.357, 9596.198), stdev = 80.005
[info]   CI (99.9%): [9230.288, 9846.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.774 ±(99.9%) 1152.311 MB/sec [Average]
[info]   (min, avg, max) = (667.459, 1202.774, 1337.980), stdev = 299.251
[info]   CI (99.9%): [50.463, 2355.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9281.773 ±(99.9%) 8914.714 B/op [Average]
[info]   (min, avg, max) = (5143.123, 9281.773, 10391.154), stdev = 2315.123
[info]   CI (99.9%): [367.058, 18196.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.841 ±(99.9%) 6.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.077), stdev = 1.809
[info]   CI (99.9%): [≈ 0, 7.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.508 ±(99.9%) 53.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.508, 31.546), stdev = 13.998
[info]   CI (99.9%): [≈ 0, 60.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119488.400 ops/s
[info] # Warmup Iteration   2: 224704.970 ops/s
[info] # Warmup Iteration   3: 242158.584 ops/s
[info] # Warmup Iteration   4: 242950.615 ops/s
[info] # Warmup Iteration   5: 244866.830 ops/s
[info] Iteration   1: 243038.974 ops/s
[info]                  ·gc.alloc.rate:                   1297.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              8401.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8704.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 235389.262 ops/s
[info]                  ·gc.alloc.rate:                   1254.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              8382.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8992.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 248793.604 ops/s
[info]                  ·gc.alloc.rate:                   1335.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              8449.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8512.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 248655.512 ops/s
[info]                  ·gc.alloc.rate:                   1347.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              8525.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8521.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 248740.093 ops/s
[info]                  ·gc.alloc.rate:                   1348.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              8531.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8505.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   244923.489 ±(99.9%) 22611.276 ops/s [Average]
[info]   (min, avg, max) = (235389.262, 244923.489, 248793.604), stdev = 5872.077
[info]   CI (99.9%): [222312.213, 267534.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1316.602 ±(99.9%) 156.228 MB/sec [Average]
[info]   (min, avg, max) = (1254.054, 1316.602, 1348.585), stdev = 40.572
[info]   CI (99.9%): [1160.373, 1472.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8458.125 ±(99.9%) 265.477 B/op [Average]
[info]   (min, avg, max) = (8382.346, 8458.125, 8531.568), stdev = 68.944
[info]   CI (99.9%): [8192.648, 8723.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345.236 ±(99.9%) 3.015 MB/sec [Average]
[info]   (min, avg, max) = (1344.445, 1345.236, 1346.303), stdev = 0.783
[info]   CI (99.9%): [1342.220, 1348.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8647.190 ±(99.9%) 809.139 B/op [Average]
[info]   (min, avg, max) = (8505.715, 8647.190, 8992.414), stdev = 210.131
[info]   CI (99.9%): [7838.052, 9456.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.629 ±(99.9%) 4.881 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.629, 2.894), stdev = 1.268
[info]   CI (99.9%): [≈ 0, 5.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.982 ±(99.9%) 30.888 B/op [Average]
[info]   (min, avg, max) = (0.132, 3.982, 18.315), stdev = 8.021
[info]   CI (99.9%): [≈ 0, 34.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5313.745 ops/s
[info] # Warmup Iteration   2: 59626.116 ops/s
[info] # Warmup Iteration   3: 68242.429 ops/s
[info] # Warmup Iteration   4: 69965.990 ops/s
[info] # Warmup Iteration   5: 69970.745 ops/s
[info] Iteration   1: 70344.108 ops/s
[info]                  ·gc.alloc.rate:                   2815.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              62991.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60062.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.397 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68796.381 ops/s
[info]                  ·gc.alloc.rate:                   2745.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61544.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 70255.934 ops/s
[info]                  ·gc.alloc.rate:               2842.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          63668.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60414.703 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 70020.328 ops/s
[info]                  ·gc.alloc.rate:               2833.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          63694.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60757.938 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 70357.783 ops/s
[info]                  ·gc.alloc.rate:               2847.374 MB/sec
[info]                  ·gc.alloc.rate.norm:          63693.348 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2708.252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60581.312 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   69954.907 ±(99.9%) 2547.592 ops/s [Average]
[info]   (min, avg, max) = (68796.381, 69954.907, 70357.783), stdev = 661.602
[info]   CI (99.9%): [67407.314, 72502.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2816.964 ±(99.9%) 160.786 MB/sec [Average]
[info]   (min, avg, max) = (2745.520, 2816.964, 2847.374), stdev = 41.756
[info]   CI (99.9%): [2656.178, 2977.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63369.582 ±(99.9%) 1685.389 B/op [Average]
[info]   (min, avg, max) = (62800.291, 63369.582, 63694.084), stdev = 437.690
[info]   CI (99.9%): [61684.193, 65054.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2696.792 ±(99.9%) 36.447 MB/sec [Average]
[info]   (min, avg, max) = (2684.591, 2696.792, 2708.252), stdev = 9.465
[info]   CI (99.9%): [2660.345, 2733.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60672.149 ±(99.9%) 2121.374 B/op [Average]
[info]   (min, avg, max) = (60062.557, 60672.149, 61544.235), stdev = 550.914
[info]   CI (99.9%): [58550.775, 62793.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.187), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.137 ±(99.9%) 7.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.137, 4.286), stdev = 1.862
[info]   CI (99.9%): [≈ 0, 8.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67819.926 ops/s
[info] # Warmup Iteration   2: 172067.739 ops/s
[info] # Warmup Iteration   3: 176126.681 ops/s
[info] # Warmup Iteration   4: 177735.881 ops/s
[info] # Warmup Iteration   5: 179691.950 ops/s
[info] Iteration   1: 180645.919 ops/s
[info]                  ·gc.alloc.rate:               1187.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          10343.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5841.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 179776.051 ops/s
[info]                  ·gc.alloc.rate:                   1197.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              10481.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11742.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 179802.351 ops/s
[info]                  ·gc.alloc.rate:               1194.928 MB/sec
[info]                  ·gc.alloc.rate.norm:          10458.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11749.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 179890.043 ops/s
[info]                  ·gc.alloc.rate:                   1206.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              10553.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11749.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.955 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 180993.229 ops/s
[info]                  ·gc.alloc.rate:                   1201.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              10440.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5838.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   180221.519 ±(99.9%) 2160.887 ops/s [Average]
[info]   (min, avg, max) = (179776.051, 180221.519, 180993.229), stdev = 561.176
[info]   CI (99.9%): [178060.632, 182382.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1197.433 ±(99.9%) 27.811 MB/sec [Average]
[info]   (min, avg, max) = (1187.200, 1197.433, 1206.562), stdev = 7.223
[info]   CI (99.9%): [1169.622, 1225.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10455.582 ±(99.9%) 293.191 B/op [Average]
[info]   (min, avg, max) = (10343.138, 10455.582, 10553.838), stdev = 76.141
[info]   CI (99.9%): [10162.391, 10748.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.859 ±(99.9%) 1415.605 MB/sec [Average]
[info]   (min, avg, max) = (670.519, 1073.859, 1343.244), stdev = 367.628
[info]   CI (99.9%): [≈ 0, 2489.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9384.492 ±(99.9%) 12458.319 B/op [Average]
[info]   (min, avg, max) = (5838.906, 9384.492, 11749.714), stdev = 3235.386
[info]   CI (99.9%): [≈ 0, 21842.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.082), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.043 ±(99.9%) 45.296 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.043, 26.955), stdev = 11.763
[info]   CI (99.9%): [≈ 0, 51.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.400, 6.000), stdev = 2.302
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291990.752 ops/s
[info] # Warmup Iteration   2: 595919.008 ops/s
[info] # Warmup Iteration   3: 697542.276 ops/s
[info] # Warmup Iteration   4: 710927.943 ops/s
[info] # Warmup Iteration   5: 715016.249 ops/s
[info] Iteration   1: 705520.385 ops/s
[info]                  ·gc.alloc.rate:               730.170 MB/sec
[info]                  ·gc.alloc.rate.norm:          1628.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1486.843 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 703589.169 ops/s
[info]                  ·gc.alloc.rate:               736.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          1646.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1492.386 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 704908.739 ops/s
[info]                  ·gc.alloc.rate:                   732.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1636.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1489.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 703997.115 ops/s
[info]                  ·gc.alloc.rate:               730.121 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1492.968 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 711785.438 ops/s
[info]                  ·gc.alloc.rate:               736.896 MB/sec
[info]                  ·gc.alloc.rate.norm:          1629.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1476.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   705960.169 ±(99.9%) 12873.467 ops/s [Average]
[info]   (min, avg, max) = (703589.169, 705960.169, 711785.438), stdev = 3343.198
[info]   CI (99.9%): [693086.703, 718833.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   733.232 ±(99.9%) 12.424 MB/sec [Average]
[info]   (min, avg, max) = (730.121, 733.232, 736.896), stdev = 3.227
[info]   CI (99.9%): [720.808, 745.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1634.520 ±(99.9%) 28.537 B/op [Average]
[info]   (min, avg, max) = (1628.140, 1634.520, 1646.593), stdev = 7.411
[info]   CI (99.9%): [1605.983, 1663.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.353 ±(99.9%) 1.663 MB/sec [Average]
[info]   (min, avg, max) = (666.803, 667.353, 667.792), stdev = 0.432
[info]   CI (99.9%): [665.690, 669.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1487.673 ±(99.9%) 25.594 B/op [Average]
[info]   (min, avg, max) = (1476.617, 1487.673, 1492.968), stdev = 6.647
[info]   CI (99.9%): [1462.079, 1513.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:17:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278553.528 ops/s
[info] # Warmup Iteration   2: 680775.660 ops/s
[info] # Warmup Iteration   3: 694539.377 ops/s
[info] # Warmup Iteration   4: 711132.516 ops/s
[info] # Warmup Iteration   5: 711836.926 ops/s
[info] Iteration   1: 715152.941 ops/s
[info]                  ·gc.alloc.rate:      548.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 710219.240 ops/s
[info]                  ·gc.alloc.rate:               567.907 MB/sec
[info]                  ·gc.alloc.rate.norm:          1258.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1485.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 693698.367 ops/s
[info]                  ·gc.alloc.rate:                   558.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              1266.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1520.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 713661.356 ops/s
[info]                  ·gc.alloc.rate:               570.067 MB/sec
[info]                  ·gc.alloc.rate.norm:          1256.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1479.342 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 702107.071 ops/s
[info]                  ·gc.alloc.rate:                   555.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1244.966 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   706967.795 ±(99.9%) 34552.778 ops/s [Average]
[info]   (min, avg, max) = (693698.367, 706967.795, 715152.941), stdev = 8973.247
[info]   CI (99.9%): [672415.017, 741520.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.116 ±(99.9%) 33.886 MB/sec [Average]
[info]   (min, avg, max) = (548.925, 560.116, 570.067), stdev = 8.800
[info]   CI (99.9%): [526.230, 594.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1246.827 ±(99.9%) 88.491 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1246.827, 1266.059), stdev = 22.981
[info]   CI (99.9%): [1158.336, 1335.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.506 ±(99.9%) 1154.871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.506, 671.063), stdev = 299.916
[info]   CI (99.9%): [≈ 0, 1691.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1197.707 ±(99.9%) 2578.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1197.707, 1520.416), stdev = 669.734
[info]   CI (99.9%): [≈ 0, 3776.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.047), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:17:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463109.186 ops/s
[info] # Warmup Iteration   2: 772852.447 ops/s
[info] # Warmup Iteration   3: 772887.811 ops/s
[info] # Warmup Iteration   4: 780907.117 ops/s
[info] # Warmup Iteration   5: 781485.952 ops/s
[info] Iteration   1: 781077.503 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 781164.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 781086.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 781516.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 778800.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   780729.111 ±(99.9%) 4208.342 ops/s [Average]
[info]   (min, avg, max) = (778800.631, 780729.111, 781516.550), stdev = 1092.893
[info]   CI (99.9%): [776520.769, 784937.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89030.875 ops/s
[info] # Warmup Iteration   2: 330648.421 ops/s
[info] # Warmup Iteration   3: 350261.610 ops/s
[info] # Warmup Iteration   4: 355054.855 ops/s
[info] # Warmup Iteration   5: 354534.207 ops/s
[info] Iteration   1: 355342.078 ops/s
[info]                  ·gc.alloc.rate:                   998.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              4419.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2940.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 354197.784 ops/s
[info]                  ·gc.alloc.rate:                   1009.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4485.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5911.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 355954.844 ops/s
[info]                  ·gc.alloc.rate:               1003.311 MB/sec
[info]                  ·gc.alloc.rate.norm:          4436.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2946.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 355815.995 ops/s
[info]                  ·gc.alloc.rate:               1005.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          4446.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5901.868 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 356048.365 ops/s
[info]                  ·gc.alloc.rate:               991.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          4381.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2952.014 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   355471.813 ±(99.9%) 2935.199 ops/s [Average]
[info]   (min, avg, max) = (354197.784, 355471.813, 356048.365), stdev = 762.262
[info]   CI (99.9%): [352536.614, 358407.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1001.551 ±(99.9%) 26.543 MB/sec [Average]
[info]   (min, avg, max) = (991.566, 1001.551, 1009.409), stdev = 6.893
[info]   CI (99.9%): [975.008, 1028.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4433.678 ±(99.9%) 146.629 B/op [Average]
[info]   (min, avg, max) = (4381.251, 4433.678, 4485.282), stdev = 38.079
[info]   CI (99.9%): [4287.050, 4580.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   932.652 ±(99.9%) 1404.811 MB/sec [Average]
[info]   (min, avg, max) = (664.091, 932.652, 1334.290), stdev = 364.825
[info]   CI (99.9%): [≈ 0, 2337.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4130.382 ±(99.9%) 6243.338 B/op [Average]
[info]   (min, avg, max) = (2940.051, 4130.382, 5911.131), stdev = 1621.375
[info]   CI (99.9%): [≈ 0, 10373.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:16:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1936.103 ops/s
[info] # Warmup Iteration   2: 10433.646 ops/s
[info] # Warmup Iteration   3: 11258.434 ops/s
[info] # Warmup Iteration   4: 11414.477 ops/s
[info] # Warmup Iteration   5: 11342.111 ops/s
[info] Iteration   1: 11256.069 ops/s
[info]                  ·gc.alloc.rate:               1417.693 MB/sec
[info]                  ·gc.alloc.rate.norm:          198214.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187678.152 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 11305.007 ops/s
[info]                  ·gc.alloc.rate:                   1405.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              195733.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186957.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 11323.068 ops/s
[info]                  ·gc.alloc.rate:                   1408.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              195774.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186690.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11360.997 ops/s
[info]                  ·gc.alloc.rate:                   1412.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              195677.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185881.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11293.739 ops/s
[info]                  ·gc.alloc.rate:                   1443.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              201112.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186582.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.901 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11307.776 ±(99.9%) 148.445 ops/s [Average]
[info]   (min, avg, max) = (11256.069, 11307.776, 11360.997), stdev = 38.551
[info]   CI (99.9%): [11159.331, 11456.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1417.602 ±(99.9%) 57.675 MB/sec [Average]
[info]   (min, avg, max) = (1405.990, 1417.602, 1443.199), stdev = 14.978
[info]   CI (99.9%): [1359.927, 1475.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   197302.530 ±(99.9%) 9189.819 B/op [Average]
[info]   (min, avg, max) = (195677.080, 197302.530, 201112.183), stdev = 2386.567
[info]   CI (99.9%): [188112.711, 206492.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1341.853 ±(99.9%) 6.587 MB/sec [Average]
[info]   (min, avg, max) = (1338.934, 1341.853, 1343.178), stdev = 1.711
[info]   CI (99.9%): [1335.266, 1348.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   186758.004 ±(99.9%) 2503.106 B/op [Average]
[info]   (min, avg, max) = (185881.411, 186758.004, 187678.152), stdev = 650.049
[info]   CI (99.9%): [184254.898, 189261.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 5.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.435), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   110.475 ±(99.9%) 797.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.475, 477.372), stdev = 207.163
[info]   CI (99.9%): [≈ 0, 908.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:16:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1665.305 ops/s
[info] # Warmup Iteration   2: 8975.694 ops/s
[info] # Warmup Iteration   3: 10663.562 ops/s
[info] # Warmup Iteration   4: 10687.326 ops/s
[info] # Warmup Iteration   5: 10475.430 ops/s
[info] Iteration   1: 10605.736 ops/s
[info]                  ·gc.alloc.rate:                   1220.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              181161.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99243.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10628.363 ops/s
[info]                  ·gc.alloc.rate:                   1238.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              183376.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198124.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.248 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 10572.313 ops/s
[info]                  ·gc.alloc.rate:               1236.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          184107.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199254.229 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10620.902 ops/s
[info]                  ·gc.alloc.rate:                   1243.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              184287.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198501.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 553.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 10753.483 ops/s
[info]                  ·gc.alloc.rate:                   1245.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              182276.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195852.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   10636.159 ±(99.9%) 265.807 ops/s [Average]
[info]   (min, avg, max) = (10572.313, 10636.159, 10753.483), stdev = 69.029
[info]   CI (99.9%): [10370.352, 10901.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1237.102 ±(99.9%) 37.657 MB/sec [Average]
[info]   (min, avg, max) = (1220.840, 1237.102, 1245.682), stdev = 9.779
[info]   CI (99.9%): [1199.445, 1274.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   183041.679 ±(99.9%) 5065.092 B/op [Average]
[info]   (min, avg, max) = (181161.410, 183041.679, 184287.065), stdev = 1315.388
[info]   CI (99.9%): [177976.587, 188106.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1204.708 ±(99.9%) 1153.595 MB/sec [Average]
[info]   (min, avg, max) = (668.795, 1204.708, 1339.528), stdev = 299.585
[info]   CI (99.9%): [51.113, 2358.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   178195.270 ±(99.9%) 170020.761 B/op [Average]
[info]   (min, avg, max) = (99243.053, 178195.270, 199254.229), stdev = 44153.852
[info]   CI (99.9%): [8174.509, 348216.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.909 ±(99.9%) 6.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.909, 3.733), stdev = 1.608
[info]   CI (99.9%): [≈ 0, 7.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134.421 ±(99.9%) 917.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.421, 553.142), stdev = 238.267
[info]   CI (99.9%): [≈ 0, 1051.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127033.590 ops/s
[info] # Warmup Iteration   2: 273413.739 ops/s
[info] # Warmup Iteration   3: 278056.057 ops/s
[info] # Warmup Iteration   4: 278478.830 ops/s
[info] # Warmup Iteration   5: 260115.981 ops/s
[info] Iteration   1: 279977.073 ops/s
[info]                  ·gc.alloc.rate:                   1869.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              10510.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11348.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.511 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 276751.273 ops/s
[info]                  ·gc.alloc.rate:                   1829.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              10399.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7650.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.723 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 280759.351 ops/s
[info]                  ·gc.alloc.rate:                   1894.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              10617.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11296.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 281445.886 ops/s
[info]                  ·gc.alloc.rate:                   1884.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              10535.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11257.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 281461.278 ops/s
[info]                  ·gc.alloc.rate:                   1885.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              10538.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11267.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   280078.972 ±(99.9%) 7537.359 ops/s [Average]
[info]   (min, avg, max) = (276751.273, 280078.972, 281461.278), stdev = 1957.428
[info]   CI (99.9%): [272541.613, 287616.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1872.455 ±(99.9%) 99.130 MB/sec [Average]
[info]   (min, avg, max) = (1829.134, 1872.455, 1894.191), stdev = 25.744
[info]   CI (99.9%): [1773.325, 1971.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10520.483 ±(99.9%) 303.137 B/op [Average]
[info]   (min, avg, max) = (10399.487, 10520.483, 10617.831), stdev = 78.724
[info]   CI (99.9%): [10217.346, 10823.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1881.659 ±(99.9%) 1153.902 MB/sec [Average]
[info]   (min, avg, max) = (1345.615, 1881.659, 2018.821), stdev = 299.665
[info]   CI (99.9%): [727.757, 3035.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10564.073 ±(99.9%) 6273.249 B/op [Average]
[info]   (min, avg, max) = (7650.452, 10564.073, 11348.193), stdev = 1629.143
[info]   CI (99.9%): [4290.823, 16837.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.687 ±(99.9%) 4.139 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.687, 2.581), stdev = 1.075
[info]   CI (99.9%): [≈ 0, 4.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.866 ±(99.9%) 23.265 B/op [Average]
[info]   (min, avg, max) = (0.233, 3.866, 14.511), stdev = 6.042
[info]   CI (99.9%): [≈ 0, 27.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 1.924
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901.230 ops/s
[info] # Warmup Iteration   2: 6416.798 ops/s
[info] # Warmup Iteration   3: 7583.930 ops/s
[info] # Warmup Iteration   4: 7625.047 ops/s
[info] # Warmup Iteration   5: 7647.745 ops/s
[info] Iteration   1: 7630.015 ops/s
[info]                  ·gc.alloc.rate:                   1373.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              283263.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275333.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.294 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 7659.059 ops/s
[info]                  ·gc.alloc.rate:                   1367.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              280967.314 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274565.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7670.800 ops/s
[info]                  ·gc.alloc.rate:                   1367.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              280462.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274272.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7688.668 ops/s
[info]                  ·gc.alloc.rate:                   1382.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              282984.930 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     273802.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7714.025 ops/s
[info]                  ·gc.alloc.rate:                   1397.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              284926.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272099.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7672.513 ±(99.9%) 121.375 ops/s [Average]
[info]   (min, avg, max) = (7630.015, 7672.513, 7714.025), stdev = 31.521
[info]   CI (99.9%): [7551.138, 7793.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1377.466 ±(99.9%) 48.473 MB/sec [Average]
[info]   (min, avg, max) = (1367.082, 1377.466, 1397.025), stdev = 12.588
[info]   CI (99.9%): [1328.993, 1425.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282520.908 ±(99.9%) 6995.374 B/op [Average]
[info]   (min, avg, max) = (280462.824, 282520.908, 284926.212), stdev = 1816.676
[info]   CI (99.9%): [275525.533, 289516.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1335.960 ±(99.9%) 5.538 MB/sec [Average]
[info]   (min, avg, max) = (1334.135, 1335.960, 1337.628), stdev = 1.438
[info]   CI (99.9%): [1330.422, 1341.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   274014.654 ±(99.9%) 4645.284 B/op [Average]
[info]   (min, avg, max) = (272099.696, 274014.654, 275333.635), stdev = 1206.365
[info]   CI (99.9%): [269369.370, 278659.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.945 ±(99.9%) 7.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.945, 4.268), stdev = 1.864
[info]   CI (99.9%): [≈ 0, 8.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   193.414 ±(99.9%) 1469.534 B/op [Average]
[info]   (min, avg, max) = (4.271, 193.414, 873.529), stdev = 381.633
[info]   CI (99.9%): [≈ 0, 1662.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8793.613 ops/s
[info] # Warmup Iteration   2: 24000.838 ops/s
[info] # Warmup Iteration   3: 24797.209 ops/s
[info] # Warmup Iteration   4: 25818.292 ops/s
[info] # Warmup Iteration   5: 25736.196 ops/s
[info] Iteration   1: 25031.564 ops/s
[info]                  ·gc.alloc.rate:               1305.977 MB/sec
[info]                  ·gc.alloc.rate.norm:          82101.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42134.025 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 25516.722 ops/s
[info]                  ·gc.alloc.rate:                   1333.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              82243.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82745.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25733.242 ops/s
[info]                  ·gc.alloc.rate:                   1342.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              82099.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82095.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.273 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 25965.710 ops/s
[info]                  ·gc.alloc.rate:                   1379.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              83628.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81398.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.594 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 26101.393 ops/s
[info]                  ·gc.alloc.rate:                   1373.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              82807.442 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80814.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.766 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   25669.726 ±(99.9%) 1620.749 ops/s [Average]
[info]   (min, avg, max) = (25031.564, 25669.726, 26101.393), stdev = 420.903
[info]   CI (99.9%): [24048.978, 27290.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1346.950 ±(99.9%) 116.371 MB/sec [Average]
[info]   (min, avg, max) = (1305.977, 1346.950, 1379.699), stdev = 30.221
[info]   CI (99.9%): [1230.579, 1463.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   82575.893 ±(99.9%) 2527.824 B/op [Average]
[info]   (min, avg, max) = (82099.029, 82575.893, 83628.084), stdev = 656.468
[info]   CI (99.9%): [80048.069, 85103.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.447 ±(99.9%) 1156.422 MB/sec [Average]
[info]   (min, avg, max) = (670.222, 1207.447, 1342.922), stdev = 300.319
[info]   CI (99.9%): [51.025, 2363.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   73837.543 ±(99.9%) 68301.452 B/op [Average]
[info]   (min, avg, max) = (42134.025, 73837.543, 82745.555), stdev = 17737.670
[info]   CI (99.9%): [5536.090, 142138.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.705), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   46.183 ±(99.9%) 384.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.183, 224.594), stdev = 99.744
[info]   CI (99.9%): [≈ 0, 430.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 2.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10552.231 ops/s
[info] # Warmup Iteration   2: 30009.572 ops/s
[info] # Warmup Iteration   3: 30276.070 ops/s
[info] # Warmup Iteration   4: 30922.097 ops/s
[info] # Warmup Iteration   5: 30928.682 ops/s
[info] Iteration   1: 30986.543 ops/s
[info]                  ·gc.alloc.rate:               1287.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          65382.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67972.031 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 30919.682 ops/s
[info]                  ·gc.alloc.rate:                   1280.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              65186.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68153.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 31078.107 ops/s
[info]                  ·gc.alloc.rate:                   1294.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              65564.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67874.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30736.793 ops/s
[info]                  ·gc.alloc.rate:                   1295.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              66346.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68658.995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30907.378 ops/s
[info]                  ·gc.alloc.rate:                   1290.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              65670.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68109.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30925.701 ±(99.9%) 483.203 ops/s [Average]
[info]   (min, avg, max) = (30736.793, 30925.701, 31078.107), stdev = 125.486
[info]   CI (99.9%): [30442.497, 31408.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1289.758 ±(99.9%) 23.455 MB/sec [Average]
[info]   (min, avg, max) = (1280.675, 1289.758, 1295.788), stdev = 6.091
[info]   CI (99.9%): [1266.303, 1313.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   65630.116 ±(99.9%) 1698.430 B/op [Average]
[info]   (min, avg, max) = (65186.239, 65630.116, 66346.904), stdev = 441.077
[info]   CI (99.9%): [63931.686, 67328.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.351 ±(99.9%) 4.684 MB/sec [Average]
[info]   (min, avg, max) = (1338.086, 1339.351, 1340.944), stdev = 1.216
[info]   CI (99.9%): [1334.668, 1344.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68153.616 ±(99.9%) 1168.545 B/op [Average]
[info]   (min, avg, max) = (67874.237, 68153.616, 68658.995), stdev = 303.468
[info]   CI (99.9%): [66985.070, 69322.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.681 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.895), stdev = 1.735
[info]   CI (99.9%): [≈ 0, 7.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40.521 ±(99.9%) 342.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.521, 199.430), stdev = 88.834
[info]   CI (99.9%): [≈ 0, 382.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209212.347 ops/s
[info] # Warmup Iteration   2: 612295.860 ops/s
[info] # Warmup Iteration   3: 632638.901 ops/s
[info] # Warmup Iteration   4: 633535.701 ops/s
[info] # Warmup Iteration   5: 638425.721 ops/s
[info] Iteration   1: 636716.807 ops/s
[info]                  ·gc.alloc.rate:                   1184.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              2927.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3318.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 638502.565 ops/s
[info]                  ·gc.alloc.rate:                   1193.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              2941.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3311.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 634788.815 ops/s
[info]                  ·gc.alloc.rate:                   1183.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              2933.821 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3332.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 628887.093 ops/s
[info]                  ·gc.alloc.rate:               1162.095 MB/sec
[info]                  ·gc.alloc.rate.norm:          2907.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1682.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 638000.963 ops/s
[info]                  ·gc.alloc.rate:                   1202.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              2965.451 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3319.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   635379.248 ±(99.9%) 15026.673 ops/s [Average]
[info]   (min, avg, max) = (628887.093, 635379.248, 638502.565), stdev = 3902.379
[info]   CI (99.9%): [620352.575, 650405.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1185.205 ±(99.9%) 57.923 MB/sec [Average]
[info]   (min, avg, max) = (1162.095, 1185.205, 1202.607), stdev = 15.042
[info]   CI (99.9%): [1127.282, 1243.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2934.969 ±(99.9%) 81.847 B/op [Average]
[info]   (min, avg, max) = (2907.157, 2934.969, 2965.451), stdev = 21.256
[info]   CI (99.9%): [2853.122, 3016.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.929 ±(99.9%) 1157.121 MB/sec [Average]
[info]   (min, avg, max) = (672.382, 1209.929, 1346.164), stdev = 300.501
[info]   CI (99.9%): [52.808, 2367.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2992.988 ±(99.9%) 2822.015 B/op [Average]
[info]   (min, avg, max) = (1682.064, 2992.988, 3332.887), stdev = 732.868
[info]   CI (99.9%): [170.973, 5815.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.676 ±(99.9%) 5.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.676, 3.297), stdev = 1.465
[info]   CI (99.9%): [≈ 0, 6.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.667 ±(99.9%) 13.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.667, 8.130), stdev = 3.613
[info]   CI (99.9%): [≈ 0, 15.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416961.739 ops/s
[info] # Warmup Iteration   2: 764226.417 ops/s
[info] # Warmup Iteration   3: 786683.301 ops/s
[info] # Warmup Iteration   4: 786409.630 ops/s
[info] # Warmup Iteration   5: 786584.558 ops/s
[info] Iteration   1: 786655.571 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 786624.789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 786165.991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 786611.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 786624.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   786536.541 ±(99.9%) 800.050 ops/s [Average]
[info]   (min, avg, max) = (786165.991, 786536.541, 786655.571), stdev = 207.770
[info]   CI (99.9%): [785736.491, 787336.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10436.056 ops/s
[info] # Warmup Iteration   2: 27481.976 ops/s
[info] # Warmup Iteration   3: 29861.429 ops/s
[info] # Warmup Iteration   4: 29982.364 ops/s
[info] # Warmup Iteration   5: 29664.453 ops/s
[info] Iteration   1: 30107.977 ops/s
[info]                  ·gc.alloc.rate:                   1360.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              71124.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70021.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30193.792 ops/s
[info]                  ·gc.alloc.rate:                   1372.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              71542.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69876.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 30218.678 ops/s
[info]                  ·gc.alloc.rate:                   1373.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              71534.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69855.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30197.388 ops/s
[info]                  ·gc.alloc.rate:                   1372.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              71504.778 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69817.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 30183.927 ops/s
[info]                  ·gc.alloc.rate:                   1372.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              71562.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69712.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   30180.352 ±(99.9%) 163.263 ops/s [Average]
[info]   (min, avg, max) = (30107.977, 30180.352, 30218.678), stdev = 42.399
[info]   CI (99.9%): [30017.089, 30343.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1370.511 ±(99.9%) 21.342 MB/sec [Average]
[info]   (min, avg, max) = (1360.620, 1370.511, 1373.544), stdev = 5.542
[info]   CI (99.9%): [1349.169, 1391.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   71453.569 ±(99.9%) 713.690 B/op [Average]
[info]   (min, avg, max) = (71124.090, 71453.569, 71562.372), stdev = 185.343
[info]   CI (99.9%): [70739.879, 72167.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1339.873 ±(99.9%) 5.754 MB/sec [Average]
[info]   (min, avg, max) = (1337.514, 1339.873, 1341.306), stdev = 1.494
[info]   CI (99.9%): [1334.119, 1345.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69856.517 ±(99.9%) 429.098 B/op [Average]
[info]   (min, avg, max) = (69712.867, 69856.517, 70021.130), stdev = 111.435
[info]   CI (99.9%): [69427.419, 70285.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 5.404 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.829, 3.268), stdev = 1.403
[info]   CI (99.9%): [≈ 0, 6.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   43.158 ±(99.9%) 281.433 B/op [Average]
[info]   (min, avg, max) = (1.085, 43.158, 170.215), stdev = 73.087
[info]   CI (99.9%): [≈ 0, 324.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:14:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4213.252 ops/s
[info] # Warmup Iteration   2: 30343.305 ops/s
[info] # Warmup Iteration   3: 34081.644 ops/s
[info] # Warmup Iteration   4: 33239.068 ops/s
[info] # Warmup Iteration   5: 33950.972 ops/s
[info] Iteration   1: 34371.367 ops/s
[info]                  ·gc.alloc.rate:                   1815.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              83117.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92236.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.860 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 34634.723 ops/s
[info]                  ·gc.alloc.rate:                   1821.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              82749.828 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61084.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34409.104 ops/s
[info]                  ·gc.alloc.rate:                   1836.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              83963.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91893.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.856 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34765.488 ops/s
[info]                  ·gc.alloc.rate:                   1827.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              82736.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60554.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34713.414 ops/s
[info]                  ·gc.alloc.rate:                   1838.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              83347.769 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90970.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.663 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   34578.819 ±(99.9%) 688.625 ops/s [Average]
[info]   (min, avg, max) = (34371.367, 34578.819, 34765.488), stdev = 178.834
[info]   CI (99.9%): [33890.194, 35267.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1827.775 ±(99.9%) 37.822 MB/sec [Average]
[info]   (min, avg, max) = (1815.209, 1827.775, 1838.224), stdev = 9.822
[info]   CI (99.9%): [1789.953, 1865.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83182.903 ±(99.9%) 1952.032 B/op [Average]
[info]   (min, avg, max) = (82736.325, 83182.903, 83963.564), stdev = 506.936
[info]   CI (99.9%): [81230.872, 85134.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1742.551 ±(99.9%) 1411.435 MB/sec [Average]
[info]   (min, avg, max) = (1337.652, 1742.551, 2014.363), stdev = 366.545
[info]   CI (99.9%): [331.115, 3153.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79347.745 ±(99.9%) 65157.857 B/op [Average]
[info]   (min, avg, max) = (60554.503, 79347.745, 92236.134), stdev = 16921.289
[info]   CI (99.9%): [14189.888, 144505.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.833 ±(99.9%) 6.589 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.833, 3.893), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 7.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37.842 ±(99.9%) 299.379 B/op [Average]
[info]   (min, avg, max) = (0.942, 37.842, 176.889), stdev = 77.748
[info]   CI (99.9%): [≈ 0, 337.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4842.956 ops/s
[info] # Warmup Iteration   2: 28685.237 ops/s
[info] # Warmup Iteration   3: 32705.630 ops/s
[info] # Warmup Iteration   4: 33307.087 ops/s
[info] # Warmup Iteration   5: 32238.861 ops/s
[info] Iteration   1: 33537.521 ops/s
[info]                  ·gc.alloc.rate:                   1474.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              69203.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62775.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32604.549 ops/s
[info]                  ·gc.alloc.rate:                   1430.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              69044.598 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64617.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 33584.333 ops/s
[info]                  ·gc.alloc.rate:                   1485.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              69607.523 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62777.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 33631.965 ops/s
[info]                  ·gc.alloc.rate:                   1486.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              69560.080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62627.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 33461.526 ops/s
[info]                  ·gc.alloc.rate:                   1517.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              71384.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94148.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.979 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   33363.979 ±(99.9%) 1652.572 ops/s [Average]
[info]   (min, avg, max) = (32604.549, 33363.979, 33631.965), stdev = 429.168
[info]   CI (99.9%): [31711.407, 35016.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1478.937 ±(99.9%) 121.181 MB/sec [Average]
[info]   (min, avg, max) = (1430.522, 1478.937, 1517.693), stdev = 31.470
[info]   CI (99.9%): [1357.756, 1600.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   69760.025 ±(99.9%) 3614.917 B/op [Average]
[info]   (min, avg, max) = (69044.598, 69760.025, 71384.834), stdev = 938.783
[info]   CI (99.9%): [66145.108, 73374.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1471.212 ±(99.9%) 1141.856 MB/sec [Average]
[info]   (min, avg, max) = (1337.705, 1471.212, 2001.671), stdev = 296.536
[info]   CI (99.9%): [329.356, 2613.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   69389.157 ±(99.9%) 53390.626 B/op [Average]
[info]   (min, avg, max) = (62627.142, 69389.157, 94148.765), stdev = 13865.376
[info]   CI (99.9%): [15998.531, 122779.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.879 ±(99.9%) 5.974 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.879, 3.604), stdev = 1.551
[info]   CI (99.9%): [≈ 0, 6.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41.186 ±(99.9%) 279.923 B/op [Average]
[info]   (min, avg, max) = (0.979, 41.186, 168.869), stdev = 72.695
[info]   CI (99.9%): [≈ 0, 321.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:13:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238993.976 ops/s
[info] # Warmup Iteration   2: 434031.238 ops/s
[info] # Warmup Iteration   3: 430457.261 ops/s
[info] # Warmup Iteration   4: 425143.323 ops/s
[info] # Warmup Iteration   5: 456591.777 ops/s
[info] Iteration   1: 467892.994 ops/s
[info]                  ·gc.alloc.rate:               1250.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          4205.124 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4523.964 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 473293.763 ops/s
[info]                  ·gc.alloc.rate:               1258.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          4184.288 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2237.309 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 471101.608 ops/s
[info]                  ·gc.alloc.rate:                   1254.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              4190.462 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4497.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 471314.520 ops/s
[info]                  ·gc.alloc.rate:                   1254.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              4188.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4497.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 473047.964 ops/s
[info]                  ·gc.alloc.rate:                   1271.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              4229.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4476.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   471330.170 ±(99.9%) 8319.792 ops/s [Average]
[info]   (min, avg, max) = (467892.994, 471330.170, 473293.763), stdev = 2160.624
[info]   CI (99.9%): [463010.378, 479649.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1257.728 ±(99.9%) 31.067 MB/sec [Average]
[info]   (min, avg, max) = (1250.172, 1257.728, 1271.210), stdev = 8.068
[info]   CI (99.9%): [1226.662, 1288.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4199.480 ±(99.9%) 71.303 B/op [Average]
[info]   (min, avg, max) = (4184.288, 4199.480, 4229.441), stdev = 18.517
[info]   CI (99.9%): [4128.177, 4270.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1211.405 ±(99.9%) 1159.378 MB/sec [Average]
[info]   (min, avg, max) = (672.807, 1211.405, 1347.390), stdev = 301.087
[info]   CI (99.9%): [52.027, 2370.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4046.714 ±(99.9%) 3895.410 B/op [Average]
[info]   (min, avg, max) = (2237.309, 4046.714, 4523.964), stdev = 1011.626
[info]   CI (99.9%): [151.304, 7942.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.541), stdev = 1.101
[info]   CI (99.9%): [≈ 0, 4.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.973 ±(99.9%) 14.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.973, 8.481), stdev = 3.675
[info]   CI (99.9%): [≈ 0, 16.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:13:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1275.317 ops/s
[info] # Warmup Iteration   2: 14660.343 ops/s
[info] # Warmup Iteration   3: 18484.019 ops/s
[info] # Warmup Iteration   4: 18873.811 ops/s
[info] # Warmup Iteration   5: 18577.533 ops/s
[info] Iteration   1: 18736.242 ops/s
[info]                  ·gc.alloc.rate:               1922.033 MB/sec
[info]                  ·gc.alloc.rate.norm:          161380.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 168561.110 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   2: 18599.957 ops/s
[info]                  ·gc.alloc.rate:                   1906.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              161301.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169774.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 18782.439 ops/s
[info]                  ·gc.alloc.rate:                   1924.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              161248.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111745.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18889.692 ops/s
[info]                  ·gc.alloc.rate:                   1910.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              159178.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166502.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18918.510 ops/s
[info]                  ·gc.alloc.rate:               1940.178 MB/sec
[info]                  ·gc.alloc.rate.norm:          161361.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166376.866 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18785.368 ±(99.9%) 492.407 ops/s [Average]
[info]   (min, avg, max) = (18599.957, 18785.368, 18918.510), stdev = 127.877
[info]   CI (99.9%): [18292.961, 19277.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1920.652 ±(99.9%) 51.160 MB/sec [Average]
[info]   (min, avg, max) = (1906.266, 1920.652, 1940.178), stdev = 13.286
[info]   CI (99.9%): [1869.491, 1971.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160893.903 ±(99.9%) 3698.635 B/op [Average]
[info]   (min, avg, max) = (159178.180, 160893.903, 161380.344), stdev = 960.524
[info]   CI (99.9%): [157195.268, 164592.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1869.276 ±(99.9%) 1153.341 MB/sec [Average]
[info]   (min, avg, max) = (1333.524, 1869.276, 2007.556), stdev = 299.519
[info]   CI (99.9%): [715.935, 3022.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   156591.992 ±(99.9%) 96692.709 B/op [Average]
[info]   (min, avg, max) = (111745.404, 156591.992, 169774.279), stdev = 25110.789
[info]   CI (99.9%): [59899.283, 253284.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.924 ±(99.9%) 7.869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.580), stdev = 2.043
[info]   CI (99.9%): [≈ 0, 8.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   78.199 ±(99.9%) 665.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.199, 387.516), stdev = 172.916
[info]   CI (99.9%): [≈ 0, 744.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 11.000), stdev = 3.347
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:13:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16761.435 ops/s
[info] # Warmup Iteration   2: 52524.578 ops/s
[info] # Warmup Iteration   3: 55032.747 ops/s
[info] # Warmup Iteration   4: 56151.121 ops/s
[info] # Warmup Iteration   5: 56219.714 ops/s
[info] Iteration   1: 57372.344 ops/s
[info]                  ·gc.alloc.rate:               1749.138 MB/sec
[info]                  ·gc.alloc.rate.norm:          47983.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36829.809 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 57350.104 ops/s
[info]                  ·gc.alloc.rate:                   1762.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              48360.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55298.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.830 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 57631.674 ops/s
[info]                  ·gc.alloc.rate:                   1757.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              47980.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36601.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57612.674 ops/s
[info]                  ·gc.alloc.rate:                   1781.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              48654.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54847.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.569 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 57647.969 ops/s
[info]                  ·gc.alloc.rate:               1783.987 MB/sec
[info]                  ·gc.alloc.rate.norm:          48696.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54795.766 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   57522.953 ±(99.9%) 571.333 ops/s [Average]
[info]   (min, avg, max) = (57350.104, 57522.953, 57647.969), stdev = 148.373
[info]   CI (99.9%): [56951.620, 58094.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1766.709 ±(99.9%) 58.548 MB/sec [Average]
[info]   (min, avg, max) = (1749.138, 1766.709, 1783.987), stdev = 15.205
[info]   CI (99.9%): [1708.161, 1825.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48335.057 ±(99.9%) 1336.959 B/op [Average]
[info]   (min, avg, max) = (47980.291, 48335.057, 48696.209), stdev = 347.204
[info]   CI (99.9%): [46998.098, 49672.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.649 ±(99.9%) 1410.219 MB/sec [Average]
[info]   (min, avg, max) = (1340.416, 1742.649, 2015.098), stdev = 366.229
[info]   CI (99.9%): [332.429, 3152.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   47674.721 ±(99.9%) 38530.537 B/op [Average]
[info]   (min, avg, max) = (36601.924, 47674.721, 55298.856), stdev = 10006.258
[info]   CI (99.9%): [9144.184, 86205.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.135 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.601), stdev = 1.593
[info]   CI (99.9%): [≈ 0, 6.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.676 ±(99.9%) 168.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.676, 98.830), stdev = 43.721
[info]   CI (99.9%): [≈ 0, 189.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53219.722 ops/s
[info] # Warmup Iteration   2: 152986.561 ops/s
[info] # Warmup Iteration   3: 155674.489 ops/s
[info] # Warmup Iteration   4: 159932.228 ops/s
[info] # Warmup Iteration   5: 158837.785 ops/s
[info] Iteration   1: 159246.286 ops/s
[info]                  ·gc.alloc.rate:                   1919.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              18974.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19872.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.883 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 160400.543 ops/s
[info]                  ·gc.alloc.rate:                   1931.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              18947.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19703.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 158396.556 ops/s
[info]                  ·gc.alloc.rate:                   1924.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              19120.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19917.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 160653.504 ops/s
[info]                  ·gc.alloc.rate:               1935.299 MB/sec
[info]                  ·gc.alloc.rate.norm:          18959.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13090.478 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 159719.005 ops/s
[info]                  ·gc.alloc.rate:               1953.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          19243.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19771.201 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   159683.179 ±(99.9%) 3499.480 ops/s [Average]
[info]   (min, avg, max) = (158396.556, 159683.179, 160653.504), stdev = 908.804
[info]   CI (99.9%): [156183.698, 163182.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1932.764 ±(99.9%) 49.848 MB/sec [Average]
[info]   (min, avg, max) = (1919.791, 1932.764, 1953.296), stdev = 12.945
[info]   CI (99.9%): [1882.916, 1982.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19049.026 ±(99.9%) 497.590 B/op [Average]
[info]   (min, avg, max) = (18947.650, 19049.026, 19243.346), stdev = 129.222
[info]   CI (99.9%): [18551.436, 19546.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1873.303 ±(99.9%) 1156.088 MB/sec [Average]
[info]   (min, avg, max) = (1336.245, 1873.303, 2010.694), stdev = 300.232
[info]   CI (99.9%): [717.215, 3029.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18471.168 ±(99.9%) 11586.853 B/op [Average]
[info]   (min, avg, max) = (13090.478, 18471.168, 19917.589), stdev = 3009.069
[info]   CI (99.9%): [6884.315, 30058.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.775 ±(99.9%) 5.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.775, 3.125), stdev = 1.350
[info]   CI (99.9%): [≈ 0, 5.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.648 ±(99.9%) 51.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.648, 30.883), stdev = 13.346
[info]   CI (99.9%): [≈ 0, 59.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 10.000), stdev = 3.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:12:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556199.975 ops/s
[info] # Warmup Iteration   2: 1100061.424 ops/s
[info] # Warmup Iteration   3: 1169729.896 ops/s
[info] # Warmup Iteration   4: 1177766.751 ops/s
[info] # Warmup Iteration   5: 1155879.329 ops/s
[info] Iteration   1: 1193504.574 ops/s
[info]                  ·gc.alloc.rate:                   1311.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1729.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1771.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1195008.266 ops/s
[info]                  ·gc.alloc.rate:                   1309.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1725.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1770.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1182251.255 ops/s
[info]                  ·gc.alloc.rate:               1309.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          1741.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1791.339 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1176366.350 ops/s
[info]                  ·gc.alloc.rate:                   1313.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1757.496 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1800.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1181803.115 ops/s
[info]                  ·gc.alloc.rate:                   1306.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1740.319 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1788.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.083 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1185786.712 ±(99.9%) 31147.055 ops/s [Average]
[info]   (min, avg, max) = (1176366.350, 1185786.712, 1195008.266), stdev = 8088.791
[info]   CI (99.9%): [1154639.657, 1216933.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1310.211 ±(99.9%) 10.110 MB/sec [Average]
[info]   (min, avg, max) = (1306.759, 1310.211, 1313.603), stdev = 2.625
[info]   CI (99.9%): [1300.101, 1320.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1738.968 ±(99.9%) 48.211 B/op [Average]
[info]   (min, avg, max) = (1725.152, 1738.968, 1757.496), stdev = 12.520
[info]   CI (99.9%): [1690.757, 1787.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.499 ±(99.9%) 5.155 MB/sec [Average]
[info]   (min, avg, max) = (1342.951, 1344.499, 1346.109), stdev = 1.339
[info]   CI (99.9%): [1339.344, 1349.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1784.479 ±(99.9%) 49.929 B/op [Average]
[info]   (min, avg, max) = (1770.462, 1784.479, 1800.317), stdev = 12.966
[info]   CI (99.9%): [1734.550, 1834.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.668 ±(99.9%) 5.567 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.254), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.894 ±(99.9%) 7.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.894, 4.354), stdev = 1.934
[info]   CI (99.9%): [≈ 0, 8.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 6.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:12:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 522456.713 ops/s
[info] # Warmup Iteration   2: 1355426.224 ops/s
[info] # Warmup Iteration   3: 1381346.946 ops/s
[info] # Warmup Iteration   4: 1383344.061 ops/s
[info] # Warmup Iteration   5: 1384451.457 ops/s
[info] Iteration   1: 1385078.924 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1383956.733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1385111.025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1388702.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1388267.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1386223.253 ±(99.9%) 8170.098 ops/s [Average]
[info]   (min, avg, max) = (1383956.733, 1386223.253, 1388702.163), stdev = 2121.749
[info]   CI (99.9%): [1378053.155, 1394393.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22793.768 ops/s
[info] # Warmup Iteration   2: 64125.330 ops/s
[info] # Warmup Iteration   3: 66501.103 ops/s
[info] # Warmup Iteration   4: 68701.571 ops/s
[info] # Warmup Iteration   5: 66892.883 ops/s
[info] Iteration   1: 68376.493 ops/s
[info]                  ·gc.alloc.rate:                   1718.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              39551.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30887.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 68304.578 ops/s
[info]                  ·gc.alloc.rate:                   1741.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              40130.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46406.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 68834.929 ops/s
[info]                  ·gc.alloc.rate:                   1728.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              39509.952 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30612.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 68471.107 ops/s
[info]                  ·gc.alloc.rate:                   1746.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              40146.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46118.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 68060.103 ops/s
[info]                  ·gc.alloc.rate:               1708.631 MB/sec
[info]                  ·gc.alloc.rate.norm:          39510.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30931.991 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   68409.442 ±(99.9%) 1087.357 ops/s [Average]
[info]   (min, avg, max) = (68060.103, 68409.442, 68834.929), stdev = 282.383
[info]   CI (99.9%): [67322.085, 69496.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1728.736 ±(99.9%) 60.907 MB/sec [Average]
[info]   (min, avg, max) = (1708.631, 1728.736, 1746.596), stdev = 15.817
[info]   CI (99.9%): [1667.829, 1789.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39769.453 ±(99.9%) 1297.502 B/op [Average]
[info]   (min, avg, max) = (39509.952, 39769.453, 40146.060), stdev = 336.957
[info]   CI (99.9%): [38471.951, 41066.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.866 ±(99.9%) 1414.511 MB/sec [Average]
[info]   (min, avg, max) = (1337.666, 1607.866, 2014.066), stdev = 367.344
[info]   CI (99.9%): [193.355, 3022.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36991.437 ±(99.9%) 32594.680 B/op [Average]
[info]   (min, avg, max) = (30612.912, 36991.437, 46406.065), stdev = 8464.735
[info]   CI (99.9%): [4396.757, 69586.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.816 ±(99.9%) 6.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.816, 3.809), stdev = 1.675
[info]   CI (99.9%): [≈ 0, 7.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.799 ±(99.9%) 148.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.799, 87.774), stdev = 38.605
[info]   CI (99.9%): [≈ 0, 167.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1977.160 ops/s
[info] # Warmup Iteration   2: 15043.617 ops/s
[info] # Warmup Iteration   3: 16721.135 ops/s
[info] # Warmup Iteration   4: 17103.714 ops/s
[info] # Warmup Iteration   5: 16967.401 ops/s
[info] Iteration   1: 16963.124 ops/s
[info]                  ·gc.alloc.rate:               1527.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          141761.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 124412.560 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 16835.737 ops/s
[info]                  ·gc.alloc.rate:                   1553.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              145181.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     188119.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 16996.655 ops/s
[info]                  ·gc.alloc.rate:                   1552.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              143726.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124356.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 345.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17175.070 ops/s
[info]                  ·gc.alloc.rate:                   1555.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              142483.291 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122694.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 17005.707 ops/s
[info]                  ·gc.alloc.rate:               1566.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          145011.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 185684.691 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16995.259 ±(99.9%) 467.354 ops/s [Average]
[info]   (min, avg, max) = (16835.737, 16995.259, 17175.070), stdev = 121.370
[info]   CI (99.9%): [16527.905, 17462.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1551.280 ±(99.9%) 55.012 MB/sec [Average]
[info]   (min, avg, max) = (1527.906, 1551.280, 1566.906), stdev = 14.286
[info]   CI (99.9%): [1496.268, 1606.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   143633.025 ±(99.9%) 5817.269 B/op [Average]
[info]   (min, avg, max) = (141761.986, 143633.025, 145181.597), stdev = 1510.726
[info]   CI (99.9%): [137815.756, 149450.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.635 ±(99.9%) 1410.337 MB/sec [Average]
[info]   (min, avg, max) = (1339.572, 1608.635, 2013.283), stdev = 366.260
[info]   CI (99.9%): [198.298, 3018.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   149053.417 ±(99.9%) 133111.680 B/op [Average]
[info]   (min, avg, max) = (122694.013, 149053.417, 188119.728), stdev = 34568.681
[info]   CI (99.9%): [15941.736, 282165.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.726), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   70.925 ±(99.9%) 590.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.925, 345.048), stdev = 153.271
[info]   CI (99.9%): [≈ 0, 661.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 10.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:11:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2034.013 ops/s
[info] # Warmup Iteration   2: 15895.609 ops/s
[info] # Warmup Iteration   3: 17051.400 ops/s
[info] # Warmup Iteration   4: 17363.808 ops/s
[info] # Warmup Iteration   5: 17229.532 ops/s
[info] Iteration   1: 17698.150 ops/s
[info]                  ·gc.alloc.rate:               1451.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          129050.847 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118854.804 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 17301.387 ops/s
[info]                  ·gc.alloc.rate:               1443.996 MB/sec
[info]                  ·gc.alloc.rate.norm:          131357.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121679.416 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 17377.777 ops/s
[info]                  ·gc.alloc.rate:                   1437.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              130199.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121237.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17747.834 ops/s
[info]                  ·gc.alloc.rate:                   1454.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              128971.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118549.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17508.167 ops/s
[info]                  ·gc.alloc.rate:               1431.059 MB/sec
[info]                  ·gc.alloc.rate.norm:          128580.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119934.772 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17526.663 ±(99.9%) 749.599 ops/s [Average]
[info]   (min, avg, max) = (17301.387, 17526.663, 17747.834), stdev = 194.669
[info]   CI (99.9%): [16777.064, 18276.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1443.645 ±(99.9%) 36.917 MB/sec [Average]
[info]   (min, avg, max) = (1431.059, 1443.645, 1454.395), stdev = 9.587
[info]   CI (99.9%): [1406.728, 1480.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   129632.052 ±(99.9%) 4381.830 B/op [Average]
[info]   (min, avg, max) = (128580.458, 129632.052, 131357.954), stdev = 1137.947
[info]   CI (99.9%): [125250.222, 134013.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.895 ±(99.9%) 5.422 MB/sec [Average]
[info]   (min, avg, max) = (1334.835, 1336.895, 1338.643), stdev = 1.408
[info]   CI (99.9%): [1331.473, 1342.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   120051.279 ±(99.9%) 5362.972 B/op [Average]
[info]   (min, avg, max) = (118549.574, 120051.279, 121679.416), stdev = 1392.747
[info]   CI (99.9%): [114688.307, 125414.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 6.640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 3.958), stdev = 1.724
[info]   CI (99.9%): [≈ 0, 7.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.652 ±(99.9%) 601.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.652, 358.422), stdev = 156.217
[info]   CI (99.9%): [≈ 0, 683.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318408.981 ops/s
[info] # Warmup Iteration   2: 658453.526 ops/s
[info] # Warmup Iteration   3: 651874.908 ops/s
[info] # Warmup Iteration   4: 656490.912 ops/s
[info] # Warmup Iteration   5: 672382.175 ops/s
[info] Iteration   1: 680557.592 ops/s
[info]                  ·gc.alloc.rate:                   1823.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              4216.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 678480.816 ops/s
[info]                  ·gc.alloc.rate:                   1830.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              4246.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4683.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 668886.420 ops/s
[info]                  ·gc.alloc.rate:               1793.766 MB/sec
[info]                  ·gc.alloc.rate.norm:          4220.443 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3161.468 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 681544.808 ops/s
[info]                  ·gc.alloc.rate:                   1839.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              4246.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4651.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.385 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 681644.314 ops/s
[info]                  ·gc.alloc.rate:                   1853.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4654.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   678222.790 ±(99.9%) 20685.191 ops/s [Average]
[info]   (min, avg, max) = (668886.420, 678222.790, 681644.314), stdev = 5371.878
[info]   CI (99.9%): [657537.599, 698907.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1828.163 ±(99.9%) 86.068 MB/sec [Average]
[info]   (min, avg, max) = (1793.766, 1828.163, 1853.942), stdev = 22.351
[info]   CI (99.9%): [1742.096, 1914.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4242.172 ±(99.9%) 99.410 B/op [Average]
[info]   (min, avg, max) = (4216.427, 4242.172, 4280.794), stdev = 25.817
[info]   CI (99.9%): [4142.762, 4341.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1748.047 ±(99.9%) 1415.657 MB/sec [Average]
[info]   (min, avg, max) = (1343.682, 1748.047, 2019.424), stdev = 367.642
[info]   CI (99.9%): [332.390, 3163.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4053.291 ±(99.9%) 3217.502 B/op [Average]
[info]   (min, avg, max) = (3115.021, 4053.291, 4683.771), stdev = 835.575
[info]   CI (99.9%): [835.789, 7270.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.769), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.390 ±(99.9%) 10.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.390, 6.423), stdev = 2.817
[info]   CI (99.9%): [≈ 0, 12.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1331.500 ops/s
[info] # Warmup Iteration   2: 9417.285 ops/s
[info] # Warmup Iteration   3: 12085.698 ops/s
[info] # Warmup Iteration   4: 12097.675 ops/s
[info] # Warmup Iteration   5: 12022.732 ops/s
[info] Iteration   1: 11879.786 ops/s
[info]                  ·gc.alloc.rate:                   1618.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              214357.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177101.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11914.832 ops/s
[info]                  ·gc.alloc.rate:                   1648.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              217749.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     265113.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 12109.896 ops/s
[info]                  ·gc.alloc.rate:                   1647.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              214167.210 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173738.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81.156 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12204.869 ops/s
[info]                  ·gc.alloc.rate:                   1674.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              215958.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171970.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 12087.725 ops/s
[info]                  ·gc.alloc.rate:               1684.462 MB/sec
[info]                  ·gc.alloc.rate.norm:          219233.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1999.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 260171.036 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12039.422 ±(99.9%) 529.652 ops/s [Average]
[info]   (min, avg, max) = (11879.786, 12039.422, 12204.869), stdev = 137.549
[info]   CI (99.9%): [11509.770, 12569.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1654.924 ±(99.9%) 99.365 MB/sec [Average]
[info]   (min, avg, max) = (1618.706, 1654.924, 1684.462), stdev = 25.805
[info]   CI (99.9%): [1555.558, 1754.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216293.301 ±(99.9%) 8423.992 B/op [Average]
[info]   (min, avg, max) = (214167.210, 216293.301, 219233.327), stdev = 2187.684
[info]   CI (99.9%): [207869.309, 224717.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1602.844 ±(99.9%) 1407.242 MB/sec [Average]
[info]   (min, avg, max) = (1333.624, 1602.844, 2007.327), stdev = 365.456
[info]   CI (99.9%): [195.602, 3010.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   209619.000 ±(99.9%) 186640.905 B/op [Average]
[info]   (min, avg, max) = (171970.931, 209619.000, 265113.660), stdev = 48470.050
[info]   CI (99.9%): [22978.095, 396259.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 6.629 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.977), stdev = 1.722
[info]   CI (99.9%): [≈ 0, 7.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   122.909 ±(99.9%) 875.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.909, 525.190), stdev = 227.440
[info]   CI (99.9%): [≈ 0, 998.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:10:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12585.280 ops/s
[info] # Warmup Iteration   2: 41613.981 ops/s
[info] # Warmup Iteration   3: 44594.719 ops/s
[info] # Warmup Iteration   4: 44745.650 ops/s
[info] # Warmup Iteration   5: 44585.717 ops/s
[info] Iteration   1: 44943.947 ops/s
[info]                  ·gc.alloc.rate:               1744.634 MB/sec
[info]                  ·gc.alloc.rate.norm:          61092.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47012.611 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 44834.889 ops/s
[info]                  ·gc.alloc.rate:                   1766.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              62021.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70734.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 45150.011 ops/s
[info]                  ·gc.alloc.rate:                   1752.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              61077.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46719.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.354 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 45107.740 ops/s
[info]                  ·gc.alloc.rate:                   1776.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              61998.420 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70077.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 45113.200 ops/s
[info]                  ·gc.alloc.rate:                   1789.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              62439.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70064.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.452 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   45029.958 ±(99.9%) 519.628 ops/s [Average]
[info]   (min, avg, max) = (44834.889, 45029.958, 45150.011), stdev = 134.946
[info]   CI (99.9%): [44510.329, 45549.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1766.086 ±(99.9%) 70.125 MB/sec [Average]
[info]   (min, avg, max) = (1744.634, 1766.086, 1789.772), stdev = 18.211
[info]   CI (99.9%): [1695.961, 1836.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61725.947 ±(99.9%) 2351.043 B/op [Average]
[info]   (min, avg, max) = (61077.954, 61725.947, 62439.190), stdev = 610.558
[info]   CI (99.9%): [59374.904, 64076.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.942 ±(99.9%) 1411.199 MB/sec [Average]
[info]   (min, avg, max) = (1340.435, 1742.942, 2014.939), stdev = 366.484
[info]   CI (99.9%): [331.743, 3154.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   60921.741 ±(99.9%) 49419.459 B/op [Average]
[info]   (min, avg, max) = (46719.997, 60921.741, 70734.393), stdev = 12834.076
[info]   CI (99.9%): [11502.282, 110341.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.559), stdev = 1.572
[info]   CI (99.9%): [≈ 0, 6.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.297 ±(99.9%) 212.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.297, 124.954), stdev = 55.176
[info]   CI (99.9%): [≈ 0, 238.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.581
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:10:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19287.061 ops/s
[info] # Warmup Iteration   2: 57489.871 ops/s
[info] # Warmup Iteration   3: 58301.597 ops/s
[info] # Warmup Iteration   4: 57147.274 ops/s
[info] # Warmup Iteration   5: 58443.855 ops/s
[info] Iteration   1: 57379.391 ops/s
[info]                  ·gc.alloc.rate:                   1775.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              48712.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55134.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 58551.556 ops/s
[info]                  ·gc.alloc.rate:                   1808.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              48620.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54059.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101.463 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 58455.179 ops/s
[info]                  ·gc.alloc.rate:               1793.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          48276.530 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36014.926 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 57959.583 ops/s
[info]                  ·gc.alloc.rate:                   1778.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              48297.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54428.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 58109.385 ops/s
[info]                  ·gc.alloc.rate:                   1783.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              48311.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36207.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   58091.019 ±(99.9%) 1794.514 ops/s [Average]
[info]   (min, avg, max) = (57379.391, 58091.019, 58551.556), stdev = 466.030
[info]   CI (99.9%): [56296.505, 59885.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1788.086 ±(99.9%) 51.392 MB/sec [Average]
[info]   (min, avg, max) = (1775.960, 1788.086, 1808.869), stdev = 13.346
[info]   CI (99.9%): [1736.694, 1839.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   48443.551 ±(99.9%) 793.883 B/op [Average]
[info]   (min, avg, max) = (48276.530, 48443.551, 48712.022), stdev = 206.169
[info]   CI (99.9%): [47649.669, 49237.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1740.076 ±(99.9%) 1415.832 MB/sec [Average]
[info]   (min, avg, max) = (1336.879, 1740.076, 2011.216), stdev = 367.687
[info]   CI (99.9%): [324.244, 3155.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47168.997 ±(99.9%) 38898.926 B/op [Average]
[info]   (min, avg, max) = (36014.926, 47168.997, 55134.838), stdev = 10101.927
[info]   CI (99.9%): [8270.071, 86067.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.776 ±(99.9%) 6.456 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.776, 3.775), stdev = 1.677
[info]   CI (99.9%): [≈ 0, 7.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20.860 ±(99.9%) 173.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.860, 101.463), stdev = 45.061
[info]   CI (99.9%): [≈ 0, 194.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 817869.051 ops/s
[info] # Warmup Iteration   2: 1270330.458 ops/s
[info] # Warmup Iteration   3: 1348984.732 ops/s
[info] # Warmup Iteration   4: 1355533.111 ops/s
[info] # Warmup Iteration   5: 1361493.176 ops/s
[info] Iteration   1: 1359476.860 ops/s
[info]                  ·gc.alloc.rate:               1269.404 MB/sec
[info]                  ·gc.alloc.rate.norm:          1469.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1556.343 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1355470.251 ops/s
[info]                  ·gc.alloc.rate:               1284.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          1491.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1561.668 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 1355779.045 ops/s
[info]                  ·gc.alloc.rate:                   1286.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1493.406 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1364168.446 ops/s
[info]                  ·gc.alloc.rate:                   1294.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              1493.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1369039.366 ops/s
[info]                  ·gc.alloc.rate:                   1298.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1492.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1543.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1360786.794 ±(99.9%) 22337.023 ops/s [Average]
[info]   (min, avg, max) = (1355470.251, 1360786.794, 1369039.366), stdev = 5800.854
[info]   CI (99.9%): [1338449.771, 1383123.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1286.668 ±(99.9%) 43.076 MB/sec [Average]
[info]   (min, avg, max) = (1269.404, 1286.668, 1298.425), stdev = 11.187
[info]   CI (99.9%): [1243.592, 1329.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1488.047 ±(99.9%) 39.908 B/op [Average]
[info]   (min, avg, max) = (1469.556, 1488.047, 1493.406), stdev = 10.364
[info]   CI (99.9%): [1448.140, 1527.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.791 ±(99.9%) 4.052 MB/sec [Average]
[info]   (min, avg, max) = (1343.189, 1344.791, 1345.755), stdev = 1.052
[info]   CI (99.9%): [1340.740, 1348.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1555.298 ±(99.9%) 28.885 B/op [Average]
[info]   (min, avg, max) = (1543.909, 1555.298, 1562.071), stdev = 7.501
[info]   CI (99.9%): [1526.413, 1584.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.679 ±(99.9%) 5.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.679, 3.167), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 6.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.783 ±(99.9%) 6.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.653), stdev = 1.607
[info]   CI (99.9%): [≈ 0, 6.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 971086.735 ops/s
[info] # Warmup Iteration   2: 1529927.338 ops/s
[info] # Warmup Iteration   3: 1577024.869 ops/s
[info] # Warmup Iteration   4: 1578155.451 ops/s
[info] # Warmup Iteration   5: 1578433.912 ops/s
[info] Iteration   1: 1579277.802 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1577351.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1578306.752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1573805.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1578930.739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1577534.554 ±(99.9%) 8506.625 ops/s [Average]
[info]   (min, avg, max) = (1573805.846, 1577534.554, 1579277.802), stdev = 2209.144
[info]   CI (99.9%): [1569027.929, 1586041.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:09:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1721.305 ops/s
[info] # Warmup Iteration   2: 3527.563 ops/s
[info] # Warmup Iteration   3: 3499.946 ops/s
[info] # Warmup Iteration   4: 3680.744 ops/s
[info] # Warmup Iteration   5: 3687.861 ops/s
[info] Iteration   1: 3680.505 ops/s
[info]                  ·gc.alloc.rate:                   497.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              212729.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218714.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.900 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3677.719 ops/s
[info]                  ·gc.alloc.rate:               496.489 MB/sec
[info]                  ·gc.alloc.rate.norm:          212448.117 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 286156.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 3695.273 ops/s
[info]                  ·gc.alloc.rate:               512.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          218252.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 284840.450 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3713.463 ops/s
[info]                  ·gc.alloc.rate:      501.265 MB/sec
[info]                  ·gc.alloc.rate.norm: 212448.125 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3695.179 ops/s
[info]                  ·gc.alloc.rate:                   499.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              212762.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285124.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3692.428 ±(99.9%) 55.020 ops/s [Average]
[info]   (min, avg, max) = (3677.719, 3692.428, 3713.463), stdev = 14.288
[info]   CI (99.9%): [3637.408, 3747.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   501.490 ±(99.9%) 24.644 MB/sec [Average]
[info]   (min, avg, max) = (496.489, 501.490, 512.457), stdev = 6.400
[info]   CI (99.9%): [476.846, 526.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   213727.949 ±(99.9%) 9755.914 B/op [Average]
[info]   (min, avg, max) = (212448.117, 213727.949, 218252.290), stdev = 2533.580
[info]   CI (99.9%): [203972.035, 223483.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   503.744 ±(99.9%) 1115.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503.744, 669.553), stdev = 289.734
[info]   CI (99.9%): [≈ 0, 1619.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   214967.128 ±(99.9%) 475897.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 214967.128, 286156.647), stdev = 123589.184
[info]   CI (99.9%): [≈ 0, 690865.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.553 ±(99.9%) 18.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.553, 8.900), stdev = 4.865
[info]   CI (99.9%): [≈ 0, 22.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:09:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38316.959 ops/s
[info] # Warmup Iteration   2: 111673.306 ops/s
[info] # Warmup Iteration   3: 120902.888 ops/s
[info] # Warmup Iteration   4: 124454.242 ops/s
[info] # Warmup Iteration   5: 123247.389 ops/s
[info] Iteration   1: 124345.584 ops/s
[info]                  ·gc.alloc.rate:                   1965.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              24861.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25512.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 125127.235 ops/s
[info]                  ·gc.alloc.rate:                   1974.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              24832.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25313.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.998 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 124715.682 ops/s
[info]                  ·gc.alloc.rate:                   1993.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              25163.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25337.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 124542.183 ops/s
[info]                  ·gc.alloc.rate:                   1978.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              25007.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25371.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 125204.372 ops/s
[info]                  ·gc.alloc.rate:                   2003.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              25181.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25267.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   124787.011 ±(99.9%) 1427.636 ops/s [Average]
[info]   (min, avg, max) = (124345.584, 124787.011, 125204.372), stdev = 370.752
[info]   CI (99.9%): [123359.375, 126214.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1983.164 ±(99.9%) 58.849 MB/sec [Average]
[info]   (min, avg, max) = (1965.200, 1983.164, 2003.205), stdev = 15.283
[info]   CI (99.9%): [1924.315, 2042.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25009.139 ±(99.9%) 628.806 B/op [Average]
[info]   (min, avg, max) = (24832.097, 25009.139, 25181.670), stdev = 163.299
[info]   CI (99.9%): [24380.333, 25637.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2011.000 ±(99.9%) 14.641 MB/sec [Average]
[info]   (min, avg, max) = (2007.690, 2011.000, 2016.689), stdev = 3.802
[info]   CI (99.9%): [1996.359, 2025.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25360.446 ±(99.9%) 358.702 B/op [Average]
[info]   (min, avg, max) = (25267.547, 25360.446, 25512.716), stdev = 93.154
[info]   CI (99.9%): [25001.745, 25719.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.771 ±(99.9%) 4.694 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.771, 2.853), stdev = 1.219
[info]   CI (99.9%): [≈ 0, 5.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.734 ±(99.9%) 59.385 B/op [Average]
[info]   (min, avg, max) = (0.262, 9.734, 36.096), stdev = 15.422
[info]   CI (99.9%): [≈ 0, 69.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.778 ops/s
[info] # Warmup Iteration   2: 336553.917 ops/s
[info] # Warmup Iteration   3: 367015.398 ops/s
[info] # Warmup Iteration   4: 383148.035 ops/s
[info] # Warmup Iteration   5: 383397.882 ops/s
[info] Iteration   1: 383504.653 ops/s
[info]                  ·gc.alloc.rate:               783.491 MB/sec
[info]                  ·gc.alloc.rate.norm:          3214.470 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2732.418 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 381617.051 ops/s
[info]                  ·gc.alloc.rate:               808.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          3333.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5494.299 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 382688.773 ops/s
[info]                  ·gc.alloc.rate:                   780.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              3211.415 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2742.360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 378532.410 ops/s
[info]                  ·gc.alloc.rate:               782.911 MB/sec
[info]                  ·gc.alloc.rate.norm:          3255.122 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2772.325 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 383112.777 ops/s
[info]                  ·gc.alloc.rate:               782.379 MB/sec
[info]                  ·gc.alloc.rate.norm:          3214.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2741.962 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   381891.133 ±(99.9%) 7722.492 ops/s [Average]
[info]   (min, avg, max) = (378532.410, 381891.133, 383504.653), stdev = 2005.507
[info]   CI (99.9%): [374168.640, 389613.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   787.631 ±(99.9%) 44.861 MB/sec [Average]
[info]   (min, avg, max) = (780.971, 787.631, 808.405), stdev = 11.650
[info]   CI (99.9%): [742.771, 832.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3245.788 ±(99.9%) 202.096 B/op [Average]
[info]   (min, avg, max) = (3211.415, 3245.788, 3333.887), stdev = 52.484
[info]   CI (99.9%): [3043.692, 3447.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.883 ±(99.9%) 1145.992 MB/sec [Average]
[info]   (min, avg, max) = (665.996, 799.883, 1332.264), stdev = 297.611
[info]   CI (99.9%): [≈ 0, 1945.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3296.673 ±(99.9%) 4730.909 B/op [Average]
[info]   (min, avg, max) = (2732.418, 3296.673, 5494.299), stdev = 1228.602
[info]   CI (99.9%): [≈ 0, 8027.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.001 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51130.160 ops/s
[info] # Warmup Iteration   2: 243352.602 ops/s
[info] # Warmup Iteration   3: 260056.876 ops/s
[info] # Warmup Iteration   4: 262012.370 ops/s
[info] # Warmup Iteration   5: 262624.782 ops/s
[info] Iteration   1: 263100.346 ops/s
[info]                  ·gc.alloc.rate:               589.883 MB/sec
[info]                  ·gc.alloc.rate.norm:          3528.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3986.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 264468.350 ops/s
[info]                  ·gc.alloc.rate:      574.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 261417.699 ops/s
[info]                  ·gc.alloc.rate:               588.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          3540.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4012.500 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 262991.483 ops/s
[info]                  ·gc.alloc.rate:                   594.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              3559.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3992.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 263089.841 ops/s
[info]                  ·gc.alloc.rate:               592.601 MB/sec
[info]                  ·gc.alloc.rate.norm:          3545.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3990.913 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   263013.544 ±(99.9%) 4163.785 ops/s [Average]
[info]   (min, avg, max) = (261417.699, 263013.544, 264468.350), stdev = 1081.322
[info]   CI (99.9%): [258849.759, 267177.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   587.886 ±(99.9%) 31.116 MB/sec [Average]
[info]   (min, avg, max) = (574.157, 587.886, 594.702), stdev = 8.081
[info]   CI (99.9%): [556.770, 619.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3517.891 ±(99.9%) 223.254 B/op [Average]
[info]   (min, avg, max) = (3416.002, 3517.891, 3559.006), stdev = 57.978
[info]   CI (99.9%): [3294.637, 3741.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.435 ±(99.9%) 1148.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.435, 667.123), stdev = 298.199
[info]   CI (99.9%): [≈ 0, 1681.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3196.530 ±(99.9%) 6880.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3196.530, 4012.500), stdev = 1786.942
[info]   CI (99.9%): [≈ 0, 10077.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:08:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300275.641 ops/s
[info] # Warmup Iteration   2: 495721.239 ops/s
[info] # Warmup Iteration   3: 515769.861 ops/s
[info] # Warmup Iteration   4: 514385.315 ops/s
[info] # Warmup Iteration   5: 517607.546 ops/s
[info] Iteration   1: 516866.200 ops/s
[info]                  ·gc.alloc.rate:               665.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2042.576 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 519783.012 ops/s
[info]                  ·gc.alloc.rate:      655.354 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 517268.261 ops/s
[info]                  ·gc.alloc.rate:               675.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          2054.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2043.056 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 518000.740 ops/s
[info]                  ·gc.alloc.rate:                   671.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              2039.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2040.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 518730.529 ops/s
[info]                  ·gc.alloc.rate:               667.872 MB/sec
[info]                  ·gc.alloc.rate.norm:          2026.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2039.272 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   518129.748 ±(99.9%) 4494.535 ops/s [Average]
[info]   (min, avg, max) = (516866.200, 518129.748, 519783.012), stdev = 1167.216
[info]   CI (99.9%): [513635.214, 522624.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   667.016 ±(99.9%) 28.711 MB/sec [Average]
[info]   (min, avg, max) = (655.354, 667.016, 675.136), stdev = 7.456
[info]   CI (99.9%): [638.306, 695.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2026.048 ±(99.9%) 100.536 B/op [Average]
[info]   (min, avg, max) = (1984.001, 2026.048, 2054.016), stdev = 26.109
[info]   CI (99.9%): [1925.512, 2126.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.181 ±(99.9%) 1156.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.181, 672.120), stdev = 300.294
[info]   CI (99.9%): [≈ 0, 1693.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1633.003 ±(99.9%) 3515.167 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1633.003, 2043.056), stdev = 912.878
[info]   CI (99.9%): [≈ 0, 5148.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:08:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7701.976 ops/s
[info] # Warmup Iteration   2: 62095.353 ops/s
[info] # Warmup Iteration   3: 70732.428 ops/s
[info] # Warmup Iteration   4: 73994.749 ops/s
[info] # Warmup Iteration   5: 74578.030 ops/s
[info] Iteration   1: 74263.691 ops/s
[info]                  ·gc.alloc.rate:                   3127.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              66267.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3336.091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70691.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.765 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 74978.106 ops/s
[info]                  ·gc.alloc.rate:                   3157.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              66274.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56079.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 75188.453 ops/s
[info]                  ·gc.alloc.rate:               3193.004 MB/sec
[info]                  ·gc.alloc.rate.norm:          66837.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3350.673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70137.464 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 75562.275 ops/s
[info]                  ·gc.alloc.rate:               3182.831 MB/sec
[info]                  ·gc.alloc.rate.norm:          66278.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2690.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56026.542 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 75069.191 ops/s
[info]                  ·gc.alloc.rate:               3189.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          66867.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3374.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70745.361 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   75012.343 ±(99.9%) 1824.819 ops/s [Average]
[info]   (min, avg, max) = (74263.691, 75012.343, 75562.275), stdev = 473.900
[info]   CI (99.9%): [73187.524, 76837.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3169.949 ±(99.9%) 106.362 MB/sec [Average]
[info]   (min, avg, max) = (3127.315, 3169.949, 3193.004), stdev = 27.622
[info]   CI (99.9%): [3063.587, 3276.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66504.943 ±(99.9%) 1222.427 B/op [Average]
[info]   (min, avg, max) = (66267.437, 66504.943, 66867.883), stdev = 317.460
[info]   CI (99.9%): [65282.517, 67727.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3084.628 ±(99.9%) 1419.839 MB/sec [Average]
[info]   (min, avg, max) = (2671.572, 3084.628, 3374.275), stdev = 368.728
[info]   CI (99.9%): [1664.789, 4504.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64735.967 ±(99.9%) 30536.349 B/op [Average]
[info]   (min, avg, max) = (56026.542, 64735.967, 70745.361), stdev = 7930.193
[info]   CI (99.9%): [34199.618, 95272.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.440 ±(99.9%) 2.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.440, 1.765), stdev = 0.764
[info]   CI (99.9%): [≈ 0, 3.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55037.135 ops/s
[info] # Warmup Iteration   2: 129821.845 ops/s
[info] # Warmup Iteration   3: 131041.174 ops/s
[info] # Warmup Iteration   4: 133322.407 ops/s
[info] # Warmup Iteration   5: 135607.532 ops/s
[info] Iteration   1: 136254.617 ops/s
[info]                  ·gc.alloc.rate:               1186.909 MB/sec
[info]                  ·gc.alloc.rate.norm:          13706.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7740.556 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 135284.872 ops/s
[info]                  ·gc.alloc.rate:                   1192.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              13878.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15600.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 134682.920 ops/s
[info]                  ·gc.alloc.rate:               1190.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          13907.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15680.652 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 135766.354 ops/s
[info]                  ·gc.alloc.rate:                   1186.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              13751.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15563.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 136401.512 ops/s
[info]                  ·gc.alloc.rate:                   1177.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              13587.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7747.871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.525 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   135678.055 ±(99.9%) 2728.594 ops/s [Average]
[info]   (min, avg, max) = (134682.920, 135678.055, 136401.512), stdev = 708.607
[info]   CI (99.9%): [132949.461, 138406.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1186.774 ±(99.9%) 22.358 MB/sec [Average]
[info]   (min, avg, max) = (1177.542, 1186.774, 1192.881), stdev = 5.806
[info]   CI (99.9%): [1164.415, 1209.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13766.295 ±(99.9%) 502.870 B/op [Average]
[info]   (min, avg, max) = (13587.571, 13766.295, 13907.644), stdev = 130.594
[info]   CI (99.9%): [13263.425, 14269.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1073.448 ±(99.9%) 1415.100 MB/sec [Average]
[info]   (min, avg, max) = (670.296, 1073.448, 1342.606), stdev = 367.497
[info]   CI (99.9%): [≈ 0, 2488.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12466.608 ±(99.9%) 16600.684 B/op [Average]
[info]   (min, avg, max) = (7740.556, 12466.608, 15680.652), stdev = 4311.145
[info]   CI (99.9%): [≈ 0, 29067.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.720 ±(99.9%) 5.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.102), stdev = 1.347
[info]   CI (99.9%): [≈ 0, 5.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.345 ±(99.9%) 60.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.345, 35.956), stdev = 15.615
[info]   CI (99.9%): [≈ 0, 68.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.600, 7.000), stdev = 2.510
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.723 ops/s
[info] # Warmup Iteration   2: 202593.017 ops/s
[info] # Warmup Iteration   3: 205905.066 ops/s
[info] # Warmup Iteration   4: 209031.216 ops/s
[info] # Warmup Iteration   5: 209003.217 ops/s
[info] Iteration   1: 207917.736 ops/s
[info]                  ·gc.alloc.rate:                   173.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              1313.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3872.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 208453.380 ops/s
[info]                  ·gc.alloc.rate:      163.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 208964.635 ops/s
[info]                  ·gc.alloc.rate:      163.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 207926.617 ops/s
[info]                  ·gc.alloc.rate:               177.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          1340.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3872.652 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 208517.315 ops/s
[info]                  ·gc.alloc.rate:      163.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   208355.937 ±(99.9%) 1702.998 ops/s [Average]
[info]   (min, avg, max) = (207917.736, 208355.937, 208964.635), stdev = 442.263
[info]   CI (99.9%): [206652.939, 210058.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   168.125 ±(99.9%) 25.653 MB/sec [Average]
[info]   (min, avg, max) = (163.208, 168.125, 177.052), stdev = 6.662
[info]   CI (99.9%): [142.472, 193.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1269.889 ±(99.9%) 203.089 B/op [Average]
[info]   (min, avg, max) = (1232.002, 1269.889, 1340.155), stdev = 52.742
[info]   CI (99.9%): [1066.800, 1472.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   204.671 ±(99.9%) 1079.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.671, 511.725), stdev = 280.257
[info]   CI (99.9%): [≈ 0, 1283.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1549.065 ±(99.9%) 8167.770 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1549.065, 3872.671), stdev = 2121.144
[info]   CI (99.9%): [≈ 0, 9716.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.382 ±(99.9%) 3.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.912), stdev = 0.855
[info]   CI (99.9%): [≈ 0, 3.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2.895 ±(99.9%) 24.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.895, 14.473), stdev = 6.472
[info]   CI (99.9%): [≈ 0, 27.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:07:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198641.895 ops/s
[info] # Warmup Iteration   2: 414146.296 ops/s
[info] # Warmup Iteration   3: 425152.625 ops/s
[info] # Warmup Iteration   4: 426297.200 ops/s
[info] # Warmup Iteration   5: 426642.559 ops/s
[info] Iteration   1: 423781.022 ops/s
[info]                  ·gc.alloc.rate:               433.280 MB/sec
[info]                  ·gc.alloc.rate.norm:          1609.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1900.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 425511.478 ops/s
[info]                  ·gc.alloc.rate:      417.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 424410.143 ops/s
[info]                  ·gc.alloc.rate:               434.026 MB/sec
[info]                  ·gc.alloc.rate.norm:          1609.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2473.948 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 423890.113 ops/s
[info]                  ·gc.alloc.rate:      415.931 MB/sec
[info]                  ·gc.alloc.rate.norm: 1544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 425675.852 ops/s
[info]                  ·gc.alloc.rate:               431.157 MB/sec
[info]                  ·gc.alloc.rate.norm:          1593.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2466.574 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   424653.722 ±(99.9%) 3435.785 ops/s [Average]
[info]   (min, avg, max) = (423781.022, 424653.722, 425675.852), stdev = 892.263
[info]   CI (99.9%): [421217.936, 428089.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   426.367 ±(99.9%) 34.330 MB/sec [Average]
[info]   (min, avg, max) = (415.931, 426.367, 434.026), stdev = 8.915
[info]   CI (99.9%): [392.038, 460.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1580.012 ±(99.9%) 128.851 B/op [Average]
[info]   (min, avg, max) = (1544.001, 1580.012, 1609.231), stdev = 33.462
[info]   CI (99.9%): [1451.161, 1708.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   369.233 ±(99.9%) 1320.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.233, 667.339), stdev = 343.005
[info]   CI (99.9%): [≈ 0, 1690.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1368.106 ±(99.9%) 4891.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1368.106, 2473.948), stdev = 1270.420
[info]   CI (99.9%): [≈ 0, 6260.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:07:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278070.162 ops/s
[info] # Warmup Iteration   2: 443877.463 ops/s
[info] # Warmup Iteration   3: 458302.711 ops/s
[info] # Warmup Iteration   4: 469951.417 ops/s
[info] # Warmup Iteration   5: 468379.610 ops/s
[info] Iteration   1: 468340.144 ops/s
[info]                  ·gc.alloc.rate:                   376.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1266.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1719.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 467293.375 ops/s
[info]                  ·gc.alloc.rate:               379.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          1277.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1723.093 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 466393.473 ops/s
[info]                  ·gc.alloc.rate:      365.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 465011.205 ops/s
[info]                  ·gc.alloc.rate:                   382.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              1296.172 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2269.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 468492.965 ops/s
[info]                  ·gc.alloc.rate:      366.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   467106.232 ±(99.9%) 5572.719 ops/s [Average]
[info]   (min, avg, max) = (465011.205, 467106.232, 468492.965), stdev = 1447.217
[info]   CI (99.9%): [461533.514, 472678.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   374.150 ±(99.9%) 30.264 MB/sec [Average]
[info]   (min, avg, max) = (365.100, 374.150, 382.963), stdev = 7.859
[info]   CI (99.9%): [343.886, 404.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1260.699 ±(99.9%) 109.014 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1260.699, 1296.172), stdev = 28.310
[info]   CI (99.9%): [1151.685, 1369.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.731 ±(99.9%) 1216.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.731, 670.467), stdev = 315.947
[info]   CI (99.9%): [≈ 0, 1555.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1142.317 ±(99.9%) 4106.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1142.317, 2269.255), stdev = 1066.525
[info]   CI (99.9%): [≈ 0, 5249.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.070 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.070, 0.282), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237299.627 ops/s
[info] # Warmup Iteration   2: 490069.951 ops/s
[info] # Warmup Iteration   3: 501662.945 ops/s
[info] # Warmup Iteration   4: 501888.285 ops/s
[info] # Warmup Iteration   5: 502186.201 ops/s
[info] Iteration   1: 502077.972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 502037.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502056.727 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 502168.423 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 501628.413 ops/s
[info]                  ·gc.alloc.rate:      0.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.565 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   501993.773 ±(99.9%) 809.874 ops/s [Average]
[info]   (min, avg, max) = (501628.413, 501993.773, 502168.423), stdev = 210.322
[info]   CI (99.9%): [501183.900, 502803.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.036 ±(99.9%) 0.310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.036, 0.180), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.114 ±(99.9%) 0.972 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.114, 0.565), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7451.234 ops/s
[info] # Warmup Iteration   2: 26795.053 ops/s
[info] # Warmup Iteration   3: 28855.972 ops/s
[info] # Warmup Iteration   4: 28883.228 ops/s
[info] # Warmup Iteration   5: 27673.975 ops/s
[info] Iteration   1: 29066.270 ops/s
[info]                  ·gc.alloc.rate:                   1578.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              85463.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72610.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 28968.265 ops/s
[info]                  ·gc.alloc.rate:                   1567.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              85176.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72892.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 29013.364 ops/s
[info]                  ·gc.alloc.rate:                   1583.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              85873.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109161.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 220.192 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 28854.874 ops/s
[info]                  ·gc.alloc.rate:                   1573.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              85797.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72959.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29155.976 ops/s
[info]                  ·gc.alloc.rate:               1586.043 MB/sec
[info]                  ·gc.alloc.rate.norm:          85609.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72132.076 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   29011.750 ±(99.9%) 431.707 ops/s [Average]
[info]   (min, avg, max) = (28854.874, 29011.750, 29155.976), stdev = 112.113
[info]   CI (99.9%): [28580.043, 29443.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1577.643 ±(99.9%) 28.565 MB/sec [Average]
[info]   (min, avg, max) = (1567.752, 1577.643, 1586.043), stdev = 7.418
[info]   CI (99.9%): [1549.078, 1606.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85583.852 ±(99.9%) 1073.090 B/op [Average]
[info]   (min, avg, max) = (85176.199, 85583.852, 85873.198), stdev = 278.678
[info]   CI (99.9%): [84510.761, 86656.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1473.804 ±(99.9%) 1159.433 MB/sec [Average]
[info]   (min, avg, max) = (1336.352, 1473.804, 2012.415), stdev = 301.101
[info]   CI (99.9%): [314.371, 2633.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79951.075 ±(99.9%) 62889.444 B/op [Average]
[info]   (min, avg, max) = (72132.076, 79951.075, 109161.174), stdev = 16332.189
[info]   CI (99.9%): [17061.631, 142840.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.059), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 7.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   44.943 ±(99.9%) 377.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.943, 220.192), stdev = 97.971
[info]   CI (99.9%): [≈ 0, 422.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:06:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1245.264 ops/s
[info] # Warmup Iteration   2: 7590.775 ops/s
[info] # Warmup Iteration   3: 8321.868 ops/s
[info] # Warmup Iteration   4: 8298.527 ops/s
[info] # Warmup Iteration   5: 8293.904 ops/s
[info] Iteration   1: 8364.112 ops/s
[info]                  ·gc.alloc.rate:               1204.120 MB/sec
[info]                  ·gc.alloc.rate.norm:          226538.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 252367.652 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 8238.409 ops/s
[info]                  ·gc.alloc.rate:                   1186.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              226553.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256353.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.977 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8161.840 ops/s
[info]                  ·gc.alloc.rate:                   1168.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              225361.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     258868.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8303.948 ops/s
[info]                  ·gc.alloc.rate:               1183.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          224241.786 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127253.143 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 8316.082 ops/s
[info]                  ·gc.alloc.rate:                   1212.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              229485.829 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254265.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 701.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8276.878 ±(99.9%) 301.933 ops/s [Average]
[info]   (min, avg, max) = (8161.840, 8276.878, 8364.112), stdev = 78.411
[info]   CI (99.9%): [7974.946, 8578.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1191.032 ±(99.9%) 67.065 MB/sec [Average]
[info]   (min, avg, max) = (1168.838, 1191.032, 1212.620), stdev = 17.417
[info]   CI (99.9%): [1123.967, 1258.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   226436.474 ±(99.9%) 7529.482 B/op [Average]
[info]   (min, avg, max) = (224241.786, 226436.474, 229485.829), stdev = 1955.382
[info]   CI (99.9%): [218906.993, 233965.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1208.301 ±(99.9%) 1155.717 MB/sec [Average]
[info]   (min, avg, max) = (671.403, 1208.301, 1343.556), stdev = 300.136
[info]   CI (99.9%): [52.584, 2364.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   229821.742 ±(99.9%) 220983.067 B/op [Average]
[info]   (min, avg, max) = (127253.143, 229821.742, 258868.805), stdev = 57388.601
[info]   CI (99.9%): [8838.675, 450804.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.705), stdev = 1.652
[info]   CI (99.9%): [≈ 0, 7.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   141.841 ±(99.9%) 1204.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.841, 701.215), stdev = 312.706
[info]   CI (99.9%): [≈ 0, 1345.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:06:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1188.274 ops/s
[info] # Warmup Iteration   2: 7220.982 ops/s
[info] # Warmup Iteration   3: 8373.390 ops/s
[info] # Warmup Iteration   4: 8467.663 ops/s
[info] # Warmup Iteration   5: 8439.284 ops/s
[info] Iteration   1: 8486.571 ops/s
[info]                  ·gc.alloc.rate:               1101.481 MB/sec
[info]                  ·gc.alloc.rate.norm:          204234.557 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123845.127 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 8376.783 ops/s
[info]                  ·gc.alloc.rate:                   1103.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              207286.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251037.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 8384.766 ops/s
[info]                  ·gc.alloc.rate:               1097.547 MB/sec
[info]                  ·gc.alloc.rate.norm:          205976.111 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 251078.060 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 8418.556 ops/s
[info]                  ·gc.alloc.rate:                   1087.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              203177.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125094.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.783 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8387.811 ops/s
[info]                  ·gc.alloc.rate:                   1121.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              210362.492 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251115.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 738.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8410.897 ±(99.9%) 173.971 ops/s [Average]
[info]   (min, avg, max) = (8376.783, 8410.897, 8486.571), stdev = 45.180
[info]   CI (99.9%): [8236.927, 8584.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1102.254 ±(99.9%) 48.395 MB/sec [Average]
[info]   (min, avg, max) = (1087.049, 1102.254, 1121.650), stdev = 12.568
[info]   CI (99.9%): [1053.859, 1150.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   206207.399 ±(99.9%) 10815.565 B/op [Average]
[info]   (min, avg, max) = (203177.267, 206207.399, 210362.492), stdev = 2808.768
[info]   CI (99.9%): [195391.834, 217022.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.098 ±(99.9%) 1411.313 MB/sec [Average]
[info]   (min, avg, max) = (667.923, 1070.098, 1338.947), stdev = 366.513
[info]   CI (99.9%): [≈ 0, 2481.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   200434.196 ±(99.9%) 267031.174 B/op [Average]
[info]   (min, avg, max) = (123845.127, 200434.196, 251115.895), stdev = 69347.148
[info]   CI (99.9%): [≈ 0, 467465.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.938), stdev = 1.752
[info]   CI (99.9%): [≈ 0, 7.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150.817 ±(99.9%) 1265.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 150.817, 738.483), stdev = 328.538
[info]   CI (99.9%): [≈ 0, 1415.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71825.617 ops/s
[info] # Warmup Iteration   2: 190256.929 ops/s
[info] # Warmup Iteration   3: 189740.547 ops/s
[info] # Warmup Iteration   4: 192618.606 ops/s
[info] # Warmup Iteration   5: 193276.897 ops/s
[info] Iteration   1: 194500.200 ops/s
[info]                  ·gc.alloc.rate:                   1698.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              13740.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10885.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 194330.991 ops/s
[info]                  ·gc.alloc.rate:                   1712.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              13860.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16357.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.109 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 195308.592 ops/s
[info]                  ·gc.alloc.rate:                   1690.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              13621.938 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10833.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.168 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 194936.515 ops/s
[info]                  ·gc.alloc.rate:                   1701.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              13733.705 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10842.998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 183447.408 ops/s
[info]                  ·gc.alloc.rate:                   1633.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              14010.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17283.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.179 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   192504.741 ±(99.9%) 19551.967 ops/s [Average]
[info]   (min, avg, max) = (183447.408, 192504.741, 195308.592), stdev = 5077.584
[info]   CI (99.9%): [172952.774, 212056.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1687.081 ±(99.9%) 119.958 MB/sec [Average]
[info]   (min, avg, max) = (1633.039, 1687.081, 1712.029), stdev = 31.153
[info]   CI (99.9%): [1567.122, 1807.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   13793.298 ±(99.9%) 568.485 B/op [Average]
[info]   (min, avg, max) = (13621.938, 13793.298, 14010.014), stdev = 147.634
[info]   CI (99.9%): [13224.813, 14361.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1613.669 ±(99.9%) 1419.690 MB/sec [Average]
[info]   (min, avg, max) = (1343.021, 1613.669, 2020.501), stdev = 368.689
[info]   CI (99.9%): [193.978, 3033.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   13240.584 ±(99.9%) 12647.167 B/op [Average]
[info]   (min, avg, max) = (10833.029, 13240.584, 17283.278), stdev = 3284.429
[info]   CI (99.9%): [593.417, 25887.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.616 ±(99.9%) 5.083 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.616, 2.978), stdev = 1.320
[info]   CI (99.9%): [≈ 0, 5.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.992 ±(99.9%) 41.152 B/op [Average]
[info]   (min, avg, max) = (0.168, 4.992, 24.109), stdev = 10.687
[info]   CI (99.9%): [≈ 0, 46.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 7.000), stdev = 2.121
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 748.512 ops/s
[info] # Warmup Iteration   2: 6335.850 ops/s
[info] # Warmup Iteration   3: 7614.946 ops/s
[info] # Warmup Iteration   4: 7678.787 ops/s
[info] # Warmup Iteration   5: 7643.558 ops/s
[info] Iteration   1: 7778.796 ops/s
[info]                  ·gc.alloc.rate:                   1294.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              261968.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     270061.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.211 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 7773.774 ops/s
[info]                  ·gc.alloc.rate:                   1286.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              260100.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     269534.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7802.750 ops/s
[info]                  ·gc.alloc.rate:               1283.557 MB/sec
[info]                  ·gc.alloc.rate.norm:          258896.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134901.372 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6873.996 ops/s
[info]                  ·gc.alloc.rate:                   1148.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              263008.212 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306336.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 938.952 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7720.619 ops/s
[info]                  ·gc.alloc.rate:                   1297.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              264399.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272328.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.600 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7589.987 ±(99.9%) 1545.546 ops/s [Average]
[info]   (min, avg, max) = (6873.996, 7589.987, 7802.750), stdev = 401.373
[info]   CI (99.9%): [6044.441, 9135.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1262.139 ±(99.9%) 244.989 MB/sec [Average]
[info]   (min, avg, max) = (1148.774, 1262.139, 1297.053), stdev = 63.623
[info]   CI (99.9%): [1017.150, 1507.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   261674.500 ±(99.9%) 8498.580 B/op [Average]
[info]   (min, avg, max) = (258896.739, 261674.500, 264399.300), stdev = 2207.054
[info]   CI (99.9%): [253175.920, 270173.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1202.152 ±(99.9%) 1148.074 MB/sec [Average]
[info]   (min, avg, max) = (668.813, 1202.152, 1338.025), stdev = 298.151
[info]   CI (99.9%): [54.079, 2350.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   250632.323 ±(99.9%) 256162.647 B/op [Average]
[info]   (min, avg, max) = (134901.372, 250632.323, 306336.712), stdev = 66524.626
[info]   CI (99.9%): [≈ 0, 506794.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 6.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.928, 4.101), stdev = 1.785
[info]   CI (99.9%): [≈ 0, 7.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   209.832 ±(99.9%) 1577.234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 209.832, 938.952), stdev = 409.603
[info]   CI (99.9%): [≈ 0, 1787.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:05:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4255.447 ops/s
[info] # Warmup Iteration   2: 19863.942 ops/s
[info] # Warmup Iteration   3: 21388.398 ops/s
[info] # Warmup Iteration   4: 21467.111 ops/s
[info] # Warmup Iteration   5: 21664.178 ops/s
[info] Iteration   1: 21252.189 ops/s
[info]                  ·gc.alloc.rate:                   1217.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              90168.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98760.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21170.525 ops/s
[info]                  ·gc.alloc.rate:                   1206.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              89640.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99142.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21390.753 ops/s
[info]                  ·gc.alloc.rate:               1206.391 MB/sec
[info]                  ·gc.alloc.rate.norm:          88759.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98118.680 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 21301.347 ops/s
[info]                  ·gc.alloc.rate:               1200.135 MB/sec
[info]                  ·gc.alloc.rate.norm:          88670.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49342.726 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 21422.236 ops/s
[info]                  ·gc.alloc.rate:                   1218.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              89551.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98172.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21307.410 ±(99.9%) 394.360 ops/s [Average]
[info]   (min, avg, max) = (21170.525, 21307.410, 21422.236), stdev = 102.414
[info]   CI (99.9%): [20913.050, 21701.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1209.867 ±(99.9%) 31.177 MB/sec [Average]
[info]   (min, avg, max) = (1200.135, 1209.867, 1218.967), stdev = 8.096
[info]   CI (99.9%): [1178.690, 1241.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89358.111 ±(99.9%) 2439.951 B/op [Average]
[info]   (min, avg, max) = (88670.068, 89358.111, 90168.755), stdev = 633.647
[info]   CI (99.9%): [86918.160, 91798.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1201.096 ±(99.9%) 1147.870 MB/sec [Average]
[info]   (min, avg, max) = (667.846, 1201.096, 1336.314), stdev = 298.098
[info]   CI (99.9%): [53.226, 2348.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   88707.394 ±(99.9%) 84751.253 B/op [Average]
[info]   (min, avg, max) = (49342.726, 88707.394, 99142.777), stdev = 22009.631
[info]   CI (99.9%): [3956.141, 173458.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.539 ±(99.9%) 5.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.539, 3.095), stdev = 1.539
[info]   CI (99.9%): [≈ 0, 7.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7542.257 ops/s
[info] # Warmup Iteration   2: 22266.794 ops/s
[info] # Warmup Iteration   3: 23469.450 ops/s
[info] # Warmup Iteration   4: 23605.214 ops/s
[info] # Warmup Iteration   5: 23528.206 ops/s
[info] Iteration   1: 23385.050 ops/s
[info]                  ·gc.alloc.rate:               1309.127 MB/sec
[info]                  ·gc.alloc.rate.norm:          88104.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45033.759 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 23319.907 ops/s
[info]                  ·gc.alloc.rate:               1306.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          88156.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90363.478 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 23461.604 ops/s
[info]                  ·gc.alloc.rate:                   1338.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              89800.651 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89909.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 23152.793 ops/s
[info]                  ·gc.alloc.rate:                   1322.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              89890.151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91150.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 263.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 23712.625 ops/s
[info]                  ·gc.alloc.rate:                   1339.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              88870.500 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88777.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.671 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23406.396 ±(99.9%) 791.666 ops/s [Average]
[info]   (min, avg, max) = (23152.793, 23406.396, 23712.625), stdev = 205.593
[info]   CI (99.9%): [22614.729, 24198.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1323.127 ±(99.9%) 60.184 MB/sec [Average]
[info]   (min, avg, max) = (1306.305, 1323.127, 1339.188), stdev = 15.630
[info]   CI (99.9%): [1262.942, 1383.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   88964.524 ±(99.9%) 3310.626 B/op [Average]
[info]   (min, avg, max) = (88104.690, 88964.524, 89890.151), stdev = 859.759
[info]   CI (99.9%): [85653.899, 92275.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.426 ±(99.9%) 1154.393 MB/sec [Average]
[info]   (min, avg, max) = (669.146, 1205.426, 1340.953), stdev = 299.792
[info]   CI (99.9%): [51.034, 2359.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   81047.157 ±(99.9%) 77592.025 B/op [Average]
[info]   (min, avg, max) = (45033.759, 81047.157, 91150.991), stdev = 20150.402
[info]   CI (99.9%): [3455.132, 158639.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.810 ±(99.9%) 6.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.810, 3.879), stdev = 1.717
[info]   CI (99.9%): [≈ 0, 7.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   55.005 ±(99.9%) 449.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.005, 263.653), stdev = 116.707
[info]   CI (99.9%): [≈ 0, 504.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136388.968 ops/s
[info] # Warmup Iteration   2: 363336.513 ops/s
[info] # Warmup Iteration   3: 371445.067 ops/s
[info] # Warmup Iteration   4: 364565.326 ops/s
[info] # Warmup Iteration   5: 366330.026 ops/s
[info] Iteration   1: 362669.276 ops/s
[info]                  ·gc.alloc.rate:               842.842 MB/sec
[info]                  ·gc.alloc.rate.norm:          3657.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2912.623 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 368447.696 ops/s
[info]                  ·gc.alloc.rate:               849.720 MB/sec
[info]                  ·gc.alloc.rate.norm:          3629.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2866.859 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 358038.476 ops/s
[info]                  ·gc.alloc.rate:                   828.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              3640.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2951.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 373539.503 ops/s
[info]                  ·gc.alloc.rate:               871.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          3671.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2829.203 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 375824.851 ops/s
[info]                  ·gc.alloc.rate:                   893.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              3742.247 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5629.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   367703.961 ±(99.9%) 28513.309 ops/s [Average]
[info]   (min, avg, max) = (358038.476, 367703.961, 375824.851), stdev = 7404.816
[info]   CI (99.9%): [339190.651, 396217.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   857.196 ±(99.9%) 98.943 MB/sec [Average]
[info]   (min, avg, max) = (828.218, 857.196, 893.747), stdev = 25.695
[info]   CI (99.9%): [758.254, 956.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3668.354 ±(99.9%) 170.758 B/op [Average]
[info]   (min, avg, max) = (3629.616, 3668.354, 3742.247), stdev = 44.345
[info]   CI (99.9%): [3497.596, 3839.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.962 ±(99.9%) 1159.253 MB/sec [Average]
[info]   (min, avg, max) = (671.153, 805.962, 1344.504), stdev = 301.054
[info]   CI (99.9%): [≈ 0, 1965.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3437.996 ±(99.9%) 4721.016 B/op [Average]
[info]   (min, avg, max) = (2829.203, 3437.996, 5629.631), stdev = 1226.033
[info]   CI (99.9%): [≈ 0, 8159.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.071 ±(99.9%) 0.438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.262), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:04:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221083.471 ops/s
[info] # Warmup Iteration   2: 414107.093 ops/s
[info] # Warmup Iteration   3: 429812.688 ops/s
[info] # Warmup Iteration   4: 429927.302 ops/s
[info] # Warmup Iteration   5: 428659.671 ops/s
[info] Iteration   1: 427905.337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 428866.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 429448.529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 430211.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 430487.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   429383.786 ±(99.9%) 4020.747 ops/s [Average]
[info]   (min, avg, max) = (427905.337, 429383.786, 430487.574), stdev = 1044.175
[info]   CI (99.9%): [425363.039, 433404.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7990.839 ops/s
[info] # Warmup Iteration   2: 20387.097 ops/s
[info] # Warmup Iteration   3: 23029.350 ops/s
[info] # Warmup Iteration   4: 23294.371 ops/s
[info] # Warmup Iteration   5: 23420.972 ops/s
[info] Iteration   1: 23179.210 ops/s
[info]                  ·gc.alloc.rate:               1132.722 MB/sec
[info]                  ·gc.alloc.rate.norm:          76911.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90980.918 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 23131.748 ops/s
[info]                  ·gc.alloc.rate:               1104.148 MB/sec
[info]                  ·gc.alloc.rate.norm:          75112.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45594.202 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 23115.467 ops/s
[info]                  ·gc.alloc.rate:                   1116.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              76014.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91296.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.417 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 23369.054 ops/s
[info]                  ·gc.alloc.rate:                   1121.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              75514.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90357.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 23176.816 ops/s
[info]                  ·gc.alloc.rate:                   1110.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              75423.320 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45552.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   23194.459 ±(99.9%) 390.797 ops/s [Average]
[info]   (min, avg, max) = (23115.467, 23194.459, 23369.054), stdev = 101.489
[info]   CI (99.9%): [22803.662, 23585.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1117.081 ±(99.9%) 41.776 MB/sec [Average]
[info]   (min, avg, max) = (1104.148, 1117.081, 1132.722), stdev = 10.849
[info]   CI (99.9%): [1075.305, 1158.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   75795.476 ±(99.9%) 2707.459 B/op [Average]
[info]   (min, avg, max) = (75112.639, 75795.476, 76911.723), stdev = 703.118
[info]   CI (99.9%): [73088.018, 78502.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072.733 ±(99.9%) 1413.801 MB/sec [Average]
[info]   (min, avg, max) = (670.230, 1072.733, 1341.722), stdev = 367.160
[info]   CI (99.9%): [≈ 0, 2486.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72756.446 ±(99.9%) 95560.603 B/op [Average]
[info]   (min, avg, max) = (45552.892, 72756.446, 91296.864), stdev = 24816.785
[info]   CI (99.9%): [≈ 0, 168317.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.670 ±(99.9%) 5.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.310), stdev = 1.476
[info]   CI (99.9%): [≈ 0, 6.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   45.517 ±(99.9%) 385.859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.517, 224.768), stdev = 100.206
[info]   CI (99.9%): [≈ 0, 431.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1863.252 ops/s
[info] # Warmup Iteration   2: 11788.069 ops/s
[info] # Warmup Iteration   3: 13227.465 ops/s
[info] # Warmup Iteration   4: 13538.512 ops/s
[info] # Warmup Iteration   5: 13520.787 ops/s
[info] Iteration   1: 13436.823 ops/s
[info]                  ·gc.alloc.rate:                   1303.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              152634.690 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156974.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 13408.033 ops/s
[info]                  ·gc.alloc.rate:               1284.657 MB/sec
[info]                  ·gc.alloc.rate.norm:          150786.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157391.953 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 13330.923 ops/s
[info]                  ·gc.alloc.rate:                   1289.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              151999.257 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157917.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 13434.122 ops/s
[info]                  ·gc.alloc.rate:                   1283.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              150415.571 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78621.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.446 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13550.255 ops/s
[info]                  ·gc.alloc.rate:                   1318.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              153069.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155704.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13432.031 ±(99.9%) 303.218 ops/s [Average]
[info]   (min, avg, max) = (13330.923, 13432.031, 13550.255), stdev = 78.745
[info]   CI (99.9%): [13128.813, 13735.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1295.845 ±(99.9%) 56.619 MB/sec [Average]
[info]   (min, avg, max) = (1283.959, 1295.845, 1318.157), stdev = 14.704
[info]   CI (99.9%): [1239.226, 1352.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   151781.150 ±(99.9%) 4428.506 B/op [Average]
[info]   (min, avg, max) = (150415.571, 151781.150, 153069.723), stdev = 1150.069
[info]   CI (99.9%): [147352.644, 156209.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1206.520 ±(99.9%) 1152.488 MB/sec [Average]
[info]   (min, avg, max) = (671.121, 1206.520, 1340.933), stdev = 299.297
[info]   CI (99.9%): [54.032, 2359.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141321.966 ±(99.9%) 135003.698 B/op [Average]
[info]   (min, avg, max) = (78621.740, 141321.966, 157917.600), stdev = 35060.032
[info]   CI (99.9%): [6318.269, 276325.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.804 ±(99.9%) 6.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.804, 3.580), stdev = 1.559
[info]   CI (99.9%): [≈ 0, 6.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94.063 ±(99.9%) 703.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 94.063, 419.446), stdev = 182.651
[info]   CI (99.9%): [≈ 0, 797.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1605.121 ops/s
[info] # Warmup Iteration   2: 11269.324 ops/s
[info] # Warmup Iteration   3: 13372.203 ops/s
[info] # Warmup Iteration   4: 13746.402 ops/s
[info] # Warmup Iteration   5: 13523.021 ops/s
[info] Iteration   1: 13420.953 ops/s
[info]                  ·gc.alloc.rate:                   1207.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              141523.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156536.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.441 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13536.918 ops/s
[info]                  ·gc.alloc.rate:                   1206.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              140273.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155323.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.841 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 13584.886 ops/s
[info]                  ·gc.alloc.rate:                   1179.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              136655.395 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77406.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13243.717 ops/s
[info]                  ·gc.alloc.rate:               1176.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          139842.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158956.712 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 13386.411 ops/s
[info]                  ·gc.alloc.rate:                   1189.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              139887.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157403.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501.676 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   13434.577 ±(99.9%) 516.617 ops/s [Average]
[info]   (min, avg, max) = (13243.717, 13434.577, 13584.886), stdev = 134.164
[info]   CI (99.9%): [12917.960, 13951.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1192.002 ±(99.9%) 55.157 MB/sec [Average]
[info]   (min, avg, max) = (1176.874, 1192.002, 1207.008), stdev = 14.324
[info]   CI (99.9%): [1136.846, 1247.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   139636.514 ±(99.9%) 6930.911 B/op [Average]
[info]   (min, avg, max) = (136655.395, 139636.514, 141523.599), stdev = 1799.936
[info]   CI (99.9%): [132705.603, 146567.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.173 ±(99.9%) 1151.515 MB/sec [Average]
[info]   (min, avg, max) = (668.233, 1203.173, 1338.868), stdev = 299.045
[info]   CI (99.9%): [51.659, 2354.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   141125.331 ±(99.9%) 137254.295 B/op [Average]
[info]   (min, avg, max) = (77406.471, 141125.331, 158956.712), stdev = 35644.505
[info]   CI (99.9%): [3871.035, 278379.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.870 ±(99.9%) 7.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.870, 4.267), stdev = 1.899
[info]   CI (99.9%): [≈ 0, 8.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   102.274 ±(99.9%) 859.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.274, 501.676), stdev = 223.279
[info]   CI (99.9%): [≈ 0, 962.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:03:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114552.862 ops/s
[info] # Warmup Iteration   2: 285078.457 ops/s
[info] # Warmup Iteration   3: 295208.976 ops/s
[info] # Warmup Iteration   4: 288561.489 ops/s
[info] # Warmup Iteration   5: 295282.647 ops/s
[info] Iteration   1: 291759.189 ops/s
[info]                  ·gc.alloc.rate:                   1768.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              9539.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10884.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 285700.587 ops/s
[info]                  ·gc.alloc.rate:                   1703.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              9385.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7416.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 291452.144 ops/s
[info]                  ·gc.alloc.rate:               1751.755 MB/sec
[info]                  ·gc.alloc.rate.norm:          9459.499 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10885.494 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 290501.070 ops/s
[info]                  ·gc.alloc.rate:               1720.132 MB/sec
[info]                  ·gc.alloc.rate.norm:          9319.913 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7275.813 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 294566.482 ops/s
[info]                  ·gc.alloc.rate:                   1784.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              9532.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10763.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.334 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   290795.894 ±(99.9%) 12421.686 ops/s [Average]
[info]   (min, avg, max) = (285700.587, 290795.894, 294566.482), stdev = 3225.872
[info]   CI (99.9%): [278374.209, 303217.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1745.612 ±(99.9%) 128.160 MB/sec [Average]
[info]   (min, avg, max) = (1703.782, 1745.612, 1784.053), stdev = 33.283
[info]   CI (99.9%): [1617.452, 1873.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9447.245 ±(99.9%) 364.628 B/op [Average]
[info]   (min, avg, max) = (9319.913, 9447.245, 9539.129), stdev = 94.693
[info]   CI (99.9%): [9082.617, 9811.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1747.456 ±(99.9%) 1416.055 MB/sec [Average]
[info]   (min, avg, max) = (1342.862, 1747.456, 2017.807), stdev = 367.745
[info]   CI (99.9%): [331.401, 3163.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9445.173 ±(99.9%) 7383.205 B/op [Average]
[info]   (min, avg, max) = (7275.813, 9445.173, 10885.494), stdev = 1917.395
[info]   CI (99.9%): [2061.968, 16828.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.940 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.894), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.300 ±(99.9%) 27.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.300, 15.940), stdev = 7.068
[info]   CI (99.9%): [≈ 0, 30.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:03:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700.507 ops/s
[info] # Warmup Iteration   2: 9541.678 ops/s
[info] # Warmup Iteration   3: 12466.201 ops/s
[info] # Warmup Iteration   4: 12482.666 ops/s
[info] # Warmup Iteration   5: 12441.333 ops/s
[info] Iteration   1: 12438.081 ops/s
[info]                  ·gc.alloc.rate:                   1530.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              193600.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1991.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     251986.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.634 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12646.816 ops/s
[info]                  ·gc.alloc.rate:                   1555.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              193530.211 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165712.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12596.881 ops/s
[info]                  ·gc.alloc.rate:               1536.056 MB/sec
[info]                  ·gc.alloc.rate.norm:          191910.444 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166703.526 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 12566.311 ops/s
[info]                  ·gc.alloc.rate:                   1547.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              193780.307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167435.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 12211.997 ops/s
[info]                  ·gc.alloc.rate:               1527.670 MB/sec
[info]                  ·gc.alloc.rate.norm:          196849.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010.414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 259053.388 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   12492.017 ±(99.9%) 671.932 ops/s [Average]
[info]   (min, avg, max) = (12211.997, 12492.017, 12646.816), stdev = 174.499
[info]   CI (99.9%): [11820.085, 13163.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1539.248 ±(99.9%) 45.034 MB/sec [Average]
[info]   (min, avg, max) = (1527.670, 1539.248, 1555.186), stdev = 11.695
[info]   CI (99.9%): [1494.214, 1584.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   193934.148 ±(99.9%) 6912.404 B/op [Average]
[info]   (min, avg, max) = (191910.444, 193934.148, 196849.038), stdev = 1795.129
[info]   CI (99.9%): [187021.743, 200846.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1600.954 ±(99.9%) 1406.307 MB/sec [Average]
[info]   (min, avg, max) = (1331.650, 1600.954, 2010.414), stdev = 365.214
[info]   CI (99.9%): [194.646, 3007.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202178.397 ±(99.9%) 187765.267 B/op [Average]
[info]   (min, avg, max) = (165712.975, 202178.397, 259053.388), stdev = 48762.044
[info]   CI (99.9%): [14413.130, 389943.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.872 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.520), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 0.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14.598 ±(99.9%) 109.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.598, 65.176), stdev = 28.356
[info]   CI (99.9%): [≈ 0, 123.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9329.726 ops/s
[info] # Warmup Iteration   2: 30516.541 ops/s
[info] # Warmup Iteration   3: 32657.505 ops/s
[info] # Warmup Iteration   4: 32710.418 ops/s
[info] # Warmup Iteration   5: 31587.191 ops/s
[info] Iteration   1: 32985.054 ops/s
[info]                  ·gc.alloc.rate:               1426.451 MB/sec
[info]                  ·gc.alloc.rate.norm:          68066.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63982.525 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 32947.014 ops/s
[info]                  ·gc.alloc.rate:                   1420.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              67859.805 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64090.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.989 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 32980.211 ops/s
[info]                  ·gc.alloc.rate:                   1425.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              68000.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64053.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 32914.855 ops/s
[info]                  ·gc.alloc.rate:                   1420.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              67929.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64120.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 32926.373 ops/s
[info]                  ·gc.alloc.rate:               1436.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          68644.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63969.791 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   32950.702 ±(99.9%) 120.871 ops/s [Average]
[info]   (min, avg, max) = (32914.855, 32950.702, 32985.054), stdev = 31.390
[info]   CI (99.9%): [32829.830, 33071.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1425.850 ±(99.9%) 24.381 MB/sec [Average]
[info]   (min, avg, max) = (1420.632, 1425.850, 1436.227), stdev = 6.332
[info]   CI (99.9%): [1401.469, 1450.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   68099.994 ±(99.9%) 1208.802 B/op [Average]
[info]   (min, avg, max) = (67859.805, 68099.994, 68644.296), stdev = 313.922
[info]   CI (99.9%): [66891.192, 69308.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1340.915 ±(99.9%) 5.758 MB/sec [Average]
[info]   (min, avg, max) = (1338.423, 1340.915, 1342.326), stdev = 1.495
[info]   CI (99.9%): [1335.157, 1346.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   64043.355 ±(99.9%) 253.675 B/op [Average]
[info]   (min, avg, max) = (63969.791, 64043.355, 64120.523), stdev = 65.879
[info]   CI (99.9%): [63789.679, 64297.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 5.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.019), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   35.975 ±(99.9%) 239.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.975, 144.042), stdev = 62.102
[info]   CI (99.9%): [≈ 0, 275.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25964.295 ops/s
[info] # Warmup Iteration   2: 77201.938 ops/s
[info] # Warmup Iteration   3: 80703.288 ops/s
[info] # Warmup Iteration   4: 79666.298 ops/s
[info] # Warmup Iteration   5: 81208.133 ops/s
[info] Iteration   1: 81146.525 ops/s
[info]                  ·gc.alloc.rate:                   2041.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              39586.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39024.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.445 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 81366.959 ops/s
[info]                  ·gc.alloc.rate:                   2046.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              39590.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38819.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81604.303 ops/s
[info]                  ·gc.alloc.rate:               2037.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          39293.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38659.134 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 80305.453 ops/s
[info]                  ·gc.alloc.rate:               2033.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          39839.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39290.950 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 81694.463 ops/s
[info]                  ·gc.alloc.rate:               2068.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          39853.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38710.433 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81223.541 ±(99.9%) 2140.601 ops/s [Average]
[info]   (min, avg, max) = (80305.453, 81223.541, 81694.463), stdev = 555.907
[info]   CI (99.9%): [79082.939, 83364.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2045.573 ±(99.9%) 53.250 MB/sec [Average]
[info]   (min, avg, max) = (2033.501, 2045.573, 2068.671), stdev = 13.829
[info]   CI (99.9%): [1992.323, 2098.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   39632.713 ±(99.9%) 883.155 B/op [Average]
[info]   (min, avg, max) = (39293.504, 39632.713, 39853.408), stdev = 229.353
[info]   CI (99.9%): [38749.558, 40515.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.762 ±(99.9%) 11.982 MB/sec [Average]
[info]   (min, avg, max) = (2004.600, 2007.762, 2012.305), stdev = 3.112
[info]   CI (99.9%): [1995.781, 2019.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38900.977 ±(99.9%) 998.357 B/op [Average]
[info]   (min, avg, max) = (38659.134, 38900.977, 39290.950), stdev = 259.270
[info]   CI (99.9%): [37902.621, 39899.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.749 ±(99.9%) 6.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.581), stdev = 1.584
[info]   CI (99.9%): [≈ 0, 6.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.533 ±(99.9%) 118.324 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.533, 69.445), stdev = 30.728
[info]   CI (99.9%): [≈ 0, 132.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296155.148 ops/s
[info] # Warmup Iteration   2: 481495.005 ops/s
[info] # Warmup Iteration   3: 529099.365 ops/s
[info] # Warmup Iteration   4: 532040.924 ops/s
[info] # Warmup Iteration   5: 532275.494 ops/s
[info] Iteration   1: 531380.169 ops/s
[info]                  ·gc.alloc.rate:               744.926 MB/sec
[info]                  ·gc.alloc.rate.norm:          2206.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1985.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 531293.172 ops/s
[info]                  ·gc.alloc.rate:               752.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          2229.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1988.148 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 533364.137 ops/s
[info]                  ·gc.alloc.rate:               751.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          2218.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1980.352 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 532470.251 ops/s
[info]                  ·gc.alloc.rate:                   748.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              2213.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1984.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 532712.562 ops/s
[info]                  ·gc.alloc.rate:               747.139 MB/sec
[info]                  ·gc.alloc.rate.norm:          2207.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1983.751 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   532244.058 ±(99.9%) 3431.032 ops/s [Average]
[info]   (min, avg, max) = (531293.172, 532244.058, 533364.137), stdev = 891.028
[info]   CI (99.9%): [528813.026, 535675.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   749.028 ±(99.9%) 12.298 MB/sec [Average]
[info]   (min, avg, max) = (744.926, 749.028, 752.518), stdev = 3.194
[info]   CI (99.9%): [736.730, 761.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2214.806 ±(99.9%) 36.044 B/op [Average]
[info]   (min, avg, max) = (2206.116, 2214.806, 2229.020), stdev = 9.360
[info]   CI (99.9%): [2178.763, 2250.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.164 ±(99.9%) 1.397 MB/sec [Average]
[info]   (min, avg, max) = (670.565, 671.164, 671.457), stdev = 0.363
[info]   CI (99.9%): [669.767, 672.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1984.571 ±(99.9%) 11.067 B/op [Average]
[info]   (min, avg, max) = (1980.352, 1984.571, 1988.148), stdev = 2.874
[info]   CI (99.9%): [1973.504, 1995.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 416349.439 ops/s
[info] # Warmup Iteration   2: 703602.523 ops/s
[info] # Warmup Iteration   3: 704728.207 ops/s
[info] # Warmup Iteration   4: 727103.130 ops/s
[info] # Warmup Iteration   5: 727078.559 ops/s
[info] Iteration   1: 727302.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 726594.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 727284.857 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 726884.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727395.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   727092.512 ±(99.9%) 1311.485 ops/s [Average]
[info]   (min, avg, max) = (726594.878, 727092.512, 727395.891), stdev = 340.589
[info]   CI (99.9%): [725781.027, 728403.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19388.333 ops/s
[info] # Warmup Iteration   2: 66297.410 ops/s
[info] # Warmup Iteration   3: 72959.284 ops/s
[info] # Warmup Iteration   4: 73958.913 ops/s
[info] # Warmup Iteration   5: 73941.789 ops/s
[info] Iteration   1: 74244.415 ops/s
[info]                  ·gc.alloc.rate:                   2134.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              45256.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42589.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87.078 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 74477.459 ops/s
[info]                  ·gc.alloc.rate:                   2140.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              45220.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42343.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.320 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 74643.970 ops/s
[info]                  ·gc.alloc.rate:               2158.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          45495.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42192.487 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 74379.529 ops/s
[info]                  ·gc.alloc.rate:                   2134.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              45156.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42399.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 69654.428 ops/s
[info]                  ·gc.alloc.rate:                   2007.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              45357.521 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45382.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.470 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   73479.960 ±(99.9%) 8253.825 ops/s [Average]
[info]   (min, avg, max) = (69654.428, 73479.960, 74643.970), stdev = 2143.492
[info]   CI (99.9%): [65226.136, 81733.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2115.080 ±(99.9%) 234.851 MB/sec [Average]
[info]   (min, avg, max) = (2007.340, 2115.080, 2158.062), stdev = 60.990
[info]   CI (99.9%): [1880.228, 2349.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   45297.095 ±(99.9%) 510.331 B/op [Average]
[info]   (min, avg, max) = (45156.560, 45297.095, 45495.194), stdev = 132.531
[info]   CI (99.9%): [44786.764, 45807.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2005.506 ±(99.9%) 12.338 MB/sec [Average]
[info]   (min, avg, max) = (2001.398, 2005.506, 2009.062), stdev = 3.204
[info]   CI (99.9%): [1993.167, 2017.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   42981.397 ±(99.9%) 5196.648 B/op [Average]
[info]   (min, avg, max) = (42192.487, 42981.397, 45382.149), stdev = 1349.553
[info]   CI (99.9%): [37784.749, 48178.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.842 ±(99.9%) 7.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.842, 4.108), stdev = 1.826
[info]   CI (99.9%): [≈ 0, 7.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.862 ±(99.9%) 149.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.862, 87.078), stdev = 38.696
[info]   CI (99.9%): [≈ 0, 166.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4675.996 ops/s
[info] # Warmup Iteration   2: 15094.688 ops/s
[info] # Warmup Iteration   3: 16803.924 ops/s
[info] # Warmup Iteration   4: 17093.336 ops/s
[info] # Warmup Iteration   5: 16532.157 ops/s
[info] Iteration   1: 16990.028 ops/s
[info]                  ·gc.alloc.rate:               891.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          82593.199 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62134.638 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 16992.454 ops/s
[info]                  ·gc.alloc.rate:               905.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          83864.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62127.326 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 16948.606 ops/s
[info]                  ·gc.alloc.rate:                   925.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              85956.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124569.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.933 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17221.622 ops/s
[info]                  ·gc.alloc.rate:               901.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          82368.283 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61365.804 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17250.944 ops/s
[info]                  ·gc.alloc.rate:               901.918 MB/sec
[info]                  ·gc.alloc.rate.norm:          82282.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61262.656 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   17080.731 ±(99.9%) 552.335 ops/s [Average]
[info]   (min, avg, max) = (16948.606, 17080.731, 17250.944), stdev = 143.440
[info]   CI (99.9%): [16528.396, 17633.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   905.250 ±(99.9%) 48.401 MB/sec [Average]
[info]   (min, avg, max) = (891.599, 905.250, 925.746), stdev = 12.570
[info]   CI (99.9%): [856.848, 953.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   83412.889 ±(99.9%) 6001.141 B/op [Average]
[info]   (min, avg, max) = (82282.182, 83412.889, 85956.525), stdev = 1558.477
[info]   CI (99.9%): [77411.748, 89414.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   805.259 ±(99.9%) 1154.532 MB/sec [Average]
[info]   (min, avg, max) = (670.748, 805.259, 1341.608), stdev = 299.828
[info]   CI (99.9%): [≈ 0, 1959.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   74292.048 ±(99.9%) 108238.199 B/op [Average]
[info]   (min, avg, max) = (61262.656, 74292.048, 124569.814), stdev = 28109.116
[info]   CI (99.9%): [≈ 0, 182530.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 3.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.933), stdev = 0.864
[info]   CI (99.9%): [≈ 0, 3.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:01:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3447.514 ops/s
[info] # Warmup Iteration   2: 15139.756 ops/s
[info] # Warmup Iteration   3: 17371.784 ops/s
[info] # Warmup Iteration   4: 17333.256 ops/s
[info] # Warmup Iteration   5: 17303.553 ops/s
[info] Iteration   1: 17593.984 ops/s
[info]                  ·gc.alloc.rate:                   769.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              68772.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59707.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17071.773 ops/s
[info]                  ·gc.alloc.rate:               749.579 MB/sec
[info]                  ·gc.alloc.rate.norm:          69083.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61597.852 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 17599.890 ops/s
[info]                  ·gc.alloc.rate:               777.075 MB/sec
[info]                  ·gc.alloc.rate.norm:          69484.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59743.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17491.264 ops/s
[info]                  ·gc.alloc.rate:               765.058 MB/sec
[info]                  ·gc.alloc.rate.norm:          68820.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60148.966 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 17623.186 ops/s
[info]                  ·gc.alloc.rate:                   768.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              68614.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59695.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.859 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   17476.019 ±(99.9%) 891.833 ops/s [Average]
[info]   (min, avg, max) = (17071.773, 17476.019, 17623.186), stdev = 231.606
[info]   CI (99.9%): [16584.187, 18367.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   765.838 ±(99.9%) 38.901 MB/sec [Average]
[info]   (min, avg, max) = (749.579, 765.838, 777.075), stdev = 10.102
[info]   CI (99.9%): [726.937, 804.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   68955.247 ±(99.9%) 1312.012 B/op [Average]
[info]   (min, avg, max) = (68614.924, 68955.247, 69484.959), stdev = 340.725
[info]   CI (99.9%): [67643.235, 70267.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   668.273 ±(99.9%) 1.547 MB/sec [Average]
[info]   (min, avg, max) = (667.653, 668.273, 668.659), stdev = 0.402
[info]   CI (99.9%): [666.726, 669.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   60178.560 ±(99.9%) 3140.267 B/op [Average]
[info]   (min, avg, max) = (59695.128, 60178.560, 61597.852), stdev = 815.517
[info]   CI (99.9%): [57038.293, 63318.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.117 ±(99.9%) 6.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.117, 3.724), stdev = 1.665
[info]   CI (99.9%): [≈ 0, 7.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55432.837 ops/s
[info] # Warmup Iteration   2: 113832.720 ops/s
[info] # Warmup Iteration   3: 113357.828 ops/s
[info] # Warmup Iteration   4: 120429.908 ops/s
[info] # Warmup Iteration   5: 120131.011 ops/s
[info] Iteration   1: 120917.695 ops/s
[info]                  ·gc.alloc.rate:      303.617 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 120052.314 ops/s
[info]                  ·gc.alloc.rate:               315.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          4134.812 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6706.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 120844.522 ops/s
[info]                  ·gc.alloc.rate:      303.446 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 120276.788 ops/s
[info]                  ·gc.alloc.rate:               314.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          4116.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6694.374 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 121115.098 ops/s
[info]                  ·gc.alloc.rate:      304.259 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   120641.283 ±(99.9%) 1745.526 ops/s [Average]
[info]   (min, avg, max) = (120052.314, 120641.283, 121115.098), stdev = 453.308
[info]   CI (99.9%): [118895.757, 122386.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308.267 ±(99.9%) 23.743 MB/sec [Average]
[info]   (min, avg, max) = (303.446, 308.267, 315.400), stdev = 6.166
[info]   CI (99.9%): [284.524, 332.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4021.487 ±(99.9%) 367.203 B/op [Average]
[info]   (min, avg, max) = (3952.004, 4021.487, 4134.812), stdev = 95.361
[info]   CI (99.9%): [3654.284, 4388.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.644 ±(99.9%) 1079.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.644, 511.619), stdev = 280.221
[info]   CI (99.9%): [≈ 0, 1283.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2680.270 ±(99.9%) 14132.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2680.270, 6706.974), stdev = 3670.113
[info]   CI (99.9%): [≈ 0, 16812.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1551.059 ops/s
[info] # Warmup Iteration   2: 11739.755 ops/s
[info] # Warmup Iteration   3: 14142.348 ops/s
[info] # Warmup Iteration   4: 14253.802 ops/s
[info] # Warmup Iteration   5: 14441.106 ops/s
[info] Iteration   1: 14433.456 ops/s
[info]                  ·gc.alloc.rate:                   1127.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              122856.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145117.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.270 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14494.306 ops/s
[info]                  ·gc.alloc.rate:                   1126.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              122274.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144516.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14476.188 ops/s
[info]                  ·gc.alloc.rate:               1104.112 MB/sec
[info]                  ·gc.alloc.rate.norm:          120028.363 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72343.054 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 14256.744 ops/s
[info]                  ·gc.alloc.rate:                   1124.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              124074.889 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147038.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14343.850 ops/s
[info]                  ·gc.alloc.rate:               1092.952 MB/sec
[info]                  ·gc.alloc.rate.norm:          119889.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73123.321 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14400.909 ±(99.9%) 382.594 ops/s [Average]
[info]   (min, avg, max) = (14256.744, 14400.909, 14494.306), stdev = 99.359
[info]   CI (99.9%): [14018.314, 14783.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1114.878 ±(99.9%) 59.566 MB/sec [Average]
[info]   (min, avg, max) = (1092.952, 1114.878, 1127.026), stdev = 15.469
[info]   CI (99.9%): [1055.312, 1174.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   121824.721 ±(99.9%) 7021.591 B/op [Average]
[info]   (min, avg, max) = (119889.833, 121824.721, 124074.889), stdev = 1823.485
[info]   CI (99.9%): [114803.130, 128846.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1065.305 ±(99.9%) 1403.475 MB/sec [Average]
[info]   (min, avg, max) = (665.466, 1065.305, 1332.222), stdev = 364.478
[info]   CI (99.9%): [≈ 0, 2468.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   116427.754 ±(99.9%) 153638.125 B/op [Average]
[info]   (min, avg, max) = (72343.054, 116427.754, 147038.903), stdev = 39899.333
[info]   CI (99.9%): [≈ 0, 270065.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.437), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10.558 ±(99.9%) 81.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.558, 48.259), stdev = 21.106
[info]   CI (99.9%): [≈ 0, 91.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 01:00:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14301.478 ops/s
[info] # Warmup Iteration   2: 43955.918 ops/s
[info] # Warmup Iteration   3: 47148.708 ops/s
[info] # Warmup Iteration   4: 45941.846 ops/s
[info] # Warmup Iteration   5: 47859.451 ops/s
[info] Iteration   1: 47809.031 ops/s
[info]                  ·gc.alloc.rate:                   1461.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              48111.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44184.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 47919.123 ops/s
[info]                  ·gc.alloc.rate:                   1462.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              48033.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44105.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47680.257 ops/s
[info]                  ·gc.alloc.rate:                   1469.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              48447.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66406.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 113.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 48056.915 ops/s
[info]                  ·gc.alloc.rate:                   1478.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              48407.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43895.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48039.593 ops/s
[info]                  ·gc.alloc.rate:               1490.583 MB/sec
[info]                  ·gc.alloc.rate.norm:          48833.831 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43867.081 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   47900.984 ±(99.9%) 611.973 ops/s [Average]
[info]   (min, avg, max) = (47680.257, 47900.984, 48056.915), stdev = 158.927
[info]   CI (99.9%): [47289.011, 48512.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1472.520 ±(99.9%) 46.937 MB/sec [Average]
[info]   (min, avg, max) = (1461.515, 1472.520, 1490.583), stdev = 12.189
[info]   CI (99.9%): [1425.583, 1519.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48366.802 ±(99.9%) 1221.582 B/op [Average]
[info]   (min, avg, max) = (48033.605, 48366.802, 48833.831), stdev = 317.241
[info]   CI (99.9%): [47145.220, 49588.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.790 ±(99.9%) 1158.516 MB/sec [Average]
[info]   (min, avg, max) = (1338.980, 1475.790, 2013.983), stdev = 300.863
[info]   CI (99.9%): [317.274, 2634.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   48491.926 ±(99.9%) 38566.984 B/op [Average]
[info]   (min, avg, max) = (43867.081, 48491.926, 66406.960), stdev = 10015.723
[info]   CI (99.9%): [9924.943, 87058.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.740 ±(99.9%) 5.845 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.740, 3.453), stdev = 1.518
[info]   CI (99.9%): [≈ 0, 6.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.406 ±(99.9%) 192.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.406, 113.842), stdev = 50.054
[info]   CI (99.9%): [≈ 0, 217.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 01:00:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29683.923 ops/s
[info] # Warmup Iteration   2: 71396.683 ops/s
[info] # Warmup Iteration   3: 74766.530 ops/s
[info] # Warmup Iteration   4: 72448.390 ops/s
[info] # Warmup Iteration   5: 77186.828 ops/s
[info] Iteration   1: 77620.386 ops/s
[info]                  ·gc.alloc.rate:                   1641.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              33272.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27047.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 76925.465 ops/s
[info]                  ·gc.alloc.rate:                   1653.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              33832.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40975.652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.426 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77255.214 ops/s
[info]                  ·gc.alloc.rate:               1633.333 MB/sec
[info]                  ·gc.alloc.rate.norm:          33273.981 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27251.250 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 77112.435 ops/s
[info]                  ·gc.alloc.rate:                   1657.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              33822.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41038.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.275 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 77261.645 ops/s
[info]                  ·gc.alloc.rate:               1634.281 MB/sec
[info]                  ·gc.alloc.rate.norm:          33278.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27364.128 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   77235.029 ±(99.9%) 982.622 ops/s [Average]
[info]   (min, avg, max) = (76925.465, 77235.029, 77620.386), stdev = 255.184
[info]   CI (99.9%): [76252.407, 78217.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1643.919 ±(99.9%) 42.272 MB/sec [Average]
[info]   (min, avg, max) = (1633.333, 1643.919, 1657.173), stdev = 10.978
[info]   CI (99.9%): [1601.647, 1686.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   33495.899 ±(99.9%) 1164.650 B/op [Average]
[info]   (min, avg, max) = (33272.673, 33495.899, 33832.099), stdev = 302.456
[info]   CI (99.9%): [32331.249, 34660.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1605.841 ±(99.9%) 1409.415 MB/sec [Average]
[info]   (min, avg, max) = (1334.148, 1605.841, 2010.763), stdev = 366.020
[info]   CI (99.9%): [196.427, 3015.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   32735.546 ±(99.9%) 29079.733 B/op [Average]
[info]   (min, avg, max) = (27047.782, 32735.546, 41038.919), stdev = 7551.914
[info]   CI (99.9%): [3655.813, 61815.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.425 ±(99.9%) 2.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.425, 1.275), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 172490.841 ops/s
[info] # Warmup Iteration   2: 316951.754 ops/s
[info] # Warmup Iteration   3: 329323.536 ops/s
[info] # Warmup Iteration   4: 330072.865 ops/s
[info] # Warmup Iteration   5: 329563.461 ops/s
[info] Iteration   1: 330900.201 ops/s
[info]                  ·gc.alloc.rate:                   653.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              3110.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3190.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 330803.175 ops/s
[info]                  ·gc.alloc.rate:               659.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          3136.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3191.351 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 327423.454 ops/s
[info]                  ·gc.alloc.rate:                   651.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              3129.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3225.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 328427.881 ops/s
[info]                  ·gc.alloc.rate:               654.187 MB/sec
[info]                  ·gc.alloc.rate.norm:          3134.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3216.080 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 329740.305 ops/s
[info]                  ·gc.alloc.rate:               649.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          3098.242 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3204.865 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   329459.003 ±(99.9%) 5830.151 ops/s [Average]
[info]   (min, avg, max) = (327423.454, 329459.003, 330900.201), stdev = 1514.072
[info]   CI (99.9%): [323628.852, 335289.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   653.540 ±(99.9%) 14.830 MB/sec [Average]
[info]   (min, avg, max) = (649.147, 653.540, 659.342), stdev = 3.851
[info]   CI (99.9%): [638.710, 668.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3121.991 ±(99.9%) 65.419 B/op [Average]
[info]   (min, avg, max) = (3098.242, 3121.991, 3136.899), stdev = 16.989
[info]   CI (99.9%): [3056.572, 3187.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.065 ±(99.9%) 1.117 MB/sec [Average]
[info]   (min, avg, max) = (670.787, 671.065, 671.487), stdev = 0.290
[info]   CI (99.9%): [669.948, 672.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3205.746 ±(99.9%) 59.483 B/op [Average]
[info]   (min, avg, max) = (3190.503, 3205.746, 3225.930), stdev = 15.447
[info]   CI (99.9%): [3146.263, 3265.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.080 ±(99.9%) 0.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.200), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184223.895 ops/s
[info] # Warmup Iteration   2: 351567.577 ops/s
[info] # Warmup Iteration   3: 362669.771 ops/s
[info] # Warmup Iteration   4: 362287.300 ops/s
[info] # Warmup Iteration   5: 362633.311 ops/s
[info] Iteration   1: 362711.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 362656.294 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 361655.801 ops/s
[info]                  ·gc.alloc.rate:      0.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 4.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 362587.738 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361452.531 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   362212.862 ±(99.9%) 2338.035 ops/s [Average]
[info]   (min, avg, max) = (361452.531, 362212.862, 362711.948), stdev = 607.180
[info]   CI (99.9%): [359874.827, 364550.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.187 ±(99.9%) 1.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.187, 0.934), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.814 ±(99.9%) 6.996 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.814, 4.064), stdev = 1.817
[info]   CI (99.9%): [≈ 0, 7.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:59:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24186.351 ops/s
[info] # Warmup Iteration   2: 63573.000 ops/s
[info] # Warmup Iteration   3: 66224.770 ops/s
[info] # Warmup Iteration   4: 66109.688 ops/s
[info] # Warmup Iteration   5: 66902.843 ops/s
[info] Iteration   1: 65747.073 ops/s
[info]                  ·gc.alloc.rate:               1521.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          36423.327 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32115.700 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 67155.306 ops/s
[info]                  ·gc.alloc.rate:                   1556.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              36467.667 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31473.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 67022.265 ops/s
[info]                  ·gc.alloc.rate:                   1566.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              36784.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47255.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 67082.747 ops/s
[info]                  ·gc.alloc.rate:                   1541.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              36168.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31398.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 67385.565 ops/s
[info]                  ·gc.alloc.rate:               1546.943 MB/sec
[info]                  ·gc.alloc.rate.norm:          36132.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31241.329 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   66878.591 ±(99.9%) 2492.715 ops/s [Average]
[info]   (min, avg, max) = (65747.073, 66878.591, 67385.565), stdev = 647.350
[info]   CI (99.9%): [64385.876, 69371.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1546.622 ±(99.9%) 64.407 MB/sec [Average]
[info]   (min, avg, max) = (1521.874, 1546.622, 1566.474), stdev = 16.726
[info]   CI (99.9%): [1482.214, 1611.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36395.265 ±(99.9%) 1015.065 B/op [Average]
[info]   (min, avg, max) = (36132.269, 36395.265, 36784.391), stdev = 263.609
[info]   CI (99.9%): [35380.200, 37410.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1474.645 ±(99.9%) 1157.598 MB/sec [Average]
[info]   (min, avg, max) = (1337.546, 1474.645, 2012.404), stdev = 300.625
[info]   CI (99.9%): [317.047, 2632.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   34697.012 ±(99.9%) 27064.242 B/op [Average]
[info]   (min, avg, max) = (31241.329, 34697.012, 47255.842), stdev = 7028.498
[info]   CI (99.9%): [7632.770, 61761.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 6.614 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 3.851), stdev = 1.718
[info]   CI (99.9%): [≈ 0, 7.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.282 ±(99.9%) 155.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.282, 90.433), stdev = 40.334
[info]   CI (99.9%): [≈ 0, 173.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.588
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:59:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47741.508 ops/s
[info] # Warmup Iteration   2: 131817.907 ops/s
[info] # Warmup Iteration   3: 144180.363 ops/s
[info] # Warmup Iteration   4: 146195.118 ops/s
[info] # Warmup Iteration   5: 144968.451 ops/s
[info] Iteration   1: 146152.482 ops/s
[info]                  ·gc.alloc.rate:                   1907.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              20542.224 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21706.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.487 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 147148.852 ops/s
[info]                  ·gc.alloc.rate:                   1919.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              20524.709 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21523.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 147025.250 ops/s
[info]                  ·gc.alloc.rate:                   1917.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              20517.250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14333.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 147347.881 ops/s
[info]                  ·gc.alloc.rate:                   1921.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              20526.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21432.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 148384.818 ops/s
[info]                  ·gc.alloc.rate:               1961.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          20808.143 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21295.689 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   147211.857 ±(99.9%) 3077.751 ops/s [Average]
[info]   (min, avg, max) = (146152.482, 147211.857, 148384.818), stdev = 799.282
[info]   CI (99.9%): [144134.106, 150289.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1925.508 ±(99.9%) 80.930 MB/sec [Average]
[info]   (min, avg, max) = (1907.594, 1925.508, 1961.857), stdev = 21.017
[info]   CI (99.9%): [1844.578, 2006.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   20583.784 ±(99.9%) 484.215 B/op [Average]
[info]   (min, avg, max) = (20517.250, 20583.784, 20808.143), stdev = 125.749
[info]   CI (99.9%): [20099.569, 21067.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1876.414 ±(99.9%) 1156.494 MB/sec [Average]
[info]   (min, avg, max) = (1339.195, 1876.414, 2015.752), stdev = 300.338
[info]   CI (99.9%): [719.920, 3032.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20058.348 ±(99.9%) 12337.478 B/op [Average]
[info]   (min, avg, max) = (14333.089, 20058.348, 21706.945), stdev = 3204.004
[info]   CI (99.9%): [7720.869, 32395.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 4.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 2.831), stdev = 1.231
[info]   CI (99.9%): [≈ 0, 5.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.502 ±(99.9%) 51.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.502, 30.487), stdev = 13.249
[info]   CI (99.9%): [≈ 0, 59.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.783 ops/s
[info] # Warmup Iteration   2: 760275.221 ops/s
[info] # Warmup Iteration   3: 822005.529 ops/s
[info] # Warmup Iteration   4: 850508.035 ops/s
[info] # Warmup Iteration   5: 846875.925 ops/s
[info] Iteration   1: 833348.468 ops/s
[info]                  ·gc.alloc.rate:      461.914 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 851455.026 ops/s
[info]                  ·gc.alloc.rate:                   490.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              906.844 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 846449.437 ops/s
[info]                  ·gc.alloc.rate:                   486.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 853226.528 ops/s
[info]                  ·gc.alloc.rate:                   490.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1230.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 856816.819 ops/s
[info]                  ·gc.alloc.rate:      474.762 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   848259.256 ±(99.9%) 35172.090 ops/s [Average]
[info]   (min, avg, max) = (833348.468, 848259.256, 856816.819), stdev = 9134.080
[info]   CI (99.9%): [813087.165, 883431.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   480.903 ±(99.9%) 47.967 MB/sec [Average]
[info]   (min, avg, max) = (461.914, 480.903, 490.739), stdev = 12.457
[info]   CI (99.9%): [432.937, 528.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   892.001 ±(99.9%) 70.395 B/op [Average]
[info]   (min, avg, max) = (872.001, 892.001, 906.844), stdev = 18.281
[info]   CI (99.9%): [821.605, 962.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.920 ±(99.9%) 1405.775 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.920, 667.026), stdev = 365.075
[info]   CI (99.9%): [≈ 0, 1805.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   739.996 ±(99.9%) 2601.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 739.996, 1238.611), stdev = 675.528
[info]   CI (99.9%): [≈ 0, 3341.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.008 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118692.578 ops/s
[info] # Warmup Iteration   2: 415575.060 ops/s
[info] # Warmup Iteration   3: 432104.477 ops/s
[info] # Warmup Iteration   4: 426513.358 ops/s
[info] # Warmup Iteration   5: 428275.202 ops/s
[info] Iteration   1: 427168.639 ops/s
[info]                  ·gc.alloc.rate:               437.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          1610.601 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1884.997 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 431730.643 ops/s
[info]                  ·gc.alloc.rate:      430.233 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 430543.484 ops/s
[info]                  ·gc.alloc.rate:               447.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          1634.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2436.261 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 430410.451 ops/s
[info]                  ·gc.alloc.rate:               448.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          1640.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2437.065 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 432363.596 ops/s
[info]                  ·gc.alloc.rate:      430.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   430443.363 ±(99.9%) 7720.352 ops/s [Average]
[info]   (min, avg, max) = (427168.639, 430443.363, 432363.596), stdev = 2004.951
[info]   CI (99.9%): [422723.011, 438163.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   438.829 ±(99.9%) 33.784 MB/sec [Average]
[info]   (min, avg, max) = (430.233, 438.829, 448.709), stdev = 8.773
[info]   CI (99.9%): [405.045, 472.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1604.374 ±(99.9%) 135.018 B/op [Average]
[info]   (min, avg, max) = (1568.001, 1604.374, 1640.848), stdev = 35.064
[info]   CI (99.9%): [1469.356, 1739.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.953 ±(99.9%) 1319.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.953, 666.481), stdev = 342.671
[info]   CI (99.9%): [≈ 0, 1688.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1351.664 ±(99.9%) 4829.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1351.664, 2437.065), stdev = 1254.281
[info]   CI (99.9%): [≈ 0, 6181.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:58:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637814.208 ops/s
[info] # Warmup Iteration   2: 1076833.887 ops/s
[info] # Warmup Iteration   3: 1025514.038 ops/s
[info] # Warmup Iteration   4: 1139089.100 ops/s
[info] # Warmup Iteration   5: 1143541.216 ops/s
[info] Iteration   1: 1125055.001 ops/s
[info]                  ·gc.alloc.rate:                   403.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1131034.428 ops/s
[info]                  ·gc.alloc.rate:               411.389 MB/sec
[info]                  ·gc.alloc.rate.norm:          572.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.622 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 968429.471 ops/s
[info]                  ·gc.alloc.rate:      334.864 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.211 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1136522.054 ops/s
[info]                  ·gc.alloc.rate:                   412.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              571.519 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     927.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.978 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1147635.490 ops/s
[info]                  ·gc.alloc.rate:      396.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   1101735.289 ±(99.9%) 288731.780 ops/s [Average]
[info]   (min, avg, max) = (968429.471, 1101735.289, 1147635.490), stdev = 74982.726
[info]   CI (99.9%): [813003.509, 1390467.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   391.855 ±(99.9%) 125.152 MB/sec [Average]
[info]   (min, avg, max) = (334.864, 391.855, 412.711), stdev = 32.502
[info]   CI (99.9%): [266.702, 517.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   559.351 ±(99.9%) 54.869 B/op [Average]
[info]   (min, avg, max) = (544.000, 559.351, 572.473), stdev = 14.249
[info]   CI (99.9%): [504.482, 614.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.109 ±(99.9%) 1324.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 370.109, 669.481), stdev = 343.956
[info]   CI (99.9%): [≈ 0, 1694.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   514.879 ±(99.9%) 1840.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 514.879, 931.622), stdev = 478.047
[info]   CI (99.9%): [≈ 0, 2355.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 4.930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.873), stdev = 1.280
[info]   CI (99.9%): [≈ 0, 5.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.807 ±(99.9%) 6.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.807, 3.978), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6630.161 ops/s
[info] # Warmup Iteration   2: 70005.852 ops/s
[info] # Warmup Iteration   3: 78660.715 ops/s
[info] # Warmup Iteration   4: 81112.983 ops/s
[info] # Warmup Iteration   5: 81702.929 ops/s
[info] Iteration   1: 81994.350 ops/s
[info]                  ·gc.alloc.rate:                   3284.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              63053.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3335.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64023.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.998 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 82001.852 ops/s
[info]                  ·gc.alloc.rate:                   3313.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              63594.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3343.056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64162.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.400 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 82324.575 ops/s
[info]                  ·gc.alloc.rate:               3313.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          63350.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2684.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51311.261 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 82078.981 ops/s
[info]                  ·gc.alloc.rate:               3330.529 MB/sec
[info]                  ·gc.alloc.rate.norm:          63861.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3366.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64551.631 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 81125.157 ops/s
[info]                  ·gc.alloc.rate:               3295.613 MB/sec
[info]                  ·gc.alloc.rate.norm:          63914.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65542.462 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   81904.983 ±(99.9%) 1755.986 ops/s [Average]
[info]   (min, avg, max) = (81125.157, 81904.983, 82324.575), stdev = 456.024
[info]   CI (99.9%): [80148.997, 83660.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3307.653 ±(99.9%) 68.389 MB/sec [Average]
[info]   (min, avg, max) = (3284.818, 3307.653, 3330.529), stdev = 17.760
[info]   CI (99.9%): [3239.263, 3376.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63555.248 ±(99.9%) 1386.187 B/op [Average]
[info]   (min, avg, max) = (63053.636, 63555.248, 63914.961), stdev = 359.988
[info]   CI (99.9%): [62169.061, 64941.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3221.690 ±(99.9%) 1159.356 MB/sec [Average]
[info]   (min, avg, max) = (2684.036, 3221.690, 3379.531), stdev = 301.081
[info]   CI (99.9%): [2062.335, 4381.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61918.183 ±(99.9%) 22946.468 B/op [Average]
[info]   (min, avg, max) = (51311.261, 61918.183, 65542.462), stdev = 5959.125
[info]   CI (99.9%): [38971.715, 84864.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.479 ±(99.9%) 3.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.479, 1.998), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 3.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76238.632 ops/s
[info] # Warmup Iteration   2: 264215.190 ops/s
[info] # Warmup Iteration   3: 271582.867 ops/s
[info] # Warmup Iteration   4: 276609.952 ops/s
[info] # Warmup Iteration   5: 276729.586 ops/s
[info] Iteration   1: 275969.761 ops/s
[info]                  ·gc.alloc.rate:                   1668.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              9512.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11478.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 275154.213 ops/s
[info]                  ·gc.alloc.rate:                   1671.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              9559.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7679.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 275275.577 ops/s
[info]                  ·gc.alloc.rate:                   1692.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              9678.446 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11502.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 277989.032 ops/s
[info]                  ·gc.alloc.rate:                   1683.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              9533.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7573.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 276891.990 ops/s
[info]                  ·gc.alloc.rate:                   1698.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              9651.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11408.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   276256.115 ±(99.9%) 4582.502 ops/s [Average]
[info]   (min, avg, max) = (275154.213, 276256.115, 277989.032), stdev = 1190.061
[info]   CI (99.9%): [271673.612, 280838.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1682.861 ±(99.9%) 50.612 MB/sec [Average]
[info]   (min, avg, max) = (1668.028, 1682.861, 1698.199), stdev = 13.144
[info]   CI (99.9%): [1632.250, 1733.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9587.150 ±(99.9%) 282.779 B/op [Average]
[info]   (min, avg, max) = (9512.907, 9587.150, 9678.446), stdev = 73.437
[info]   CI (99.9%): [9304.371, 9869.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1742.444 ±(99.9%) 1414.342 MB/sec [Average]
[info]   (min, avg, max) = (1337.605, 1742.444, 2012.667), stdev = 367.300
[info]   CI (99.9%): [328.101, 3156.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9928.369 ±(99.9%) 8094.414 B/op [Average]
[info]   (min, avg, max) = (7573.070, 9928.369, 11502.639), stdev = 2102.094
[info]   CI (99.9%): [1833.956, 18022.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.716 ±(99.9%) 5.258 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.716, 3.143), stdev = 1.365
[info]   CI (99.9%): [≈ 0, 5.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.095 ±(99.9%) 30.077 B/op [Average]
[info]   (min, avg, max) = (0.118, 4.095, 17.980), stdev = 7.811
[info]   CI (99.9%): [≈ 0, 34.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:57:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.721 ops/s
[info] # Warmup Iteration   2: 1171520.526 ops/s
[info] # Warmup Iteration   3: 1226016.370 ops/s
[info] # Warmup Iteration   4: 1248695.101 ops/s
[info] # Warmup Iteration   5: 1231656.194 ops/s
[info] Iteration   1: 1254212.353 ops/s
[info]                  ·gc.alloc.rate:      427.144 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1129335.743 ops/s
[info]                  ·gc.alloc.rate:               401.306 MB/sec
[info]                  ·gc.alloc.rate.norm:          559.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1255769.714 ops/s
[info]                  ·gc.alloc.rate:      428.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 537.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1254300.519 ops/s
[info]                  ·gc.alloc.rate:                   449.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              564.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1253369.174 ops/s
[info]                  ·gc.alloc.rate:               449.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          564.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 836.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1229397.501 ±(99.9%) 215416.145 ops/s [Average]
[info]   (min, avg, max) = (1129335.743, 1229397.501, 1255769.714), stdev = 55942.889
[info]   CI (99.9%): [1013981.355, 1444813.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   431.223 ±(99.9%) 76.889 MB/sec [Average]
[info]   (min, avg, max) = (401.306, 431.223, 449.939), stdev = 19.968
[info]   CI (99.9%): [354.334, 508.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   552.155 ±(99.9%) 55.630 B/op [Average]
[info]   (min, avg, max) = (536.000, 552.155, 564.466), stdev = 14.447
[info]   CI (99.9%): [496.525, 607.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.599 ±(99.9%) 1404.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.599, 666.141), stdev = 364.782
[info]   CI (99.9%): [≈ 0, 1804.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   519.958 ±(99.9%) 1833.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 519.958, 927.894), stdev = 476.137
[info]   CI (99.9%): [≈ 0, 2353.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.026), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:57:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 532426.336 ops/s
[info] # Warmup Iteration   2: 1482087.295 ops/s
[info] # Warmup Iteration   3: 1480665.502 ops/s
[info] # Warmup Iteration   4: 1561449.311 ops/s
[info] # Warmup Iteration   5: 1513521.632 ops/s
[info] Iteration   1: 1541417.379 ops/s
[info]                  ·gc.alloc.rate:               923.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          943.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 680.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 1585573.517 ops/s
[info]                  ·gc.alloc.rate:               946.700 MB/sec
[info]                  ·gc.alloc.rate.norm:          939.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.263 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1566861.714 ops/s
[info]                  ·gc.alloc.rate:                   950.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              954.907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1338.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1579989.480 ops/s
[info]                  ·gc.alloc.rate:               950.020 MB/sec
[info]                  ·gc.alloc.rate.norm:          946.333 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 663.551 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1586230.240 ops/s
[info]                  ·gc.alloc.rate:               956.338 MB/sec
[info]                  ·gc.alloc.rate.norm:          948.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1323.225 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1572014.466 ±(99.9%) 72353.936 ops/s [Average]
[info]   (min, avg, max) = (1541417.379, 1572014.466, 1586230.240), stdev = 18790.087
[info]   CI (99.9%): [1499660.531, 1644368.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   945.470 ±(99.9%) 48.895 MB/sec [Average]
[info]   (min, avg, max) = (923.618, 945.470, 956.338), stdev = 12.698
[info]   CI (99.9%): [896.575, 994.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   946.542 ±(99.9%) 22.348 B/op [Average]
[info]   (min, avg, max) = (939.662, 946.542, 954.907), stdev = 5.804
[info]   CI (99.9%): [924.193, 968.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   933.062 ±(99.9%) 1405.996 MB/sec [Average]
[info]   (min, avg, max) = (666.136, 933.062, 1333.762), stdev = 365.133
[info]   CI (99.9%): [≈ 0, 2339.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   933.435 ±(99.9%) 1397.037 B/op [Average]
[info]   (min, avg, max) = (661.263, 933.435, 1338.255), stdev = 362.806
[info]   CI (99.9%): [≈ 0, 2330.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136021.802 ops/s
[info] # Warmup Iteration   2: 1770039.593 ops/s
[info] # Warmup Iteration   3: 1889203.583 ops/s
[info] # Warmup Iteration   4: 1919638.835 ops/s
[info] # Warmup Iteration   5: 1895585.243 ops/s
[info] Iteration   1: 1898422.790 ops/s
[info]                  ·gc.alloc.rate:                   664.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              551.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     556.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1922169.408 ops/s
[info]                  ·gc.alloc.rate:               682.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          558.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.264 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1917906.311 ops/s
[info]                  ·gc.alloc.rate:                   667.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              547.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     551.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1915637.898 ops/s
[info]                  ·gc.alloc.rate:               670.376 MB/sec
[info]                  ·gc.alloc.rate.norm:          550.738 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 551.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1922905.235 ops/s
[info]                  ·gc.alloc.rate:               681.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          557.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 549.880 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1915408.329 ±(99.9%) 38348.090 ops/s [Average]
[info]   (min, avg, max) = (1898422.790, 1915408.329, 1922905.235), stdev = 9958.877
[info]   CI (99.9%): [1877060.238, 1953756.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   673.202 ±(99.9%) 30.897 MB/sec [Average]
[info]   (min, avg, max) = (664.749, 673.202, 682.047), stdev = 8.024
[info]   CI (99.9%): [642.305, 704.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   553.069 ±(99.9%) 18.221 B/op [Average]
[info]   (min, avg, max) = (547.483, 553.069, 558.322), stdev = 4.732
[info]   CI (99.9%): [534.847, 571.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.384 ±(99.9%) 1.753 MB/sec [Average]
[info]   (min, avg, max) = (670.831, 671.384, 671.823), stdev = 0.455
[info]   CI (99.9%): [669.632, 673.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   551.596 ±(99.9%) 10.435 B/op [Average]
[info]   (min, avg, max) = (549.264, 551.596, 556.141), stdev = 2.710
[info]   CI (99.9%): [541.161, 562.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1188549.324 ops/s
[info] # Warmup Iteration   2: 1918903.250 ops/s
[info] # Warmup Iteration   3: 2052853.379 ops/s
[info] # Warmup Iteration   4: 2051408.175 ops/s
[info] # Warmup Iteration   5: 2054052.933 ops/s
[info] Iteration   1: 2052093.546 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2052707.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2051067.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2052932.840 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2051937.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   2052147.915 ±(99.9%) 2819.072 ops/s [Average]
[info]   (min, avg, max) = (2051067.490, 2052147.915, 2052932.840), stdev = 732.104
[info]   CI (99.9%): [2049328.842, 2054966.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:56:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11762.015 ops/s
[info] # Warmup Iteration   2: 37599.832 ops/s
[info] # Warmup Iteration   3: 41888.166 ops/s
[info] # Warmup Iteration   4: 40577.271 ops/s
[info] # Warmup Iteration   5: 42305.088 ops/s
[info] Iteration   1: 42446.478 ops/s
[info]                  ·gc.alloc.rate:                   2114.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              78381.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74679.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.742 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 42474.733 ops/s
[info]                  ·gc.alloc.rate:                   2115.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              78387.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74367.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.171 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 42136.197 ops/s
[info]                  ·gc.alloc.rate:                   2085.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              77876.231 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74869.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.555 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 42495.202 ops/s
[info]                  ·gc.alloc.rate:                   2102.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              77841.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74258.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.939 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 42509.892 ops/s
[info]                  ·gc.alloc.rate:               2130.484 MB/sec
[info]                  ·gc.alloc.rate.norm:          78872.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74332.810 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   42412.500 ±(99.9%) 601.785 ops/s [Average]
[info]   (min, avg, max) = (42136.197, 42412.500, 42509.892), stdev = 156.282
[info]   CI (99.9%): [41810.716, 43014.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2109.568 ±(99.9%) 65.287 MB/sec [Average]
[info]   (min, avg, max) = (2085.016, 2109.568, 2130.484), stdev = 16.955
[info]   CI (99.9%): [2044.280, 2174.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78272.034 ±(99.9%) 1642.919 B/op [Average]
[info]   (min, avg, max) = (77841.643, 78272.034, 78872.710), stdev = 426.661
[info]   CI (99.9%): [76629.115, 79914.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.915 ±(99.9%) 15.081 MB/sec [Average]
[info]   (min, avg, max) = (2004.525, 2007.915, 2014.542), stdev = 3.917
[info]   CI (99.9%): [1992.834, 2022.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74501.681 ±(99.9%) 1005.503 B/op [Average]
[info]   (min, avg, max) = (74258.611, 74501.681, 74869.849), stdev = 261.126
[info]   CI (99.9%): [73496.178, 75507.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 6.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.887, 4.039), stdev = 1.764
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.881 ±(99.9%) 251.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.881, 149.742), stdev = 65.394
[info]   CI (99.9%): [≈ 0, 284.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:56:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2735.726 ops/s
[info] # Warmup Iteration   2: 13652.673 ops/s
[info] # Warmup Iteration   3: 15670.390 ops/s
[info] # Warmup Iteration   4: 15697.587 ops/s
[info] # Warmup Iteration   5: 15732.164 ops/s
[info] Iteration   1: 15543.209 ops/s
[info]                  ·gc.alloc.rate:               1909.265 MB/sec
[info]                  ·gc.alloc.rate.norm:          193314.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 203024.171 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 14841.625 ops/s
[info]                  ·gc.alloc.rate:                   1836.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              194687.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212978.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15055.746 ops/s
[info]                  ·gc.alloc.rate:               1863.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          194781.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210404.595 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 15701.554 ops/s
[info]                  ·gc.alloc.rate:                   1914.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              191829.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134744.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15675.128 ops/s
[info]                  ·gc.alloc.rate:                   1953.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              196014.135 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     202819.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   15363.452 ±(99.9%) 1504.654 ops/s [Average]
[info]   (min, avg, max) = (14841.625, 15363.452, 15701.554), stdev = 390.754
[info]   CI (99.9%): [13858.798, 16868.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1895.177 ±(99.9%) 176.603 MB/sec [Average]
[info]   (min, avg, max) = (1836.041, 1895.177, 1953.042), stdev = 45.863
[info]   CI (99.9%): [1718.574, 2071.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   194125.546 ±(99.9%) 6161.947 B/op [Average]
[info]   (min, avg, max) = (191829.453, 194125.546, 196014.135), stdev = 1600.238
[info]   CI (99.9%): [187963.599, 200287.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1878.386 ±(99.9%) 1149.389 MB/sec [Average]
[info]   (min, avg, max) = (1344.529, 1878.386, 2020.851), stdev = 298.493
[info]   CI (99.9%): [728.997, 3027.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   192794.321 ±(99.9%) 126141.381 B/op [Average]
[info]   (min, avg, max) = (134744.420, 192794.321, 212978.755), stdev = 32758.516
[info]   CI (99.9%): [66652.940, 318935.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.277 ±(99.9%) 4.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.277, 2.207), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 5.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29755.513 ops/s
[info] # Warmup Iteration   2: 95932.838 ops/s
[info] # Warmup Iteration   3: 97071.318 ops/s
[info] # Warmup Iteration   4: 100126.288 ops/s
[info] # Warmup Iteration   5: 92537.340 ops/s
[info] Iteration   1: 98553.011 ops/s
[info]                  ·gc.alloc.rate:                   1325.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              21164.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21340.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 98353.489 ops/s
[info]                  ·gc.alloc.rate:                   1319.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              21104.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21404.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 100280.486 ops/s
[info]                  ·gc.alloc.rate:               1348.765 MB/sec
[info]                  ·gc.alloc.rate.norm:          21168.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21003.721 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 100356.372 ops/s
[info]                  ·gc.alloc.rate:                   1353.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              21226.448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21008.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 100757.807 ops/s
[info]                  ·gc.alloc.rate:                   1359.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              21242.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20873.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   99660.233 ±(99.9%) 4308.384 ops/s [Average]
[info]   (min, avg, max) = (98353.489, 99660.233, 100757.807), stdev = 1118.874
[info]   CI (99.9%): [95351.849, 103968.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1341.393 ±(99.9%) 69.087 MB/sec [Average]
[info]   (min, avg, max) = (1319.065, 1341.393, 1359.899), stdev = 17.942
[info]   CI (99.9%): [1272.306, 1410.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21181.175 ±(99.9%) 212.508 B/op [Average]
[info]   (min, avg, max) = (21104.449, 21181.175, 21242.706), stdev = 55.188
[info]   CI (99.9%): [20968.667, 21393.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1337.749 ±(99.9%) 5.079 MB/sec [Average]
[info]   (min, avg, max) = (1336.237, 1337.749, 1339.612), stdev = 1.319
[info]   CI (99.9%): [1332.670, 1342.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21126.099 ±(99.9%) 895.534 B/op [Average]
[info]   (min, avg, max) = (20873.086, 21126.099, 21404.296), stdev = 232.567
[info]   CI (99.9%): [20230.565, 22021.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.829 ±(99.9%) 6.910 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.829, 4.038), stdev = 1.795
[info]   CI (99.9%): [≈ 0, 7.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12.998 ±(99.9%) 108.357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.998, 63.334), stdev = 28.140
[info]   CI (99.9%): [≈ 0, 121.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101632.098 ops/s
[info] # Warmup Iteration   2: 248968.620 ops/s
[info] # Warmup Iteration   3: 258672.928 ops/s
[info] # Warmup Iteration   4: 260087.946 ops/s
[info] # Warmup Iteration   5: 259478.586 ops/s
[info] Iteration   1: 258172.423 ops/s
[info]                  ·gc.alloc.rate:               865.269 MB/sec
[info]                  ·gc.alloc.rate.norm:          5273.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4091.225 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 253183.867 ops/s
[info]                  ·gc.alloc.rate:               843.087 MB/sec
[info]                  ·gc.alloc.rate.norm:          5240.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4171.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 260798.920 ops/s
[info]                  ·gc.alloc.rate:               873.195 MB/sec
[info]                  ·gc.alloc.rate.norm:          5268.619 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4054.260 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 253943.452 ops/s
[info]                  ·gc.alloc.rate:                   858.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              5323.179 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8329.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 258494.861 ops/s
[info]                  ·gc.alloc.rate:                   865.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              5270.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4092.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.127 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   256918.705 ±(99.9%) 12464.626 ops/s [Average]
[info]   (min, avg, max) = (253183.867, 256918.705, 260798.920), stdev = 3237.024
[info]   CI (99.9%): [244454.078, 269383.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   861.225 ±(99.9%) 43.664 MB/sec [Average]
[info]   (min, avg, max) = (843.087, 861.225, 873.195), stdev = 11.339
[info]   CI (99.9%): [817.561, 904.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5275.246 ±(99.9%) 114.882 B/op [Average]
[info]   (min, avg, max) = (5240.751, 5275.246, 5323.179), stdev = 29.834
[info]   CI (99.9%): [5160.364, 5390.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.088 ±(99.9%) 1157.575 MB/sec [Average]
[info]   (min, avg, max) = (671.136, 806.088, 1343.850), stdev = 300.618
[info]   CI (99.9%): [≈ 0, 1963.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4947.769 ±(99.9%) 7280.466 B/op [Average]
[info]   (min, avg, max) = (4054.260, 4947.769, 8329.109), stdev = 1890.714
[info]   CI (99.9%): [≈ 0, 12228.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.051 ±(99.9%) 0.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.129), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:55:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1953.382 ops/s
[info] # Warmup Iteration   2: 10269.108 ops/s
[info] # Warmup Iteration   3: 12839.556 ops/s
[info] # Warmup Iteration   4: 12823.759 ops/s
[info] # Warmup Iteration   5: 12781.249 ops/s
[info] Iteration   1: 12803.633 ops/s
[info]                  ·gc.alloc.rate:                   2059.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              253202.227 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247118.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424.761 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 12925.562 ops/s
[info]                  ·gc.alloc.rate:                   2088.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              254331.296 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244300.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12924.199 ops/s
[info]                  ·gc.alloc.rate:               2077.249 MB/sec
[info]                  ·gc.alloc.rate.norm:          252940.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 243588.901 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 12863.948 ops/s
[info]                  ·gc.alloc.rate:               2062.868 MB/sec
[info]                  ·gc.alloc.rate.norm:          252391.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244724.779 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 12881.619 ops/s
[info]                  ·gc.alloc.rate:               2075.382 MB/sec
[info]                  ·gc.alloc.rate.norm:          253565.894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244768.109 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   12879.792 ±(99.9%) 193.698 ops/s [Average]
[info]   (min, avg, max) = (12803.633, 12879.792, 12925.562), stdev = 50.303
[info]   CI (99.9%): [12686.094, 13073.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2072.863 ±(99.9%) 45.249 MB/sec [Average]
[info]   (min, avg, max) = (2059.879, 2072.863, 2088.935), stdev = 11.751
[info]   CI (99.9%): [2027.613, 2118.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   253286.282 ±(99.9%) 2788.650 B/op [Average]
[info]   (min, avg, max) = (252391.156, 253286.282, 254331.296), stdev = 724.204
[info]   CI (99.9%): [250497.632, 256074.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2004.192 ±(99.9%) 16.616 MB/sec [Average]
[info]   (min, avg, max) = (2000.209, 2004.192, 2010.388), stdev = 4.315
[info]   CI (99.9%): [1987.576, 2020.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   244900.110 ±(99.9%) 5111.997 B/op [Average]
[info]   (min, avg, max) = (243588.901, 244900.110, 247118.723), stdev = 1327.569
[info]   CI (99.9%): [239788.113, 250012.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.928 ±(99.9%) 5.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.928, 3.456), stdev = 1.503
[info]   CI (99.9%): [≈ 0, 6.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   113.847 ±(99.9%) 711.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 113.847, 424.761), stdev = 184.722
[info]   CI (99.9%): [≈ 0, 825.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:55:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6663.816 ops/s
[info] # Warmup Iteration   2: 30847.335 ops/s
[info] # Warmup Iteration   3: 33164.946 ops/s
[info] # Warmup Iteration   4: 32794.037 ops/s
[info] # Warmup Iteration   5: 33038.878 ops/s
[info] Iteration   1: 33314.759 ops/s
[info]                  ·gc.alloc.rate:               2784.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          131565.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2678.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 126536.541 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 32799.797 ops/s
[info]                  ·gc.alloc.rate:                   2758.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              132342.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128522.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33417.095 ops/s
[info]                  ·gc.alloc.rate:                   2808.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              132266.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126385.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33402.451 ops/s
[info]                  ·gc.alloc.rate:                   2807.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              132290.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126799.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33274.284 ops/s
[info]                  ·gc.alloc.rate:               2798.263 MB/sec
[info]                  ·gc.alloc.rate.norm:          132357.644 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127618.073 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   33241.677 ±(99.9%) 978.476 ops/s [Average]
[info]   (min, avg, max) = (32799.797, 33241.677, 33417.095), stdev = 254.107
[info]   CI (99.9%): [32263.201, 34220.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2791.529 ±(99.9%) 80.256 MB/sec [Average]
[info]   (min, avg, max) = (2758.321, 2791.529, 2808.429), stdev = 20.842
[info]   CI (99.9%): [2711.273, 2871.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   132164.424 ±(99.9%) 1297.721 B/op [Average]
[info]   (min, avg, max) = (131565.256, 132164.424, 132357.644), stdev = 337.014
[info]   CI (99.9%): [130866.703, 133462.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2685.997 ±(99.9%) 32.622 MB/sec [Average]
[info]   (min, avg, max) = (2678.508, 2685.997, 2698.061), stdev = 8.472
[info]   CI (99.9%): [2653.375, 2718.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127172.564 ±(99.9%) 3435.972 B/op [Average]
[info]   (min, avg, max) = (126385.675, 127172.564, 128522.956), stdev = 892.311
[info]   CI (99.9%): [123736.592, 130608.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.592 ±(99.9%) 2.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.592, 0.999), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35683.764 ops/s
[info] # Warmup Iteration   2: 98663.669 ops/s
[info] # Warmup Iteration   3: 102855.973 ops/s
[info] # Warmup Iteration   4: 105881.558 ops/s
[info] # Warmup Iteration   5: 105766.145 ops/s
[info] Iteration   1: 105244.613 ops/s
[info]                  ·gc.alloc.rate:                   1498.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              22402.746 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30029.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.311 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 105733.706 ops/s
[info]                  ·gc.alloc.rate:               1488.469 MB/sec
[info]                  ·gc.alloc.rate.norm:          22156.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19949.269 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 105642.393 ops/s
[info]                  ·gc.alloc.rate:                   1499.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              22340.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19977.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 106119.513 ops/s
[info]                  ·gc.alloc.rate:                   1507.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              22346.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19837.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.544 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 105864.034 ops/s
[info]                  ·gc.alloc.rate:               1503.623 MB/sec
[info]                  ·gc.alloc.rate.norm:          22349.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19865.921 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   105720.852 ±(99.9%) 1236.645 ops/s [Average]
[info]   (min, avg, max) = (105244.613, 105720.852, 106119.513), stdev = 321.153
[info]   CI (99.9%): [104484.206, 106957.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1499.466 ±(99.9%) 27.532 MB/sec [Average]
[info]   (min, avg, max) = (1488.469, 1499.466, 1507.494), stdev = 7.150
[info]   CI (99.9%): [1471.934, 1526.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22319.385 ±(99.9%) 362.589 B/op [Average]
[info]   (min, avg, max) = (22156.921, 22319.385, 22402.746), stdev = 94.163
[info]   CI (99.9%): [21956.797, 22681.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1472.803 ±(99.9%) 1152.336 MB/sec [Average]
[info]   (min, avg, max) = (1336.538, 1472.803, 2008.124), stdev = 299.258
[info]   CI (99.9%): [320.468, 2625.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21931.892 ±(99.9%) 17431.440 B/op [Average]
[info]   (min, avg, max) = (19837.951, 21931.892, 30029.188), stdev = 4526.889
[info]   CI (99.9%): [4500.452, 39363.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.726), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.474 ±(99.9%) 94.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.474, 55.513), stdev = 24.627
[info]   CI (99.9%): [≈ 0, 106.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 9.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101968.054 ops/s
[info] # Warmup Iteration   2: 160761.624 ops/s
[info] # Warmup Iteration   3: 178824.082 ops/s
[info] # Warmup Iteration   4: 178325.390 ops/s
[info] # Warmup Iteration   5: 178339.091 ops/s
[info] Iteration   1: 179094.863 ops/s
[info]                  ·gc.alloc.rate:               589.829 MB/sec
[info]                  ·gc.alloc.rate.norm:          5183.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5892.324 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 178892.565 ops/s
[info]                  ·gc.alloc.rate:               586.052 MB/sec
[info]                  ·gc.alloc.rate.norm:          5155.898 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5898.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 179502.759 ops/s
[info]                  ·gc.alloc.rate:      572.171 MB/sec
[info]                  ·gc.alloc.rate.norm: 5016.694 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 179053.134 ops/s
[info]                  ·gc.alloc.rate:               588.970 MB/sec
[info]                  ·gc.alloc.rate.norm:          5177.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5899.166 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 179313.048 ops/s
[info]                  ·gc.alloc.rate:                   591.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              5195.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5890.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   179171.274 ±(99.9%) 918.232 ops/s [Average]
[info]   (min, avg, max) = (178892.565, 179171.274, 179502.759), stdev = 238.462
[info]   CI (99.9%): [178253.042, 180089.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.797 ±(99.9%) 30.445 MB/sec [Average]
[info]   (min, avg, max) = (572.171, 585.797, 591.960), stdev = 7.906
[info]   CI (99.9%): [555.352, 616.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5145.637 ±(99.9%) 282.976 B/op [Average]
[info]   (min, avg, max) = (5016.694, 5145.637, 5195.428), stdev = 73.488
[info]   CI (99.9%): [4862.661, 5428.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   536.671 ±(99.9%) 1155.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 536.671, 671.195), stdev = 300.009
[info]   CI (99.9%): [≈ 0, 1691.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4716.242 ±(99.9%) 10152.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4716.242, 5899.166), stdev = 2636.462
[info]   CI (99.9%): [≈ 0, 14868.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.073 ±(99.9%) 0.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.365), stdev = 0.163
[info]   CI (99.9%): [≈ 0, 0.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:54:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113049.306 ops/s
[info] # Warmup Iteration   2: 170705.236 ops/s
[info] # Warmup Iteration   3: 193969.556 ops/s
[info] # Warmup Iteration   4: 194044.774 ops/s
[info] # Warmup Iteration   5: 194010.876 ops/s
[info] Iteration   1: 193978.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 194054.759 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 193945.574 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 194610.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 194197.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   194157.388 ±(99.9%) 1045.258 ops/s [Average]
[info]   (min, avg, max) = (193945.574, 194157.388, 194610.878), stdev = 271.450
[info]   CI (99.9%): [193112.130, 195202.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9213.102 ops/s
[info] # Warmup Iteration   2: 44021.732 ops/s
[info] # Warmup Iteration   3: 46992.842 ops/s
[info] # Warmup Iteration   4: 46220.463 ops/s
[info] # Warmup Iteration   5: 48212.591 ops/s
[info] Iteration   1: 48353.938 ops/s
[info]                  ·gc.alloc.rate:               3415.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          111132.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3346.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 108886.081 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 48260.623 ops/s
[info]                  ·gc.alloc.rate:                   3422.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              111604.335 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109337.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 48003.103 ops/s
[info]                  ·gc.alloc.rate:               3405.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          111652.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3364.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110304.578 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 47918.386 ops/s
[info]                  ·gc.alloc.rate:                   3400.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              111692.726 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110826.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.684 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 48263.144 ops/s
[info]                  ·gc.alloc.rate:               3423.590 MB/sec
[info]                  ·gc.alloc.rate.norm:          111646.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3383.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110327.260 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   48159.839 ±(99.9%) 723.904 ops/s [Average]
[info]   (min, avg, max) = (47918.386, 48159.839, 48353.938), stdev = 187.996
[info]   CI (99.9%): [47435.935, 48883.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   3413.541 ±(99.9%) 39.315 MB/sec [Average]
[info]   (min, avg, max) = (3400.502, 3413.541, 3423.590), stdev = 10.210
[info]   CI (99.9%): [3374.227, 3452.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   111545.731 ±(99.9%) 897.134 B/op [Average]
[info]   (min, avg, max) = (111132.744, 111545.731, 111692.726), stdev = 232.983
[info]   CI (99.9%): [110648.596, 112442.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   3364.236 ±(99.9%) 57.467 MB/sec [Average]
[info]   (min, avg, max) = (3346.824, 3364.236, 3383.143), stdev = 14.924
[info]   CI (99.9%): [3306.770, 3421.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   109936.220 ±(99.9%) 3069.785 B/op [Average]
[info]   (min, avg, max) = (108886.081, 109936.220, 110826.084), stdev = 797.213
[info]   CI (99.9%): [106866.435, 113006.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.387 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.229), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.630 ±(99.9%) 12.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.630, 7.468), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5308.545 ops/s
[info] # Warmup Iteration   2: 22659.919 ops/s
[info] # Warmup Iteration   3: 25683.214 ops/s
[info] # Warmup Iteration   4: 25726.469 ops/s
[info] # Warmup Iteration   5: 25616.681 ops/s
[info] Iteration   1: 25794.113 ops/s
[info]                  ·gc.alloc.rate:               1392.645 MB/sec
[info]                  ·gc.alloc.rate.norm:          84976.974 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81921.270 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 25960.825 ops/s
[info]                  ·gc.alloc.rate:               1395.914 MB/sec
[info]                  ·gc.alloc.rate.norm:          84627.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81414.566 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 26196.529 ops/s
[info]                  ·gc.alloc.rate:                   1395.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              83857.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80724.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26265.515 ops/s
[info]                  ·gc.alloc.rate:                   1411.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              84598.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80429.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.894 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 26246.281 ops/s
[info]                  ·gc.alloc.rate:               1411.183 MB/sec
[info]                  ·gc.alloc.rate.norm:          84619.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80284.845 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   26092.653 ±(99.9%) 795.645 ops/s [Average]
[info]   (min, avg, max) = (25794.113, 26092.653, 26265.515), stdev = 206.626
[info]   CI (99.9%): [25297.008, 26888.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1401.507 ±(99.9%) 35.819 MB/sec [Average]
[info]   (min, avg, max) = (1392.645, 1401.507, 1411.997), stdev = 9.302
[info]   CI (99.9%): [1365.688, 1437.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   84535.827 ±(99.9%) 1581.194 B/op [Average]
[info]   (min, avg, max) = (83857.159, 84535.827, 84976.974), stdev = 410.631
[info]   CI (99.9%): [82954.633, 86117.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1342.090 ±(99.9%) 7.108 MB/sec [Average]
[info]   (min, avg, max) = (1338.899, 1342.090, 1343.649), stdev = 1.846
[info]   CI (99.9%): [1334.982, 1349.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80954.887 ±(99.9%) 2670.188 B/op [Average]
[info]   (min, avg, max) = (80284.845, 80954.887, 81921.270), stdev = 693.439
[info]   CI (99.9%): [78284.699, 83625.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 5.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.123), stdev = 1.352
[info]   CI (99.9%): [≈ 0, 5.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   47.499 ±(99.9%) 312.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.499, 187.603), stdev = 81.246
[info]   CI (99.9%): [≈ 0, 360.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:53:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3011.585 ops/s
[info] # Warmup Iteration   2: 25368.914 ops/s
[info] # Warmup Iteration   3: 27179.837 ops/s
[info] # Warmup Iteration   4: 27686.622 ops/s
[info] # Warmup Iteration   5: 27106.711 ops/s
[info] Iteration   1: 27564.310 ops/s
[info]                  ·gc.alloc.rate:               1131.465 MB/sec
[info]                  ·gc.alloc.rate.norm:          64601.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76297.416 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 27983.151 ops/s
[info]                  ·gc.alloc.rate:               1130.296 MB/sec
[info]                  ·gc.alloc.rate.norm:          63557.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37597.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 27931.373 ops/s
[info]                  ·gc.alloc.rate:                   1140.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              64241.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75372.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 26954.312 ops/s
[info]                  ·gc.alloc.rate:               1100.924 MB/sec
[info]                  ·gc.alloc.rate.norm:          64253.556 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78075.116 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 27941.912 ops/s
[info]                  ·gc.alloc.rate:                   1136.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              64031.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37727.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.404 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   27675.012 ±(99.9%) 1682.393 ops/s [Average]
[info]   (min, avg, max) = (26954.312, 27675.012, 27983.151), stdev = 436.912
[info]   CI (99.9%): [25992.618, 29357.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1127.939 ±(99.9%) 60.192 MB/sec [Average]
[info]   (min, avg, max) = (1100.924, 1127.939, 1140.281), stdev = 15.632
[info]   CI (99.9%): [1067.747, 1188.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   64137.232 ±(99.9%) 1475.066 B/op [Average]
[info]   (min, avg, max) = (63557.978, 64137.232, 64601.971), stdev = 383.070
[info]   CI (99.9%): [62662.165, 65612.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.063 ±(99.9%) 1409.101 MB/sec [Average]
[info]   (min, avg, max) = (668.626, 1070.063, 1337.872), stdev = 365.939
[info]   CI (99.9%): [≈ 0, 2479.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61014.186 ±(99.9%) 82168.835 B/op [Average]
[info]   (min, avg, max) = (37597.671, 61014.186, 78075.116), stdev = 21338.986
[info]   CI (99.9%): [≈ 0, 143183.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.788), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   42.915 ±(99.9%) 366.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.915, 213.404), stdev = 95.307
[info]   CI (99.9%): [≈ 0, 409.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:53:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 283202.771 ops/s
[info] # Warmup Iteration   2: 598533.554 ops/s
[info] # Warmup Iteration   3: 630078.238 ops/s
[info] # Warmup Iteration   4: 632871.205 ops/s
[info] # Warmup Iteration   5: 630146.967 ops/s
[info] Iteration   1: 632834.937 ops/s
[info]                  ·gc.alloc.rate:               1688.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          4196.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3344.928 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 629429.722 ops/s
[info]                  ·gc.alloc.rate:                   1715.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5047.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 634159.768 ops/s
[info]                  ·gc.alloc.rate:                   1691.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3332.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 633513.380 ops/s
[info]                  ·gc.alloc.rate:               1714.525 MB/sec
[info]                  ·gc.alloc.rate.norm:          4259.563 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4999.531 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 634978.055 ops/s
[info]                  ·gc.alloc.rate:               1706.272 MB/sec
[info]                  ·gc.alloc.rate.norm:          4228.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3325.248 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   632983.172 ±(99.9%) 8234.897 ops/s [Average]
[info]   (min, avg, max) = (629429.722, 632983.172, 634978.055), stdev = 2138.577
[info]   CI (99.9%): [624748.276, 641218.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1703.031 ±(99.9%) 49.220 MB/sec [Average]
[info]   (min, avg, max) = (1688.165, 1703.031, 1715.138), stdev = 12.782
[info]   CI (99.9%): [1653.811, 1752.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4234.069 ±(99.9%) 154.169 B/op [Average]
[info]   (min, avg, max) = (4196.776, 4234.069, 4288.529), stdev = 40.037
[info]   CI (99.9%): [4079.899, 4388.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1612.228 ±(99.9%) 1417.427 MB/sec [Average]
[info]   (min, avg, max) = (1341.803, 1612.228, 2018.534), stdev = 368.101
[info]   CI (99.9%): [194.801, 3029.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4009.965 ±(99.9%) 3562.836 B/op [Average]
[info]   (min, avg, max) = (3325.248, 4009.965, 5047.141), stdev = 925.257
[info]   CI (99.9%): [447.129, 7572.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.645 ±(99.9%) 5.512 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.645, 3.206), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 6.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.614 ±(99.9%) 13.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.614, 8.016), stdev = 3.579
[info]   CI (99.9%): [≈ 0, 15.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 7.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1858.465 ops/s
[info] # Warmup Iteration   2: 18423.570 ops/s
[info] # Warmup Iteration   3: 22349.299 ops/s
[info] # Warmup Iteration   4: 22412.434 ops/s
[info] # Warmup Iteration   5: 21886.566 ops/s
[info] Iteration   1: 22370.144 ops/s
[info]                  ·gc.alloc.rate:                   1678.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              118086.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93782.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 22311.184 ops/s
[info]                  ·gc.alloc.rate:                   1703.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              120129.439 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141374.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 22393.879 ops/s
[info]                  ·gc.alloc.rate:                   1695.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              119148.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94150.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.502 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 22488.406 ops/s
[info]                  ·gc.alloc.rate:               1688.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          118202.251 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93892.587 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 22329.193 ops/s
[info]                  ·gc.alloc.rate:                   1692.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              119300.699 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142123.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   22378.561 ±(99.9%) 267.808 ops/s [Average]
[info]   (min, avg, max) = (22311.184, 22378.561, 22488.406), stdev = 69.549
[info]   CI (99.9%): [22110.753, 22646.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1691.705 ±(99.9%) 34.696 MB/sec [Average]
[info]   (min, avg, max) = (1678.529, 1691.705, 1703.069), stdev = 9.010
[info]   CI (99.9%): [1657.009, 1726.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118973.549 ±(99.9%) 3253.580 B/op [Average]
[info]   (min, avg, max) = (118086.441, 118973.549, 120129.439), stdev = 844.945
[info]   CI (99.9%): [115719.969, 122227.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1607.002 ±(99.9%) 1417.954 MB/sec [Average]
[info]   (min, avg, max) = (1333.066, 1607.002, 2016.423), stdev = 368.238
[info]   CI (99.9%): [189.048, 3024.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   113064.789 ±(99.9%) 100835.950 B/op [Average]
[info]   (min, avg, max) = (93782.710, 113064.789, 142123.295), stdev = 26186.776
[info]   CI (99.9%): [12228.839, 213900.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.125 ±(99.9%) 0.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.562), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.781 ±(99.9%) 66.176 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.781, 39.502), stdev = 17.186
[info]   CI (99.9%): [≈ 0, 74.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25753.647 ops/s
[info] # Warmup Iteration   2: 70076.867 ops/s
[info] # Warmup Iteration   3: 72696.673 ops/s
[info] # Warmup Iteration   4: 73291.561 ops/s
[info] # Warmup Iteration   5: 73934.857 ops/s
[info] Iteration   1: 73156.006 ops/s
[info]                  ·gc.alloc.rate:                   1935.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              41635.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43344.332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 72805.022 ops/s
[info]                  ·gc.alloc.rate:                   1938.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              41903.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43496.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 73983.078 ops/s
[info]                  ·gc.alloc.rate:                   1966.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              41843.870 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42711.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 70450.352 ops/s
[info]                  ·gc.alloc.rate:                   1891.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              42262.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44839.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 74065.377 ops/s
[info]                  ·gc.alloc.rate:               1958.616 MB/sec
[info]                  ·gc.alloc.rate.norm:          41609.973 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28466.141 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   72891.967 ±(99.9%) 5648.179 ops/s [Average]
[info]   (min, avg, max) = (70450.352, 72891.967, 74065.377), stdev = 1466.814
[info]   CI (99.9%): [67243.788, 78540.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1938.205 ±(99.9%) 112.383 MB/sec [Average]
[info]   (min, avg, max) = (1891.766, 1938.205, 1966.938), stdev = 29.186
[info]   CI (99.9%): [1825.822, 2050.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41851.132 ±(99.9%) 1012.222 B/op [Average]
[info]   (min, avg, max) = (41609.973, 41851.132, 42262.239), stdev = 262.871
[info]   CI (99.9%): [40838.910, 42863.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1876.316 ±(99.9%) 1154.687 MB/sec [Average]
[info]   (min, avg, max) = (1339.925, 1876.316, 2014.721), stdev = 299.868
[info]   CI (99.9%): [721.630, 3031.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   40571.620 ±(99.9%) 26228.252 B/op [Average]
[info]   (min, avg, max) = (28466.141, 40571.620, 44839.687), stdev = 6811.394
[info]   CI (99.9%): [14343.369, 66799.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 4.876 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.779, 2.977), stdev = 1.266
[info]   CI (99.9%): [≈ 0, 5.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.761 ±(99.9%) 104.907 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.761, 64.042), stdev = 27.244
[info]   CI (99.9%): [≈ 0, 121.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:52:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48202.385 ops/s
[info] # Warmup Iteration   2: 169194.577 ops/s
[info] # Warmup Iteration   3: 184466.939 ops/s
[info] # Warmup Iteration   4: 184452.195 ops/s
[info] # Warmup Iteration   5: 185072.537 ops/s
[info] Iteration   1: 185274.331 ops/s
[info]                  ·gc.alloc.rate:                   2085.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              17708.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17084.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 185783.928 ops/s
[info]                  ·gc.alloc.rate:                   2064.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              17491.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16991.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 184918.353 ops/s
[info]                  ·gc.alloc.rate:               2068.910 MB/sec
[info]                  ·gc.alloc.rate.norm:          17608.396 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17060.019 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 185163.628 ops/s
[info]                  ·gc.alloc.rate:               2085.171 MB/sec
[info]                  ·gc.alloc.rate.norm:          17723.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17051.144 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 185421.728 ops/s
[info]                  ·gc.alloc.rate:               2089.938 MB/sec
[info]                  ·gc.alloc.rate.norm:          17736.627 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2009.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17050.407 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   185312.394 ±(99.9%) 1237.529 ops/s [Average]
[info]   (min, avg, max) = (184918.353, 185312.394, 185783.928), stdev = 321.382
[info]   CI (99.9%): [184074.865, 186549.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2078.825 ±(99.9%) 43.247 MB/sec [Average]
[info]   (min, avg, max) = (2064.708, 2078.825, 2089.938), stdev = 11.231
[info]   CI (99.9%): [2035.578, 2122.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17653.644 ±(99.9%) 400.158 B/op [Average]
[info]   (min, avg, max) = (17491.237, 17653.644, 17736.627), stdev = 103.920
[info]   CI (99.9%): [17253.486, 18053.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.452 ±(99.9%) 11.558 MB/sec [Average]
[info]   (min, avg, max) = (2004.478, 2007.452, 2011.892), stdev = 3.002
[info]   CI (99.9%): [1995.894, 2019.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17047.513 ±(99.9%) 130.984 B/op [Average]
[info]   (min, avg, max) = (16991.795, 17047.513, 17084.200), stdev = 34.016
[info]   CI (99.9%): [16916.528, 17178.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.728), stdev = 1.660
[info]   CI (99.9%): [≈ 0, 7.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.437 ±(99.9%) 54.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.437, 31.654), stdev = 14.099
[info]   CI (99.9%): [≈ 0, 60.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:52:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 781345.176 ops/s
[info] # Warmup Iteration   2: 1357814.814 ops/s
[info] # Warmup Iteration   3: 1499099.920 ops/s
[info] # Warmup Iteration   4: 1512691.318 ops/s
[info] # Warmup Iteration   5: 1506148.706 ops/s
[info] Iteration   1: 1508915.708 ops/s
[info]                  ·gc.alloc.rate:               1281.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          1336.845 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1401.451 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 1515068.074 ops/s
[info]                  ·gc.alloc.rate:                   1309.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              1359.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1396.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1508865.399 ops/s
[info]                  ·gc.alloc.rate:                   1290.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1346.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1521404.565 ops/s
[info]                  ·gc.alloc.rate:                   1313.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1358.782 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1392.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.166 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1520905.126 ops/s
[info]                  ·gc.alloc.rate:               1300.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          1345.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1389.692 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1515031.774 ±(99.9%) 23622.726 ops/s [Average]
[info]   (min, avg, max) = (1508865.399, 1515031.774, 1521404.565), stdev = 6134.747
[info]   CI (99.9%): [1491409.048, 1538654.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1299.213 ±(99.9%) 50.500 MB/sec [Average]
[info]   (min, avg, max) = (1281.703, 1299.213, 1313.456), stdev = 13.115
[info]   CI (99.9%): [1248.713, 1349.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1349.523 ±(99.9%) 37.184 B/op [Average]
[info]   (min, avg, max) = (1336.845, 1349.523, 1359.701), stdev = 9.657
[info]   CI (99.9%): [1312.339, 1386.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1344.420 ±(99.9%) 4.234 MB/sec [Average]
[info]   (min, avg, max) = (1342.923, 1344.420, 1345.599), stdev = 1.099
[info]   CI (99.9%): [1340.186, 1348.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1396.518 ±(99.9%) 22.133 B/op [Average]
[info]   (min, avg, max) = (1389.692, 1396.518, 1402.930), stdev = 5.748
[info]   CI (99.9%): [1374.385, 1418.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.060), stdev = 1.357
[info]   CI (99.9%): [≈ 0, 5.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.655 ±(99.9%) 5.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.655, 3.166), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1134584.842 ops/s
[info] # Warmup Iteration   2: 1681284.966 ops/s
[info] # Warmup Iteration   3: 1760383.198 ops/s
[info] # Warmup Iteration   4: 1760276.406 ops/s
[info] # Warmup Iteration   5: 1759403.840 ops/s
[info] Iteration   1: 1760592.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1759371.858 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1759484.584 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1759136.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1760239.722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1759765.081 ±(99.9%) 2388.136 ops/s [Average]
[info]   (min, avg, max) = (1759136.558, 1759765.081, 1760592.681), stdev = 620.191
[info]   CI (99.9%): [1757376.945, 1762153.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38781.262 ops/s
[info] # Warmup Iteration   2: 146727.365 ops/s
[info] # Warmup Iteration   3: 148133.550 ops/s
[info] # Warmup Iteration   4: 154065.332 ops/s
[info] # Warmup Iteration   5: 154090.199 ops/s
[info] Iteration   1: 154360.500 ops/s
[info]                  ·gc.alloc.rate:                   1993.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              20323.625 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20369.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 155132.003 ops/s
[info]                  ·gc.alloc.rate:                   2015.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              20445.194 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20315.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 154990.411 ops/s
[info]                  ·gc.alloc.rate:                   2013.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              20443.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20373.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.382 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 156196.194 ops/s
[info]                  ·gc.alloc.rate:               2042.756 MB/sec
[info]                  ·gc.alloc.rate.norm:          20583.787 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20277.221 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 153720.524 ops/s
[info]                  ·gc.alloc.rate:               2010.589 MB/sec
[info]                  ·gc.alloc.rate.norm:          20580.145 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20644.965 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   154879.926 ±(99.9%) 3561.755 ops/s [Average]
[info]   (min, avg, max) = (153720.524, 154879.926, 156196.194), stdev = 924.977
[info]   CI (99.9%): [151318.171, 158441.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2015.025 ±(99.9%) 68.543 MB/sec [Average]
[info]   (min, avg, max) = (1993.210, 2015.025, 2042.756), stdev = 17.801
[info]   CI (99.9%): [1946.481, 2083.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   20475.338 ±(99.9%) 420.306 B/op [Average]
[info]   (min, avg, max) = (20323.625, 20475.338, 20583.787), stdev = 109.152
[info]   CI (99.9%): [20055.032, 20895.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2007.159 ±(99.9%) 29.490 MB/sec [Average]
[info]   (min, avg, max) = (1997.694, 2007.159, 2016.922), stdev = 7.659
[info]   CI (99.9%): [1977.668, 2036.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20396.104 ±(99.9%) 557.392 B/op [Average]
[info]   (min, avg, max) = (20277.221, 20396.104, 20644.965), stdev = 144.753
[info]   CI (99.9%): [19838.712, 20953.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.333), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.803 ±(99.9%) 5.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.382), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:51:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8936.637 ops/s
[info] # Warmup Iteration   2: 39340.882 ops/s
[info] # Warmup Iteration   3: 42544.684 ops/s
[info] # Warmup Iteration   4: 41777.396 ops/s
[info] # Warmup Iteration   5: 42634.153 ops/s
[info] Iteration   1: 42411.029 ops/s
[info]                  ·gc.alloc.rate:               1551.342 MB/sec
[info]                  ·gc.alloc.rate.norm:          57544.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49637.904 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 42921.514 ops/s
[info]                  ·gc.alloc.rate:                   1568.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              57479.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49073.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 42912.311 ops/s
[info]                  ·gc.alloc.rate:                   1579.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              57939.186 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73610.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 42959.598 ops/s
[info]                  ·gc.alloc.rate:                   1593.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              58369.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48908.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42804.847 ops/s
[info]                  ·gc.alloc.rate:                   1574.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              57898.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49032.984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   42801.860 ±(99.9%) 869.928 ops/s [Average]
[info]   (min, avg, max) = (42411.029, 42801.860, 42959.598), stdev = 225.918
[info]   CI (99.9%): [41931.932, 43671.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1573.399 ±(99.9%) 59.243 MB/sec [Average]
[info]   (min, avg, max) = (1551.342, 1573.399, 1593.125), stdev = 15.385
[info]   CI (99.9%): [1514.156, 1632.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   57846.078 ±(99.9%) 1375.633 B/op [Average]
[info]   (min, avg, max) = (57479.087, 57846.078, 58369.025), stdev = 357.248
[info]   CI (99.9%): [56470.444, 59221.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1470.498 ±(99.9%) 1155.053 MB/sec [Average]
[info]   (min, avg, max) = (1333.587, 1470.498, 2007.076), stdev = 299.964
[info]   CI (99.9%): [315.445, 2625.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   54052.680 ±(99.9%) 42113.400 B/op [Average]
[info]   (min, avg, max) = (48908.328, 54052.680, 73610.426), stdev = 10936.716
[info]   CI (99.9%): [11939.280, 96166.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.849 ±(99.9%) 7.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.849, 4.184), stdev = 1.864
[info]   CI (99.9%): [≈ 0, 8.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   31.150 ±(99.9%) 263.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.150, 153.457), stdev = 68.373
[info]   CI (99.9%): [≈ 0, 294.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:51:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443027.524 ops/s
[info] # Warmup Iteration   2: 738291.452 ops/s
[info] # Warmup Iteration   3: 761141.119 ops/s
[info] # Warmup Iteration   4: 767547.569 ops/s
[info] # Warmup Iteration   5: 759648.213 ops/s
[info] Iteration   1: 769871.531 ops/s
[info]                  ·gc.alloc.rate:               1531.302 MB/sec
[info]                  ·gc.alloc.rate.norm:          3130.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2749.491 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 765196.783 ops/s
[info]                  ·gc.alloc.rate:                   1547.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              3183.422 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4152.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.309 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 709465.696 ops/s
[info]                  ·gc.alloc.rate:                   1423.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              3157.460 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2985.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 755588.775 ops/s
[info]                  ·gc.alloc.rate:               1528.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          3183.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2798.730 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 771019.013 ops/s
[info]                  ·gc.alloc.rate:               1544.889 MB/sec
[info]                  ·gc.alloc.rate.norm:          3153.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2741.382 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   754228.360 ±(99.9%) 99158.529 ops/s [Average]
[info]   (min, avg, max) = (709465.696, 754228.360, 771019.013), stdev = 25751.155
[info]   CI (99.9%): [655069.830, 853386.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1515.210 ±(99.9%) 200.324 MB/sec [Average]
[info]   (min, avg, max) = (1423.329, 1515.210, 1547.773), stdev = 52.024
[info]   CI (99.9%): [1314.886, 1715.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3161.626 ±(99.9%) 85.863 B/op [Average]
[info]   (min, avg, max) = (3130.509, 3161.626, 3183.422), stdev = 22.298
[info]   CI (99.9%): [3075.763, 3247.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1479.354 ±(99.9%) 1161.899 MB/sec [Average]
[info]   (min, avg, max) = (1342.957, 1479.354, 2019.122), stdev = 301.742
[info]   CI (99.9%): [317.454, 2641.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3085.516 ±(99.9%) 2328.718 B/op [Average]
[info]   (min, avg, max) = (2741.382, 3085.516, 4152.882), stdev = 604.761
[info]   CI (99.9%): [756.799, 5414.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.581), stdev = 1.125
[info]   CI (99.9%): [≈ 0, 4.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.219 ±(99.9%) 8.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.219, 5.309), stdev = 2.312
[info]   CI (99.9%): [≈ 0, 10.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 8.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1741.351 ops/s
[info] # Warmup Iteration   2: 25354.213 ops/s
[info] # Warmup Iteration   3: 32591.351 ops/s
[info] # Warmup Iteration   4: 32721.038 ops/s
[info] # Warmup Iteration   5: 31763.085 ops/s
[info] Iteration   1: 31982.086 ops/s
[info]                  ·gc.alloc.rate:                   2277.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              112090.190 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131842.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 32685.704 ops/s
[info]                  ·gc.alloc.rate:                   2305.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              110990.188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96979.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 32925.765 ops/s
[info]                  ·gc.alloc.rate:                   2321.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              110950.578 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96419.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 32849.170 ops/s
[info]                  ·gc.alloc.rate:                   2330.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              111617.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129109.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.989 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 32927.193 ops/s
[info]                  ·gc.alloc.rate:                   2346.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              112178.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96779.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.975 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32673.983 ±(99.9%) 1536.714 ops/s [Average]
[info]   (min, avg, max) = (31982.086, 32673.983, 32927.193), stdev = 399.080
[info]   CI (99.9%): [31137.269, 34210.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2316.359 ±(99.9%) 101.093 MB/sec [Average]
[info]   (min, avg, max) = (2277.790, 2316.359, 2346.980), stdev = 26.254
[info]   CI (99.9%): [2215.266, 2417.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   111565.316 ±(99.9%) 2247.616 B/op [Average]
[info]   (min, avg, max) = (110950.578, 111565.316, 112178.474), stdev = 583.699
[info]   CI (99.9%): [109317.699, 113812.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.226 ±(99.9%) 1409.934 MB/sec [Average]
[info]   (min, avg, max) = (2014.526, 2286.226, 2695.343), stdev = 366.155
[info]   CI (99.9%): [876.292, 3696.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110226.089 ±(99.9%) 71281.982 B/op [Average]
[info]   (min, avg, max) = (96419.318, 110226.089, 131842.337), stdev = 18511.704
[info]   CI (99.9%): [38944.107, 181508.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.329 ±(99.9%) 2.206 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.329, 1.353), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 2.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16.109 ±(99.9%) 108.737 B/op [Average]
[info]   (min, avg, max) = (1.990, 16.109, 66.585), stdev = 28.239
[info]   CI (99.9%): [≈ 0, 124.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.817
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139283.854 ops/s
[info] # Warmup Iteration   2: 341853.006 ops/s
[info] # Warmup Iteration   3: 348709.437 ops/s
[info] # Warmup Iteration   4: 348975.124 ops/s
[info] # Warmup Iteration   5: 347720.531 ops/s
[info] Iteration   1: 352542.726 ops/s
[info]                  ·gc.alloc.rate:                   998.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              4457.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2984.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 333677.755 ops/s
[info]                  ·gc.alloc.rate:               944.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          4454.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3156.166 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 350204.358 ops/s
[info]                  ·gc.alloc.rate:                   1005.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              4520.493 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6015.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 352504.097 ops/s
[info]                  ·gc.alloc.rate:               1004.018 MB/sec
[info]                  ·gc.alloc.rate.norm:          4482.727 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2989.209 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 350954.488 ops/s
[info]                  ·gc.alloc.rate:               1003.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          4499.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6010.709 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   347976.685 ±(99.9%) 31023.110 ops/s [Average]
[info]   (min, avg, max) = (333677.755, 347976.685, 352542.726), stdev = 8056.603
[info]   CI (99.9%): [316953.575, 378999.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   991.301 ±(99.9%) 100.894 MB/sec [Average]
[info]   (min, avg, max) = (944.678, 991.301, 1005.860), stdev = 26.202
[info]   CI (99.9%): [890.406, 1092.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4482.995 ±(99.9%) 107.921 B/op [Average]
[info]   (min, avg, max) = (4454.316, 4482.995, 4520.493), stdev = 28.027
[info]   CI (99.9%): [4375.074, 4590.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   937.255 ±(99.9%) 1413.864 MB/sec [Average]
[info]   (min, avg, max) = (668.451, 937.255, 1340.349), stdev = 367.176
[info]   CI (99.9%): [≈ 0, 2351.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4231.221 ±(99.9%) 6269.929 B/op [Average]
[info]   (min, avg, max) = (2984.130, 4231.221, 6015.890), stdev = 1628.281
[info]   CI (99.9%): [≈ 0, 10501.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.094), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 882526.697 ops/s
[info] # Warmup Iteration   2: 1852538.235 ops/s
[info] # Warmup Iteration   3: 1978184.516 ops/s
[info] # Warmup Iteration   4: 1959778.031 ops/s
[info] # Warmup Iteration   5: 1983314.034 ops/s
[info] Iteration   1: 1991089.227 ops/s
[info]                  ·gc.alloc.rate:               1178.417 MB/sec
[info]                  ·gc.alloc.rate.norm:          931.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 531.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1987855.659 ops/s
[info]                  ·gc.alloc.rate:                   1193.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.501 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1064.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1985233.364 ops/s
[info]                  ·gc.alloc.rate:               1199.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1066.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1979257.055 ops/s
[info]                  ·gc.alloc.rate:                   1197.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              952.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1070.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.235 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2002065.534 ops/s
[info]                  ·gc.alloc.rate:                   1195.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     529.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1989100.168 ±(99.9%) 32528.537 ops/s [Average]
[info]   (min, avg, max) = (1979257.055, 1989100.168, 2002065.534), stdev = 8447.558
[info]   CI (99.9%): [1956571.631, 2021628.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1192.967 ±(99.9%) 32.764 MB/sec [Average]
[info]   (min, avg, max) = (1178.417, 1192.967, 1199.817), stdev = 8.509
[info]   CI (99.9%): [1160.203, 1225.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   943.938 ±(99.9%) 33.057 B/op [Average]
[info]   (min, avg, max) = (931.472, 943.938, 952.403), stdev = 8.585
[info]   CI (99.9%): [910.881, 976.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1076.248 ±(99.9%) 1418.796 MB/sec [Average]
[info]   (min, avg, max) = (672.122, 1076.248, 1345.939), stdev = 368.457
[info]   CI (99.9%): [≈ 0, 2495.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   852.373 ±(99.9%) 1132.421 B/op [Average]
[info]   (min, avg, max) = (529.180, 852.373, 1070.253), stdev = 294.086
[info]   CI (99.9%): [≈ 0, 1984.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 4.714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 2.810), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.503 ±(99.9%) 3.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.503, 2.235), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1262521.149 ops/s
[info] # Warmup Iteration   2: 2121189.199 ops/s
[info] # Warmup Iteration   3: 2245931.004 ops/s
[info] # Warmup Iteration   4: 2250568.101 ops/s
[info] # Warmup Iteration   5: 2251270.329 ops/s
[info] Iteration   1: 2252197.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2251510.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2241688.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2240113.097 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2252055.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2247512.983 ±(99.9%) 23362.357 ops/s [Average]
[info]   (min, avg, max) = (2240113.097, 2247512.983, 2252197.916), stdev = 6067.130
[info]   CI (99.9%): [2224150.626, 2270875.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73467.756 ops/s
[info] # Warmup Iteration   2: 246690.449 ops/s
[info] # Warmup Iteration   3: 251749.453 ops/s
[info] # Warmup Iteration   4: 253699.679 ops/s
[info] # Warmup Iteration   5: 252857.421 ops/s
[info] Iteration   1: 247175.234 ops/s
[info]                  ·gc.alloc.rate:               1663.143 MB/sec
[info]                  ·gc.alloc.rate.norm:          10589.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8512.491 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 252938.096 ops/s
[info]                  ·gc.alloc.rate:                   1702.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              10585.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12465.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 255225.776 ops/s
[info]                  ·gc.alloc.rate:                   1691.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              10426.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8240.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 252383.429 ops/s
[info]                  ·gc.alloc.rate:                   1696.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              10578.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8324.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 253129.701 ops/s
[info]                  ·gc.alloc.rate:                   1693.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              10527.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12452.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   252170.447 ±(99.9%) 11526.555 ops/s [Average]
[info]   (min, avg, max) = (247175.234, 252170.447, 255225.776), stdev = 2993.410
[info]   CI (99.9%): [240643.893, 263697.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1689.398 ±(99.9%) 58.708 MB/sec [Average]
[info]   (min, avg, max) = (1663.143, 1689.398, 1702.508), stdev = 15.246
[info]   CI (99.9%): [1630.690, 1748.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10541.538 ±(99.9%) 264.885 B/op [Average]
[info]   (min, avg, max) = (10426.749, 10541.538, 10589.311), stdev = 68.790
[info]   CI (99.9%): [10276.653, 10806.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.348 ±(99.9%) 1408.449 MB/sec [Average]
[info]   (min, avg, max) = (1334.905, 1603.348, 2004.902), stdev = 365.770
[info]   CI (99.9%): [194.900, 3011.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9999.154 ±(99.9%) 8655.646 B/op [Average]
[info]   (min, avg, max) = (8240.202, 9999.154, 12465.913), stdev = 2247.844
[info]   CI (99.9%): [1343.508, 18654.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.852 ±(99.9%) 6.584 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 3.908), stdev = 1.710
[info]   CI (99.9%): [≈ 0, 7.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.299 ±(99.9%) 40.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.299, 24.299), stdev = 10.633
[info]   CI (99.9%): [≈ 0, 46.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:49:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22443.883 ops/s
[info] # Warmup Iteration   2: 70131.213 ops/s
[info] # Warmup Iteration   3: 70375.814 ops/s
[info] # Warmup Iteration   4: 72439.315 ops/s
[info] # Warmup Iteration   5: 72339.729 ops/s
[info] Iteration   1: 71824.757 ops/s
[info]                  ·gc.alloc.rate:                   1572.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              34460.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29397.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 72326.608 ops/s
[info]                  ·gc.alloc.rate:                   1609.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              35017.944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43819.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.401 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 72426.254 ops/s
[info]                  ·gc.alloc.rate:                   1609.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              34973.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29139.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72867.962 ops/s
[info]                  ·gc.alloc.rate:                   1606.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              34709.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28905.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.899 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72656.984 ops/s
[info]                  ·gc.alloc.rate:                   1639.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              35521.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43459.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   72420.513 ±(99.9%) 1515.884 ops/s [Average]
[info]   (min, avg, max) = (71824.757, 72420.513, 72867.962), stdev = 393.670
[info]   CI (99.9%): [70904.629, 73936.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1607.711 ±(99.9%) 91.753 MB/sec [Average]
[info]   (min, avg, max) = (1572.640, 1607.711, 1639.862), stdev = 23.828
[info]   CI (99.9%): [1515.958, 1699.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34936.475 ±(99.9%) 1526.320 B/op [Average]
[info]   (min, avg, max) = (34460.304, 34936.475, 35521.263), stdev = 396.380
[info]   CI (99.9%): [33410.155, 36462.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1608.281 ±(99.9%) 1413.263 MB/sec [Average]
[info]   (min, avg, max) = (1338.239, 1608.281, 2014.284), stdev = 367.020
[info]   CI (99.9%): [195.018, 3021.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34944.348 ±(99.9%) 30577.224 B/op [Average]
[info]   (min, avg, max) = (28905.298, 34944.348, 43819.918), stdev = 7940.808
[info]   CI (99.9%): [4367.125, 65521.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.779 ±(99.9%) 5.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.779, 3.144), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 5.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.936 ±(99.9%) 112.972 B/op [Average]
[info]   (min, avg, max) = (0.456, 16.936, 68.401), stdev = 29.338
[info]   CI (99.9%): [≈ 0, 129.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:49:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27469.869 ops/s
[info] # Warmup Iteration   2: 83800.512 ops/s
[info] # Warmup Iteration   3: 86800.275 ops/s
[info] # Warmup Iteration   4: 89200.461 ops/s
[info] # Warmup Iteration   5: 89295.753 ops/s
[info] Iteration   1: 88349.952 ops/s
[info]                  ·gc.alloc.rate:                   1167.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              20805.234 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23792.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.371 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 88092.652 ops/s
[info]                  ·gc.alloc.rate:                   1167.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              20850.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23879.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.116 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 89409.251 ops/s
[info]                  ·gc.alloc.rate:                   1168.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              20564.253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23546.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 89586.940 ops/s
[info]                  ·gc.alloc.rate:               1155.424 MB/sec
[info]                  ·gc.alloc.rate.norm:          20298.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11755.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 88875.938 ops/s
[info]                  ·gc.alloc.rate:                   1160.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              20540.802 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23709.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   88862.947 ±(99.9%) 2494.984 ops/s [Average]
[info]   (min, avg, max) = (88092.652, 88862.947, 89586.940), stdev = 647.939
[info]   CI (99.9%): [86367.963, 91357.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1163.859 ±(99.9%) 21.994 MB/sec [Average]
[info]   (min, avg, max) = (1155.424, 1163.859, 1168.435), stdev = 5.712
[info]   CI (99.9%): [1141.865, 1185.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20611.822 ±(99.9%) 860.796 B/op [Average]
[info]   (min, avg, max) = (20298.388, 20611.822, 20850.434), stdev = 223.546
[info]   CI (99.9%): [19751.026, 21472.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.737 ±(99.9%) 1150.807 MB/sec [Average]
[info]   (min, avg, max) = (669.125, 1203.737, 1339.471), stdev = 298.861
[info]   CI (99.9%): [52.930, 2354.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21336.586 ±(99.9%) 20630.256 B/op [Average]
[info]   (min, avg, max) = (11755.126, 21336.586, 23879.960), stdev = 5357.612
[info]   CI (99.9%): [706.330, 41966.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.825 ±(99.9%) 6.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.825, 3.978), stdev = 1.763
[info]   CI (99.9%): [≈ 0, 7.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.598 ±(99.9%) 120.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.598, 70.406), stdev = 31.201
[info]   CI (99.9%): [≈ 0, 134.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.483
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45474.472 ops/s
[info] # Warmup Iteration   2: 94080.557 ops/s
[info] # Warmup Iteration   3: 98643.052 ops/s
[info] # Warmup Iteration   4: 100987.764 ops/s
[info] # Warmup Iteration   5: 101187.554 ops/s
[info] Iteration   1: 100886.165 ops/s
[info]                  ·gc.alloc.rate:               1247.498 MB/sec
[info]                  ·gc.alloc.rate.norm:          19456.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20950.113 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 100363.197 ops/s
[info]                  ·gc.alloc.rate:                   1247.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              19558.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21080.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 97997.997 ops/s
[info]                  ·gc.alloc.rate:               1191.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          19130.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10800.301 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 99672.210 ops/s
[info]                  ·gc.alloc.rate:                   1225.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              19346.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21242.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 99822.486 ops/s
[info]                  ·gc.alloc.rate:                   1239.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              19543.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21194.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   99748.411 ±(99.9%) 4195.122 ops/s [Average]
[info]   (min, avg, max) = (97997.997, 99748.411, 100886.165), stdev = 1089.460
[info]   CI (99.9%): [95553.289, 103943.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1230.255 ±(99.9%) 91.159 MB/sec [Average]
[info]   (min, avg, max) = (1191.218, 1230.255, 1247.866), stdev = 23.674
[info]   CI (99.9%): [1139.097, 1321.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   19407.050 ±(99.9%) 677.280 B/op [Average]
[info]   (min, avg, max) = (19130.918, 19407.050, 19558.419), stdev = 175.887
[info]   CI (99.9%): [18729.770, 20084.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.048 ±(99.9%) 1157.121 MB/sec [Average]
[info]   (min, avg, max) = (672.498, 1210.048, 1345.263), stdev = 300.501
[info]   CI (99.9%): [52.928, 2367.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19053.530 ±(99.9%) 17771.006 B/op [Average]
[info]   (min, avg, max) = (10800.301, 19053.530, 21242.055), stdev = 4615.074
[info]   CI (99.9%): [1282.524, 36824.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.608 ±(99.9%) 4.465 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 2.665), stdev = 1.160
[info]   CI (99.9%): [≈ 0, 5.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.596 ±(99.9%) 70.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.596, 42.074), stdev = 18.310
[info]   CI (99.9%): [≈ 0, 80.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5507.634 ops/s
[info] # Warmup Iteration   2: 37094.337 ops/s
[info] # Warmup Iteration   3: 45262.423 ops/s
[info] # Warmup Iteration   4: 44518.922 ops/s
[info] # Warmup Iteration   5: 45187.669 ops/s
[info] Iteration   1: 45196.920 ops/s
[info]                  ·gc.alloc.rate:                   2056.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              71590.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69937.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 46141.463 ops/s
[info]                  ·gc.alloc.rate:                   2095.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              71462.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68370.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 45348.858 ops/s
[info]                  ·gc.alloc.rate:                   2059.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              71493.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69402.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.167 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 46123.681 ops/s
[info]                  ·gc.alloc.rate:                   2080.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              70997.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68235.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 46074.849 ops/s
[info]                  ·gc.alloc.rate:               2106.534 MB/sec
[info]                  ·gc.alloc.rate.norm:          71941.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68429.908 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   45777.154 ±(99.9%) 1787.062 ops/s [Average]
[info]   (min, avg, max) = (45196.920, 45777.154, 46141.463), stdev = 464.094
[info]   CI (99.9%): [43990.092, 47564.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2079.720 ±(99.9%) 83.916 MB/sec [Average]
[info]   (min, avg, max) = (2056.216, 2079.720, 2106.534), stdev = 21.793
[info]   CI (99.9%): [1995.804, 2163.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71497.207 ±(99.9%) 1302.089 B/op [Average]
[info]   (min, avg, max) = (70997.597, 71497.207, 71941.979), stdev = 338.148
[info]   CI (99.9%): [70195.119, 72799.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2003.287 ±(99.9%) 14.454 MB/sec [Average]
[info]   (min, avg, max) = (1999.742, 2003.287, 2008.738), stdev = 3.754
[info]   CI (99.9%): [1988.833, 2017.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68875.163 ±(99.9%) 2900.345 B/op [Average]
[info]   (min, avg, max) = (68235.176, 68875.163, 69937.542), stdev = 753.210
[info]   CI (99.9%): [65974.818, 71775.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 5.800 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.539), stdev = 1.506
[info]   CI (99.9%): [≈ 0, 6.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   32.323 ±(99.9%) 201.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.323, 123.232), stdev = 52.455
[info]   CI (99.9%): [≈ 0, 234.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 11.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:48:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51048.302 ops/s
[info] # Warmup Iteration   2: 113537.647 ops/s
[info] # Warmup Iteration   3: 114974.751 ops/s
[info] # Warmup Iteration   4: 117013.756 ops/s
[info] # Warmup Iteration   5: 117089.951 ops/s
[info] Iteration   1: 116269.256 ops/s
[info]                  ·gc.alloc.rate:                   1131.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              15314.825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18110.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.282 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 116468.843 ops/s
[info]                  ·gc.alloc.rate:                   1127.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              15237.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18089.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 116435.595 ops/s
[info]                  ·gc.alloc.rate:                   1099.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              14863.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9049.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.563 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 117292.877 ops/s
[info]                  ·gc.alloc.rate:               1135.837 MB/sec
[info]                  ·gc.alloc.rate.norm:          15238.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17984.578 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 117392.958 ops/s
[info]                  ·gc.alloc.rate:                   1120.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              15016.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8988.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.281 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   116771.906 ±(99.9%) 2032.766 ops/s [Average]
[info]   (min, avg, max) = (116269.256, 116771.906, 117392.958), stdev = 527.903
[info]   CI (99.9%): [114739.140, 118804.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1122.988 ±(99.9%) 54.844 MB/sec [Average]
[info]   (min, avg, max) = (1099.615, 1122.988, 1135.837), stdev = 14.243
[info]   CI (99.9%): [1068.144, 1177.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   15134.036 ±(99.9%) 723.611 B/op [Average]
[info]   (min, avg, max) = (14863.585, 15134.036, 15314.825), stdev = 187.919
[info]   CI (99.9%): [14410.426, 15857.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1071.477 ±(99.9%) 1410.950 MB/sec [Average]
[info]   (min, avg, max) = (669.489, 1071.477, 1340.527), stdev = 366.419
[info]   CI (99.9%): [≈ 0, 2482.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14444.532 ±(99.9%) 19072.267 B/op [Average]
[info]   (min, avg, max) = (8988.636, 14444.532, 18110.767), stdev = 4953.007
[info]   CI (99.9%): [≈ 0, 33516.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.737 ±(99.9%) 6.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.602), stdev = 1.602
[info]   CI (99.9%): [≈ 0, 6.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.881 ±(99.9%) 82.662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.881, 48.281), stdev = 21.467
[info]   CI (99.9%): [≈ 0, 92.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:48:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112217.698 ops/s
[info] # Warmup Iteration   2: 304133.320 ops/s
[info] # Warmup Iteration   3: 322376.095 ops/s
[info] # Warmup Iteration   4: 334018.441 ops/s
[info] # Warmup Iteration   5: 333374.183 ops/s
[info] Iteration   1: 333350.001 ops/s
[info]                  ·gc.alloc.rate:               511.869 MB/sec
[info]                  ·gc.alloc.rate.norm:          2416.803 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2415.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 333054.330 ops/s
[info]                  ·gc.alloc.rate:               517.636 MB/sec
[info]                  ·gc.alloc.rate.norm:          2446.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3149.468 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 336083.486 ops/s
[info]                  ·gc.alloc.rate:               515.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          2413.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3121.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 335418.905 ops/s
[info]                  ·gc.alloc.rate:      498.040 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 336623.086 ops/s
[info]                  ·gc.alloc.rate:                   525.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              2454.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3120.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   334905.961 ±(99.9%) 6223.212 ops/s [Average]
[info]   (min, avg, max) = (333054.330, 334905.961, 336623.086), stdev = 1616.148
[info]   CI (99.9%): [328682.749, 341129.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   513.598 ±(99.9%) 38.296 MB/sec [Average]
[info]   (min, avg, max) = (498.040, 513.598, 525.046), stdev = 9.945
[info]   CI (99.9%): [475.302, 551.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2413.302 ±(99.9%) 180.200 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2413.302, 2454.467), stdev = 46.797
[info]   CI (99.9%): [2233.102, 2593.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.451 ±(99.9%) 1112.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.451, 667.579), stdev = 288.817
[info]   CI (99.9%): [≈ 0, 1614.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2361.365 ±(99.9%) 5221.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2361.365, 3149.468), stdev = 1355.911
[info]   CI (99.9%): [≈ 0, 7582.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 435885.207 ops/s
[info] # Warmup Iteration   2: 712280.348 ops/s
[info] # Warmup Iteration   3: 691689.455 ops/s
[info] # Warmup Iteration   4: 716603.398 ops/s
[info] # Warmup Iteration   5: 702495.556 ops/s
[info] Iteration   1: 720219.864 ops/s
[info]                  ·gc.alloc.rate:               915.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          2000.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1465.886 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 729561.243 ops/s
[info]                  ·gc.alloc.rate:                   937.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              2022.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2895.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 732514.466 ops/s
[info]                  ·gc.alloc.rate:               924.079 MB/sec
[info]                  ·gc.alloc.rate.norm:          1985.411 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1442.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 722640.198 ops/s
[info]                  ·gc.alloc.rate:                   937.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              2041.789 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2927.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 728903.676 ops/s
[info]                  ·gc.alloc.rate:               917.761 MB/sec
[info]                  ·gc.alloc.rate.norm:          1981.674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1452.013 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   726767.890 ±(99.9%) 19757.033 ops/s [Average]
[info]   (min, avg, max) = (720219.864, 726767.890, 732514.466), stdev = 5130.839
[info]   CI (99.9%): [707010.857, 746524.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   926.521 ±(99.9%) 40.867 MB/sec [Average]
[info]   (min, avg, max) = (915.514, 926.521, 937.760), stdev = 10.613
[info]   CI (99.9%): [885.654, 967.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2006.460 ±(99.9%) 98.464 B/op [Average]
[info]   (min, avg, max) = (1981.674, 2006.460, 2041.789), stdev = 25.571
[info]   CI (99.9%): [1907.996, 2104.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.276 ±(99.9%) 1416.646 MB/sec [Average]
[info]   (min, avg, max) = (670.876, 940.276, 1344.279), stdev = 367.898
[info]   CI (99.9%): [≈ 0, 2356.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2036.799 ±(99.9%) 3075.925 B/op [Average]
[info]   (min, avg, max) = (1442.668, 2036.799, 2927.739), stdev = 798.808
[info]   CI (99.9%): [≈ 0, 5112.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.135), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 1.095
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 402389.044 ops/s
[info] # Warmup Iteration   2: 554537.079 ops/s
[info] # Warmup Iteration   3: 567274.170 ops/s
[info] # Warmup Iteration   4: 554460.178 ops/s
[info] # Warmup Iteration   5: 559958.266 ops/s
[info] Iteration   1: 560257.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 547457.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 574511.327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 560897.610 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 572139.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   563052.756 ±(99.9%) 41719.107 ops/s [Average]
[info]   (min, avg, max) = (547457.807, 563052.756, 574511.327), stdev = 10834.320
[info]   CI (99.9%): [521333.649, 604771.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:47:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88420.362 ops/s
[info] # Warmup Iteration   2: 230975.568 ops/s
[info] # Warmup Iteration   3: 245166.614 ops/s
[info] # Warmup Iteration   4: 248645.116 ops/s
[info] # Warmup Iteration   5: 249329.203 ops/s
[info] Iteration   1: 249193.226 ops/s
[info]                  ·gc.alloc.rate:               817.162 MB/sec
[info]                  ·gc.alloc.rate.norm:          5161.128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4217.594 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 248333.058 ops/s
[info]                  ·gc.alloc.rate:               829.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          5259.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8469.026 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 249948.533 ops/s
[info]                  ·gc.alloc.rate:                   817.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              5149.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4211.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 248579.543 ops/s
[info]                  ·gc.alloc.rate:               813.575 MB/sec
[info]                  ·gc.alloc.rate.norm:          5151.177 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4234.592 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 249486.483 ops/s
[info]                  ·gc.alloc.rate:                   812.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              5126.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4223.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   249108.169 ±(99.9%) 2537.345 ops/s [Average]
[info]   (min, avg, max) = (248333.058, 249108.169, 249948.533), stdev = 658.941
[info]   CI (99.9%): [246570.823, 251645.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   818.238 ±(99.9%) 26.401 MB/sec [Average]
[info]   (min, avg, max) = (812.765, 818.238, 829.857), stdev = 6.856
[info]   CI (99.9%): [791.837, 844.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5169.665 ±(99.9%) 199.408 B/op [Average]
[info]   (min, avg, max) = (5126.697, 5169.665, 5259.510), stdev = 51.786
[info]   CI (99.9%): [4970.258, 5369.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   802.236 ±(99.9%) 1149.534 MB/sec [Average]
[info]   (min, avg, max) = (667.772, 802.236, 1336.262), stdev = 298.530
[info]   CI (99.9%): [≈ 0, 1951.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5071.169 ±(99.9%) 7314.217 B/op [Average]
[info]   (min, avg, max) = (4211.334, 5071.169, 8469.026), stdev = 1899.479
[info]   CI (99.9%): [≈ 0, 12385.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.131), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13382.298 ops/s
[info] # Warmup Iteration   2: 112081.264 ops/s
[info] # Warmup Iteration   3: 118785.982 ops/s
[info] # Warmup Iteration   4: 124419.206 ops/s
[info] # Warmup Iteration   5: 125087.357 ops/s
[info] Iteration   1: 124077.072 ops/s
[info]                  ·gc.alloc.rate:                   1739.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              22061.083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25479.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.528 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 125019.425 ops/s
[info]                  ·gc.alloc.rate:                   1749.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              22026.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16872.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 125113.803 ops/s
[info]                  ·gc.alloc.rate:                   1762.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              22167.394 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25260.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.880 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 125342.787 ops/s
[info]                  ·gc.alloc.rate:               1777.063 MB/sec
[info]                  ·gc.alloc.rate.norm:          22314.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25160.069 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 125855.710 ops/s
[info]                  ·gc.alloc.rate:               1760.007 MB/sec
[info]                  ·gc.alloc.rate.norm:          22008.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16701.830 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   125081.759 ±(99.9%) 2496.575 ops/s [Average]
[info]   (min, avg, max) = (124077.072, 125081.759, 125855.710), stdev = 648.353
[info]   CI (99.9%): [122585.185, 127578.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1757.663 ±(99.9%) 54.588 MB/sec [Average]
[info]   (min, avg, max) = (1739.238, 1757.663, 1777.063), stdev = 14.176
[info]   CI (99.9%): [1703.074, 1812.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22115.685 ±(99.9%) 488.332 B/op [Average]
[info]   (min, avg, max) = (22008.954, 22115.685, 22314.156), stdev = 126.818
[info]   CI (99.9%): [21627.353, 22604.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1739.288 ±(99.9%) 1410.751 MB/sec [Average]
[info]   (min, avg, max) = (1335.608, 1739.288, 2008.737), stdev = 366.367
[info]   CI (99.9%): [328.537, 3150.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21894.758 ±(99.9%) 17961.427 B/op [Average]
[info]   (min, avg, max) = (16701.830, 21894.758, 25479.504), stdev = 4664.526
[info]   CI (99.9%): [3933.331, 39856.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.791 ±(99.9%) 6.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.685), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 7.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.958 ±(99.9%) 78.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.958, 46.384), stdev = 20.397
[info]   CI (99.9%): [≈ 0, 88.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56379.905 ops/s
[info] # Warmup Iteration   2: 168176.466 ops/s
[info] # Warmup Iteration   3: 180266.886 ops/s
[info] # Warmup Iteration   4: 185228.627 ops/s
[info] # Warmup Iteration   5: 184136.146 ops/s
[info] Iteration   1: 180713.878 ops/s
[info]                  ·gc.alloc.rate:                   1114.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              9704.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11638.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 183984.641 ops/s
[info]                  ·gc.alloc.rate:               1098.156 MB/sec
[info]                  ·gc.alloc.rate.norm:          9392.459 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5718.355 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 184237.186 ops/s
[info]                  ·gc.alloc.rate:                   1113.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              9513.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11426.947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 184329.934 ops/s
[info]                  ·gc.alloc.rate:               1112.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          9496.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11432.558 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 184764.500 ops/s
[info]                  ·gc.alloc.rate:                   1100.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              9374.416 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5708.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.500 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   183606.028 ±(99.9%) 6319.145 ops/s [Average]
[info]   (min, avg, max) = (180713.878, 183606.028, 184764.500), stdev = 1641.062
[info]   CI (99.9%): [177286.883, 189925.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1107.976 ±(99.9%) 30.614 MB/sec [Average]
[info]   (min, avg, max) = (1098.156, 1107.976, 1114.595), stdev = 7.950
[info]   CI (99.9%): [1077.362, 1138.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9496.417 ±(99.9%) 507.532 B/op [Average]
[info]   (min, avg, max) = (9374.416, 9496.417, 9704.977), stdev = 131.804
[info]   CI (99.9%): [8988.885, 10003.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1070.563 ±(99.9%) 1410.254 MB/sec [Average]
[info]   (min, avg, max) = (668.584, 1070.563, 1339.587), stdev = 366.238
[info]   CI (99.9%): [≈ 0, 2480.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9184.914 ±(99.9%) 12207.288 B/op [Average]
[info]   (min, avg, max) = (5708.435, 9184.914, 11638.274), stdev = 3170.194
[info]   CI (99.9%): [≈ 0, 21392.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.724 ±(99.9%) 6.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.724, 3.581), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.172 ±(99.9%) 52.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.172, 30.500), stdev = 13.600
[info]   CI (99.9%): [≈ 0, 58.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237082.927 ops/s
[info] # Warmup Iteration   2: 489258.321 ops/s
[info] # Warmup Iteration   3: 501664.227 ops/s
[info] # Warmup Iteration   4: 503079.118 ops/s
[info] # Warmup Iteration   5: 505822.495 ops/s
[info] Iteration   1: 505674.714 ops/s
[info]                  ·gc.alloc.rate:               347.377 MB/sec
[info]                  ·gc.alloc.rate.norm:          1081.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1592.311 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 509162.408 ops/s
[info]                  ·gc.alloc.rate:      331.366 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 506808.153 ops/s
[info]                  ·gc.alloc.rate:               344.758 MB/sec
[info]                  ·gc.alloc.rate.norm:          1070.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2077.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 508636.375 ops/s
[info]                  ·gc.alloc.rate:      330.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 502840.583 ops/s
[info]                  ·gc.alloc.rate:                   351.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              1101.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2094.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.914 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.122 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   506624.447 ±(99.9%) 9768.513 ops/s [Average]
[info]   (min, avg, max) = (502840.583, 506624.447, 509162.408), stdev = 2536.852
[info]   CI (99.9%): [496855.933, 516392.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   341.283 ±(99.9%) 37.002 MB/sec [Average]
[info]   (min, avg, max) = (330.927, 341.283, 351.986), stdev = 9.609
[info]   CI (99.9%): [304.281, 378.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1060.305 ±(99.9%) 134.673 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1060.305, 1101.703), stdev = 34.974
[info]   CI (99.9%): [925.631, 1194.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   369.972 ±(99.9%) 1323.877 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 369.972, 669.150), stdev = 343.807
[info]   CI (99.9%): [≈ 0, 1693.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1152.925 ±(99.9%) 4126.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1152.925, 2094.329), stdev = 1071.624
[info]   CI (99.9%): [≈ 0, 5279.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.583 ±(99.9%) 5.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.583, 2.914), stdev = 1.303
[info]   CI (99.9%): [≈ 0, 5.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.824 ±(99.9%) 15.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.824, 9.122), stdev = 4.079
[info]   CI (99.9%): [≈ 0, 17.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:46:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6444.102 ops/s
[info] # Warmup Iteration   2: 56077.989 ops/s
[info] # Warmup Iteration   3: 68552.339 ops/s
[info] # Warmup Iteration   4: 70182.925 ops/s
[info] # Warmup Iteration   5: 68922.257 ops/s
[info] Iteration   1: 68973.289 ops/s
[info]                  ·gc.alloc.rate:                   2777.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              63357.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61257.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.475 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 69117.699 ops/s
[info]                  ·gc.alloc.rate:                   2771.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              63107.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61281.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.474 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 69263.450 ops/s
[info]                  ·gc.alloc.rate:               2804.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          63726.412 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2698.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61308.329 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 69187.649 ops/s
[info]                  ·gc.alloc.rate:               2802.037 MB/sec
[info]                  ·gc.alloc.rate.norm:          63740.525 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61520.499 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 69180.315 ops/s
[info]                  ·gc.alloc.rate:               2790.727 MB/sec
[info]                  ·gc.alloc.rate.norm:          63447.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2707.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61555.438 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   69144.480 ±(99.9%) 418.842 ops/s [Average]
[info]   (min, avg, max) = (68973.289, 69144.480, 69263.450), stdev = 108.772
[info]   CI (99.9%): [68725.639, 69563.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2789.259 ±(99.9%) 56.728 MB/sec [Average]
[info]   (min, avg, max) = (2771.440, 2789.259, 2804.808), stdev = 14.732
[info]   CI (99.9%): [2732.530, 2845.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   63475.928 ±(99.9%) 1024.446 B/op [Average]
[info]   (min, avg, max) = (63107.676, 63475.928, 63740.525), stdev = 266.045
[info]   CI (99.9%): [62451.482, 64500.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2697.354 ±(99.9%) 35.505 MB/sec [Average]
[info]   (min, avg, max) = (2685.194, 2697.354, 2707.521), stdev = 9.221
[info]   CI (99.9%): [2661.848, 2732.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61384.518 ±(99.9%) 545.967 B/op [Average]
[info]   (min, avg, max) = (61257.122, 61384.518, 61555.438), stdev = 141.786
[info]   CI (99.9%): [60838.551, 61930.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 1.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.475), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78424.641 ops/s
[info] # Warmup Iteration   2: 166933.697 ops/s
[info] # Warmup Iteration   3: 185599.798 ops/s
[info] # Warmup Iteration   4: 186218.491 ops/s
[info] # Warmup Iteration   5: 186227.856 ops/s
[info] Iteration   1: 186208.580 ops/s
[info]                  ·gc.alloc.rate:                   1211.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              10242.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11328.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 186966.719 ops/s
[info]                  ·gc.alloc.rate:               1199.854 MB/sec
[info]                  ·gc.alloc.rate.norm:          10100.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5646.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 185584.184 ops/s
[info]                  ·gc.alloc.rate:                   1204.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              10212.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11380.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 186114.881 ops/s
[info]                  ·gc.alloc.rate:                   1220.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              10318.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11353.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 186643.328 ops/s
[info]                  ·gc.alloc.rate:                   1222.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              10309.452 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11313.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   186303.538 ±(99.9%) 2035.153 ops/s [Average]
[info]   (min, avg, max) = (185584.184, 186303.538, 186966.719), stdev = 528.523
[info]   CI (99.9%): [184268.385, 188338.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1211.724 ±(99.9%) 37.880 MB/sec [Average]
[info]   (min, avg, max) = (1199.854, 1211.724, 1222.580), stdev = 9.837
[info]   CI (99.9%): [1173.844, 1249.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10236.594 ±(99.9%) 340.258 B/op [Average]
[info]   (min, avg, max) = (10100.344, 10236.594, 10318.610), stdev = 88.364
[info]   CI (99.9%): [9896.337, 10576.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.447 ±(99.9%) 1155.207 MB/sec [Average]
[info]   (min, avg, max) = (670.787, 1207.447, 1342.576), stdev = 300.004
[info]   CI (99.9%): [52.240, 2362.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10204.484 ±(99.9%) 9811.531 B/op [Average]
[info]   (min, avg, max) = (5646.670, 10204.484, 11380.495), stdev = 2548.023
[info]   CI (99.9%): [392.953, 20016.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.712 ±(99.9%) 5.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.712, 3.039), stdev = 1.315
[info]   CI (99.9%): [≈ 0, 5.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.018 ±(99.9%) 42.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.018, 25.701), stdev = 11.119
[info]   CI (99.9%): [≈ 0, 48.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223877.840 ops/s
[info] # Warmup Iteration   2: 531029.042 ops/s
[info] # Warmup Iteration   3: 530435.261 ops/s
[info] # Warmup Iteration   4: 549725.944 ops/s
[info] # Warmup Iteration   5: 551684.291 ops/s
[info] Iteration   1: 555227.982 ops/s
[info]                  ·gc.alloc.rate:      547.517 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 550684.535 ops/s
[info]                  ·gc.alloc.rate:               566.494 MB/sec
[info]                  ·gc.alloc.rate.norm:          1619.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1906.713 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 552837.847 ops/s
[info]                  ·gc.alloc.rate:                   564.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1605.537 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1899.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 553238.385 ops/s
[info]                  ·gc.alloc.rate:               566.654 MB/sec
[info]                  ·gc.alloc.rate.norm:          1612.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1899.797 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 552085.247 ops/s
[info]                  ·gc.alloc.rate:                   563.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              1605.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1903.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   552814.799 ±(99.9%) 6406.921 ops/s [Average]
[info]   (min, avg, max) = (550684.535, 552814.799, 555227.982), stdev = 1663.857
[info]   CI (99.9%): [546407.878, 559221.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   561.594 ±(99.9%) 30.837 MB/sec [Average]
[info]   (min, avg, max) = (547.517, 561.594, 566.654), stdev = 8.008
[info]   CI (99.9%): [530.757, 592.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1598.847 ±(99.9%) 103.097 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1598.847, 1619.067), stdev = 26.774
[info]   CI (99.9%): [1495.750, 1701.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   534.008 ±(99.9%) 1149.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 534.008, 667.871), stdev = 298.520
[info]   CI (99.9%): [≈ 0, 1683.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1521.908 ±(99.9%) 3276.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1521.908, 1906.713), stdev = 850.778
[info]   CI (99.9%): [≈ 0, 4797.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.024 ±(99.9%) 0.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.059), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:45:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 708803.021 ops/s
[info] # Warmup Iteration   2: 1054144.901 ops/s
[info] # Warmup Iteration   3: 1133692.226 ops/s
[info] # Warmup Iteration   4: 1049643.573 ops/s
[info] # Warmup Iteration   5: 1136333.200 ops/s
[info] Iteration   1: 1153606.031 ops/s
[info]                  ·gc.alloc.rate:               872.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          1191.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916.061 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1135006.536 ops/s
[info]                  ·gc.alloc.rate:               856.764 MB/sec
[info]                  ·gc.alloc.rate.norm:          1188.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931.100 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1157957.179 ops/s
[info]                  ·gc.alloc.rate:                   892.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1212.895 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1826.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1156730.131 ops/s
[info]                  ·gc.alloc.rate:                   873.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1187.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     914.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1166644.787 ops/s
[info]                  ·gc.alloc.rate:               880.226 MB/sec
[info]                  ·gc.alloc.rate.norm:          1187.455 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 906.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1153988.933 ±(99.9%) 44902.116 ops/s [Average]
[info]   (min, avg, max) = (1135006.536, 1153988.933, 1166644.787), stdev = 11660.937
[info]   CI (99.9%): [1109086.817, 1198891.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   875.104 ±(99.9%) 49.973 MB/sec [Average]
[info]   (min, avg, max) = (856.764, 875.104, 892.493), stdev = 12.978
[info]   CI (99.9%): [825.132, 925.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1193.457 ±(99.9%) 42.197 B/op [Average]
[info]   (min, avg, max) = (1187.455, 1193.457, 1212.895), stdev = 10.958
[info]   CI (99.9%): [1151.260, 1235.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806.197 ±(99.9%) 1157.224 MB/sec [Average]
[info]   (min, avg, max) = (671.454, 806.197, 1343.796), stdev = 300.527
[info]   CI (99.9%): [≈ 0, 1963.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1098.922 ±(99.9%) 1565.917 B/op [Average]
[info]   (min, avg, max) = (906.719, 1098.922, 1826.213), stdev = 406.664
[info]   CI (99.9%): [≈ 0, 2664.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498804.627 ops/s
[info] # Warmup Iteration   2: 1270260.118 ops/s
[info] # Warmup Iteration   3: 1269191.777 ops/s
[info] # Warmup Iteration   4: 1284846.881 ops/s
[info] # Warmup Iteration   5: 1288781.736 ops/s
[info] Iteration   1: 1288702.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1289446.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1288951.351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1289226.740 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1289216.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1289108.679 ±(99.9%) 1104.742 ops/s [Average]
[info]   (min, avg, max) = (1288702.530, 1289108.679, 1289446.271), stdev = 286.898
[info]   CI (99.9%): [1288003.937, 1290213.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87278.838 ops/s
[info] # Warmup Iteration   2: 341062.851 ops/s
[info] # Warmup Iteration   3: 349703.293 ops/s
[info] # Warmup Iteration   4: 353619.509 ops/s
[info] # Warmup Iteration   5: 343600.756 ops/s
[info] Iteration   1: 357516.421 ops/s
[info]                  ·gc.alloc.rate:               996.328 MB/sec
[info]                  ·gc.alloc.rate.norm:          4386.249 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2933.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 349532.042 ops/s
[info]                  ·gc.alloc.rate:               999.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          4499.658 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5992.771 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 355545.264 ops/s
[info]                  ·gc.alloc.rate:                   981.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              4343.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2942.928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.184 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 357263.561 ops/s
[info]                  ·gc.alloc.rate:               1000.852 MB/sec
[info]                  ·gc.alloc.rate.norm:          4409.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5859.057 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 357965.450 ops/s
[info]                  ·gc.alloc.rate:                   987.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              4340.891 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2924.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   355564.548 ±(99.9%) 13456.924 ops/s [Average]
[info]   (min, avg, max) = (349532.042, 355564.548, 357965.450), stdev = 3494.720
[info]   CI (99.9%): [342107.623, 369021.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993.091 ±(99.9%) 32.936 MB/sec [Average]
[info]   (min, avg, max) = (981.123, 993.091, 1000.852), stdev = 8.553
[info]   CI (99.9%): [960.154, 1026.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4395.814 ±(99.9%) 249.982 B/op [Average]
[info]   (min, avg, max) = (4340.891, 4395.814, 4499.658), stdev = 64.919
[info]   CI (99.9%): [4145.832, 4645.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   931.593 ±(99.9%) 1403.179 MB/sec [Average]
[info]   (min, avg, max) = (664.830, 931.593, 1331.601), stdev = 364.401
[info]   CI (99.9%): [≈ 0, 2334.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4130.623 ±(99.9%) 6313.377 B/op [Average]
[info]   (min, avg, max) = (2924.369, 4130.623, 5992.771), stdev = 1639.564
[info]   CI (99.9%): [≈ 0, 10444.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191.694 ops/s
[info] # Warmup Iteration   2: 452.332 ops/s
[info] # Warmup Iteration   3: 594.123 ops/s
[info] # Warmup Iteration   4: 602.122 ops/s
[info] # Warmup Iteration   5: 600.614 ops/s
[info] Iteration   1: 599.858 ops/s
[info]                  ·gc.alloc.rate:                   1283.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368541.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3512729.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.227 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 603.355 ops/s
[info]                  ·gc.alloc.rate:                   1285.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              3352463.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3489466.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.755 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 604.308 ops/s
[info]                  ·gc.alloc.rate:               1284.240 MB/sec
[info]                  ·gc.alloc.rate.norm:          3343561.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3483698.777 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   4: 603.743 ops/s
[info]                  ·gc.alloc.rate:                   1283.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              3342501.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3477950.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14545.531 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 601.487 ops/s
[info]                  ·gc.alloc.rate:               1276.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          3339019.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1743562.419 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   602.550 ±(99.9%) 7.085 ops/s [Average]
[info]   (min, avg, max) = (599.858, 602.550, 604.308), stdev = 1.840
[info]   CI (99.9%): [595.466, 609.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1282.860 ±(99.9%) 14.277 MB/sec [Average]
[info]   (min, avg, max) = (1276.397, 1282.860, 1285.893), stdev = 3.708
[info]   CI (99.9%): [1268.583, 1297.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3349217.606 ±(99.9%) 45766.244 B/op [Average]
[info]   (min, avg, max) = (3339019.960, 3349217.606, 3368541.733), stdev = 11885.348
[info]   CI (99.9%): [3303451.362, 3394983.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1203.554 ±(99.9%) 1156.044 MB/sec [Average]
[info]   (min, avg, max) = (666.506, 1203.554, 1338.822), stdev = 300.221
[info]   CI (99.9%): [47.510, 2359.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3141481.477 ±(99.9%) 3009556.142 B/op [Average]
[info]   (min, avg, max) = (1743562.419, 3141481.477, 3512729.600), stdev = 781572.173
[info]   CI (99.9%): [131925.335, 6151037.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1.138 ±(99.9%) 9.577 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.138, 5.587), stdev = 2.487
[info]   CI (99.9%): [≈ 0, 10.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2963.503 ±(99.9%) 24932.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2963.503, 14545.531), stdev = 6474.936
[info]   CI (99.9%): [≈ 0, 27896.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.800, 9.000), stdev = 3.347
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191.887 ops/s
[info] # Warmup Iteration   2: 551.824 ops/s
[info] # Warmup Iteration   3: 592.070 ops/s
[info] # Warmup Iteration   4: 595.074 ops/s
[info] # Warmup Iteration   5: 597.438 ops/s
[info] Iteration   1: 595.439 ops/s
[info]                  ·gc.alloc.rate:                   1264.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              3341399.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3520470.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.960 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 598.498 ops/s
[info]                  ·gc.alloc.rate:               1266.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          3329803.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3504589.569 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   3: 596.741 ops/s
[info]                  ·gc.alloc.rate:                   1261.002 MB/sec
[info]                  ·gc.alloc.rate.norm:              3325509.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3519843.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 603.282 ops/s
[info]                  ·gc.alloc.rate:                   1273.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              3322335.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3479050.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14430.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 592.044 ops/s
[info]                  ·gc.alloc.rate:                   1266.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              3365087.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1764719.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   597.201 ±(99.9%) 15.942 ops/s [Average]
[info]   (min, avg, max) = (592.044, 597.201, 603.282), stdev = 4.140
[info]   CI (99.9%): [581.258, 613.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1266.611 ±(99.9%) 18.227 MB/sec [Average]
[info]   (min, avg, max) = (1261.002, 1266.611, 1273.958), stdev = 4.733
[info]   CI (99.9%): [1248.384, 1284.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3336827.037 ±(99.9%) 66889.705 B/op [Average]
[info]   (min, avg, max) = (3322335.868, 3336827.037, 3365087.987), stdev = 17371.044
[info]   CI (99.9%): [3269937.332, 3403716.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1199.720 ±(99.9%) 1152.393 MB/sec [Average]
[info]   (min, avg, max) = (664.367, 1199.720, 1334.691), stdev = 299.273
[info]   CI (99.9%): [47.328, 2352.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3157734.675 ±(99.9%) 2999267.475 B/op [Average]
[info]   (min, avg, max) = (1764719.811, 3157734.675, 3520470.765), stdev = 778900.239
[info]   CI (99.9%): [158467.199, 6157002.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1.132 ±(99.9%) 9.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.132, 5.534), stdev = 2.461
[info]   CI (99.9%): [≈ 0, 10.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2952.238 ±(99.9%) 24709.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2952.238, 14430.940), stdev = 6416.967
[info]   CI (99.9%): [≈ 0, 27661.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 8.000), stdev = 2.608
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:44:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21857.598 ops/s
[info] # Warmup Iteration   2: 48276.755 ops/s
[info] # Warmup Iteration   3: 48007.342 ops/s
[info] # Warmup Iteration   4: 49793.071 ops/s
[info] # Warmup Iteration   5: 49700.599 ops/s
[info] Iteration   1: 50167.943 ops/s
[info]                  ·gc.alloc.rate:               855.621 MB/sec
[info]                  ·gc.alloc.rate.norm:          26841.824 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42055.467 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 50628.251 ops/s
[info]                  ·gc.alloc.rate:               841.782 MB/sec
[info]                  ·gc.alloc.rate.norm:          26168.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20842.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 50647.208 ops/s
[info]                  ·gc.alloc.rate:                   840.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              26114.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20844.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.294 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 50559.898 ops/s
[info]                  ·gc.alloc.rate:                   837.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              26073.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20881.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.648 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 50048.655 ops/s
[info]                  ·gc.alloc.rate:                   853.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              26842.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42189.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   50410.391 ±(99.9%) 1081.495 ops/s [Average]
[info]   (min, avg, max) = (50048.655, 50410.391, 50647.208), stdev = 280.861
[info]   CI (99.9%): [49328.896, 51491.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   845.955 ±(99.9%) 31.692 MB/sec [Average]
[info]   (min, avg, max) = (837.623, 845.955, 855.621), stdev = 8.230
[info]   CI (99.9%): [814.263, 877.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26408.039 ±(99.9%) 1531.045 B/op [Average]
[info]   (min, avg, max) = (26073.921, 26408.039, 26842.290), stdev = 397.608
[info]   CI (99.9%): [24876.994, 27939.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   939.040 ±(99.9%) 1414.326 MB/sec [Average]
[info]   (min, avg, max) = (670.475, 939.040, 1342.208), stdev = 367.296
[info]   CI (99.9%): [≈ 0, 2353.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29362.704 ±(99.9%) 44852.637 B/op [Average]
[info]   (min, avg, max) = (20842.716, 29362.704, 42189.389), stdev = 11648.087
[info]   CI (99.9%): [≈ 0, 74215.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.650 ±(99.9%) 2.506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 1.309), stdev = 0.651
[info]   CI (99.9%): [≈ 0, 3.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139.782 ops/s
[info] # Warmup Iteration   2: 396.886 ops/s
[info] # Warmup Iteration   3: 569.231 ops/s
[info] # Warmup Iteration   4: 587.905 ops/s
[info] # Warmup Iteration   5: 586.845 ops/s
[info] Iteration   1: 580.139 ops/s
[info]                  ·gc.alloc.rate:               1278.371 MB/sec
[info]                  ·gc.alloc.rate.norm:          3465861.687 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3614970.272 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 586.286 ops/s
[info]                  ·gc.alloc.rate:                   1265.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              3395749.833 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1789903.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 582.612 ops/s
[info]                  ·gc.alloc.rate:                   1271.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              3434551.657 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3606166.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.412 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 580.769 ops/s
[info]                  ·gc.alloc.rate:                   1266.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              3431495.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3620384.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12069.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 578.809 ops/s
[info]                  ·gc.alloc.rate:                   1289.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              3504744.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3625646.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2829.706 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   581.723 ±(99.9%) 11.147 ops/s [Average]
[info]   (min, avg, max) = (578.809, 581.723, 586.286), stdev = 2.895
[info]   CI (99.9%): [570.576, 592.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1274.238 ±(99.9%) 37.304 MB/sec [Average]
[info]   (min, avg, max) = (1265.748, 1274.238, 1289.007), stdev = 9.688
[info]   CI (99.9%): [1236.934, 1311.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3446480.765 ±(99.9%) 157721.299 B/op [Average]
[info]   (min, avg, max) = (3395749.833, 3446480.765, 3504744.788), stdev = 40959.721
[info]   CI (99.9%): [3288759.466, 3604202.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1201.067 ±(99.9%) 1149.247 MB/sec [Average]
[info]   (min, avg, max) = (667.177, 1201.067, 1336.104), stdev = 298.456
[info]   CI (99.9%): [51.819, 2350.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3251414.082 ±(99.9%) 3146134.724 B/op [Average]
[info]   (min, avg, max) = (1789903.155, 3251414.082, 3625646.204), stdev = 817041.197
[info]   CI (99.9%): [105279.359, 6397548.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.132 ±(99.9%) 7.339 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.132, 4.454), stdev = 1.906
[info]   CI (99.9%): [≈ 0, 8.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3069.302 ±(99.9%) 19887.810 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3069.302, 12069.453), stdev = 5164.801
[info]   CI (99.9%): [≈ 0, 22957.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5673.894 ops/s
[info] # Warmup Iteration   2: 13144.225 ops/s
[info] # Warmup Iteration   3: 14158.856 ops/s
[info] # Warmup Iteration   4: 14652.093 ops/s
[info] # Warmup Iteration   5: 14382.374 ops/s
[info] Iteration   1: 14581.186 ops/s
[info]                  ·gc.alloc.rate:                   1165.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              125810.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144049.782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 14550.211 ops/s
[info]                  ·gc.alloc.rate:                   1158.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              125231.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144438.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 14642.032 ops/s
[info]                  ·gc.alloc.rate:                   1140.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              122585.865 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71778.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14562.005 ops/s
[info]                  ·gc.alloc.rate:               1164.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          125858.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144417.676 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 14636.828 ops/s
[info]                  ·gc.alloc.rate:                   1149.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              123567.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143677.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619.996 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14594.452 ±(99.9%) 163.886 ops/s [Average]
[info]   (min, avg, max) = (14550.211, 14594.452, 14642.032), stdev = 42.561
[info]   CI (99.9%): [14430.567, 14758.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1155.591 ±(99.9%) 40.990 MB/sec [Average]
[info]   (min, avg, max) = (1140.544, 1155.591, 1165.621), stdev = 10.645
[info]   CI (99.9%): [1114.600, 1196.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   124610.822 ±(99.9%) 5636.751 B/op [Average]
[info]   (min, avg, max) = (122585.865, 124610.822, 125858.997), stdev = 1463.846
[info]   CI (99.9%): [118974.072, 130247.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1202.118 ±(99.9%) 1150.096 MB/sec [Average]
[info]   (min, avg, max) = (667.831, 1202.118, 1336.278), stdev = 298.676
[info]   CI (99.9%): [52.022, 2352.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   129672.497 ±(99.9%) 124626.770 B/op [Average]
[info]   (min, avg, max) = (71778.589, 129672.497, 144438.606), stdev = 32365.176
[info]   CI (99.9%): [5045.727, 254299.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1.166 ±(99.9%) 9.903 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.166, 5.766), stdev = 2.572
[info]   CI (99.9%): [≈ 0, 11.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   125.346 ±(99.9%) 1064.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 125.346, 619.996), stdev = 276.519
[info]   CI (99.9%): [≈ 0, 1190.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4652.871 ops/s
[info] # Warmup Iteration   2: 17592.283 ops/s
[info] # Warmup Iteration   3: 18284.770 ops/s
[info] # Warmup Iteration   4: 18354.732 ops/s
[info] # Warmup Iteration   5: 18141.163 ops/s
[info] Iteration   1: 18161.716 ops/s
[info]                  ·gc.alloc.rate:                   1102.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              95532.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115623.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 18167.069 ops/s
[info]                  ·gc.alloc.rate:               1082.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          93754.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57824.609 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 18022.068 ops/s
[info]                  ·gc.alloc.rate:               1097.674 MB/sec
[info]                  ·gc.alloc.rate.norm:          95858.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116637.719 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 18286.694 ops/s
[info]                  ·gc.alloc.rate:               1100.258 MB/sec
[info]                  ·gc.alloc.rate.norm:          94692.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57531.220 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 18020.407 ops/s
[info]                  ·gc.alloc.rate:                   1086.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              94849.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116796.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334.534 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18131.591 ±(99.9%) 433.006 ops/s [Average]
[info]   (min, avg, max) = (18020.407, 18131.591, 18286.694), stdev = 112.450
[info]   CI (99.9%): [17698.585, 18564.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1093.721 ±(99.9%) 34.753 MB/sec [Average]
[info]   (min, avg, max) = (1082.220, 1093.721, 1102.434), stdev = 9.025
[info]   CI (99.9%): [1058.968, 1128.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   94937.448 ±(99.9%) 3144.860 B/op [Average]
[info]   (min, avg, max) = (93754.921, 94937.448, 95858.089), stdev = 816.710
[info]   CI (99.9%): [91792.588, 98082.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.631 ±(99.9%) 1408.374 MB/sec [Average]
[info]   (min, avg, max) = (667.474, 1068.631, 1337.308), stdev = 365.750
[info]   CI (99.9%): [≈ 0, 2477.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   92882.597 ±(99.9%) 123762.193 B/op [Average]
[info]   (min, avg, max) = (57531.220, 92882.597, 116796.112), stdev = 32140.648
[info]   CI (99.9%): [≈ 0, 216644.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.774 ±(99.9%) 6.579 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.774, 3.830), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 7.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   67.628 ±(99.9%) 574.567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.628, 334.534), stdev = 149.213
[info]   CI (99.9%): [≈ 0, 642.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100246.367 ops/s
[info] # Warmup Iteration   2: 218462.787 ops/s
[info] # Warmup Iteration   3: 222459.703 ops/s
[info] # Warmup Iteration   4: 222584.719 ops/s
[info] # Warmup Iteration   5: 221099.250 ops/s
[info] Iteration   1: 222288.424 ops/s
[info]                  ·gc.alloc.rate:                   820.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              5808.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9463.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 221407.368 ops/s
[info]                  ·gc.alloc.rate:               798.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          5675.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4754.072 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 221260.089 ops/s
[info]                  ·gc.alloc.rate:                   800.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              5691.590 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4761.882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 218815.249 ops/s
[info]                  ·gc.alloc.rate:                   789.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              5679.634 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4815.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 222179.357 ops/s
[info]                  ·gc.alloc.rate:               808.992 MB/sec
[info]                  ·gc.alloc.rate.norm:          5730.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4746.930 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   221190.098 ±(99.9%) 5403.596 ops/s [Average]
[info]   (min, avg, max) = (218815.249, 221190.098, 222288.424), stdev = 1403.297
[info]   CI (99.9%): [215786.502, 226593.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   803.592 ±(99.9%) 44.641 MB/sec [Average]
[info]   (min, avg, max) = (789.950, 803.592, 820.438), stdev = 11.593
[info]   CI (99.9%): [758.951, 848.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5717.199 ±(99.9%) 214.385 B/op [Average]
[info]   (min, avg, max) = (5675.437, 5717.199, 5808.923), stdev = 55.675
[info]   CI (99.9%): [5502.814, 5931.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   802.955 ±(99.9%) 1148.749 MB/sec [Average]
[info]   (min, avg, max) = (668.797, 802.955, 1336.617), stdev = 298.327
[info]   CI (99.9%): [≈ 0, 1951.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5708.380 ±(99.9%) 8084.074 B/op [Average]
[info]   (min, avg, max) = (4746.930, 5708.380, 9463.606), stdev = 2099.408
[info]   CI (99.9%): [≈ 0, 13792.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.119 ±(99.9%) 0.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.119, 0.295), stdev = 0.123
[info]   CI (99.9%): [≈ 0, 0.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146405.896 ops/s
[info] # Warmup Iteration   2: 229042.576 ops/s
[info] # Warmup Iteration   3: 242499.156 ops/s
[info] # Warmup Iteration   4: 244251.095 ops/s
[info] # Warmup Iteration   5: 242724.930 ops/s
[info] Iteration   1: 243418.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 241604.459 ops/s
[info]                  ·gc.alloc.rate:      0.915 MB/sec
[info]                  ·gc.alloc.rate.norm: 5.962 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 243268.171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 244196.460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 243666.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   243230.788 ±(99.9%) 3754.972 ops/s [Average]
[info]   (min, avg, max) = (241604.459, 243230.788, 244196.460), stdev = 975.154
[info]   CI (99.9%): [239475.816, 246985.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.183 ±(99.9%) 1.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.183, 0.915), stdev = 0.409
[info]   CI (99.9%): [≈ 0, 1.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1.194 ±(99.9%) 10.264 B/op [Average]
[info]   (min, avg, max) = (0.002, 1.194, 5.962), stdev = 2.666
[info]   CI (99.9%): [≈ 0, 11.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7429.891 ops/s
[info] # Warmup Iteration   2: 17430.165 ops/s
[info] # Warmup Iteration   3: 18219.292 ops/s
[info] # Warmup Iteration   4: 18278.702 ops/s
[info] # Warmup Iteration   5: 18255.324 ops/s
[info] Iteration   1: 18211.722 ops/s
[info]                  ·gc.alloc.rate:               1174.436 MB/sec
[info]                  ·gc.alloc.rate.norm:          101495.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57681.754 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 18169.380 ops/s
[info]                  ·gc.alloc.rate:               1167.015 MB/sec
[info]                  ·gc.alloc.rate.norm:          101085.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115630.127 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   3: 18228.796 ops/s
[info]                  ·gc.alloc.rate:                   1178.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              101721.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115313.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.392 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 18270.306 ops/s
[info]                  ·gc.alloc.rate:                   1168.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              100653.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115105.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 433.942 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 18400.343 ops/s
[info]                  ·gc.alloc.rate:                   1175.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              100499.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57149.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   18256.109 ±(99.9%) 340.315 ops/s [Average]
[info]   (min, avg, max) = (18169.380, 18256.109, 18400.343), stdev = 88.379
[info]   CI (99.9%): [17915.794, 18596.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1172.615 ±(99.9%) 17.954 MB/sec [Average]
[info]   (min, avg, max) = (1167.015, 1172.615, 1178.083), stdev = 4.663
[info]   CI (99.9%): [1154.661, 1190.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   101091.265 ±(99.9%) 2021.379 B/op [Average]
[info]   (min, avg, max) = (100499.361, 101091.265, 101721.491), stdev = 524.946
[info]   CI (99.9%): [99069.886, 103112.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1068.472 ±(99.9%) 1408.372 MB/sec [Average]
[info]   (min, avg, max) = (667.453, 1068.472, 1336.310), stdev = 365.750
[info]   CI (99.9%): [≈ 0, 2476.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   92176.122 ±(99.9%) 122192.351 B/op [Average]
[info]   (min, avg, max) = (57149.472, 92176.122, 115630.127), stdev = 31732.966
[info]   CI (99.9%): [≈ 0, 214368.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1.203 ±(99.9%) 8.389 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.203, 5.038), stdev = 2.178
[info]   CI (99.9%): [≈ 0, 9.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   103.536 ±(99.9%) 722.636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.536, 433.942), stdev = 187.666
[info]   CI (99.9%): [≈ 0, 826.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 945958.018 ops/s
[info] # Warmup Iteration   2: 1539020.860 ops/s
[info] # Warmup Iteration   3: 1558194.604 ops/s
[info] # Warmup Iteration   4: 1559965.241 ops/s
[info] # Warmup Iteration   5: 1559520.527 ops/s
[info] Iteration   1: 1517353.207 ops/s
[info]                  ·gc.alloc.rate:               79.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          82.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 530.652 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1557303.463 ops/s
[info]                  ·gc.alloc.rate:      63.327 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1558991.958 ops/s
[info]                  ·gc.alloc.rate:      63.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.135 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1385935.343 ops/s
[info]                  ·gc.alloc.rate:      56.383 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1559405.515 ops/s
[info]                  ·gc.alloc.rate:      63.416 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   1515797.897 ±(99.9%) 287877.583 ops/s [Average]
[info]   (min, avg, max) = (1385935.343, 1515797.897, 1559405.515), stdev = 74760.894
[info]   CI (99.9%): [1227920.315, 1803675.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   65.326 ±(99.9%) 33.648 MB/sec [Average]
[info]   (min, avg, max) = (56.383, 65.326, 79.975), stdev = 8.738
[info]   CI (99.9%): [31.678, 98.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   67.818 ±(99.9%) 32.584 B/op [Average]
[info]   (min, avg, max) = (64.000, 67.818, 82.955), stdev = 8.462
[info]   CI (99.9%): [35.234, 100.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.317 ±(99.9%) 880.983 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.317, 511.587), stdev = 228.789
[info]   CI (99.9%): [≈ 0, 983.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   106.130 ±(99.9%) 913.815 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.130, 530.652), stdev = 237.315
[info]   CI (99.9%): [≈ 0, 1019.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5677.874 ops/s
[info] # Warmup Iteration   2: 64396.917 ops/s
[info] # Warmup Iteration   3: 80380.644 ops/s
[info] # Warmup Iteration   4: 82116.728 ops/s
[info] # Warmup Iteration   5: 82769.948 ops/s
[info] Iteration   1: 83260.999 ops/s
[info]                  ·gc.alloc.rate:                   3522.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              66588.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63595.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.574 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 83019.411 ops/s
[info]                  ·gc.alloc.rate:                   3554.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              67374.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3375.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63970.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.395 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 83219.729 ops/s
[info]                  ·gc.alloc.rate:               3579.412 MB/sec
[info]                  ·gc.alloc.rate.norm:          67640.801 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4057.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76677.214 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 82270.031 ops/s
[info]                  ·gc.alloc.rate:               3524.397 MB/sec
[info]                  ·gc.alloc.rate.norm:          67415.254 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3390.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64862.472 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 82827.669 ops/s
[info]                  ·gc.alloc.rate:                   3547.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              67413.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64544.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.187 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   82919.568 ±(99.9%) 1548.639 ops/s [Average]
[info]   (min, avg, max) = (82270.031, 82919.568, 83260.999), stdev = 402.177
[info]   CI (99.9%): [81370.929, 84468.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3545.832 ±(99.9%) 90.336 MB/sec [Average]
[info]   (min, avg, max) = (3522.799, 3545.832, 3579.412), stdev = 23.460
[info]   CI (99.9%): [3455.496, 3636.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67286.239 ±(99.9%) 1556.626 B/op [Average]
[info]   (min, avg, max) = (66588.012, 67286.239, 67640.801), stdev = 404.251
[info]   CI (99.9%): [65729.613, 68842.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3517.002 ±(99.9%) 1164.719 MB/sec [Average]
[info]   (min, avg, max) = (3364.470, 3517.002, 4057.600), stdev = 302.474
[info]   CI (99.9%): [2352.283, 4681.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66729.943 ±(99.9%) 21495.947 B/op [Average]
[info]   (min, avg, max) = (63595.277, 66729.943, 76677.214), stdev = 5582.429
[info]   CI (99.9%): [45233.996, 88225.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.631 ±(99.9%) 2.757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.631, 1.574), stdev = 0.716
[info]   CI (99.9%): [≈ 0, 3.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 663876.318 ops/s
[info] # Warmup Iteration   2: 1846161.381 ops/s
[info] # Warmup Iteration   3: 1849279.180 ops/s
[info] # Warmup Iteration   4: 1860726.237 ops/s
[info] # Warmup Iteration   5: 1848708.795 ops/s
[info] Iteration   1: 1875416.871 ops/s
[info]                  ·gc.alloc.rate:               997.658 MB/sec
[info]                  ·gc.alloc.rate.norm:          837.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 560.403 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1860057.480 ops/s
[info]                  ·gc.alloc.rate:               989.363 MB/sec
[info]                  ·gc.alloc.rate.norm:          837.121 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 565.617 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 1868454.034 ops/s
[info]                  ·gc.alloc.rate:                   1009.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              849.871 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1866245.066 ops/s
[info]                  ·gc.alloc.rate:                   991.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              836.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     564.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1849404.466 ops/s
[info]                  ·gc.alloc.rate:               1022.009 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1139.495 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1863915.584 ±(99.9%) 37716.715 ops/s [Average]
[info]   (min, avg, max) = (1849404.466, 1863915.584, 1875416.871), stdev = 9794.911
[info]   CI (99.9%): [1826198.869, 1901632.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1001.941 ±(99.9%) 52.519 MB/sec [Average]
[info]   (min, avg, max) = (989.363, 1001.941, 1022.009), stdev = 13.639
[info]   CI (99.9%): [949.422, 1054.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   845.990 ±(99.9%) 55.738 B/op [Average]
[info]   (min, avg, max) = (836.091, 845.990, 869.798), stdev = 14.475
[info]   CI (99.9%): [790.253, 901.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.488 ±(99.9%) 1412.944 MB/sec [Average]
[info]   (min, avg, max) = (667.913, 936.488, 1338.902), stdev = 366.937
[info]   CI (99.9%): [≈ 0, 2349.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   791.303 ±(99.9%) 1201.561 B/op [Average]
[info]   (min, avg, max) = (560.403, 791.303, 1139.495), stdev = 312.042
[info]   CI (99.9%): [≈ 0, 1992.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1099081.093 ops/s
[info] # Warmup Iteration   2: 2074866.008 ops/s
[info] # Warmup Iteration   3: 2208683.731 ops/s
[info] # Warmup Iteration   4: 2261640.369 ops/s
[info] # Warmup Iteration   5: 2200357.173 ops/s
[info] Iteration   1: 2119913.259 ops/s
[info]                  ·gc.alloc.rate:                   618.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              459.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     497.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2233649.576 ops/s
[info]                  ·gc.alloc.rate:               649.159 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 472.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2247932.434 ops/s
[info]                  ·gc.alloc.rate:               651.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469.893 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2252887.953 ops/s
[info]                  ·gc.alloc.rate:               645.690 MB/sec
[info]                  ·gc.alloc.rate.norm:          450.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 2257662.557 ops/s
[info]                  ·gc.alloc.rate:                   649.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              452.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   2222409.156 ±(99.9%) 223328.659 ops/s [Average]
[info]   (min, avg, max) = (2119913.259, 2222409.156, 2257662.557), stdev = 57997.744
[info]   CI (99.9%): [1999080.497, 2445737.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   642.821 ±(99.9%) 52.855 MB/sec [Average]
[info]   (min, avg, max) = (618.552, 642.821, 651.532), stdev = 13.726
[info]   CI (99.9%): [589.966, 695.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   455.204 ±(99.9%) 12.942 B/op [Average]
[info]   (min, avg, max) = (450.945, 455.204, 459.024), stdev = 3.361
[info]   CI (99.9%): [442.261, 468.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.061 ±(99.9%) 1.583 MB/sec [Average]
[info]   (min, avg, max) = (670.504, 671.061, 671.434), stdev = 0.411
[info]   CI (99.9%): [669.478, 672.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   475.409 ±(99.9%) 48.516 B/op [Average]
[info]   (min, avg, max) = (468.099, 475.409, 497.756), stdev = 12.600
[info]   CI (99.9%): [426.893, 523.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:41:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1266746.455 ops/s
[info] # Warmup Iteration   2: 2288793.547 ops/s
[info] # Warmup Iteration   3: 2400011.348 ops/s
[info] # Warmup Iteration   4: 2399656.346 ops/s
[info] # Warmup Iteration   5: 2400817.619 ops/s
[info] Iteration   1: 2400865.519 ops/s
[info]                  ·gc.alloc.rate:      24.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2401343.634 ops/s
[info]                  ·gc.alloc.rate:      24.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2400594.121 ops/s
[info]                  ·gc.alloc.rate:      24.404 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2401140.024 ops/s
[info]                  ·gc.alloc.rate:      24.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2407907.892 ops/s
[info]                  ·gc.alloc.rate:      24.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   2402370.238 ±(99.9%) 11969.825 ops/s [Average]
[info]   (min, avg, max) = (2400594.121, 2402370.238, 2407907.892), stdev = 3108.525
[info]   CI (99.9%): [2390400.413, 2414340.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   24.426 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (24.404, 24.426, 24.480), stdev = 0.031
[info]   CI (99.9%): [24.306, 24.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12307.103 ops/s
[info] # Warmup Iteration   2: 45494.974 ops/s
[info] # Warmup Iteration   3: 51177.871 ops/s
[info] # Warmup Iteration   4: 50959.897 ops/s
[info] # Warmup Iteration   5: 51282.540 ops/s
[info] Iteration   1: 51715.902 ops/s
[info]                  ·gc.alloc.rate:                   2221.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              67594.204 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61063.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 50647.517 ops/s
[info]                  ·gc.alloc.rate:                   2174.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              67578.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62186.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.235 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51845.370 ops/s
[info]                  ·gc.alloc.rate:                   2227.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              67588.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60728.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 51983.228 ops/s
[info]                  ·gc.alloc.rate:               2246.167 MB/sec
[info]                  ·gc.alloc.rate.norm:          68005.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2001.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60604.918 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 51935.830 ops/s
[info]                  ·gc.alloc.rate:               2271.191 MB/sec
[info]                  ·gc.alloc.rate.norm:          68825.615 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81108.449 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   51625.569 ±(99.9%) 2141.560 ops/s [Average]
[info]   (min, avg, max) = (50647.517, 51625.569, 51983.228), stdev = 556.156
[info]   CI (99.9%): [49484.010, 53767.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2228.166 ±(99.9%) 137.090 MB/sec [Average]
[info]   (min, avg, max) = (2174.816, 2228.166, 2271.191), stdev = 35.602
[info]   CI (99.9%): [2091.075, 2365.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67918.584 ±(99.9%) 2073.497 B/op [Average]
[info]   (min, avg, max) = (67578.766, 67918.584, 68825.615), stdev = 538.481
[info]   CI (99.9%): [65845.087, 69992.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2137.492 ±(99.9%) 1160.321 MB/sec [Average]
[info]   (min, avg, max) = (2001.276, 2137.492, 2676.515), stdev = 301.332
[info]   CI (99.9%): [977.172, 3297.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65138.193 ±(99.9%) 34460.993 B/op [Average]
[info]   (min, avg, max) = (60604.918, 65138.193, 81108.449), stdev = 8949.410
[info]   CI (99.9%): [30677.200, 99599.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 4.247), stdev = 1.886
[info]   CI (99.9%): [≈ 0, 8.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   26.622 ±(99.9%) 220.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.622, 129.242), stdev = 57.382
[info]   CI (99.9%): [≈ 0, 247.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84581.034 ops/s
[info] # Warmup Iteration   2: 676039.993 ops/s
[info] # Warmup Iteration   3: 845201.126 ops/s
[info] # Warmup Iteration   4: 857716.611 ops/s
[info] # Warmup Iteration   5: 856955.890 ops/s
[info] Iteration   1: 876394.824 ops/s
[info]                  ·gc.alloc.rate:                   2819.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              5062.469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4809.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 876812.566 ops/s
[info]                  ·gc.alloc.rate:                   2833.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              5086.603 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4802.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 878583.443 ops/s
[info]                  ·gc.alloc.rate:                   2853.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              5109.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4800.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 878041.504 ops/s
[info]                  ·gc.alloc.rate:               2851.612 MB/sec
[info]                  ·gc.alloc.rate.norm:          5111.574 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4816.773 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 864524.033 ops/s
[info]                  ·gc.alloc.rate:               2809.414 MB/sec
[info]                  ·gc.alloc.rate.norm:          5114.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4905.504 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   874871.274 ±(99.9%) 22534.145 ops/s [Average]
[info]   (min, avg, max) = (864524.033, 874871.274, 878583.443), stdev = 5852.046
[info]   CI (99.9%): [852337.129, 897405.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2833.410 ±(99.9%) 74.662 MB/sec [Average]
[info]   (min, avg, max) = (2809.414, 2833.410, 2853.158), stdev = 19.390
[info]   CI (99.9%): [2758.747, 2908.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.929 ±(99.9%) 85.551 B/op [Average]
[info]   (min, avg, max) = (5062.469, 5096.929, 5114.417), stdev = 22.217
[info]   CI (99.9%): [5011.378, 5182.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2683.151 ±(99.9%) 30.013 MB/sec [Average]
[info]   (min, avg, max) = (2675.277, 2683.151, 2694.655), stdev = 7.794
[info]   CI (99.9%): [2653.138, 2713.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4826.834 ±(99.9%) 171.141 B/op [Average]
[info]   (min, avg, max) = (4800.676, 4826.834, 4905.504), stdev = 44.445
[info]   CI (99.9%): [4655.693, 4997.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.037), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:40:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.721 ops/s
[info] # Warmup Iteration   2: 4601200.486 ops/s
[info] # Warmup Iteration   3: 4887540.545 ops/s
[info] # Warmup Iteration   4: 4866217.357 ops/s
[info] # Warmup Iteration   5: 4963865.376 ops/s
[info] Iteration   1: 4967418.470 ops/s
[info]                  ·gc.alloc.rate:                   319.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              101.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4966794.687 ops/s
[info]                  ·gc.alloc.rate:               313.572 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162.115 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 4991096.504 ops/s
[info]                  ·gc.alloc.rate:      304.498 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4974531.001 ops/s
[info]                  ·gc.alloc.rate:               326.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          103.357 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210.753 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 4995388.582 ops/s
[info]                  ·gc.alloc.rate:      304.735 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   4979045.849 ±(99.9%) 51589.072 ops/s [Average]
[info]   (min, avg, max) = (4966794.687, 4979045.849, 4995388.582), stdev = 13397.518
[info]   CI (99.9%): [4927456.777, 5030634.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   313.729 ±(99.9%) 36.724 MB/sec [Average]
[info]   (min, avg, max) = (304.498, 313.729, 326.711), stdev = 9.537
[info]   CI (99.9%): [277.005, 350.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   99.164 ±(99.9%) 12.387 B/op [Average]
[info]   (min, avg, max) = (96.000, 99.164, 103.357), stdev = 3.217
[info]   CI (99.9%): [86.777, 111.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   337.891 ±(99.9%) 1212.330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 337.891, 666.189), stdev = 314.838
[info]   CI (99.9%): [≈ 0, 1550.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   106.992 ±(99.9%) 383.790 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.992, 210.753), stdev = 99.669
[info]   CI (99.9%): [≈ 0, 490.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:40:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44082.506 ops/s
[info] # Warmup Iteration   2: 844408.430 ops/s
[info] # Warmup Iteration   3: 994030.801 ops/s
[info] # Warmup Iteration   4: 1011541.654 ops/s
[info] # Warmup Iteration   5: 1022963.314 ops/s
[info] Iteration   1: 1025058.171 ops/s
[info]                  ·gc.alloc.rate:               1216.878 MB/sec
[info]                  ·gc.alloc.rate.norm:          1868.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2049.103 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   2: 1001079.634 ops/s
[info]                  ·gc.alloc.rate:                   1162.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              1827.240 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1049.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1018468.036 ops/s
[info]                  ·gc.alloc.rate:                   1195.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1847.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2064.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1016605.392 ops/s
[info]                  ·gc.alloc.rate:               1212.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          1876.723 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2070.819 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 1029698.503 ops/s
[info]                  ·gc.alloc.rate:                   1217.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              1861.156 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2045.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.602 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1018181.947 ±(99.9%) 41960.094 ops/s [Average]
[info]   (min, avg, max) = (1001079.634, 1018181.947, 1029698.503), stdev = 10896.903
[info]   CI (99.9%): [976221.854, 1060142.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1201.011 ±(99.9%) 90.074 MB/sec [Average]
[info]   (min, avg, max) = (1162.286, 1201.011, 1217.641), stdev = 23.392
[info]   CI (99.9%): [1110.937, 1291.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1856.246 ±(99.9%) 74.678 B/op [Average]
[info]   (min, avg, max) = (1827.240, 1856.246, 1876.723), stdev = 19.394
[info]   CI (99.9%): [1781.568, 1930.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1202.892 ±(99.9%) 1152.530 MB/sec [Average]
[info]   (min, avg, max) = (667.479, 1202.892, 1338.147), stdev = 299.308
[info]   CI (99.9%): [50.362, 2355.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1855.922 ±(99.9%) 1736.690 B/op [Average]
[info]   (min, avg, max) = (1049.350, 1855.922, 2070.819), stdev = 451.013
[info]   CI (99.9%): [119.232, 3592.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.874 ±(99.9%) 7.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.874, 4.319), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 8.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.337 ±(99.9%) 11.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.337, 6.602), stdev = 2.943
[info]   CI (99.9%): [≈ 0, 12.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3301744.320 ops/s
[info] # Warmup Iteration   2: 9068974.698 ops/s
[info] # Warmup Iteration   3: 9200212.997 ops/s
[info] # Warmup Iteration   4: 9204389.785 ops/s
[info] # Warmup Iteration   5: 9224783.152 ops/s
[info] Iteration   1: 9349114.750 ops/s
[info]                  ·gc.alloc.rate:      427.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8007713.691 ops/s
[info]                  ·gc.alloc.rate:               383.997 MB/sec
[info]                  ·gc.alloc.rate.norm:          75.438 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 100.552 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 9306044.742 ops/s
[info]                  ·gc.alloc.rate:                   444.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9327349.728 ops/s
[info]                  ·gc.alloc.rate:      426.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9310932.427 ops/s
[info]                  ·gc.alloc.rate:                   447.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              75.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9060231.067 ±(99.9%) 2266550.087 ops/s [Average]
[info]   (min, avg, max) = (8007713.691, 9060231.067, 9349114.750), stdev = 588615.860
[info]   CI (99.9%): [6793680.981, 11326781.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   426.097 ±(99.9%) 97.624 MB/sec [Average]
[info]   (min, avg, max) = (383.997, 426.097, 447.694), stdev = 25.353
[info]   CI (99.9%): [328.473, 523.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   74.048 ±(99.9%) 7.239 B/op [Average]
[info]   (min, avg, max) = (72.000, 74.048, 75.677), stdev = 1.880
[info]   CI (99.9%): [66.809, 81.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.095 ±(99.9%) 1328.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.095, 671.847), stdev = 345.001
[info]   CI (99.9%): [≈ 0, 1699.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   65.546 ±(99.9%) 231.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 65.546, 113.622), stdev = 60.072
[info]   CI (99.9%): [≈ 0, 296.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6296.891 ops/s
[info] # Warmup Iteration   2: 123519.428 ops/s
[info] # Warmup Iteration   3: 492807.870 ops/s
[info] # Warmup Iteration   4: 510237.430 ops/s
[info] # Warmup Iteration   5: 510622.369 ops/s
[info] Iteration   1: 518054.090 ops/s
[info]                  ·gc.alloc.rate:                   2214.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              6726.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6102.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.190 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 515438.068 ops/s
[info]                  ·gc.alloc.rate:                   2227.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              6799.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6145.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 517301.552 ops/s
[info]                  ·gc.alloc.rate:               2217.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          6747.806 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6129.789 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 511085.044 ops/s
[info]                  ·gc.alloc.rate:               2205.707 MB/sec
[info]                  ·gc.alloc.rate.norm:          6792.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6208.555 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 509436.597 ops/s
[info]                  ·gc.alloc.rate:               2241.523 MB/sec
[info]                  ·gc.alloc.rate.norm:          6924.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8322.587 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   514263.070 ±(99.9%) 14710.709 ops/s [Average]
[info]   (min, avg, max) = (509436.597, 514263.070, 518054.090), stdev = 3820.325
[info]   CI (99.9%): [499552.361, 528973.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2221.342 ±(99.9%) 52.813 MB/sec [Average]
[info]   (min, avg, max) = (2205.707, 2221.342, 2241.523), stdev = 13.715
[info]   CI (99.9%): [2168.530, 2274.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   6798.109 ±(99.9%) 295.273 B/op [Average]
[info]   (min, avg, max) = (6726.702, 6798.109, 6924.012), stdev = 76.682
[info]   CI (99.9%): [6502.835, 7093.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2149.424 ±(99.9%) 1172.908 MB/sec [Average]
[info]   (min, avg, max) = (2008.688, 2149.424, 2694.286), stdev = 304.601
[info]   CI (99.9%): [976.515, 3322.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6581.852 ±(99.9%) 3750.056 B/op [Average]
[info]   (min, avg, max) = (6102.679, 6581.852, 8322.587), stdev = 973.878
[info]   CI (99.9%): [2831.796, 10331.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.300 ±(99.9%) 2.449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.437), stdev = 0.636
[info]   CI (99.9%): [≈ 0, 2.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.915 ±(99.9%) 7.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.915, 4.386), stdev = 1.942
[info]   CI (99.9%): [≈ 0, 8.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:39:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512.553 ops/s
[info] # Warmup Iteration   2: 3615.471 ops/s
[info] # Warmup Iteration   3: 3524.720 ops/s
[info] # Warmup Iteration   4: 4014.974 ops/s
[info] # Warmup Iteration   5: 4060.967 ops/s
[info] Iteration   1: 4075.906 ops/s
[info]                  ·gc.alloc.rate:                   2031.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              784305.784 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     774794.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1521.446 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 4117.893 ops/s
[info]                  ·gc.alloc.rate:                   2060.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              787617.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     765875.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4117.550 ops/s
[info]                  ·gc.alloc.rate:                   2058.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              786639.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763711.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.884 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4104.455 ops/s
[info]                  ·gc.alloc.rate:                   2053.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              787102.550 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766129.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4132.877 ops/s
[info]                  ·gc.alloc.rate:               2093.341 MB/sec
[info]                  ·gc.alloc.rate.norm:          797179.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2000.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 761955.081 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4109.736 ±(99.9%) 82.484 ops/s [Average]
[info]   (min, avg, max) = (4075.906, 4109.736, 4132.877), stdev = 21.421
[info]   CI (99.9%): [4027.252, 4192.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2059.390 ±(99.9%) 85.803 MB/sec [Average]
[info]   (min, avg, max) = (2031.213, 2059.390, 2093.341), stdev = 22.283
[info]   CI (99.9%): [1973.587, 2145.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   788568.893 ±(99.9%) 19164.978 B/op [Average]
[info]   (min, avg, max) = (784305.784, 788568.893, 797179.003), stdev = 4977.084
[info]   CI (99.9%): [769403.915, 807733.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2001.645 ±(99.9%) 13.637 MB/sec [Average]
[info]   (min, avg, max) = (1998.294, 2001.645, 2006.580), stdev = 3.541
[info]   CI (99.9%): [1988.009, 2015.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   766493.135 ±(99.9%) 19035.324 B/op [Average]
[info]   (min, avg, max) = (761955.081, 766493.135, 774794.015), stdev = 4943.413
[info]   CI (99.9%): [747457.811, 785528.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.991 ±(99.9%) 6.381 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.991, 3.940), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   381.855 ±(99.9%) 2465.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 381.855, 1521.446), stdev = 640.179
[info]   CI (99.9%): [≈ 0, 2846.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 899.536 ops/s
[info] # Warmup Iteration   2: 4944.163 ops/s
[info] # Warmup Iteration   3: 6579.817 ops/s
[info] # Warmup Iteration   4: 6829.022 ops/s
[info] # Warmup Iteration   5: 6914.658 ops/s
[info] Iteration   1: 6885.386 ops/s
[info]                  ·gc.alloc.rate:                   2518.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              575731.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2671.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     610692.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6852.844 ops/s
[info]                  ·gc.alloc.rate:                   2467.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              566358.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461486.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.809 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6933.376 ops/s
[info]                  ·gc.alloc.rate:               2507.775 MB/sec
[info]                  ·gc.alloc.rate.norm:          569238.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 609791.926 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 6919.525 ops/s
[info]                  ·gc.alloc.rate:               2544.466 MB/sec
[info]                  ·gc.alloc.rate.norm:          578705.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2693.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612692.002 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 6921.240 ops/s
[info]                  ·gc.alloc.rate:               2517.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          572458.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 460522.220 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   6902.474 ±(99.9%) 127.028 ops/s [Average]
[info]   (min, avg, max) = (6852.844, 6902.474, 6933.376), stdev = 32.989
[info]   CI (99.9%): [6775.447, 7029.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2511.151 ±(99.9%) 108.254 MB/sec [Average]
[info]   (min, avg, max) = (2467.109, 2511.151, 2544.466), stdev = 28.113
[info]   CI (99.9%): [2402.898, 2619.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   572498.561 ±(99.9%) 18993.132 B/op [Average]
[info]   (min, avg, max) = (566358.069, 572498.561, 578705.529), stdev = 4932.456
[info]   CI (99.9%): [553505.429, 591491.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2417.541 ±(99.9%) 1405.753 MB/sec [Average]
[info]   (min, avg, max) = (2010.279, 2417.541, 2693.898), stdev = 365.070
[info]   CI (99.9%): [1011.788, 3823.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   551037.033 ±(99.9%) 316505.797 B/op [Average]
[info]   (min, avg, max) = (460522.220, 551037.033, 612692.002), stdev = 82195.550
[info]   CI (99.9%): [234531.236, 867542.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.192 ±(99.9%) 1.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.749), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.819 ±(99.9%) 285.728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.819, 171.286), stdev = 74.203
[info]   CI (99.9%): [≈ 0, 329.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18311.837 ops/s
[info] # Warmup Iteration   2: 48408.212 ops/s
[info] # Warmup Iteration   3: 47041.779 ops/s
[info] # Warmup Iteration   4: 48491.430 ops/s
[info] # Warmup Iteration   5: 48544.980 ops/s
[info] Iteration   1: 48657.461 ops/s
[info]                  ·gc.alloc.rate:                   799.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              25870.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21697.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 48171.740 ops/s
[info]                  ·gc.alloc.rate:               822.310 MB/sec
[info]                  ·gc.alloc.rate.norm:          26863.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43852.984 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   3: 46206.232 ops/s
[info]                  ·gc.alloc.rate:                   760.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              25918.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22871.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.709 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 48665.483 ops/s
[info]                  ·gc.alloc.rate:                   800.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              25904.518 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21716.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48666.217 ops/s
[info]                  ·gc.alloc.rate:               801.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          25895.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21737.168 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   48073.427 ±(99.9%) 4101.934 ops/s [Average]
[info]   (min, avg, max) = (46206.232, 48073.427, 48666.217), stdev = 1065.259
[info]   CI (99.9%): [43971.492, 52175.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   797.040 ±(99.9%) 85.714 MB/sec [Average]
[info]   (min, avg, max) = (760.935, 797.040, 822.310), stdev = 22.260
[info]   CI (99.9%): [711.326, 882.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26090.744 ±(99.9%) 1665.177 B/op [Average]
[info]   (min, avg, max) = (25870.694, 26090.744, 26863.682), stdev = 432.441
[info]   CI (99.9%): [24425.568, 27755.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   805.720 ±(99.9%) 1155.159 MB/sec [Average]
[info]   (min, avg, max) = (670.922, 805.720, 1342.360), stdev = 299.991
[info]   CI (99.9%): [≈ 0, 1960.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26375.091 ±(99.9%) 37671.746 B/op [Average]
[info]   (min, avg, max) = (21697.648, 26375.091, 43852.984), stdev = 9783.233
[info]   CI (99.9%): [≈ 0, 64046.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.411 ±(99.9%) 1.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.411, 0.709), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1368.213 ops/s
[info] # Warmup Iteration   2: 4052.190 ops/s
[info] # Warmup Iteration   3: 4480.363 ops/s
[info] # Warmup Iteration   4: 4650.002 ops/s
[info] # Warmup Iteration   5: 4621.557 ops/s
[info] Iteration   1: 4622.028 ops/s
[info]                  ·gc.alloc.rate:               998.163 MB/sec
[info]                  ·gc.alloc.rate.norm:          339875.779 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 227497.670 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 4589.704 ops/s
[info]                  ·gc.alloc.rate:               999.668 MB/sec
[info]                  ·gc.alloc.rate.norm:          342780.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229311.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 4615.441 ops/s
[info]                  ·gc.alloc.rate:                   1018.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              347358.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     456154.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.486 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4619.572 ops/s
[info]                  ·gc.alloc.rate:                   999.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              340549.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227936.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.664 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4594.384 ops/s
[info]                  ·gc.alloc.rate:               1019.109 MB/sec
[info]                  ·gc.alloc.rate.norm:          349100.708 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 458580.888 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4608.226 ±(99.9%) 57.951 ops/s [Average]
[info]   (min, avg, max) = (4589.704, 4608.226, 4622.028), stdev = 15.050
[info]   CI (99.9%): [4550.274, 4666.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   1007.053 ±(99.9%) 41.749 MB/sec [Average]
[info]   (min, avg, max) = (998.163, 1007.053, 1019.109), stdev = 10.842
[info]   CI (99.9%): [965.304, 1048.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   343932.878 ±(99.9%) 15838.748 B/op [Average]
[info]   (min, avg, max) = (339875.779, 343932.878, 349100.708), stdev = 4113.273
[info]   CI (99.9%): [328094.130, 359771.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   936.486 ±(99.9%) 1412.242 MB/sec [Average]
[info]   (min, avg, max) = (668.126, 936.486, 1338.708), stdev = 366.755
[info]   CI (99.9%): [≈ 0, 2348.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   319896.247 ±(99.9%) 483249.506 B/op [Average]
[info]   (min, avg, max) = (227497.670, 319896.247, 458580.888), stdev = 125498.362
[info]   CI (99.9%): [≈ 0, 803145.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.047 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.131), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.030 ±(99.9%) 85.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.030, 44.664), stdev = 22.189
[info]   CI (99.9%): [≈ 0, 101.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:38:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705.475 ops/s
[info] # Warmup Iteration   2: 4532.075 ops/s
[info] # Warmup Iteration   3: 4919.416 ops/s
[info] # Warmup Iteration   4: 4934.303 ops/s
[info] # Warmup Iteration   5: 5042.913 ops/s
[info] Iteration   1: 4988.344 ops/s
[info]                  ·gc.alloc.rate:                   651.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              205604.511 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     208664.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.267 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5057.237 ops/s
[info]                  ·gc.alloc.rate:                   671.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              208849.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205818.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.432 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5057.857 ops/s
[info]                  ·gc.alloc.rate:                   663.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              206485.742 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205818.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.954 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5042.492 ops/s
[info]                  ·gc.alloc.rate:                   666.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              207830.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206430.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.496 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5060.187 ops/s
[info]                  ·gc.alloc.rate:               664.615 MB/sec
[info]                  ·gc.alloc.rate.norm:          206713.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 206047.981 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5041.223 ±(99.9%) 116.965 ops/s [Average]
[info]   (min, avg, max) = (4988.344, 5041.223, 5060.187), stdev = 30.375
[info]   CI (99.9%): [4924.259, 5158.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   663.428 ±(99.9%) 27.560 MB/sec [Average]
[info]   (min, avg, max) = (651.721, 663.428, 671.147), stdev = 7.157
[info]   CI (99.9%): [635.868, 690.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   207096.820 ±(99.9%) 4854.422 B/op [Average]
[info]   (min, avg, max) = (205604.511, 207096.820, 208849.456), stdev = 1260.678
[info]   CI (99.9%): [202242.398, 211951.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   661.666 ±(99.9%) 1.753 MB/sec [Average]
[info]   (min, avg, max) = (661.407, 661.666, 662.474), stdev = 0.455
[info]   CI (99.9%): [659.913, 663.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   206556.036 ±(99.9%) 4639.740 B/op [Average]
[info]   (min, avg, max) = (205818.535, 206556.036, 208664.523), stdev = 1204.926
[info]   CI (99.9%): [201916.295, 211195.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.030 ±(99.9%) 39.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.030, 26.267), stdev = 10.352
[info]   CI (99.9%): [≈ 0, 52.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3747.788 ops/s
[info] # Warmup Iteration   2: 6308.584 ops/s
[info] # Warmup Iteration   3: 6553.213 ops/s
[info] # Warmup Iteration   4: 6581.652 ops/s
[info] # Warmup Iteration   5: 6449.013 ops/s
[info] Iteration   1: 6550.294 ops/s
[info]                  ·gc.alloc.rate:               333.905 MB/sec
[info]                  ·gc.alloc.rate.norm:          80230.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122910.007 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6578.514 ops/s
[info]                  ·gc.alloc.rate:      321.454 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6548.297 ops/s
[info]                  ·gc.alloc.rate:               333.932 MB/sec
[info]                  ·gc.alloc.rate.norm:          80258.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122947.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 6579.219 ops/s
[info]                  ·gc.alloc.rate:      321.503 MB/sec
[info]                  ·gc.alloc.rate.norm: 76904.071 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6526.324 ops/s
[info]                  ·gc.alloc.rate:                   342.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              82645.483 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161591.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6556.530 ±(99.9%) 86.471 ops/s [Average]
[info]   (min, avg, max) = (6526.324, 6556.530, 6579.219), stdev = 22.456
[info]   CI (99.9%): [6470.059, 6643.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   330.718 ±(99.9%) 35.348 MB/sec [Average]
[info]   (min, avg, max) = (321.454, 330.718, 342.794), stdev = 9.180
[info]   CI (99.9%): [295.370, 366.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79388.352 ±(99.9%) 9513.727 B/op [Average]
[info]   (min, avg, max) = (76904.066, 79388.352, 82645.483), stdev = 2470.685
[info]   CI (99.9%): [69874.625, 88902.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.665 ±(99.9%) 1216.317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.665, 670.243), stdev = 315.874
[info]   CI (99.9%): [≈ 0, 1554.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81489.752 ±(99.9%) 292824.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81489.752, 161591.216), stdev = 76045.692
[info]   CI (99.9%): [≈ 0, 374314.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.008 ±(99.9%) 17.288 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.008, 10.039), stdev = 4.490
[info]   CI (99.9%): [≈ 0, 19.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3603.256 ops/s
[info] # Warmup Iteration   2: 6306.273 ops/s
[info] # Warmup Iteration   3: 6665.816 ops/s
[info] # Warmup Iteration   4: 6399.250 ops/s
[info] # Warmup Iteration   5: 6620.030 ops/s
[info] Iteration   1: 6690.761 ops/s
[info]                  ·gc.alloc.rate:      277.994 MB/sec
[info]                  ·gc.alloc.rate.norm: 65384.087 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6574.878 ops/s
[info]                  ·gc.alloc.rate:               289.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          69210.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122461.431 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6670.542 ops/s
[info]                  ·gc.alloc.rate:      277.222 MB/sec
[info]                  ·gc.alloc.rate.norm: 65403.857 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6642.879 ops/s
[info]                  ·gc.alloc.rate:               294.518 MB/sec
[info]                  ·gc.alloc.rate.norm:          69779.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121208.063 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6658.406 ops/s
[info]                  ·gc.alloc.rate:      277.632 MB/sec
[info]                  ·gc.alloc.rate.norm: 65623.813 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6647.493 ±(99.9%) 170.221 ops/s [Average]
[info]   (min, avg, max) = (6574.878, 6647.493, 6690.761), stdev = 44.206
[info]   CI (99.9%): [6477.272, 6817.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   283.324 ±(99.9%) 30.957 MB/sec [Average]
[info]   (min, avg, max) = (277.222, 283.324, 294.518), stdev = 8.039
[info]   CI (99.9%): [252.367, 314.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   67080.274 ±(99.9%) 8530.363 B/op [Average]
[info]   (min, avg, max) = (65384.087, 67080.274, 69779.175), stdev = 2215.308
[info]   CI (99.9%): [58549.910, 75610.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   204.679 ±(99.9%) 1079.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.679, 511.808), stdev = 280.268
[info]   CI (99.9%): [≈ 0, 1283.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   48733.899 ±(99.9%) 256965.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48733.899, 122461.431), stdev = 66733.110
[info]   CI (99.9%): [≈ 0, 305699.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1746.895 ops/s
[info] # Warmup Iteration   2: 6344.270 ops/s
[info] # Warmup Iteration   3: 7407.147 ops/s
[info] # Warmup Iteration   4: 7717.099 ops/s
[info] # Warmup Iteration   5: 7802.742 ops/s
[info] Iteration   1: 7884.762 ops/s
[info]                  ·gc.alloc.rate:                   1656.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              330640.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     267662.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7858.583 ops/s
[info]                  ·gc.alloc.rate:                   1662.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              333048.969 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403088.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600.330 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 7681.561 ops/s
[info]                  ·gc.alloc.rate:                   1624.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              332834.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     274666.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151.807 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7858.976 ops/s
[info]                  ·gc.alloc.rate:                   1697.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              339956.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401903.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.369 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7704.889 ops/s
[info]                  ·gc.alloc.rate:                   1640.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              335181.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     272961.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7797.754 ±(99.9%) 371.059 ops/s [Average]
[info]   (min, avg, max) = (7681.561, 7797.754, 7884.762), stdev = 96.363
[info]   CI (99.9%): [7426.695, 8168.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1656.538 ±(99.9%) 105.472 MB/sec [Average]
[info]   (min, avg, max) = (1624.576, 1656.538, 1697.653), stdev = 27.391
[info]   CI (99.9%): [1551.066, 1762.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   334332.396 ±(99.9%) 13596.693 B/op [Average]
[info]   (min, avg, max) = (330640.472, 334332.396, 339956.434), stdev = 3531.018
[info]   CI (99.9%): [320735.704, 347929.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1607.539 ±(99.9%) 1414.206 MB/sec [Average]
[info]   (min, avg, max) = (1336.222, 1607.539, 2012.693), stdev = 367.265
[info]   CI (99.9%): [193.333, 3021.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   324056.206 ±(99.9%) 275909.344 B/op [Average]
[info]   (min, avg, max) = (267662.121, 324056.206, 403088.090), stdev = 71652.780
[info]   CI (99.9%): [48146.862, 599965.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.861 ±(99.9%) 4.723 MB/sec [Average]
[info]   (min, avg, max) = (0.033, 0.861, 2.998), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   173.105 ±(99.9%) 945.470 B/op [Average]
[info]   (min, avg, max) = (6.777, 173.105, 600.330), stdev = 245.536
[info]   CI (99.9%): [≈ 0, 1118.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.724 ops/s
[info] # Warmup Iteration   2: 17318.238 ops/s
[info] # Warmup Iteration   3: 18547.456 ops/s
[info] # Warmup Iteration   4: 18907.761 ops/s
[info] # Warmup Iteration   5: 19103.774 ops/s
[info] Iteration   1: 19243.005 ops/s
[info]                  ·gc.alloc.rate:               498.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          40760.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54401.077 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 19155.255 ops/s
[info]                  ·gc.alloc.rate:      477.458 MB/sec
[info]                  ·gc.alloc.rate.norm: 39227.945 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19260.741 ops/s
[info]                  ·gc.alloc.rate:               490.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          40080.417 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54350.246 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 19215.370 ops/s
[info]                  ·gc.alloc.rate:               496.586 MB/sec
[info]                  ·gc.alloc.rate.norm:          40663.573 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54507.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 17645.623 ops/s
[info]                  ·gc.alloc.rate:      435.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 38832.026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   18903.999 ±(99.9%) 2713.121 ops/s [Average]
[info]   (min, avg, max) = (17645.623, 18903.999, 19260.741), stdev = 704.589
[info]   CI (99.9%): [16190.879, 21617.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   479.712 ±(99.9%) 100.092 MB/sec [Average]
[info]   (min, avg, max) = (435.592, 479.712, 498.409), stdev = 25.994
[info]   CI (99.9%): [379.620, 579.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   39912.929 ±(99.9%) 3305.592 B/op [Average]
[info]   (min, avg, max) = (38832.026, 39912.929, 40760.682), stdev = 858.452
[info]   CI (99.9%): [36607.336, 43218.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   399.200 ±(99.9%) 1403.246 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.200, 665.650), stdev = 364.419
[info]   CI (99.9%): [≈ 0, 1802.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   32651.788 ±(99.9%) 114775.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32651.788, 54507.619), stdev = 29806.923
[info]   CI (99.9%): [≈ 0, 147427.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4286.581 ops/s
[info] # Warmup Iteration   2: 13970.609 ops/s
[info] # Warmup Iteration   3: 15625.355 ops/s
[info] # Warmup Iteration   4: 16049.666 ops/s
[info] # Warmup Iteration   5: 16031.687 ops/s
[info] Iteration   1: 16128.222 ops/s
[info]                  ·gc.alloc.rate:      428.737 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16086.022 ops/s
[info]                  ·gc.alloc.rate:               441.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          43158.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64489.151 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 15912.674 ops/s
[info]                  ·gc.alloc.rate:               464.238 MB/sec
[info]                  ·gc.alloc.rate.norm:          45913.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65190.120 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 16117.168 ops/s
[info]                  ·gc.alloc.rate:      428.386 MB/sec
[info]                  ·gc.alloc.rate.norm: 41832.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15590.498 ops/s
[info]                  ·gc.alloc.rate:                   433.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              43722.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66674.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.101 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   15966.917 ±(99.9%) 876.845 ops/s [Average]
[info]   (min, avg, max) = (15590.498, 15966.917, 16128.222), stdev = 227.714
[info]   CI (99.9%): [15090.071, 16843.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   439.134 ±(99.9%) 57.580 MB/sec [Average]
[info]   (min, avg, max) = (428.386, 439.134, 464.238), stdev = 14.953
[info]   CI (99.9%): [381.554, 496.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43291.767 ±(99.9%) 6483.592 B/op [Average]
[info]   (min, avg, max) = (41832.027, 43291.767, 45913.864), stdev = 1683.768
[info]   CI (99.9%): [36808.175, 49775.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   395.775 ±(99.9%) 1391.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 395.775, 660.469), stdev = 361.292
[info]   CI (99.9%): [≈ 0, 1786.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39270.852 ±(99.9%) 138076.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39270.852, 66674.989), stdev = 35857.905
[info]   CI (99.9%): [≈ 0, 177346.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 3.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.420, 2.101), stdev = 0.940
[info]   CI (99.9%): [≈ 0, 4.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10732.215 ops/s
[info] # Warmup Iteration   2: 22545.153 ops/s
[info] # Warmup Iteration   3: 22152.431 ops/s
[info] # Warmup Iteration   4: 23157.316 ops/s
[info] # Warmup Iteration   5: 23156.638 ops/s
[info] Iteration   1: 23338.980 ops/s
[info]                  ·gc.alloc.rate:      431.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 29062.359 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23249.830 ops/s
[info]                  ·gc.alloc.rate:               445.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          30176.991 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45407.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 23267.391 ops/s
[info]                  ·gc.alloc.rate:                   441.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              29842.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45374.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 218.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23230.818 ops/s
[info]                  ·gc.alloc.rate:      427.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 28928.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23333.407 ops/s
[info]                  ·gc.alloc.rate:               447.360 MB/sec
[info]                  ·gc.alloc.rate.norm:          30170.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45199.565 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23284.085 ±(99.9%) 189.970 ops/s [Average]
[info]   (min, avg, max) = (23230.818, 23284.085, 23338.980), stdev = 49.334
[info]   CI (99.9%): [23094.116, 23474.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   438.515 ±(99.9%) 34.650 MB/sec [Average]
[info]   (min, avg, max) = (427.077, 438.515, 447.360), stdev = 8.998
[info]   CI (99.9%): [403.865, 473.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29636.090 ±(99.9%) 2319.685 B/op [Average]
[info]   (min, avg, max) = (28928.020, 29636.090, 30176.991), stdev = 602.415
[info]   CI (99.9%): [27316.405, 31955.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   402.369 ±(99.9%) 1414.384 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 402.369, 670.828), stdev = 367.311
[info]   CI (99.9%): [≈ 0, 1816.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27196.451 ±(99.9%) 95599.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27196.451, 45407.931), stdev = 24826.976
[info]   CI (99.9%): [≈ 0, 122796.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.647 ±(99.9%) 5.568 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.647, 3.233), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   43.740 ±(99.9%) 376.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.740, 218.700), stdev = 97.806
[info]   CI (99.9%): [≈ 0, 420.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141.925 ops/s
[info] # Warmup Iteration   2: 2706.017 ops/s
[info] # Warmup Iteration   3: 4095.870 ops/s
[info] # Warmup Iteration   4: 4138.330 ops/s
[info] # Warmup Iteration   5: 4203.859 ops/s
[info] Iteration   1: 4216.097 ops/s
[info]                  ·gc.alloc.rate:                   2541.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              948210.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750066.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 648.829 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4252.299 ops/s
[info]                  ·gc.alloc.rate:                   2558.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              947088.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992362.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4259.495 ops/s
[info]                  ·gc.alloc.rate:                   2591.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              957409.218 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992222.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4253.417 ops/s
[info]                  ·gc.alloc.rate:                   2601.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              962638.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995592.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4263.193 ops/s
[info]                  ·gc.alloc.rate:                   2580.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              952768.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     746839.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.685 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   4248.900 ±(99.9%) 72.668 ops/s [Average]
[info]   (min, avg, max) = (4216.097, 4248.900, 4263.193), stdev = 18.872
[info]   CI (99.9%): [4176.232, 4321.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2574.811 ±(99.9%) 94.713 MB/sec [Average]
[info]   (min, avg, max) = (2541.181, 2574.811, 2601.751), stdev = 24.597
[info]   CI (99.9%): [2480.098, 2669.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   953623.005 ±(99.9%) 24980.041 B/op [Average]
[info]   (min, avg, max) = (947088.053, 953623.005, 962638.270), stdev = 6487.237
[info]   CI (99.9%): [928642.964, 978603.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2418.161 ±(99.9%) 1411.577 MB/sec [Average]
[info]   (min, avg, max) = (2010.159, 2418.161, 2690.818), stdev = 366.582
[info]   CI (99.9%): [1006.584, 3829.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   895416.735 ±(99.9%) 516642.688 B/op [Average]
[info]   (min, avg, max) = (746839.895, 895416.735, 995592.724), stdev = 134170.465
[info]   CI (99.9%): [378774.047, 1412059.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.425 ±(99.9%) 2.873 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.425, 1.739), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 3.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   158.266 ±(99.9%) 1072.282 B/op [Average]
[info]   (min, avg, max) = (7.685, 158.266, 648.829), stdev = 278.468
[info]   CI (99.9%): [≈ 0, 1230.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2706.795 ops/s
[info] # Warmup Iteration   2: 8809.381 ops/s
[info] # Warmup Iteration   3: 10150.562 ops/s
[info] # Warmup Iteration   4: 10081.540 ops/s
[info] # Warmup Iteration   5: 10041.098 ops/s
[info] Iteration   1: 10219.550 ops/s
[info]                  ·gc.alloc.rate:                   2167.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              333833.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309536.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 10150.512 ops/s
[info]                  ·gc.alloc.rate:                   2206.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              342116.995 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414555.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51.639 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10335.801 ops/s
[info]                  ·gc.alloc.rate:                   2205.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              335788.361 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305200.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.170 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10376.637 ops/s
[info]                  ·gc.alloc.rate:                   2227.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              337837.466 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     304197.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10229.273 ops/s
[info]                  ·gc.alloc.rate:                   2197.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              338054.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309263.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.203 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10262.354 ±(99.9%) 354.438 ops/s [Average]
[info]   (min, avg, max) = (10150.512, 10262.354, 10376.637), stdev = 92.046
[info]   CI (99.9%): [9907.916, 10616.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2200.910 ±(99.9%) 83.657 MB/sec [Average]
[info]   (min, avg, max) = (2167.782, 2200.910, 2227.861), stdev = 21.725
[info]   CI (99.9%): [2117.253, 2284.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   337526.272 ±(99.9%) 11885.230 B/op [Average]
[info]   (min, avg, max) = (333833.588, 337526.272, 342116.995), stdev = 3086.557
[info]   CI (99.9%): [325641.042, 349411.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2140.824 ±(99.9%) 1147.067 MB/sec [Average]
[info]   (min, avg, max) = (2004.377, 2140.824, 2673.686), stdev = 297.890
[info]   CI (99.9%): [993.757, 3287.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   328550.704 ±(99.9%) 185358.769 B/op [Average]
[info]   (min, avg, max) = (304197.161, 328550.704, 414555.704), stdev = 48137.084
[info]   CI (99.9%): [143191.935, 513909.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.800 ±(99.9%) 6.062 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.800, 3.606), stdev = 1.574
[info]   CI (99.9%): [≈ 0, 6.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   123.301 ±(99.9%) 933.494 B/op [Average]
[info]   (min, avg, max) = (3.157, 123.301, 555.337), stdev = 242.425
[info]   CI (99.9%): [≈ 0, 1056.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.857 ops/s
[info] # Warmup Iteration   2: 41683.365 ops/s
[info] # Warmup Iteration   3: 56908.179 ops/s
[info] # Warmup Iteration   4: 57639.897 ops/s
[info] # Warmup Iteration   5: 57904.675 ops/s
[info] Iteration   1: 57981.691 ops/s
[info]                  ·gc.alloc.rate:                   562.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              15265.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18064.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 57970.834 ops/s
[info]                  ·gc.alloc.rate:               564.578 MB/sec
[info]                  ·gc.alloc.rate.norm:          15327.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18066.424 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 57820.023 ops/s
[info]                  ·gc.alloc.rate:                   558.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              15190.545 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18123.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 58081.391 ops/s
[info]                  ·gc.alloc.rate:      542.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57972.733 ops/s
[info]                  ·gc.alloc.rate:                   558.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              15173.526 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18075.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   57965.334 ±(99.9%) 359.870 ops/s [Average]
[info]   (min, avg, max) = (57820.023, 57965.334, 58081.391), stdev = 93.457
[info]   CI (99.9%): [57605.464, 58325.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   557.376 ±(99.9%) 32.673 MB/sec [Average]
[info]   (min, avg, max) = (542.941, 557.376, 564.578), stdev = 8.485
[info]   CI (99.9%): [524.704, 590.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15133.816 ±(99.9%) 938.460 B/op [Average]
[info]   (min, avg, max) = (14712.007, 15133.816, 15327.630), stdev = 243.715
[info]   CI (99.9%): [14195.356, 16072.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.514 ±(99.9%) 1146.276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.514, 665.827), stdev = 297.684
[info]   CI (99.9%): [≈ 0, 1678.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14465.885 ±(99.9%) 31139.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14465.885, 18123.290), stdev = 8086.711
[info]   CI (99.9%): [≈ 0, 45604.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.018 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.483 ±(99.9%) 1.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 1.008), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8344.025 ops/s
[info] # Warmup Iteration   2: 42248.133 ops/s
[info] # Warmup Iteration   3: 45034.517 ops/s
[info] # Warmup Iteration   4: 44772.800 ops/s
[info] # Warmup Iteration   5: 45629.657 ops/s
[info] Iteration   1: 45618.096 ops/s
[info]                  ·gc.alloc.rate:                   673.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              23235.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22786.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.718 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 45769.954 ops/s
[info]                  ·gc.alloc.rate:               673.975 MB/sec
[info]                  ·gc.alloc.rate.norm:          23166.675 B/op
[info]                  ·gc.churn.PS_Eden_Space:      660.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22711.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 45881.491 ops/s
[info]                  ·gc.alloc.rate:               676.620 MB/sec
[info]                  ·gc.alloc.rate.norm:          23209.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22724.593 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 45889.553 ops/s
[info]                  ·gc.alloc.rate:                   684.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              23467.564 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22720.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 45867.830 ops/s
[info]                  ·gc.alloc.rate:               680.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          23350.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22800.099 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45805.385 ±(99.9%) 443.695 ops/s [Average]
[info]   (min, avg, max) = (45618.096, 45805.385, 45889.553), stdev = 115.226
[info]   CI (99.9%): [45361.690, 46249.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   677.769 ±(99.9%) 17.567 MB/sec [Average]
[info]   (min, avg, max) = (673.508, 677.769, 684.245), stdev = 4.562
[info]   CI (99.9%): [660.202, 695.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23285.809 ±(99.9%) 471.012 B/op [Average]
[info]   (min, avg, max) = (23166.675, 23285.809, 23467.564), stdev = 122.320
[info]   CI (99.9%): [22814.797, 23756.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   662.131 ±(99.9%) 6.164 MB/sec [Average]
[info]   (min, avg, max) = (660.507, 662.131, 664.458), stdev = 1.601
[info]   CI (99.9%): [655.967, 668.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22748.687 ±(99.9%) 159.185 B/op [Average]
[info]   (min, avg, max) = (22711.473, 22748.687, 22800.099), stdev = 41.340
[info]   CI (99.9%): [22589.501, 22907.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 1.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.718), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32981.049 ops/s
[info] # Warmup Iteration   2: 85300.018 ops/s
[info] # Warmup Iteration   3: 88770.976 ops/s
[info] # Warmup Iteration   4: 90463.391 ops/s
[info] # Warmup Iteration   5: 89806.652 ops/s
[info] Iteration   1: 89943.790 ops/s
[info]                  ·gc.alloc.rate:               698.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          12228.965 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11726.482 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 90519.087 ops/s
[info]                  ·gc.alloc.rate:               705.653 MB/sec
[info]                  ·gc.alloc.rate.norm:          12265.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11663.456 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 90374.511 ops/s
[info]                  ·gc.alloc.rate:                   701.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              12208.290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11681.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 90362.015 ops/s
[info]                  ·gc.alloc.rate:               693.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          12085.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11689.390 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 86434.639 ops/s
[info]                  ·gc.alloc.rate:               666.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          12124.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12220.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   89526.809 ±(99.9%) 6707.246 ops/s [Average]
[info]   (min, avg, max) = (86434.639, 89526.809, 90519.087), stdev = 1741.850
[info]   CI (99.9%): [82819.563, 96234.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   693.113 ±(99.9%) 60.402 MB/sec [Average]
[info]   (min, avg, max) = (666.085, 693.113, 705.653), stdev = 15.686
[info]   CI (99.9%): [632.711, 753.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   12182.594 ±(99.9%) 288.574 B/op [Average]
[info]   (min, avg, max) = (12085.989, 12182.594, 12265.648), stdev = 74.942
[info]   CI (99.9%): [11894.021, 12471.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   670.899 ±(99.9%) 1.832 MB/sec [Average]
[info]   (min, avg, max) = (670.142, 670.899, 671.392), stdev = 0.476
[info]   CI (99.9%): [669.067, 672.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11796.330 ±(99.9%) 917.688 B/op [Average]
[info]   (min, avg, max) = (11663.456, 11796.330, 12220.671), stdev = 238.321
[info]   CI (99.9%): [10878.642, 12714.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 1.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 1.088), stdev = 0.486
[info]   CI (99.9%): [≈ 0, 2.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42356.198 ops/s
[info] # Warmup Iteration   2: 102494.353 ops/s
[info] # Warmup Iteration   3: 102560.779 ops/s
[info] # Warmup Iteration   4: 105247.073 ops/s
[info] # Warmup Iteration   5: 103972.002 ops/s
[info] Iteration   1: 104949.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 103827.959 ops/s
[info]                  ·gc.alloc.rate:      1.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 29.917 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104552.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105092.865 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 105132.624 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   104711.020 ±(99.9%) 2096.318 ops/s [Average]
[info]   (min, avg, max) = (103827.959, 104711.020, 105132.624), stdev = 544.407
[info]   CI (99.9%): [102614.703, 106807.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.395 ±(99.9%) 3.398 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.395, 1.974), stdev = 0.883
[info]   CI (99.9%): [≈ 0, 3.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5.987 ±(99.9%) 51.511 B/op [Average]
[info]   (min, avg, max) = (0.004, 5.987, 29.917), stdev = 13.377
[info]   CI (99.9%): [≈ 0, 57.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 670.299 ops/s
[info] # Warmup Iteration   2: 6599.649 ops/s
[info] # Warmup Iteration   3: 7787.770 ops/s
[info] # Warmup Iteration   4: 7813.723 ops/s
[info] # Warmup Iteration   5: 7558.544 ops/s
[info] Iteration   1: 7767.287 ops/s
[info]                  ·gc.alloc.rate:                   2335.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              473263.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406864.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 160.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7797.645 ops/s
[info]                  ·gc.alloc.rate:                   2341.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              472545.547 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406308.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7804.962 ops/s
[info]                  ·gc.alloc.rate:               2345.819 MB/sec
[info]                  ·gc.alloc.rate.norm:          473000.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2689.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 542355.316 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 7553.539 ops/s
[info]                  ·gc.alloc.rate:               2286.124 MB/sec
[info]                  ·gc.alloc.rate.norm:          476315.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421165.304 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 7807.751 ops/s
[info]                  ·gc.alloc.rate:               2374.123 MB/sec
[info]                  ·gc.alloc.rate.norm:          478074.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2699.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 543517.477 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   7746.237 ±(99.9%) 419.398 ops/s [Average]
[info]   (min, avg, max) = (7553.539, 7746.237, 7807.751), stdev = 108.916
[info]   CI (99.9%): [7326.839, 8165.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2336.614 ±(99.9%) 122.734 MB/sec [Average]
[info]   (min, avg, max) = (2286.124, 2336.614, 2374.123), stdev = 31.874
[info]   CI (99.9%): [2213.880, 2459.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   474639.966 ±(99.9%) 9347.951 B/op [Average]
[info]   (min, avg, max) = (472545.547, 474639.966, 478074.487), stdev = 2427.633
[info]   CI (99.9%): [465292.015, 483987.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2286.288 ±(99.9%) 1434.915 MB/sec [Average]
[info]   (min, avg, max) = (2008.002, 2286.288, 2699.113), stdev = 372.643
[info]   CI (99.9%): [851.372, 3721.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   464042.187 ±(99.9%) 278275.173 B/op [Average]
[info]   (min, avg, max) = (406308.074, 464042.187, 543517.477), stdev = 72267.179
[info]   CI (99.9%): [185767.014, 742317.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.791), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   35.416 ±(99.9%) 270.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.416, 160.276), stdev = 70.177
[info]   CI (99.9%): [≈ 0, 305.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 868469.013 ops/s
[info] # Warmup Iteration   2: 8269596.660 ops/s
[info] # Warmup Iteration   3: 9052732.585 ops/s
[info] # Warmup Iteration   4: 9126804.030 ops/s
[info] # Warmup Iteration   5: 8952487.721 ops/s
[info] Iteration   1: 9201742.686 ops/s
[info]                  ·gc.alloc.rate:                   4844.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              828.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4714.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     806.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9170429.861 ops/s
[info]                  ·gc.alloc.rate:                   4895.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.237 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4732.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     812.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 9216492.041 ops/s
[info]                  ·gc.alloc.rate:                   4920.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4746.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9193308.404 ops/s
[info]                  ·gc.alloc.rate:                   4909.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.435 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4755.591 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     814.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9162113.645 ops/s
[info]                  ·gc.alloc.rate:                   4893.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              840.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4761.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     817.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   9188817.328 ±(99.9%) 86195.743 ops/s [Average]
[info]   (min, avg, max) = (9162113.645, 9188817.328, 9216492.041), stdev = 22384.761
[info]   CI (99.9%): [9102621.585, 9275013.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4892.764 ±(99.9%) 112.366 MB/sec [Average]
[info]   (min, avg, max) = (4844.388, 4892.764, 4920.823), stdev = 29.181
[info]   CI (99.9%): [4780.398, 5005.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   838.027 ±(99.9%) 20.318 B/op [Average]
[info]   (min, avg, max) = (828.592, 838.027, 840.599), stdev = 5.276
[info]   CI (99.9%): [817.709, 858.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4742.306 ±(99.9%) 72.912 MB/sec [Average]
[info]   (min, avg, max) = (4714.874, 4742.306, 4761.847), stdev = 18.935
[info]   CI (99.9%): [4669.394, 4815.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   812.259 ±(99.9%) 16.446 B/op [Average]
[info]   (min, avg, max) = (806.439, 812.259, 817.978), stdev = 4.271
[info]   CI (99.9%): [795.813, 828.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.011, 0.021), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:34:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.700 ops/s
[info] # Warmup Iteration   2: 36200119.991 ops/s
[info] # Warmup Iteration   3: 36847945.893 ops/s
[info] # Warmup Iteration   4: 38180940.206 ops/s
[info] # Warmup Iteration   5: 38206103.788 ops/s
[info] Iteration   1: 38216128.590 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38195156.967 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 38175758.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38064732.076 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38238185.650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38177992.400 ±(99.9%) 259776.587 ops/s [Average]
[info]   (min, avg, max) = (38064732.076, 38177992.400, 38238185.650), stdev = 67463.155
[info]   CI (99.9%): [37918215.812, 38437768.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451294.280 ops/s
[info] # Warmup Iteration   2: 9724656.141 ops/s
[info] # Warmup Iteration   3: 10648794.729 ops/s
[info] # Warmup Iteration   4: 10872165.312 ops/s
[info] # Warmup Iteration   5: 10883470.423 ops/s
[info] Iteration   1: 10992749.577 ops/s
[info]                  ·gc.alloc.rate:               3790.013 MB/sec
[info]                  ·gc.alloc.rate.norm:          542.630 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4011.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 574.341 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 10853928.198 ops/s
[info]                  ·gc.alloc.rate:                   3720.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3356.804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10982501.512 ops/s
[info]                  ·gc.alloc.rate:               3761.680 MB/sec
[info]                  ·gc.alloc.rate.norm:          539.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3368.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 482.752 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 10957983.629 ops/s
[info]                  ·gc.alloc.rate:               3781.257 MB/sec
[info]                  ·gc.alloc.rate.norm:          543.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4056.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 582.611 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   5: 11010710.135 ops/s
[info]                  ·gc.alloc.rate:                   3773.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              539.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10959574.610 ±(99.9%) 238963.085 ops/s [Average]
[info]   (min, avg, max) = (10853928.198, 10959574.610, 11010710.135), stdev = 62057.954
[info]   CI (99.9%): [10720611.526, 11198537.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3765.268 ±(99.9%) 105.286 MB/sec [Average]
[info]   (min, avg, max) = (3720.052, 3765.268, 3790.013), stdev = 27.343
[info]   CI (99.9%): [3659.982, 3870.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   540.664 ±(99.9%) 7.782 B/op [Average]
[info]   (min, avg, max) = (539.061, 540.664, 543.104), stdev = 2.021
[info]   CI (99.9%): [532.882, 548.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3636.422 ±(99.9%) 1399.258 MB/sec [Average]
[info]   (min, avg, max) = (3356.804, 3636.422, 4056.323), stdev = 363.383
[info]   CI (99.9%): [2237.164, 5035.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   522.121 ±(99.9%) 198.481 B/op [Average]
[info]   (min, avg, max) = (482.752, 522.121, 582.611), stdev = 51.545
[info]   CI (99.9%): [323.640, 720.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17929566.120 ops/s
[info] # Warmup Iteration   2: 44514814.565 ops/s
[info] # Warmup Iteration   3: 48919545.538 ops/s
[info] # Warmup Iteration   4: 48921420.514 ops/s
[info] # Warmup Iteration   5: 48939137.779 ops/s
[info] Iteration   1: 48931638.338 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48593203.218 ops/s
[info]                  ·gc.alloc.rate:      14.691 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.476 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48933273.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48938261.185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 48471963.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48773667.932 ±(99.9%) 863421.134 ops/s [Average]
[info]   (min, avg, max) = (48471963.807, 48773667.932, 48938261.185), stdev = 224227.727
[info]   CI (99.9%): [47910246.798, 49637089.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2.938 ±(99.9%) 25.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.938, 14.691), stdev = 6.570
[info]   CI (99.9%): [≈ 0, 28.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   0.095 ±(99.9%) 0.819 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.095, 0.476), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8389629.762 ops/s
[info] # Warmup Iteration   2: 29319156.479 ops/s
[info] # Warmup Iteration   3: 31545285.505 ops/s
[info] # Warmup Iteration   4: 30137851.377 ops/s
[info] # Warmup Iteration   5: 30085852.997 ops/s
[info] Iteration   1: 31694307.027 ops/s
[info]                  ·gc.alloc.rate:               828.846 MB/sec
[info]                  ·gc.alloc.rate.norm:          41.158 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.329 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 30992329.682 ops/s
[info]                  ·gc.alloc.rate:               856.678 MB/sec
[info]                  ·gc.alloc.rate.norm:          43.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68.234 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   3: 31663596.161 ops/s
[info]                  ·gc.alloc.rate:               821.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.426 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 31728208.531 ops/s
[info]                  ·gc.alloc.rate:               821.925 MB/sec
[info]                  ·gc.alloc.rate.norm:          40.762 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33.356 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 31771134.361 ops/s
[info]                  ·gc.alloc.rate:                   822.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              40.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   31569915.153 ±(99.9%) 1252792.088 ops/s [Average]
[info]   (min, avg, max) = (30992329.682, 31569915.153, 31771134.361), stdev = 325346.127
[info]   CI (99.9%): [30317123.065, 32822707.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   830.165 ±(99.9%) 58.299 MB/sec [Average]
[info]   (min, avg, max) = (821.150, 830.165, 856.678), stdev = 15.140
[info]   CI (99.9%): [771.866, 888.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   41.393 ±(99.9%) 4.588 B/op [Average]
[info]   (min, avg, max) = (40.729, 41.393, 43.503), stdev = 1.192
[info]   CI (99.9%): [36.805, 45.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   806.620 ±(99.9%) 1156.074 MB/sec [Average]
[info]   (min, avg, max) = (671.189, 806.620, 1343.684), stdev = 300.229
[info]   CI (99.9%): [≈ 0, 1962.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   40.338 ±(99.9%) 60.048 B/op [Average]
[info]   (min, avg, max) = (33.329, 40.338, 68.234), stdev = 15.594
[info]   CI (99.9%): [≈ 0, 100.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:33:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 928632.084 ops/s
[info] # Warmup Iteration   2: 8540302.951 ops/s
[info] # Warmup Iteration   3: 8925380.803 ops/s
[info] # Warmup Iteration   4: 8999427.739 ops/s
[info] # Warmup Iteration   5: 9097111.548 ops/s
[info] Iteration   1: 9079642.218 ops/s
[info]                  ·gc.alloc.rate:               3849.380 MB/sec
[info]                  ·gc.alloc.rate.norm:          667.258 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4016.241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 696.182 B/op
[info]                  ·gc.count:                    6.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   2: 9065095.841 ops/s
[info]                  ·gc.alloc.rate:                   3834.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              665.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4028.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 9094582.153 ops/s
[info]                  ·gc.alloc.rate:                   3831.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374.323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     583.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 8941212.812 ops/s
[info]                  ·gc.alloc.rate:                   3770.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              663.431 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     595.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9063503.036 ops/s
[info]                  ·gc.alloc.rate:                   3847.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              668.195 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4069.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9048807.212 ±(99.9%) 236618.735 ops/s [Average]
[info]   (min, avg, max) = (8941212.812, 9048807.212, 9094582.153), stdev = 61449.134
[info]   CI (99.9%): [8812188.477, 9285425.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3826.715 ±(99.9%) 125.482 MB/sec [Average]
[info]   (min, avg, max) = (3770.146, 3826.715, 3849.380), stdev = 32.587
[info]   CI (99.9%): [3701.233, 3952.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   665.467 ±(99.9%) 8.729 B/op [Average]
[info]   (min, avg, max) = (663.068, 665.467, 668.195), stdev = 2.267
[info]   CI (99.9%): [656.738, 674.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3774.539 ±(99.9%) 1392.010 MB/sec [Average]
[info]   (min, avg, max) = (3374.323, 3774.539, 4069.578), stdev = 361.501
[info]   CI (99.9%): [2382.529, 5166.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   656.267 ±(99.9%) 234.951 B/op [Average]
[info]   (min, avg, max) = (583.945, 656.267, 706.692), stdev = 61.016
[info]   CI (99.9%): [421.315, 891.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3097447.888 ops/s
[info] # Warmup Iteration   2: 13465771.930 ops/s
[info] # Warmup Iteration   3: 13902168.483 ops/s
[info] # Warmup Iteration   4: 14230088.236 ops/s
[info] # Warmup Iteration   5: 14188515.751 ops/s
[info] Iteration   1: 14018570.305 ops/s
[info]                  ·gc.alloc.rate:                   1675.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14042640.782 ops/s
[info]                  ·gc.alloc.rate:                   1689.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              189.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 14376507.038 ops/s
[info]                  ·gc.alloc.rate:                   1722.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              188.534 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14346186.617 ops/s
[info]                  ·gc.alloc.rate:               1730.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          189.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 147.037 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 14359495.179 ops/s
[info]                  ·gc.alloc.rate:                   1758.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.691 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   14228679.984 ±(99.9%) 698257.565 ops/s [Average]
[info]   (min, avg, max) = (14018570.305, 14228679.984, 14376507.038), stdev = 181335.272
[info]   CI (99.9%): [13530422.419, 14926937.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1715.125 ±(99.9%) 127.824 MB/sec [Average]
[info]   (min, avg, max) = (1675.380, 1715.125, 1758.281), stdev = 33.195
[info]   CI (99.9%): [1587.301, 1842.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   189.692 ±(99.9%) 6.950 B/op [Average]
[info]   (min, avg, max) = (188.096, 189.692, 192.691), stdev = 1.805
[info]   CI (99.9%): [182.742, 196.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1610.286 ±(99.9%) 1413.421 MB/sec [Average]
[info]   (min, avg, max) = (1340.595, 1610.286, 2013.738), stdev = 367.061
[info]   CI (99.9%): [196.865, 3023.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   177.838 ±(99.9%) 149.784 B/op [Average]
[info]   (min, avg, max) = (147.037, 177.838, 220.448), stdev = 38.898
[info]   CI (99.9%): [28.054, 327.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.789), stdev = 1.211
[info]   CI (99.9%): [≈ 0, 5.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.072 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.072, 0.313), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.605 ops/s
[info] # Warmup Iteration   2: 39405291.663 ops/s
[info] # Warmup Iteration   3: 41230819.397 ops/s
[info] # Warmup Iteration   4: 41817969.054 ops/s
[info] # Warmup Iteration   5: 42361503.115 ops/s
[info] Iteration   1: 42536388.210 ops/s
[info]                  ·gc.alloc.rate:               884.940 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.744 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.661 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 42371470.044 ops/s
[info]                  ·gc.alloc.rate:                   910.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 42440839.156 ops/s
[info]                  ·gc.alloc.rate:               879.496 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24.729 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 42572974.916 ops/s
[info]                  ·gc.alloc.rate:                   881.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.585 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42378503.319 ops/s
[info]                  ·gc.alloc.rate:               899.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.410 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49.590 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   42460035.129 ±(99.9%) 352101.773 ops/s [Average]
[info]   (min, avg, max) = (42371470.044, 42460035.129, 42572974.916), stdev = 91439.712
[info]   CI (99.9%): [42107933.356, 42812136.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   891.271 ±(99.9%) 51.665 MB/sec [Average]
[info]   (min, avg, max) = (879.496, 891.271, 910.726), stdev = 13.417
[info]   CI (99.9%): [839.606, 942.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   33.036 ±(99.9%) 2.130 B/op [Average]
[info]   (min, avg, max) = (32.585, 33.036, 33.823), stdev = 0.553
[info]   CI (99.9%): [30.906, 35.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   933.933 ±(99.9%) 1407.692 MB/sec [Average]
[info]   (min, avg, max) = (666.469, 933.933, 1335.254), stdev = 365.573
[info]   CI (99.9%): [≈ 0, 2341.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34.636 ±(99.9%) 52.453 B/op [Average]
[info]   (min, avg, max) = (24.661, 34.636, 49.590), stdev = 13.622
[info]   CI (99.9%): [≈ 0, 87.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:32:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1847576.742 ops/s
[info] # Warmup Iteration   2: 12326862.059 ops/s
[info] # Warmup Iteration   3: 13133036.344 ops/s
[info] # Warmup Iteration   4: 13067191.148 ops/s
[info] # Warmup Iteration   5: 13224873.420 ops/s
[info] Iteration   1: 13191200.962 ops/s
[info]                  ·gc.alloc.rate:               2703.774 MB/sec
[info]                  ·gc.alloc.rate.norm:          322.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2673.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 319.028 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 13200922.752 ops/s
[info]                  ·gc.alloc.rate:                   2708.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              322.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     318.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13302713.511 ops/s
[info]                  ·gc.alloc.rate:                   2743.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              324.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 13333222.564 ops/s
[info]                  ·gc.alloc.rate:               2751.107 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2687.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 317.122 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 13330852.750 ops/s
[info]                  ·gc.alloc.rate:               2749.984 MB/sec
[info]                  ·gc.alloc.rate.norm:          324.679 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318.114 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13271782.508 ±(99.9%) 270474.444 ops/s [Average]
[info]   (min, avg, max) = (13191200.962, 13271782.508, 13333222.564), stdev = 70241.354
[info]   CI (99.9%): [13001308.063, 13542256.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2731.319 ±(99.9%) 89.941 MB/sec [Average]
[info]   (min, avg, max) = (2703.774, 2731.319, 2751.107), stdev = 23.358
[info]   CI (99.9%): [2641.377, 2821.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   323.864 ±(99.9%) 4.010 B/op [Average]
[info]   (min, avg, max) = (322.609, 323.864, 324.679), stdev = 1.041
[info]   CI (99.9%): [319.854, 327.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2681.645 ±(99.9%) 35.122 MB/sec [Average]
[info]   (min, avg, max) = (2673.664, 2681.645, 2694.381), stdev = 9.121
[info]   CI (99.9%): [2646.522, 2716.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   317.982 ±(99.9%) 3.625 B/op [Average]
[info]   (min, avg, max) = (316.916, 317.982, 319.028), stdev = 0.941
[info]   CI (99.9%): [314.356, 321.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 9.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14409505.460 ops/s
[info] # Warmup Iteration   2: 43820420.129 ops/s
[info] # Warmup Iteration   3: 46992088.960 ops/s
[info] # Warmup Iteration   4: 48077507.701 ops/s
[info] # Warmup Iteration   5: 47867410.875 ops/s
[info] Iteration   1: 47284034.920 ops/s
[info]                  ·gc.alloc.rate:                   1004.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.434 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 47940476.266 ops/s
[info]                  ·gc.alloc.rate:               989.671 MB/sec
[info]                  ·gc.alloc.rate.norm:          32.479 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22.044 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 47848007.166 ops/s
[info]                  ·gc.alloc.rate:                   1004.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              33.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 48679702.878 ops/s
[info]                  ·gc.alloc.rate:                   1016.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.859 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 48540188.082 ops/s
[info]                  ·gc.alloc.rate:               1027.874 MB/sec
[info]                  ·gc.alloc.rate.norm:          33.297 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43.485 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   48058481.862 ±(99.9%) 2174803.856 ops/s [Average]
[info]   (min, avg, max) = (47284034.920, 48058481.862, 48679702.878), stdev = 564789.655
[info]   CI (99.9%): [45883678.007, 50233285.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1008.471 ±(99.9%) 55.424 MB/sec [Average]
[info]   (min, avg, max) = (989.671, 1008.471, 1027.874), stdev = 14.393
[info]   CI (99.9%): [953.047, 1063.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   33.019 ±(99.9%) 1.449 B/op [Average]
[info]   (min, avg, max) = (32.479, 33.019, 33.434), stdev = 0.376
[info]   CI (99.9%): [31.570, 34.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1074.277 ±(99.9%) 1414.312 MB/sec [Average]
[info]   (min, avg, max) = (671.696, 1074.277, 1343.612), stdev = 367.292
[info]   CI (99.9%): [≈ 0, 2488.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.222 ±(99.9%) 46.903 B/op [Average]
[info]   (min, avg, max) = (21.731, 35.222, 44.656), stdev = 12.181
[info]   CI (99.9%): [≈ 0, 82.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18812074.923 ops/s
[info] # Warmup Iteration   2: 60992011.136 ops/s
[info] # Warmup Iteration   3: 63177733.268 ops/s
[info] # Warmup Iteration   4: 63582571.615 ops/s
[info] # Warmup Iteration   5: 63585525.648 ops/s
[info] Iteration   1: 63409800.251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 63214297.859 ops/s
[info]                  ·gc.alloc.rate:      0.667 MB/sec
[info]                  ·gc.alloc.rate.norm: 0.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 63379821.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 63366695.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 63402394.424 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   63354602.065 ±(99.9%) 309243.641 ops/s [Average]
[info]   (min, avg, max) = (63214297.859, 63354602.065, 63409800.251), stdev = 80309.592
[info]   CI (99.9%): [63045358.424, 63663845.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   0.134 ±(99.9%) 1.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.134, 0.667), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁵, 0.003, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6368291.892 ops/s
[info] # Warmup Iteration   2: 17355184.394 ops/s
[info] # Warmup Iteration   3: 17773737.625 ops/s
[info] # Warmup Iteration   4: 17772272.902 ops/s
[info] # Warmup Iteration   5: 17365556.684 ops/s
[info] Iteration   1: 17605562.493 ops/s
[info]                  ·gc.alloc.rate:                   1661.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17860019.363 ops/s
[info]                  ·gc.alloc.rate:                   1687.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.002 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17447651.994 ops/s
[info]                  ·gc.alloc.rate:               1657.857 MB/sec
[info]                  ·gc.alloc.rate.norm:          149.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121.315 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 17749769.460 ops/s
[info]                  ·gc.alloc.rate:                   1680.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              148.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 17852802.836 ops/s
[info]                  ·gc.alloc.rate:               1700.711 MB/sec
[info]                  ·gc.alloc.rate.norm:          149.931 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178.470 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   17703161.230 ±(99.9%) 677920.858 ops/s [Average]
[info]   (min, avg, max) = (17447651.994, 17703161.230, 17860019.363), stdev = 176053.894
[info]   CI (99.9%): [17025240.371, 18381082.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   1677.694 ±(99.9%) 69.113 MB/sec [Average]
[info]   (min, avg, max) = (1657.857, 1677.694, 1700.711), stdev = 17.948
[info]   CI (99.9%): [1608.582, 1746.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   149.147 ±(99.9%) 2.216 B/op [Average]
[info]   (min, avg, max) = (148.553, 149.147, 149.931), stdev = 0.575
[info]   CI (99.9%): [146.931, 151.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1613.760 ±(99.9%) 1423.193 MB/sec [Average]
[info]   (min, avg, max) = (1339.565, 1613.760, 2024.440), stdev = 369.599
[info]   CI (99.9%): [190.567, 3036.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   143.267 ±(99.9%) 121.840 B/op [Average]
[info]   (min, avg, max) = (119.435, 143.267, 178.470), stdev = 31.641
[info]   CI (99.9%): [21.427, 265.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:31:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348692.161 ops/s
[info] # Warmup Iteration   2: 2485194.070 ops/s
[info] # Warmup Iteration   3: 2620866.028 ops/s
[info] # Warmup Iteration   4: 2703797.602 ops/s
[info] # Warmup Iteration   5: 2724745.328 ops/s
[info] Iteration   1: 2728364.905 ops/s
[info]                  ·gc.alloc.rate:                   2175.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1254.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1162.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.071 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2730764.730 ops/s
[info]                  ·gc.alloc.rate:                   2193.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1158.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2731084.483 ops/s
[info]                  ·gc.alloc.rate:               2182.260 MB/sec
[info]                  ·gc.alloc.rate.norm:          1257.520 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1157.469 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 2723263.389 ops/s
[info]                  ·gc.alloc.rate:                   2226.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1286.595 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1548.443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2733678.568 ops/s
[info]                  ·gc.alloc.rate:                   2203.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1268.642 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1159.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2729431.215 ±(99.9%) 15127.035 ops/s [Average]
[info]   (min, avg, max) = (2723263.389, 2729431.215, 2733678.568), stdev = 3928.443
[info]   CI (99.9%): [2714304.180, 2744558.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2196.192 ±(99.9%) 77.889 MB/sec [Average]
[info]   (min, avg, max) = (2175.161, 2196.192, 2226.838), stdev = 20.227
[info]   CI (99.9%): [2118.303, 2274.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1266.305 ±(99.9%) 48.435 B/op [Average]
[info]   (min, avg, max) = (1254.761, 1266.305, 1286.595), stdev = 12.578
[info]   CI (99.9%): [1217.870, 1314.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2145.406 ±(99.9%) 1150.893 MB/sec [Average]
[info]   (min, avg, max) = (2008.636, 2145.406, 2680.045), stdev = 298.883
[info]   CI (99.9%): [994.513, 3296.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1237.174 ±(99.9%) 670.069 B/op [Average]
[info]   (min, avg, max) = (1157.469, 1237.174, 1548.443), stdev = 174.015
[info]   CI (99.9%): [567.105, 1907.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.747 ±(99.9%) 6.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.747, 3.591), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 6.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 3.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.071), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65558.115 ops/s
[info] # Warmup Iteration   2: 161264.361 ops/s
[info] # Warmup Iteration   3: 169389.490 ops/s
[info] # Warmup Iteration   4: 168270.510 ops/s
[info] # Warmup Iteration   5: 171855.943 ops/s
[info] Iteration   1: 169935.583 ops/s
[info]                  ·gc.alloc.rate:               3242.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          30024.409 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3354.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31068.736 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 171920.651 ops/s
[info]                  ·gc.alloc.rate:                   3281.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              30042.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3361.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30771.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 171872.382 ops/s
[info]                  ·gc.alloc.rate:               3260.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          29852.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2696.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24692.183 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 171474.790 ops/s
[info]                  ·gc.alloc.rate:               3280.053 MB/sec
[info]                  ·gc.alloc.rate.norm:          30107.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3379.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31023.176 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 170810.819 ops/s
[info]                  ·gc.alloc.rate:               3268.418 MB/sec
[info]                  ·gc.alloc.rate.norm:          30115.914 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3387.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31211.273 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   171202.845 ±(99.9%) 3220.022 ops/s [Average]
[info]   (min, avg, max) = (169935.583, 171202.845, 171920.651), stdev = 836.229
[info]   CI (99.9%): [167982.823, 174422.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3266.456 ±(99.9%) 62.411 MB/sec [Average]
[info]   (min, avg, max) = (3242.128, 3266.456, 3281.605), stdev = 16.208
[info]   CI (99.9%): [3204.044, 3328.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   30028.601 ±(99.9%) 408.593 B/op [Average]
[info]   (min, avg, max) = (29852.734, 30028.601, 30115.914), stdev = 106.110
[info]   CI (99.9%): [29620.008, 30437.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3235.954 ±(99.9%) 1162.291 MB/sec [Average]
[info]   (min, avg, max) = (2696.516, 3235.954, 3387.295), stdev = 301.843
[info]   CI (99.9%): [2073.663, 4398.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29753.393 ±(99.9%) 10911.748 B/op [Average]
[info]   (min, avg, max) = (24692.183, 29753.393, 31211.273), stdev = 2833.746
[info]   CI (99.9%): [18841.645, 40665.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2009.175 ops/s
[info] # Warmup Iteration   2: 27390.375 ops/s
[info] # Warmup Iteration   3: 35784.074 ops/s
[info] # Warmup Iteration   4: 35034.195 ops/s
[info] # Warmup Iteration   5: 35509.244 ops/s
[info] Iteration   1: 35721.270 ops/s
[info]                  ·gc.alloc.rate:                   2556.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              112643.640 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118041.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.172 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35826.540 ops/s
[info]                  ·gc.alloc.rate:                   2535.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              111401.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88564.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35746.364 ops/s
[info]                  ·gc.alloc.rate:               2558.482 MB/sec
[info]                  ·gc.alloc.rate.norm:          112645.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2695.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118665.767 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 35339.196 ops/s
[info]                  ·gc.alloc.rate:               2558.334 MB/sec
[info]                  ·gc.alloc.rate.norm:          113915.629 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2703.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120358.547 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 35880.579 ops/s
[info]                  ·gc.alloc.rate:               2569.064 MB/sec
[info]                  ·gc.alloc.rate.norm:          112688.298 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2031.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89088.200 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   35702.790 ±(99.9%) 819.934 ops/s [Average]
[info]   (min, avg, max) = (35339.196, 35702.790, 35880.579), stdev = 212.934
[info]   CI (99.9%): [34882.855, 36522.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2555.708 ±(99.9%) 46.666 MB/sec [Average]
[info]   (min, avg, max) = (2535.875, 2555.708, 2569.064), stdev = 12.119
[info]   CI (99.9%): [2509.042, 2602.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   112658.797 ±(99.9%) 3423.766 B/op [Average]
[info]   (min, avg, max) = (111401.269, 112658.797, 113915.629), stdev = 889.141
[info]   CI (99.9%): [109235.031, 116082.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2424.921 ±(99.9%) 1411.496 MB/sec [Average]
[info]   (min, avg, max) = (2016.021, 2424.921, 2703.030), stdev = 366.561
[info]   CI (99.9%): [1013.426, 3836.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   106943.532 ±(99.9%) 63772.877 B/op [Average]
[info]   (min, avg, max) = (88564.041, 106943.532, 120358.547), stdev = 16561.614
[info]   CI (99.9%): [43170.655, 170716.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.208), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.017 ±(99.9%) 15.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.017, 9.172), stdev = 4.019
[info]   CI (99.9%): [≈ 0, 17.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42035.909 ops/s
[info] # Warmup Iteration   2: 145519.062 ops/s
[info] # Warmup Iteration   3: 148840.039 ops/s
[info] # Warmup Iteration   4: 152229.098 ops/s
[info] # Warmup Iteration   5: 152546.713 ops/s
[info] Iteration   1: 152792.091 ops/s
[info]                  ·gc.alloc.rate:                   1320.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              13598.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13757.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 150738.007 ops/s
[info]                  ·gc.alloc.rate:                   1300.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              13577.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13952.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 152055.828 ops/s
[info]                  ·gc.alloc.rate:               1321.908 MB/sec
[info]                  ·gc.alloc.rate.norm:          13682.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13845.409 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 148382.862 ops/s
[info]                  ·gc.alloc.rate:                   1292.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              13705.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14202.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 151828.174 ops/s
[info]                  ·gc.alloc.rate:                   1310.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              13579.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13837.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.432 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   151159.392 ±(99.9%) 6614.612 ops/s [Average]
[info]   (min, avg, max) = (148382.862, 151159.392, 152792.091), stdev = 1717.794
[info]   CI (99.9%): [144544.780, 157774.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1309.178 ±(99.9%) 48.168 MB/sec [Average]
[info]   (min, avg, max) = (1292.594, 1309.178, 1321.908), stdev = 12.509
[info]   CI (99.9%): [1261.009, 1357.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13628.752 ±(99.9%) 232.817 B/op [Average]
[info]   (min, avg, max) = (13577.975, 13628.752, 13705.013), stdev = 60.462
[info]   CI (99.9%): [13395.935, 13861.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.937 ±(99.9%) 6.686 MB/sec [Average]
[info]   (min, avg, max) = (1335.097, 1336.937, 1339.489), stdev = 1.736
[info]   CI (99.9%): [1330.251, 1343.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13918.976 ±(99.9%) 665.330 B/op [Average]
[info]   (min, avg, max) = (13757.778, 13918.976, 14202.219), stdev = 172.784
[info]   CI (99.9%): [13253.646, 14584.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.846 ±(99.9%) 7.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.103), stdev = 1.821
[info]   CI (99.9%): [≈ 0, 7.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.959 ±(99.9%) 74.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.959, 43.499), stdev = 19.310
[info]   CI (99.9%): [≈ 0, 83.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:30:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162514.722 ops/s
[info] # Warmup Iteration   2: 419222.607 ops/s
[info] # Warmup Iteration   3: 430119.295 ops/s
[info] # Warmup Iteration   4: 442528.624 ops/s
[info] # Warmup Iteration   5: 448124.981 ops/s
[info] Iteration   1: 440266.151 ops/s
[info]                  ·gc.alloc.rate:                   1762.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              6300.710 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7208.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 447003.075 ops/s
[info]                  ·gc.alloc.rate:                   1786.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              6289.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4735.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 443707.462 ops/s
[info]                  ·gc.alloc.rate:                   1778.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              6304.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7135.581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 448334.550 ops/s
[info]                  ·gc.alloc.rate:               1779.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          6247.287 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4705.155 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 448168.362 ops/s
[info]                  ·gc.alloc.rate:               1775.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          6232.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4706.897 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   445495.920 ±(99.9%) 13341.849 ops/s [Average]
[info]   (min, avg, max) = (440266.151, 445495.920, 448334.550), stdev = 3464.836
[info]   CI (99.9%): [432154.071, 458837.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1776.386 ±(99.9%) 33.787 MB/sec [Average]
[info]   (min, avg, max) = (1762.481, 1776.386, 1786.397), stdev = 8.774
[info]   CI (99.9%): [1742.599, 1810.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6274.798 ±(99.9%) 126.299 B/op [Average]
[info]   (min, avg, max) = (6232.352, 6274.798, 6304.012), stdev = 32.799
[info]   CI (99.9%): [6148.499, 6401.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.028 ±(99.9%) 1418.238 MB/sec [Average]
[info]   (min, avg, max) = (1340.345, 1611.028, 2016.397), stdev = 368.312
[info]   CI (99.9%): [192.790, 3029.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5698.321 ±(99.9%) 5181.373 B/op [Average]
[info]   (min, avg, max) = (4705.155, 5698.321, 7208.435), stdev = 1345.586
[info]   CI (99.9%): [516.948, 10879.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.691 ±(99.9%) 5.817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.691, 3.393), stdev = 1.511
[info]   CI (99.9%): [≈ 0, 6.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.434 ±(99.9%) 20.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.434, 11.947), stdev = 5.319
[info]   CI (99.9%): [≈ 0, 22.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198677.354 ops/s
[info] # Warmup Iteration   2: 473797.915 ops/s
[info] # Warmup Iteration   3: 481634.940 ops/s
[info] # Warmup Iteration   4: 476749.966 ops/s
[info] # Warmup Iteration   5: 474675.913 ops/s
[info] Iteration   1: 478575.662 ops/s
[info]                  ·gc.alloc.rate:               1378.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          4532.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4417.379 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 481066.869 ops/s
[info]                  ·gc.alloc.rate:                   1383.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4524.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4396.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 482863.176 ops/s
[info]                  ·gc.alloc.rate:                   1375.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4481.400 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4382.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 484653.510 ops/s
[info]                  ·gc.alloc.rate:                   1392.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              4520.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4361.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.419 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 482974.818 ops/s
[info]                  ·gc.alloc.rate:               1400.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          4561.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4369.664 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   482026.807 ±(99.9%) 8891.921 ops/s [Average]
[info]   (min, avg, max) = (478575.662, 482026.807, 484653.510), stdev = 2309.204
[info]   CI (99.9%): [473134.886, 490918.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1385.868 ±(99.9%) 39.826 MB/sec [Average]
[info]   (min, avg, max) = (1375.056, 1385.868, 1400.179), stdev = 10.343
[info]   CI (99.9%): [1346.042, 1425.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4524.098 ±(99.9%) 111.348 B/op [Average]
[info]   (min, avg, max) = (4481.400, 4524.098, 4561.875), stdev = 28.917
[info]   CI (99.9%): [4412.750, 4635.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1343.437 ±(99.9%) 5.332 MB/sec [Average]
[info]   (min, avg, max) = (1341.183, 1343.437, 1344.769), stdev = 1.385
[info]   CI (99.9%): [1338.105, 1348.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4385.651 ±(99.9%) 85.313 B/op [Average]
[info]   (min, avg, max) = (4361.784, 4385.651, 4417.379), stdev = 22.156
[info]   CI (99.9%): [4300.337, 4470.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.683 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.683, 2.956), stdev = 1.285
[info]   CI (99.9%): [≈ 0, 5.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2.225 ±(99.9%) 16.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.225, 9.635), stdev = 4.187
[info]   CI (99.9%): [≈ 0, 18.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14143.862 ops/s
[info] # Warmup Iteration   2: 61940.941 ops/s
[info] # Warmup Iteration   3: 75816.874 ops/s
[info] # Warmup Iteration   4: 76697.286 ops/s
[info] # Warmup Iteration   5: 77610.853 ops/s
[info] Iteration   1: 77147.240 ops/s
[info]                  ·gc.alloc.rate:                   1371.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              27974.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27165.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 77404.430 ops/s
[info]                  ·gc.alloc.rate:                   1371.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              27882.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27128.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 77479.595 ops/s
[info]                  ·gc.alloc.rate:               1383.560 MB/sec
[info]                  ·gc.alloc.rate.norm:          28096.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27158.591 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 77459.693 ops/s
[info]                  ·gc.alloc.rate:                   1383.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              28116.401 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27219.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.266 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 77573.230 ops/s
[info]                  ·gc.alloc.rate:                   1397.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              28355.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27218.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   77412.838 ±(99.9%) 617.876 ops/s [Average]
[info]   (min, avg, max) = (77147.240, 77412.838, 77573.230), stdev = 160.460
[info]   CI (99.9%): [76794.962, 78030.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1381.499 ±(99.9%) 41.939 MB/sec [Average]
[info]   (min, avg, max) = (1371.317, 1381.499, 1397.565), stdev = 10.891
[info]   CI (99.9%): [1339.560, 1423.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28085.117 ±(99.9%) 687.825 B/op [Average]
[info]   (min, avg, max) = (27882.066, 28085.117, 28355.541), stdev = 178.626
[info]   CI (99.9%): [27397.292, 28772.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.882 ±(99.9%) 15.345 MB/sec [Average]
[info]   (min, avg, max) = (1331.634, 1336.882, 1341.542), stdev = 3.985
[info]   CI (99.9%): [1321.537, 1352.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27178.233 ±(99.9%) 153.139 B/op [Average]
[info]   (min, avg, max) = (27128.970, 27178.233, 27219.392), stdev = 39.770
[info]   CI (99.9%): [27025.094, 27331.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.146 ±(99.9%) 0.993 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.604), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.961 ±(99.9%) 20.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.961, 12.266), stdev = 5.240
[info]   CI (99.9%): [≈ 0, 23.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40534.631 ops/s
[info] # Warmup Iteration   2: 285728.388 ops/s
[info] # Warmup Iteration   3: 304197.487 ops/s
[info] # Warmup Iteration   4: 312312.805 ops/s
[info] # Warmup Iteration   5: 316186.490 ops/s
[info] Iteration   1: 320073.861 ops/s
[info]                  ·gc.alloc.rate:                   2362.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              11612.549 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9905.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.220 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 313917.600 ops/s
[info]                  ·gc.alloc.rate:                   2368.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              11876.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13429.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 318825.614 ops/s
[info]                  ·gc.alloc.rate:               2365.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          11678.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9914.563 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 318663.985 ops/s
[info]                  ·gc.alloc.rate:               2404.858 MB/sec
[info]                  ·gc.alloc.rate.norm:          11878.338 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13242.421 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 320259.964 ops/s
[info]                  ·gc.alloc.rate:               2391.169 MB/sec
[info]                  ·gc.alloc.rate.norm:          11746.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9907.668 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   318348.205 ±(99.9%) 9928.131 ops/s [Average]
[info]   (min, avg, max) = (313917.600, 318348.205, 320259.964), stdev = 2578.304
[info]   CI (99.9%): [308420.074, 328276.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2378.551 ±(99.9%) 71.492 MB/sec [Average]
[info]   (min, avg, max) = (2362.144, 2378.551, 2404.858), stdev = 18.566
[info]   CI (99.9%): [2307.059, 2450.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   11758.355 ±(99.9%) 456.164 B/op [Average]
[info]   (min, avg, max) = (11612.549, 11758.355, 11878.338), stdev = 118.464
[info]   CI (99.9%): [11302.191, 12214.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2279.954 ±(99.9%) 1405.580 MB/sec [Average]
[info]   (min, avg, max) = (2008.423, 2279.954, 2681.026), stdev = 365.025
[info]   CI (99.9%): [874.375, 3685.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11279.797 ±(99.9%) 7231.808 B/op [Average]
[info]   (min, avg, max) = (9905.050, 11279.797, 13429.281), stdev = 1878.078
[info]   CI (99.9%): [4047.988, 18511.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.706), stdev = 1.651
[info]   CI (99.9%): [≈ 0, 7.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.707 ±(99.9%) 31.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.707, 18.220), stdev = 8.114
[info]   CI (99.9%): [≈ 0, 34.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:29:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78083.006 ops/s
[info] # Warmup Iteration   2: 477745.682 ops/s
[info] # Warmup Iteration   3: 487012.785 ops/s
[info] # Warmup Iteration   4: 500581.190 ops/s
[info] # Warmup Iteration   5: 501606.227 ops/s
[info] Iteration   1: 501921.075 ops/s
[info]                  ·gc.alloc.rate:               1319.880 MB/sec
[info]                  ·gc.alloc.rate.norm:          4138.748 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4185.907 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 502543.893 ops/s
[info]                  ·gc.alloc.rate:                   1315.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              4118.421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4184.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 502556.908 ops/s
[info]                  ·gc.alloc.rate:                   1316.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              4121.703 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4186.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 502536.915 ops/s
[info]                  ·gc.alloc.rate:                   1337.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              4189.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4191.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.886 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 501178.074 ops/s
[info]                  ·gc.alloc.rate:                   1336.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              4197.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4187.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   502147.373 ±(99.9%) 2332.296 ops/s [Average]
[info]   (min, avg, max) = (501178.074, 502147.373, 502556.908), stdev = 605.690
[info]   CI (99.9%): [499815.077, 504479.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1325.186 ±(99.9%) 42.706 MB/sec [Average]
[info]   (min, avg, max) = (1315.092, 1325.186, 1337.572), stdev = 11.091
[info]   CI (99.9%): [1282.480, 1367.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4153.169 ±(99.9%) 145.309 B/op [Average]
[info]   (min, avg, max) = (4118.421, 4153.169, 4197.921), stdev = 37.736
[info]   CI (99.9%): [4007.861, 4298.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1336.103 ±(99.9%) 7.239 MB/sec [Average]
[info]   (min, avg, max) = (1333.597, 1336.103, 1338.268), stdev = 1.880
[info]   CI (99.9%): [1328.865, 1343.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4187.361 ±(99.9%) 9.375 B/op [Average]
[info]   (min, avg, max) = (4184.891, 4187.361, 4191.233), stdev = 2.435
[info]   CI (99.9%): [4177.986, 4196.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 7.609 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 4.434), stdev = 1.976
[info]   CI (99.9%): [≈ 0, 8.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.816 ±(99.9%) 23.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.816, 13.886), stdev = 6.188
[info]   CI (99.9%): [≈ 0, 26.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 1.871
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638037.700 ops/s
[info] # Warmup Iteration   2: 1285136.460 ops/s
[info] # Warmup Iteration   3: 1316232.315 ops/s
[info] # Warmup Iteration   4: 1340590.345 ops/s
[info] # Warmup Iteration   5: 1357101.643 ops/s
[info] Iteration   1: 1354801.609 ops/s
[info]                  ·gc.alloc.rate:                   2723.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              3164.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3120.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1328154.542 ops/s
[info]                  ·gc.alloc.rate:                   2713.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              3215.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2686.568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3183.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1341311.753 ops/s
[info]                  ·gc.alloc.rate:                   2736.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              3210.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3158.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1368449.724 ops/s
[info]                  ·gc.alloc.rate:                   2777.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              3195.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3103.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1366505.956 ops/s
[info]                  ·gc.alloc.rate:                   2774.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              3196.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1351844.717 ±(99.9%) 65900.853 ops/s [Average]
[info]   (min, avg, max) = (1328154.542, 1351844.717, 1368449.724), stdev = 17114.242
[info]   CI (99.9%): [1285943.864, 1417745.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2745.266 ±(99.9%) 114.094 MB/sec [Average]
[info]   (min, avg, max) = (2713.391, 2745.266, 2777.995), stdev = 29.630
[info]   CI (99.9%): [2631.172, 2859.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3196.189 ±(99.9%) 77.175 B/op [Average]
[info]   (min, avg, max) = (3164.004, 3196.189, 3215.286), stdev = 20.042
[info]   CI (99.9%): [3119.013, 3273.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2693.494 ±(99.9%) 30.099 MB/sec [Average]
[info]   (min, avg, max) = (2686.568, 2693.494, 2704.593), stdev = 7.817
[info]   CI (99.9%): [2663.396, 2723.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3136.142 ±(99.9%) 128.975 B/op [Average]
[info]   (min, avg, max) = (3103.221, 3136.142, 3183.502), stdev = 33.494
[info]   CI (99.9%): [3007.168, 3265.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.063, 0.120), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12752.617 ops/s
[info] # Warmup Iteration   2: 103767.212 ops/s
[info] # Warmup Iteration   3: 100832.078 ops/s
[info] # Warmup Iteration   4: 107466.576 ops/s
[info] # Warmup Iteration   5: 108828.847 ops/s
[info] Iteration   1: 108786.201 ops/s
[info]                  ·gc.alloc.rate:                   3645.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              52727.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4008.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57983.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.904 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 108913.709 ops/s
[info]                  ·gc.alloc.rate:                   3648.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              52727.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3351.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48424.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 108976.115 ops/s
[info]                  ·gc.alloc.rate:               3652.991 MB/sec
[info]                  ·gc.alloc.rate.norm:          52755.383 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3365.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48608.878 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 107666.760 ops/s
[info]                  ·gc.alloc.rate:               3610.501 MB/sec
[info]                  ·gc.alloc.rate.norm:          52777.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3376.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49356.037 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 108618.635 ops/s
[info]                  ·gc.alloc.rate:               3642.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          52780.528 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49069.959 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   108592.284 ±(99.9%) 2060.664 ops/s [Average]
[info]   (min, avg, max) = (107666.760, 108592.284, 108976.115), stdev = 535.148
[info]   CI (99.9%): [106531.620, 110652.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3640.003 ±(99.9%) 65.274 MB/sec [Average]
[info]   (min, avg, max) = (3610.501, 3640.003, 3652.991), stdev = 16.951
[info]   CI (99.9%): [3574.729, 3705.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   52753.637 ±(99.9%) 99.623 B/op [Average]
[info]   (min, avg, max) = (52727.054, 52753.637, 52780.528), stdev = 25.872
[info]   CI (99.9%): [52654.014, 52853.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3497.665 ±(99.9%) 1100.735 MB/sec [Average]
[info]   (min, avg, max) = (3351.009, 3497.665, 4008.480), stdev = 285.857
[info]   CI (99.9%): [2396.930, 4598.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   50688.501 ±(99.9%) 15766.568 B/op [Average]
[info]   (min, avg, max) = (48424.324, 50688.501, 57983.305), stdev = 4094.528
[info]   CI (99.9%): [34921.932, 66455.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.241 ±(99.9%) 1.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.241, 0.904), stdev = 0.393
[info]   CI (99.9%): [≈ 0, 1.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:28:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119652.567 ops/s
[info] # Warmup Iteration   2: 326903.514 ops/s
[info] # Warmup Iteration   3: 341655.355 ops/s
[info] # Warmup Iteration   4: 336451.292 ops/s
[info] # Warmup Iteration   5: 343137.976 ops/s
[info] Iteration   1: 342482.494 ops/s
[info]                  ·gc.alloc.rate:               1188.610 MB/sec
[info]                  ·gc.alloc.rate.norm:          5461.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6140.921 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 340768.829 ops/s
[info]                  ·gc.alloc.rate:                   1184.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              5468.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6171.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 342639.229 ops/s
[info]                  ·gc.alloc.rate:               1176.154 MB/sec
[info]                  ·gc.alloc.rate.norm:          5402.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3071.970 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 334481.053 ops/s
[info]                  ·gc.alloc.rate:               1163.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          5475.739 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6297.293 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 335111.216 ops/s
[info]                  ·gc.alloc.rate:                   1164.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              5469.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6291.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   339096.564 ±(99.9%) 15402.264 ops/s [Average]
[info]   (min, avg, max) = (334481.053, 339096.564, 342639.229), stdev = 3999.919
[info]   CI (99.9%): [323694.301, 354498.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1175.469 ±(99.9%) 43.013 MB/sec [Average]
[info]   (min, avg, max) = (1163.714, 1175.469, 1188.610), stdev = 11.170
[info]   CI (99.9%): [1132.456, 1218.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5455.559 ±(99.9%) 116.271 B/op [Average]
[info]   (min, avg, max) = (5402.358, 5455.559, 5475.739), stdev = 30.195
[info]   CI (99.9%): [5339.288, 5571.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1203.943 ±(99.9%) 1151.944 MB/sec [Average]
[info]   (min, avg, max) = (668.802, 1203.943, 1339.743), stdev = 299.156
[info]   CI (99.9%): [51.999, 2355.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5594.670 ±(99.9%) 5436.978 B/op [Average]
[info]   (min, avg, max) = (3071.970, 5594.670, 6297.293), stdev = 1411.966
[info]   CI (99.9%): [157.692, 11031.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.530 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.312), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.313 ±(99.9%) 2.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.313, 1.467), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 2.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 266245.289 ops/s
[info] # Warmup Iteration   2: 790993.413 ops/s
[info] # Warmup Iteration   3: 836898.495 ops/s
[info] # Warmup Iteration   4: 834947.277 ops/s
[info] # Warmup Iteration   5: 823892.126 ops/s
[info] Iteration   1: 831990.661 ops/s
[info]                  ·gc.alloc.rate:                   615.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              1163.815 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1260.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 833331.762 ops/s
[info]                  ·gc.alloc.rate:               617.927 MB/sec
[info]                  ·gc.alloc.rate.norm:          1166.929 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1258.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 836763.964 ops/s
[info]                  ·gc.alloc.rate:                   630.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              1185.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 835653.146 ops/s
[info]                  ·gc.alloc.rate:               621.849 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1257.141 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 831972.129 ops/s
[info]                  ·gc.alloc.rate:               619.237 MB/sec
[info]                  ·gc.alloc.rate.norm:          1171.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1263.935 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   833942.333 ±(99.9%) 8381.678 ops/s [Average]
[info]   (min, avg, max) = (831972.129, 833942.333, 836763.964), stdev = 2176.695
[info]   CI (99.9%): [825560.654, 842324.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   620.909 ±(99.9%) 22.232 MB/sec [Average]
[info]   (min, avg, max) = (615.219, 620.909, 630.311), stdev = 5.774
[info]   CI (99.9%): [598.677, 643.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1171.706 ±(99.9%) 31.992 B/op [Average]
[info]   (min, avg, max) = (1163.815, 1171.706, 1185.503), stdev = 8.308
[info]   CI (99.9%): [1139.714, 1203.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   667.258 ±(99.9%) 3.005 MB/sec [Average]
[info]   (min, avg, max) = (666.450, 667.258, 668.346), stdev = 0.780
[info]   CI (99.9%): [664.253, 670.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1259.193 ±(99.9%) 12.705 B/op [Average]
[info]   (min, avg, max) = (1255.414, 1259.193, 1263.935), stdev = 3.299
[info]   CI (99.9%): [1246.488, 1271.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.079), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1011262.758 ops/s
[info] # Warmup Iteration   2: 2021107.623 ops/s
[info] # Warmup Iteration   3: 2067460.039 ops/s
[info] # Warmup Iteration   4: 2136131.001 ops/s
[info] # Warmup Iteration   5: 2118132.962 ops/s
[info] Iteration   1: 2137808.722 ops/s
[info]                  ·gc.alloc.rate:               1015.073 MB/sec
[info]                  ·gc.alloc.rate.norm:          747.305 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.347 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2126767.134 ops/s
[info]                  ·gc.alloc.rate:                   1015.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              751.785 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     994.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2131926.264 ops/s
[info]                  ·gc.alloc.rate:               1011.204 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.370 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 496.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2140477.994 ops/s
[info]                  ·gc.alloc.rate:               1004.111 MB/sec
[info]                  ·gc.alloc.rate.norm:          738.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 494.212 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2127392.467 ops/s
[info]                  ·gc.alloc.rate:               1024.672 MB/sec
[info]                  ·gc.alloc.rate.norm:          758.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 995.027 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2132874.516 ±(99.9%) 23612.598 ops/s [Average]
[info]   (min, avg, max) = (2126767.134, 2132874.516, 2140477.994), stdev = 6132.117
[info]   CI (99.9%): [2109261.918, 2156487.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014.197 ±(99.9%) 28.825 MB/sec [Average]
[info]   (min, avg, max) = (1004.111, 1014.197, 1024.672), stdev = 7.486
[info]   CI (99.9%): [985.371, 1043.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.387 ±(99.9%) 28.033 B/op [Average]
[info]   (min, avg, max) = (738.360, 748.387, 758.116), stdev = 7.280
[info]   CI (99.9%): [720.354, 776.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.889 ±(99.9%) 1418.065 MB/sec [Average]
[info]   (min, avg, max) = (671.477, 940.889, 1344.881), stdev = 368.267
[info]   CI (99.9%): [≈ 0, 2358.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   694.830 ±(99.9%) 1054.072 B/op [Average]
[info]   (min, avg, max) = (494.212, 694.830, 995.027), stdev = 273.739
[info]   CI (99.9%): [≈ 0, 1748.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.046), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1279567.810 ops/s
[info] # Warmup Iteration   2: 2216517.371 ops/s
[info] # Warmup Iteration   3: 2351141.955 ops/s
[info] # Warmup Iteration   4: 2349720.513 ops/s
[info] # Warmup Iteration   5: 2347932.220 ops/s
[info] Iteration   1: 2350892.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2351665.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2350938.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2351750.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2349706.638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2350990.791 ±(99.9%) 3160.584 ops/s [Average]
[info]   (min, avg, max) = (2349706.638, 2350990.791, 2351750.693), stdev = 820.794
[info]   CI (99.9%): [2347830.207, 2354151.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:27:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131959.035 ops/s
[info] # Warmup Iteration   2: 431602.376 ops/s
[info] # Warmup Iteration   3: 467459.515 ops/s
[info] # Warmup Iteration   4: 475458.689 ops/s
[info] # Warmup Iteration   5: 474515.741 ops/s
[info] Iteration   1: 475451.339 ops/s
[info]                  ·gc.alloc.rate:               703.593 MB/sec
[info]                  ·gc.alloc.rate.norm:          2329.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2212.837 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 475914.500 ops/s
[info]                  ·gc.alloc.rate:               712.539 MB/sec
[info]                  ·gc.alloc.rate.norm:          2356.392 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2212.883 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 475979.555 ops/s
[info]                  ·gc.alloc.rate:               707.217 MB/sec
[info]                  ·gc.alloc.rate.norm:          2338.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2212.502 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 474716.825 ops/s
[info]                  ·gc.alloc.rate:                   704.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2334.515 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2219.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 477781.714 ops/s
[info]                  ·gc.alloc.rate:                   704.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              2320.105 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2205.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   475968.787 ±(99.9%) 4358.602 ops/s [Average]
[info]   (min, avg, max) = (474716.825, 475968.787, 477781.714), stdev = 1131.915
[info]   CI (99.9%): [471610.184, 480327.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   706.385 ±(99.9%) 14.304 MB/sec [Average]
[info]   (min, avg, max) = (703.593, 706.385, 712.539), stdev = 3.715
[info]   CI (99.9%): [692.081, 720.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2335.700 ±(99.9%) 51.785 B/op [Average]
[info]   (min, avg, max) = (2320.105, 2335.700, 2356.392), stdev = 13.449
[info]   CI (99.9%): [2283.915, 2387.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669.161 ±(99.9%) 1.664 MB/sec [Average]
[info]   (min, avg, max) = (668.470, 669.161, 669.581), stdev = 0.432
[info]   CI (99.9%): [667.497, 670.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2212.617 ±(99.9%) 19.357 B/op [Average]
[info]   (min, avg, max) = (2205.329, 2212.617, 2219.533), stdev = 5.027
[info]   CI (99.9%): [2193.260, 2231.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.069), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12102.837 ops/s
[info] # Warmup Iteration   2: 55421.982 ops/s
[info] # Warmup Iteration   3: 57355.940 ops/s
[info] # Warmup Iteration   4: 59599.020 ops/s
[info] # Warmup Iteration   5: 59864.214 ops/s
[info] Iteration   1: 59100.065 ops/s
[info]                  ·gc.alloc.rate:                   2068.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              55077.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53642.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 60556.423 ops/s
[info]                  ·gc.alloc.rate:                   2118.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              55054.883 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52231.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 60200.682 ops/s
[info]                  ·gc.alloc.rate:                   2092.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              54705.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52472.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 60477.783 ops/s
[info]                  ·gc.alloc.rate:                   2129.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              55407.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52276.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 60526.260 ops/s
[info]                  ·gc.alloc.rate:                   2130.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              55414.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52285.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.541 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   60172.242 ±(99.9%) 2371.080 ops/s [Average]
[info]   (min, avg, max) = (59100.065, 60172.242, 60556.423), stdev = 615.762
[info]   CI (99.9%): [57801.163, 62543.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2107.990 ±(99.9%) 104.066 MB/sec [Average]
[info]   (min, avg, max) = (2068.273, 2107.990, 2130.932), stdev = 27.026
[info]   CI (99.9%): [2003.925, 2212.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   55132.114 ±(99.9%) 1132.907 B/op [Average]
[info]   (min, avg, max) = (54705.754, 55132.114, 55414.042), stdev = 294.212
[info]   CI (99.9%): [53999.207, 56265.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2010.259 ±(99.9%) 10.142 MB/sec [Average]
[info]   (min, avg, max) = (2007.142, 2010.259, 2014.356), stdev = 2.634
[info]   CI (99.9%): [2000.117, 2020.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   52581.610 ±(99.9%) 2310.360 B/op [Average]
[info]   (min, avg, max) = (52231.439, 52581.610, 53642.134), stdev = 599.993
[info]   CI (99.9%): [50271.251, 54891.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.762 ±(99.9%) 6.247 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.762, 3.664), stdev = 1.622
[info]   CI (99.9%): [≈ 0, 7.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   20.272 ±(99.9%) 166.384 B/op [Average]
[info]   (min, avg, max) = (0.541, 20.272, 97.563), stdev = 43.209
[info]   CI (99.9%): [≈ 0, 186.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5357.974 ops/s
[info] # Warmup Iteration   2: 78859.221 ops/s
[info] # Warmup Iteration   3: 91625.438 ops/s
[info] # Warmup Iteration   4: 95060.500 ops/s
[info] # Warmup Iteration   5: 95434.398 ops/s
[info] Iteration   1: 95379.818 ops/s
[info]                  ·gc.alloc.rate:                   1763.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              29106.216 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33080.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 96245.729 ops/s
[info]                  ·gc.alloc.rate:                   1777.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              29067.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21867.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 96760.291 ops/s
[info]                  ·gc.alloc.rate:                   1786.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              29051.226 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32570.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.386 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 96634.059 ops/s
[info]                  ·gc.alloc.rate:                   1794.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              29224.535 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32537.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 97073.209 ops/s
[info]                  ·gc.alloc.rate:               1778.457 MB/sec
[info]                  ·gc.alloc.rate.norm:          28834.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21589.282 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   96418.621 ±(99.9%) 2510.787 ops/s [Average]
[info]   (min, avg, max) = (95379.818, 96418.621, 97073.209), stdev = 652.043
[info]   CI (99.9%): [93907.834, 98929.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1780.223 ±(99.9%) 44.008 MB/sec [Average]
[info]   (min, avg, max) = (1763.889, 1780.223, 1794.421), stdev = 11.429
[info]   CI (99.9%): [1736.215, 1824.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   29056.760 ±(99.9%) 544.551 B/op [Average]
[info]   (min, avg, max) = (28834.800, 29056.760, 29224.535), stdev = 141.418
[info]   CI (99.9%): [28512.209, 29601.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1734.932 ±(99.9%) 1407.935 MB/sec [Average]
[info]   (min, avg, max) = (1331.572, 1734.932, 2004.722), stdev = 365.636
[info]   CI (99.9%): [326.997, 3142.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28328.961 ±(99.9%) 23219.690 B/op [Average]
[info]   (min, avg, max) = (21589.282, 28328.961, 33080.240), stdev = 6030.080
[info]   CI (99.9%): [5109.271, 51548.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.933 ±(99.9%) 7.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.309), stdev = 1.889
[info]   CI (99.9%): [≈ 0, 8.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.245 ±(99.9%) 118.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.245, 70.464), stdev = 30.898
[info]   CI (99.9%): [≈ 0, 134.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51551.211 ops/s
[info] # Warmup Iteration   2: 156964.474 ops/s
[info] # Warmup Iteration   3: 146772.772 ops/s
[info] # Warmup Iteration   4: 166951.533 ops/s
[info] # Warmup Iteration   5: 167833.470 ops/s
[info] Iteration   1: 165835.168 ops/s
[info]                  ·gc.alloc.rate:                   2633.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              24991.346 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25477.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 165863.060 ops/s
[info]                  ·gc.alloc.rate:                   2634.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              25001.398 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25461.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 166543.038 ops/s
[info]                  ·gc.alloc.rate:                   2633.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              24876.347 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19039.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 166243.834 ops/s
[info]                  ·gc.alloc.rate:                   2654.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              25134.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25475.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 165353.008 ops/s
[info]                  ·gc.alloc.rate:                   2647.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              25203.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25676.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   165967.621 ±(99.9%) 1736.662 ops/s [Average]
[info]   (min, avg, max) = (165353.008, 165967.621, 166543.038), stdev = 451.005
[info]   CI (99.9%): [164230.960, 167704.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2640.806 ±(99.9%) 38.522 MB/sec [Average]
[info]   (min, avg, max) = (2633.095, 2640.806, 2654.982), stdev = 10.004
[info]   CI (99.9%): [2602.284, 2679.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25041.427 ±(99.9%) 495.559 B/op [Average]
[info]   (min, avg, max) = (24876.347, 25041.427, 25203.129), stdev = 128.695
[info]   CI (99.9%): [24545.869, 25536.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2554.306 ±(99.9%) 1160.435 MB/sec [Average]
[info]   (min, avg, max) = (2015.310, 2554.306, 2697.475), stdev = 301.361
[info]   CI (99.9%): [1393.871, 3714.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   24225.900 ±(99.9%) 11168.775 B/op [Average]
[info]   (min, avg, max) = (19039.780, 24225.900, 25676.242), stdev = 2900.496
[info]   CI (99.9%): [13057.125, 35394.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.418 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.271), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.830 ±(99.9%) 3.967 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.830, 2.568), stdev = 1.030
[info]   CI (99.9%): [≈ 0, 4.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:26:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2833.519 ops/s
[info] # Warmup Iteration   2: 26715.677 ops/s
[info] # Warmup Iteration   3: 33989.102 ops/s
[info] # Warmup Iteration   4: 33159.988 ops/s
[info] # Warmup Iteration   5: 34090.897 ops/s
[info] Iteration   1: 33991.884 ops/s
[info]                  ·gc.alloc.rate:                   2270.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              105078.659 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123804.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 33734.312 ops/s
[info]                  ·gc.alloc.rate:                   2253.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              105131.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93868.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.971 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 33747.767 ops/s
[info]                  ·gc.alloc.rate:                   2236.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              104294.610 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94112.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34211.714 ops/s
[info]                  ·gc.alloc.rate:                   2324.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              106915.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124077.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.788 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 34462.289 ops/s
[info]                  ·gc.alloc.rate:                   2314.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              105657.223 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92585.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   34029.593 ±(99.9%) 1199.944 ops/s [Average]
[info]   (min, avg, max) = (33734.312, 34029.593, 34462.289), stdev = 311.622
[info]   CI (99.9%): [32829.650, 35229.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2279.656 ±(99.9%) 146.732 MB/sec [Average]
[info]   (min, avg, max) = (2236.388, 2279.656, 2324.016), stdev = 38.106
[info]   CI (99.9%): [2132.924, 2426.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105415.337 ±(99.9%) 3732.429 B/op [Average]
[info]   (min, avg, max) = (104294.610, 105415.337, 106915.155), stdev = 969.300
[info]   CI (99.9%): [101682.908, 109147.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2285.985 ±(99.9%) 1406.812 MB/sec [Average]
[info]   (min, avg, max) = (2011.915, 2285.985, 2697.074), stdev = 365.345
[info]   CI (99.9%): [879.173, 3692.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105689.750 ±(99.9%) 64195.777 B/op [Average]
[info]   (min, avg, max) = (92585.832, 105689.750, 124077.510), stdev = 16671.439
[info]   CI (99.9%): [41493.973, 169885.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.366 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.250), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.238 ±(99.9%) 16.921 B/op [Average]
[info]   (min, avg, max) = (0.951, 4.238, 11.566), stdev = 4.394
[info]   CI (99.9%): [≈ 0, 21.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46684.763 ops/s
[info] # Warmup Iteration   2: 150284.050 ops/s
[info] # Warmup Iteration   3: 153706.187 ops/s
[info] # Warmup Iteration   4: 160621.578 ops/s
[info] # Warmup Iteration   5: 159772.272 ops/s
[info] Iteration   1: 159832.895 ops/s
[info]                  ·gc.alloc.rate:               1062.014 MB/sec
[info]                  ·gc.alloc.rate.norm:          10457.807 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6565.940 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 158901.795 ops/s
[info]                  ·gc.alloc.rate:                   1068.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              10580.200 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13222.584 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 159060.783 ops/s
[info]                  ·gc.alloc.rate:               1067.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          10552.694 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13175.755 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 160202.312 ops/s
[info]                  ·gc.alloc.rate:                   1059.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              10404.447 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6570.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 159508.286 ops/s
[info]                  ·gc.alloc.rate:                   1068.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              10541.203 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13204.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.971 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   159501.214 ±(99.9%) 2069.057 ops/s [Average]
[info]   (min, avg, max) = (158901.795, 159501.214, 160202.312), stdev = 537.327
[info]   CI (99.9%): [157432.157, 161570.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1065.128 ±(99.9%) 16.615 MB/sec [Average]
[info]   (min, avg, max) = (1059.075, 1065.128, 1068.338), stdev = 4.315
[info]   CI (99.9%): [1048.513, 1081.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10507.270 ±(99.9%) 282.654 B/op [Average]
[info]   (min, avg, max) = (10404.447, 10507.270, 10580.200), stdev = 73.404
[info]   CI (99.9%): [10224.616, 10789.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1068.463 ±(99.9%) 1408.411 MB/sec [Average]
[info]   (min, avg, max) = (666.786, 1068.463, 1338.249), stdev = 365.760
[info]   CI (99.9%): [≈ 0, 2476.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   10547.825 ±(99.9%) 13989.106 B/op [Average]
[info]   (min, avg, max) = (6565.940, 10547.825, 13222.584), stdev = 3632.926
[info]   CI (99.9%): [≈ 0, 24536.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 6.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.747), stdev = 1.664
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.600 ±(99.9%) 63.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.600, 36.971), stdev = 16.422
[info]   CI (99.9%): [≈ 0, 70.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.817
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178920.893 ops/s
[info] # Warmup Iteration   2: 446813.644 ops/s
[info] # Warmup Iteration   3: 460758.502 ops/s
[info] # Warmup Iteration   4: 458774.239 ops/s
[info] # Warmup Iteration   5: 458802.039 ops/s
[info] Iteration   1: 460127.653 ops/s
[info]                  ·gc.alloc.rate:               525.768 MB/sec
[info]                  ·gc.alloc.rate.norm:          1798.372 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1749.879 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 454659.864 ops/s
[info]                  ·gc.alloc.rate:               518.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          1794.081 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2319.716 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 460291.119 ops/s
[info]                  ·gc.alloc.rate:                   531.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1816.580 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2291.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 460412.725 ops/s
[info]                  ·gc.alloc.rate:      507.850 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 458321.105 ops/s
[info]                  ·gc.alloc.rate:               525.345 MB/sec
[info]                  ·gc.alloc.rate.norm:          1804.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2303.517 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   458762.493 ±(99.9%) 9422.285 ops/s [Average]
[info]   (min, avg, max) = (454659.864, 458762.493, 460412.725), stdev = 2446.938
[info]   CI (99.9%): [449340.208, 468184.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   521.748 ±(99.9%) 34.945 MB/sec [Average]
[info]   (min, avg, max) = (507.850, 521.748, 531.502), stdev = 9.075
[info]   CI (99.9%): [486.803, 556.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1789.827 ±(99.9%) 120.357 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1789.827, 1816.580), stdev = 31.256
[info]   CI (99.9%): [1669.470, 1910.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.584 ±(99.9%) 1117.984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.584, 670.772), stdev = 290.337
[info]   CI (99.9%): [≈ 0, 1622.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1732.909 ±(99.9%) 3843.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1732.909, 2319.716), stdev = 998.141
[info]   CI (99.9%): [≈ 0, 5576.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207608.387 ops/s
[info] # Warmup Iteration   2: 496853.048 ops/s
[info] # Warmup Iteration   3: 507315.884 ops/s
[info] # Warmup Iteration   4: 507070.377 ops/s
[info] # Warmup Iteration   5: 507146.888 ops/s
[info] Iteration   1: 507047.630 ops/s
[info]                  ·gc.alloc.rate:      5.155 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 506137.037 ops/s
[info]                  ·gc.alloc.rate:      5.146 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 506734.898 ops/s
[info]                  ·gc.alloc.rate:      5.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 506985.726 ops/s
[info]                  ·gc.alloc.rate:      5.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 507274.866 ops/s
[info]                  ·gc.alloc.rate:      5.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   506836.031 ±(99.9%) 1676.888 ops/s [Average]
[info]   (min, avg, max) = (506137.037, 506836.031, 507274.866), stdev = 435.482
[info]   CI (99.9%): [505159.144, 508512.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.153 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (5.146, 5.153, 5.157), stdev = 0.004
[info]   CI (99.9%): [5.136, 5.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8421.286 ops/s
[info] # Warmup Iteration   2: 70612.678 ops/s
[info] # Warmup Iteration   3: 72697.393 ops/s
[info] # Warmup Iteration   4: 75783.893 ops/s
[info] # Warmup Iteration   5: 75816.498 ops/s
[info] Iteration   1: 75779.756 ops/s
[info]                  ·gc.alloc.rate:               1358.097 MB/sec
[info]                  ·gc.alloc.rate.norm:          28206.777 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27656.363 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 75822.507 ops/s
[info]                  ·gc.alloc.rate:               1348.881 MB/sec
[info]                  ·gc.alloc.rate.norm:          27991.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27695.990 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 75370.826 ops/s
[info]                  ·gc.alloc.rate:                   1346.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              28124.776 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27917.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.869 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 75570.438 ops/s
[info]                  ·gc.alloc.rate:                   1341.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              27940.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27900.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 75568.074 ops/s
[info]                  ·gc.alloc.rate:                   1363.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              28396.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27954.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   75622.320 ±(99.9%) 704.111 ops/s [Average]
[info]   (min, avg, max) = (75370.826, 75622.320, 75822.507), stdev = 182.855
[info]   CI (99.9%): [74918.209, 76326.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1351.820 ±(99.9%) 34.487 MB/sec [Average]
[info]   (min, avg, max) = (1341.509, 1351.820, 1363.739), stdev = 8.956
[info]   CI (99.9%): [1317.334, 1386.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28132.067 ±(99.9%) 699.280 B/op [Average]
[info]   (min, avg, max) = (27940.592, 28132.067, 28396.484), stdev = 181.601
[info]   CI (99.9%): [27432.787, 28831.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1337.052 ±(99.9%) 16.330 MB/sec [Average]
[info]   (min, avg, max) = (1331.595, 1337.052, 1342.528), stdev = 4.241
[info]   CI (99.9%): [1320.722, 1353.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27824.911 ±(99.9%) 531.094 B/op [Average]
[info]   (min, avg, max) = (27656.363, 27824.911, 27954.813), stdev = 137.923
[info]   CI (99.9%): [27293.817, 28356.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.162 ±(99.9%) 1.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.749), stdev = 0.329
[info]   CI (99.9%): [≈ 0, 1.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.382 ±(99.9%) 26.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.382, 15.608), stdev = 6.844
[info]   CI (99.9%): [≈ 0, 29.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119176.908 ops/s
[info] # Warmup Iteration   2: 2604102.079 ops/s
[info] # Warmup Iteration   3: 2801779.603 ops/s
[info] # Warmup Iteration   4: 2777358.513 ops/s
[info] # Warmup Iteration   5: 2832377.943 ops/s
[info] Iteration   1: 2844943.927 ops/s
[info]                  ·gc.alloc.rate:               3949.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3348.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1852.506 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2840521.552 ops/s
[info]                  ·gc.alloc.rate:                   3971.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              2200.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4034.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2235.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2832474.941 ops/s
[info]                  ·gc.alloc.rate:                   3961.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              2200.813 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4051.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2250.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2849709.708 ops/s
[info]                  ·gc.alloc.rate:               3957.723 MB/sec
[info]                  ·gc.alloc.rate.norm:          2185.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3386.644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1870.200 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 2835215.022 ops/s
[info]                  ·gc.alloc.rate:                   3966.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              2202.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2260.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2840573.030 ±(99.9%) 27014.509 ops/s [Average]
[info]   (min, avg, max) = (2832474.941, 2840573.030, 2849709.708), stdev = 7015.582
[info]   CI (99.9%): [2813558.521, 2867587.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3961.344 ±(99.9%) 31.942 MB/sec [Average]
[info]   (min, avg, max) = (3949.735, 3961.344, 3971.291), stdev = 8.295
[info]   CI (99.9%): [3929.402, 3993.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2194.732 ±(99.9%) 33.397 B/op [Average]
[info]   (min, avg, max) = (2184.956, 2194.732, 2202.056), stdev = 8.673
[info]   CI (99.9%): [2161.335, 2228.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3778.551 ±(99.9%) 1445.979 MB/sec [Average]
[info]   (min, avg, max) = (3348.767, 3778.551, 4071.517), stdev = 375.516
[info]   CI (99.9%): [2332.572, 5224.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2093.817 ±(99.9%) 818.220 B/op [Average]
[info]   (min, avg, max) = (1852.506, 2093.817, 2260.257), stdev = 212.489
[info]   CI (99.9%): [1275.597, 2912.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.677 ops/s
[info] # Warmup Iteration   2: 775833.145 ops/s
[info] # Warmup Iteration   3: 872353.004 ops/s
[info] # Warmup Iteration   4: 898870.441 ops/s
[info] # Warmup Iteration   5: 900310.377 ops/s
[info] Iteration   1: 899032.898 ops/s
[info]                  ·gc.alloc.rate:               521.420 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1164.981 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 900478.146 ops/s
[info]                  ·gc.alloc.rate:      521.882 MB/sec
[info]                  ·gc.alloc.rate.norm: 912.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 902508.175 ops/s
[info]                  ·gc.alloc.rate:               522.964 MB/sec
[info]                  ·gc.alloc.rate.norm:          912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1160.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 900720.441 ops/s
[info]                  ·gc.alloc.rate:                   522.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.342 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1163.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 854970.098 ops/s
[info]                  ·gc.alloc.rate:               508.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          935.879 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1226.215 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   891541.952 ±(99.9%) 78867.098 ops/s [Average]
[info]   (min, avg, max) = (854970.098, 891541.952, 902508.175), stdev = 20481.535
[info]   CI (99.9%): [812674.854, 970409.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   519.386 ±(99.9%) 23.750 MB/sec [Average]
[info]   (min, avg, max) = (508.400, 519.386, 522.964), stdev = 6.168
[info]   CI (99.9%): [495.637, 543.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   916.991 ±(99.9%) 40.675 B/op [Average]
[info]   (min, avg, max) = (912.000, 916.991, 935.879), stdev = 10.563
[info]   CI (99.9%): [876.316, 957.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   532.677 ±(99.9%) 1146.628 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 532.677, 666.277), stdev = 297.776
[info]   CI (99.9%): [≈ 0, 1679.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   943.124 ±(99.9%) 2032.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 943.124, 1226.215), stdev = 527.932
[info]   CI (99.9%): [≈ 0, 2976.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.005 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23969.876 ops/s
[info] # Warmup Iteration   2: 211557.916 ops/s
[info] # Warmup Iteration   3: 328649.485 ops/s
[info] # Warmup Iteration   4: 332440.462 ops/s
[info] # Warmup Iteration   5: 339216.967 ops/s
[info] Iteration   1: 339144.568 ops/s
[info]                  ·gc.alloc.rate:               803.428 MB/sec
[info]                  ·gc.alloc.rate.norm:          3728.294 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3092.848 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 337046.725 ops/s
[info]                  ·gc.alloc.rate:               806.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          3764.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3113.800 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 336659.614 ops/s
[info]                  ·gc.alloc.rate:                   798.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              3733.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3117.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 334091.050 ops/s
[info]                  ·gc.alloc.rate:                   821.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              3871.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6288.914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 330575.313 ops/s
[info]                  ·gc.alloc.rate:                   772.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              3678.863 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3181.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.198 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   335503.454 ±(99.9%) 12662.935 ops/s [Average]
[info]   (min, avg, max) = (330575.313, 335503.454, 339144.568), stdev = 3288.524
[info]   CI (99.9%): [322840.519, 348166.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   800.617 ±(99.9%) 68.502 MB/sec [Average]
[info]   (min, avg, max) = (772.844, 800.617, 821.873), stdev = 17.790
[info]   CI (99.9%): [732.115, 869.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3755.455 ±(99.9%) 276.835 B/op [Average]
[info]   (min, avg, max) = (3678.863, 3755.455, 3871.770), stdev = 71.893
[info]   CI (99.9%): [3478.620, 4032.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   800.685 ±(99.9%) 1150.089 MB/sec [Average]
[info]   (min, avg, max) = (666.493, 800.685, 1334.968), stdev = 298.674
[info]   CI (99.9%): [≈ 0, 1950.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3758.785 ±(99.9%) 5447.775 B/op [Average]
[info]   (min, avg, max) = (3092.848, 3758.785, 6288.914), stdev = 1414.770
[info]   CI (99.9%): [≈ 0, 9206.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.015 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.069 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.069, 0.198), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272371.638 ops/s
[info] # Warmup Iteration   2: 678778.030 ops/s
[info] # Warmup Iteration   3: 761537.598 ops/s
[info] # Warmup Iteration   4: 764905.456 ops/s
[info] # Warmup Iteration   5: 762492.041 ops/s
[info] Iteration   1: 765389.535 ops/s
[info]                  ·gc.alloc.rate:               703.401 MB/sec
[info]                  ·gc.alloc.rate.norm:          1446.428 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1380.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 767072.245 ops/s
[info]                  ·gc.alloc.rate:               699.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          1434.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1377.709 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 763907.750 ops/s
[info]                  ·gc.alloc.rate:                   696.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              1435.449 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1384.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 763604.280 ops/s
[info]                  ·gc.alloc.rate:               697.286 MB/sec
[info]                  ·gc.alloc.rate.norm:          1436.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1385.371 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 765580.372 ops/s
[info]                  ·gc.alloc.rate:               701.078 MB/sec
[info]                  ·gc.alloc.rate.norm:          1441.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1383.122 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   765110.836 ±(99.9%) 5398.594 ops/s [Average]
[info]   (min, avg, max) = (763604.280, 765110.836, 767072.245), stdev = 1401.998
[info]   CI (99.9%): [759712.242, 770509.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   699.608 ±(99.9%) 10.574 MB/sec [Average]
[info]   (min, avg, max) = (696.742, 699.608, 703.401), stdev = 2.746
[info]   CI (99.9%): [689.034, 710.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1438.991 ±(99.9%) 18.673 B/op [Average]
[info]   (min, avg, max) = (1434.918, 1438.991, 1446.428), stdev = 4.849
[info]   CI (99.9%): [1420.318, 1457.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672.071 ±(99.9%) 2.055 MB/sec [Average]
[info]   (min, avg, max) = (671.457, 672.071, 672.793), stdev = 0.534
[info]   CI (99.9%): [670.016, 674.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1382.355 ±(99.9%) 12.180 B/op [Average]
[info]   (min, avg, max) = (1377.709, 1382.355, 1385.371), stdev = 3.163
[info]   CI (99.9%): [1370.175, 1394.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1003493.140 ops/s
[info] # Warmup Iteration   2: 2474399.007 ops/s
[info] # Warmup Iteration   3: 3362880.614 ops/s
[info] # Warmup Iteration   4: 3416505.506 ops/s
[info] # Warmup Iteration   5: 3419479.101 ops/s
[info] Iteration   1: 3419686.386 ops/s
[info]                  ·gc.alloc.rate:                   2063.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              949.882 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     930.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3408581.862 ops/s
[info]                  ·gc.alloc.rate:                   2070.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     933.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3436942.384 ops/s
[info]                  ·gc.alloc.rate:                   2075.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              950.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3441282.598 ops/s
[info]                  ·gc.alloc.rate:               2092.141 MB/sec
[info]                  ·gc.alloc.rate.norm:          956.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 923.141 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3457692.219 ops/s
[info]                  ·gc.alloc.rate:                   2101.643 MB/sec
[info]                  ·gc.alloc.rate.norm:              956.607 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3432837.090 ±(99.9%) 73747.989 ops/s [Average]
[info]   (min, avg, max) = (3408581.862, 3432837.090, 3457692.219), stdev = 19152.119
[info]   CI (99.9%): [3359089.100, 3506585.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2080.756 ±(99.9%) 60.309 MB/sec [Average]
[info]   (min, avg, max) = (2063.851, 2080.756, 2101.643), stdev = 15.662
[info]   CI (99.9%): [2020.447, 2141.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   953.933 ±(99.9%) 13.380 B/op [Average]
[info]   (min, avg, max) = (949.882, 953.933, 956.677), stdev = 3.475
[info]   CI (99.9%): [940.553, 967.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2020.258 ±(99.9%) 7.034 MB/sec [Average]
[info]   (min, avg, max) = (2018.458, 2020.258, 2022.738), stdev = 1.827
[info]   CI (99.9%): [2013.223, 2027.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   926.227 ±(99.9%) 22.338 B/op [Average]
[info]   (min, avg, max) = (919.340, 926.227, 933.404), stdev = 5.801
[info]   CI (99.9%): [903.889, 948.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.545 ±(99.9%) 3.352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.545, 2.061), stdev = 0.871
[info]   CI (99.9%): [≈ 0, 3.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 1.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.251, 0.949), stdev = 0.401
[info]   CI (99.9%): [≈ 0, 1.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.483
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1690960.114 ops/s
[info] # Warmup Iteration   2: 4564677.971 ops/s
[info] # Warmup Iteration   3: 7322883.840 ops/s
[info] # Warmup Iteration   4: 7593357.153 ops/s
[info] # Warmup Iteration   5: 7533157.061 ops/s
[info] Iteration   1: 7597963.285 ops/s
[info]                  ·gc.alloc.rate:               837.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          173.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139.022 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 7201189.917 ops/s
[info]                  ·gc.alloc.rate:               799.035 MB/sec
[info]                  ·gc.alloc.rate.norm:          174.588 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 146.904 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7588453.679 ops/s
[info]                  ·gc.alloc.rate:                   828.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              171.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7612893.855 ops/s
[info]                  ·gc.alloc.rate:               831.179 MB/sec
[info]                  ·gc.alloc.rate.norm:          171.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139.096 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 7549446.693 ops/s
[info]                  ·gc.alloc.rate:               850.549 MB/sec
[info]                  ·gc.alloc.rate.norm:          177.270 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346.669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280.671 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7509989.486 ±(99.9%) 670828.626 ops/s [Average]
[info]   (min, avg, max) = (7201189.917, 7509989.486, 7612893.855), stdev = 174212.064
[info]   CI (99.9%): [6839160.860, 8180818.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   829.371 ±(99.9%) 72.921 MB/sec [Average]
[info]   (min, avg, max) = (799.035, 829.371, 850.549), stdev = 18.937
[info]   CI (99.9%): [756.450, 902.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   173.772 ±(99.9%) 8.752 B/op [Average]
[info]   (min, avg, max) = (171.770, 173.772, 177.270), stdev = 2.273
[info]   CI (99.9%): [165.021, 182.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   807.150 ±(99.9%) 1161.357 MB/sec [Average]
[info]   (min, avg, max) = (671.450, 807.150, 1346.669), stdev = 301.601
[info]   CI (99.9%): [≈ 0, 1968.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   169.019 ±(99.9%) 240.684 B/op [Average]
[info]   (min, avg, max) = (139.022, 169.019, 280.671), stdev = 62.505
[info]   CI (99.9%): [≈ 0, 409.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 526.798 ops/s
[info] # Warmup Iteration   2: 46110.818 ops/s
[info] # Warmup Iteration   3: 173695.625 ops/s
[info] # Warmup Iteration   4: 213740.513 ops/s
[info] # Warmup Iteration   5: 236977.606 ops/s
[info] Iteration   1: 237338.026 ops/s
[info]                  ·gc.alloc.rate:                   2103.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              13947.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13305.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.138 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 233542.295 ops/s
[info]                  ·gc.alloc.rate:                   2053.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              13836.676 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13548.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.734 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 230389.416 ops/s
[info]                  ·gc.alloc.rate:                   2047.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              13987.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13747.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.262 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 234373.975 ops/s
[info]                  ·gc.alloc.rate:                   2068.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              13885.648 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13522.654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 233887.183 ops/s
[info]                  ·gc.alloc.rate:               2077.174 MB/sec
[info]                  ·gc.alloc.rate.norm:          13973.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016.653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13566.785 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   233906.179 ±(99.9%) 9529.236 ops/s [Average]
[info]   (min, avg, max) = (230389.416, 233906.179, 237338.026), stdev = 2474.712
[info]   CI (99.9%): [224376.943, 243435.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2069.969 ±(99.9%) 84.907 MB/sec [Average]
[info]   (min, avg, max) = (2047.653, 2069.969, 2103.384), stdev = 22.050
[info]   CI (99.9%): [1985.062, 2154.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13926.273 ±(99.9%) 244.662 B/op [Average]
[info]   (min, avg, max) = (13836.676, 13926.273, 13987.436), stdev = 63.538
[info]   CI (99.9%): [13681.611, 14170.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2012.122 ±(99.9%) 14.619 MB/sec [Average]
[info]   (min, avg, max) = (2006.599, 2012.122, 2016.653), stdev = 3.796
[info]   CI (99.9%): [1997.503, 2026.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13538.304 ±(99.9%) 605.522 B/op [Average]
[info]   (min, avg, max) = (13305.883, 13538.304, 13747.415), stdev = 157.252
[info]   CI (99.9%): [12932.781, 14143.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.371 ±(99.9%) 1.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 0.999), stdev = 0.477
[info]   CI (99.9%): [≈ 0, 2.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.511 ±(99.9%) 12.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.511, 6.734), stdev = 3.229
[info]   CI (99.9%): [≈ 0, 14.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691915.270 ops/s
[info] # Warmup Iteration   2: 1507891.482 ops/s
[info] # Warmup Iteration   3: 1577437.625 ops/s
[info] # Warmup Iteration   4: 1577593.517 ops/s
[info] # Warmup Iteration   5: 1557211.180 ops/s
[info] Iteration   1: 1581564.432 ops/s
[info]                  ·gc.alloc.rate:      88.467 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1581787.491 ops/s
[info]                  ·gc.alloc.rate:      88.522 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.078 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1580970.231 ops/s
[info]                  ·gc.alloc.rate:      88.430 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1582478.604 ops/s
[info]                  ·gc.alloc.rate:      88.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1573520.139 ops/s
[info]                  ·gc.alloc.rate:                   100.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.589 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1580064.179 ±(99.9%) 14238.977 ops/s [Average]
[info]   (min, avg, max) = (1573520.139, 1580064.179, 1582478.604), stdev = 3697.817
[info]   CI (99.9%): [1565825.202, 1594303.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   90.892 ±(99.9%) 20.818 MB/sec [Average]
[info]   (min, avg, max) = (88.430, 90.892, 100.563), stdev = 5.406
[info]   CI (99.9%): [70.075, 111.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   90.534 ±(99.9%) 21.646 B/op [Average]
[info]   (min, avg, max) = (88.000, 90.534, 100.589), stdev = 5.621
[info]   CI (99.9%): [68.888, 112.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.320 ±(99.9%) 881.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.320, 511.598), stdev = 228.794
[info]   CI (99.9%): [≈ 0, 983.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   102.346 ±(99.9%) 881.230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.346, 511.730), stdev = 228.853
[info]   CI (99.9%): [≈ 0, 983.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.413), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.414), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5413.653 ops/s
[info] # Warmup Iteration   2: 63970.011 ops/s
[info] # Warmup Iteration   3: 73079.610 ops/s
[info] # Warmup Iteration   4: 74680.011 ops/s
[info] # Warmup Iteration   5: 74527.591 ops/s
[info] Iteration   1: 75548.044 ops/s
[info]                  ·gc.alloc.rate:                   3320.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              69182.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3362.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70052.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 75645.371 ops/s
[info]                  ·gc.alloc.rate:                   3352.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              69745.502 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3372.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70170.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.433 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 75862.413 ops/s
[info]                  ·gc.alloc.rate:               3363.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          69760.381 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3381.839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70151.065 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 75853.083 ops/s
[info]                  ·gc.alloc.rate:               3335.520 MB/sec
[info]                  ·gc.alloc.rate.norm:          69205.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2710.624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56240.107 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 74326.252 ops/s
[info]                  ·gc.alloc.rate:               3298.703 MB/sec
[info]                  ·gc.alloc.rate.norm:          69827.397 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3394.176 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71848.389 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   75447.033 ±(99.9%) 2467.950 ops/s [Average]
[info]   (min, avg, max) = (74326.252, 75447.033, 75862.413), stdev = 640.919
[info]   CI (99.9%): [72979.082, 77914.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3334.059 ±(99.9%) 97.937 MB/sec [Average]
[info]   (min, avg, max) = (3298.703, 3334.059, 3363.005), stdev = 25.434
[info]   CI (99.9%): [3236.122, 3431.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   69544.219 ±(99.9%) 1237.511 B/op [Average]
[info]   (min, avg, max) = (69182.339, 69544.219, 69827.397), stdev = 321.378
[info]   CI (99.9%): [68306.708, 70781.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3244.375 ±(99.9%) 1149.810 MB/sec [Average]
[info]   (min, avg, max) = (2710.624, 3244.375, 3394.176), stdev = 298.602
[info]   CI (99.9%): [2094.564, 4394.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67692.394 ±(99.9%) 24819.520 B/op [Average]
[info]   (min, avg, max) = (56240.107, 67692.394, 71848.389), stdev = 6445.551
[info]   CI (99.9%): [42872.874, 92511.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.673 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.396), stdev = 0.175
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.735 ±(99.9%) 14.021 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.735, 8.240), stdev = 3.641
[info]   CI (99.9%): [≈ 0, 15.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482630.009 ops/s
[info] # Warmup Iteration   2: 1502093.414 ops/s
[info] # Warmup Iteration   3: 1597110.395 ops/s
[info] # Warmup Iteration   4: 1604387.266 ops/s
[info] # Warmup Iteration   5: 1602974.704 ops/s
[info] Iteration   1: 1603997.546 ops/s
[info]                  ·gc.alloc.rate:                   863.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              847.086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1588151.557 ops/s
[info]                  ·gc.alloc.rate:               857.821 MB/sec
[info]                  ·gc.alloc.rate.norm:          850.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 661.784 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1603016.447 ops/s
[info]                  ·gc.alloc.rate:                   855.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              839.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1591653.260 ops/s
[info]                  ·gc.alloc.rate:                   865.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              855.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1322.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1606086.041 ops/s
[info]                  ·gc.alloc.rate:               867.150 MB/sec
[info]                  ·gc.alloc.rate.norm:          849.770 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 655.395 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1598580.970 ±(99.9%) 31170.283 ops/s [Average]
[info]   (min, avg, max) = (1588151.557, 1598580.970, 1606086.041), stdev = 8094.824
[info]   CI (99.9%): [1567410.687, 1629751.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   861.824 ±(99.9%) 19.578 MB/sec [Average]
[info]   (min, avg, max) = (855.264, 861.824, 867.150), stdev = 5.084
[info]   CI (99.9%): [842.246, 881.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   848.463 ±(99.9%) 22.448 B/op [Average]
[info]   (min, avg, max) = (839.677, 848.463, 855.712), stdev = 5.830
[info]   CI (99.9%): [826.015, 870.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   802.098 ±(99.9%) 1152.506 MB/sec [Average]
[info]   (min, avg, max) = (667.815, 802.098, 1337.505), stdev = 299.302
[info]   CI (99.9%): [≈ 0, 1954.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   790.226 ±(99.9%) 1145.519 B/op [Average]
[info]   (min, avg, max) = (655.260, 790.226, 1322.366), stdev = 297.488
[info]   CI (99.9%): [≈ 0, 1935.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.041), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:22:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 947123.290 ops/s
[info] # Warmup Iteration   2: 1686932.278 ops/s
[info] # Warmup Iteration   3: 1722167.953 ops/s
[info] # Warmup Iteration   4: 1724223.041 ops/s
[info] # Warmup Iteration   5: 1723518.367 ops/s
[info] Iteration   1: 1719540.342 ops/s
[info]                  ·gc.alloc.rate:               499.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          457.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1722720.248 ops/s
[info]                  ·gc.alloc.rate:               508.021 MB/sec
[info]                  ·gc.alloc.rate.norm:          464.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.568 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1724647.674 ops/s
[info]                  ·gc.alloc.rate:               506.352 MB/sec
[info]                  ·gc.alloc.rate.norm:          462.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 611.876 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1726860.179 ops/s
[info]                  ·gc.alloc.rate:      482.763 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1723625.801 ops/s
[info]                  ·gc.alloc.rate:               500.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          456.943 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.509 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1723478.849 ±(99.9%) 10351.798 ops/s [Average]
[info]   (min, avg, max) = (1719540.342, 1723478.849, 1726860.179), stdev = 2688.329
[info]   CI (99.9%): [1713127.051, 1733830.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   499.433 ±(99.9%) 38.530 MB/sec [Average]
[info]   (min, avg, max) = (482.763, 499.433, 508.021), stdev = 10.006
[info]   CI (99.9%): [460.903, 537.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   456.077 ±(99.9%) 36.576 B/op [Average]
[info]   (min, avg, max) = (440.000, 456.077, 464.096), stdev = 9.499
[info]   CI (99.9%): [419.501, 492.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.694 ±(99.9%) 1118.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.694, 670.777), stdev = 290.409
[info]   CI (99.9%): [≈ 0, 1622.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   461.045 ±(99.9%) 1021.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 461.045, 612.568), stdev = 265.172
[info]   CI (99.9%): [≈ 0, 1482.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 851764.130 ops/s
[info] # Warmup Iteration   2: 1719177.361 ops/s
[info] # Warmup Iteration   3: 1696040.738 ops/s
[info] # Warmup Iteration   4: 1806994.131 ops/s
[info] # Warmup Iteration   5: 1793604.163 ops/s
[info] Iteration   1: 1807829.971 ops/s
[info]                  ·gc.alloc.rate:      18.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1807530.081 ops/s
[info]                  ·gc.alloc.rate:      18.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1807702.444 ops/s
[info]                  ·gc.alloc.rate:      18.379 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1808253.849 ops/s
[info]                  ·gc.alloc.rate:      18.384 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1807488.196 ops/s
[info]                  ·gc.alloc.rate:      18.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1807760.908 ±(99.9%) 1185.022 ops/s [Average]
[info]   (min, avg, max) = (1807488.196, 1807760.908, 1808253.849), stdev = 307.747
[info]   CI (99.9%): [1806575.886, 1808945.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   18.380 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (18.375, 18.380, 18.384), stdev = 0.004
[info]   CI (99.9%): [18.365, 18.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9109.440 ops/s
[info] # Warmup Iteration   2: 45429.457 ops/s
[info] # Warmup Iteration   3: 51790.388 ops/s
[info] # Warmup Iteration   4: 52631.336 ops/s
[info] # Warmup Iteration   5: 52524.106 ops/s
[info] Iteration   1: 52099.174 ops/s
[info]                  ·gc.alloc.rate:                   2237.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              67597.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80836.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 52677.780 ops/s
[info]                  ·gc.alloc.rate:                   2246.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              67103.461 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60173.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.866 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 52692.758 ops/s
[info]                  ·gc.alloc.rate:                   2263.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              67572.468 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60275.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.731 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52759.334 ops/s
[info]                  ·gc.alloc.rate:               2279.516 MB/sec
[info]                  ·gc.alloc.rate.norm:          67980.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60378.218 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 52627.381 ops/s
[info]                  ·gc.alloc.rate:               2301.514 MB/sec
[info]                  ·gc.alloc.rate.norm:          68802.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80853.549 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   52571.286 ±(99.9%) 1032.329 ops/s [Average]
[info]   (min, avg, max) = (52099.174, 52571.286, 52759.334), stdev = 268.093
[info]   CI (99.9%): [51538.956, 53603.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2265.671 ±(99.9%) 98.923 MB/sec [Average]
[info]   (min, avg, max) = (2237.575, 2265.671, 2301.514), stdev = 25.690
[info]   CI (99.9%): [2166.749, 2364.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   67811.314 ±(99.9%) 2446.335 B/op [Average]
[info]   (min, avg, max) = (67103.461, 67811.314, 68802.268), stdev = 635.305
[info]   CI (99.9%): [65364.979, 70257.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2287.678 ±(99.9%) 1415.589 MB/sec [Average]
[info]   (min, avg, max) = (2014.484, 2287.678, 2704.643), stdev = 367.624
[info]   CI (99.9%): [872.088, 3703.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68503.499 ±(99.9%) 43382.504 B/op [Average]
[info]   (min, avg, max) = (60173.658, 68503.499, 80853.549), stdev = 11266.299
[info]   CI (99.9%): [25120.995, 111886.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.371 ±(99.9%) 5.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.371, 3.731), stdev = 1.548
[info]   CI (99.9%): [≈ 0, 7.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149416.976 ops/s
[info] # Warmup Iteration   2: 263642.655 ops/s
[info] # Warmup Iteration   3: 266015.865 ops/s
[info] # Warmup Iteration   4: 273011.625 ops/s
[info] # Warmup Iteration   5: 274118.974 ops/s
[info] Iteration   1: 272923.805 ops/s
[info]                  ·gc.alloc.rate:               1103.867 MB/sec
[info]                  ·gc.alloc.rate.norm:          6365.663 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7747.824 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 274394.542 ops/s
[info]                  ·gc.alloc.rate:               1089.104 MB/sec
[info]                  ·gc.alloc.rate.norm:          6246.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3854.975 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 272609.021 ops/s
[info]                  ·gc.alloc.rate:                   1096.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              6329.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7764.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 272469.428 ops/s
[info]                  ·gc.alloc.rate:               1106.405 MB/sec
[info]                  ·gc.alloc.rate.norm:          6390.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7772.930 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 274236.531 ops/s
[info]                  ·gc.alloc.rate:                   1087.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              6242.893 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3863.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   273326.665 ±(99.9%) 3539.861 ops/s [Average]
[info]   (min, avg, max) = (272469.428, 273326.665, 274394.542), stdev = 919.291
[info]   CI (99.9%): [269786.804, 276866.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1096.695 ±(99.9%) 32.367 MB/sec [Average]
[info]   (min, avg, max) = (1087.801, 1096.695, 1106.405), stdev = 8.406
[info]   CI (99.9%): [1064.328, 1129.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6314.938 ±(99.9%) 261.694 B/op [Average]
[info]   (min, avg, max) = (6242.893, 6314.938, 6390.978), stdev = 67.961
[info]   CI (99.9%): [6053.244, 6576.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.886 ±(99.9%) 1417.414 MB/sec [Average]
[info]   (min, avg, max) = (672.169, 1075.886, 1345.649), stdev = 368.098
[info]   CI (99.9%): [≈ 0, 2493.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6200.644 ±(99.9%) 8231.039 B/op [Average]
[info]   (min, avg, max) = (3854.975, 6200.644, 7772.930), stdev = 2137.575
[info]   CI (99.9%): [≈ 0, 14431.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.558 ±(99.9%) 4.715 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.748), stdev = 1.224
[info]   CI (99.9%): [≈ 0, 5.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.202 ±(99.9%) 27.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.202, 15.770), stdev = 7.026
[info]   CI (99.9%): [≈ 0, 30.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1183.571 ops/s
[info] # Warmup Iteration   2: 32711.344 ops/s
[info] # Warmup Iteration   3: 40859.985 ops/s
[info] # Warmup Iteration   4: 40636.351 ops/s
[info] # Warmup Iteration   5: 41005.391 ops/s
[info] Iteration   1: 41110.872 ops/s
[info]                  ·gc.alloc.rate:               2032.823 MB/sec
[info]                  ·gc.alloc.rate.norm:          77822.798 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 76823.659 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 40981.276 ops/s
[info]                  ·gc.alloc.rate:                   2050.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              78726.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77244.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.187 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 41083.924 ops/s
[info]                  ·gc.alloc.rate:                   2043.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              78248.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77196.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.797 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 40994.052 ops/s
[info]                  ·gc.alloc.rate:                   2025.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              77751.780 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77488.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 41083.979 ops/s
[info]                  ·gc.alloc.rate:               2056.759 MB/sec
[info]                  ·gc.alloc.rate.norm:          78788.956 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 77461.061 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   41050.821 ±(99.9%) 226.672 ops/s [Average]
[info]   (min, avg, max) = (40981.276, 41050.821, 41110.872), stdev = 58.866
[info]   CI (99.9%): [40824.149, 41277.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2041.763 ±(99.9%) 48.955 MB/sec [Average]
[info]   (min, avg, max) = (2025.399, 2041.763, 2056.759), stdev = 12.714
[info]   CI (99.9%): [1992.808, 2090.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78267.621 ±(99.9%) 1873.350 B/op [Average]
[info]   (min, avg, max) = (77751.780, 78267.621, 78788.956), stdev = 486.503
[info]   CI (99.9%): [76394.271, 80140.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.030 ±(99.9%) 23.170 MB/sec [Average]
[info]   (min, avg, max) = (2006.724, 2015.030, 2022.095), stdev = 6.017
[info]   CI (99.9%): [1991.860, 2038.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77242.930 ±(99.9%) 1029.317 B/op [Average]
[info]   (min, avg, max) = (76823.659, 77242.930, 77488.544), stdev = 267.310
[info]   CI (99.9%): [76213.613, 78272.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.206 ±(99.9%) 1.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.206, 0.968), stdev = 0.426
[info]   CI (99.9%): [≈ 0, 1.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.916 ±(99.9%) 63.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.916, 37.187), stdev = 16.376
[info]   CI (99.9%): [≈ 0, 70.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32348.677 ops/s
[info] # Warmup Iteration   2: 102878.441 ops/s
[info] # Warmup Iteration   3: 110729.915 ops/s
[info] # Warmup Iteration   4: 111170.441 ops/s
[info] # Warmup Iteration   5: 110470.786 ops/s
[info] Iteration   1: 110769.661 ops/s
[info]                  ·gc.alloc.rate:                   1120.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              15918.464 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18972.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.296 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 111859.211 ops/s
[info]                  ·gc.alloc.rate:               1108.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          15592.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9395.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 111117.778 ops/s
[info]                  ·gc.alloc.rate:               1115.923 MB/sec
[info]                  ·gc.alloc.rate.norm:          15805.758 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18936.016 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     8.000 ms
[info] Iteration   4: 110916.927 ops/s
[info]                  ·gc.alloc.rate:                   1123.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              15944.730 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18989.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 111575.052 ops/s
[info]                  ·gc.alloc.rate:                   1104.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              15570.565 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9443.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   111247.726 ±(99.9%) 1760.293 ops/s [Average]
[info]   (min, avg, max) = (110769.661, 111247.726, 111859.211), stdev = 457.143
[info]   CI (99.9%): [109487.433, 113008.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1114.572 ±(99.9%) 31.139 MB/sec [Average]
[info]   (min, avg, max) = (1104.123, 1114.572, 1123.697), stdev = 8.087
[info]   CI (99.9%): [1083.433, 1145.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15766.496 ±(99.9%) 680.448 B/op [Average]
[info]   (min, avg, max) = (15570.565, 15766.496, 15944.730), stdev = 176.710
[info]   CI (99.9%): [15086.048, 16446.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1069.640 ±(99.9%) 1408.783 MB/sec [Average]
[info]   (min, avg, max) = (668.097, 1069.640, 1338.244), stdev = 365.856
[info]   CI (99.9%): [≈ 0, 2478.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15147.302 ±(99.9%) 20134.117 B/op [Average]
[info]   (min, avg, max) = (9395.758, 15147.302, 18989.059), stdev = 5228.766
[info]   CI (99.9%): [≈ 0, 35281.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.725 ±(99.9%) 6.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.581), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.219 ±(99.9%) 86.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.219, 50.505), stdev = 22.521
[info]   CI (99.9%): [≈ 0, 96.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181722.547 ops/s
[info] # Warmup Iteration   2: 328621.667 ops/s
[info] # Warmup Iteration   3: 335992.638 ops/s
[info] # Warmup Iteration   4: 333952.635 ops/s
[info] # Warmup Iteration   5: 335991.491 ops/s
[info] Iteration   1: 330299.697 ops/s
[info]                  ·gc.alloc.rate:               463.497 MB/sec
[info]                  ·gc.alloc.rate.norm:          2208.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2437.619 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 332839.035 ops/s
[info]                  ·gc.alloc.rate:               467.254 MB/sec
[info]                  ·gc.alloc.rate.norm:          2208.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3170.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 336821.708 ops/s
[info]                  ·gc.alloc.rate:      453.709 MB/sec
[info]                  ·gc.alloc.rate.norm: 2120.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335529.009 ops/s
[info]                  ·gc.alloc.rate:               467.115 MB/sec
[info]                  ·gc.alloc.rate.norm:          2191.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3144.884 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 333305.490 ops/s
[info]                  ·gc.alloc.rate:                   473.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              2236.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3167.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   333758.988 ±(99.9%) 9728.479 ops/s [Average]
[info]   (min, avg, max) = (330299.697, 333758.988, 336821.708), stdev = 2526.455
[info]   CI (99.9%): [324030.509, 343487.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   465.042 ±(99.9%) 28.155 MB/sec [Average]
[info]   (min, avg, max) = (453.709, 465.042, 473.635), stdev = 7.312
[info]   CI (99.9%): [436.886, 493.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2193.077 ±(99.9%) 169.285 B/op [Average]
[info]   (min, avg, max) = (2120.001, 2193.077, 2236.637), stdev = 43.963
[info]   CI (99.9%): [2023.792, 2362.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   504.673 ±(99.9%) 1118.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 504.673, 670.771), stdev = 290.402
[info]   CI (99.9%): [≈ 0, 1622.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2384.091 ±(99.9%) 5271.887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2384.091, 3170.382), stdev = 1369.092
[info]   CI (99.9%): [≈ 0, 7655.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:20:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202183.238 ops/s
[info] # Warmup Iteration   2: 354875.939 ops/s
[info] # Warmup Iteration   3: 368470.958 ops/s
[info] # Warmup Iteration   4: 368296.359 ops/s
[info] # Warmup Iteration   5: 368465.303 ops/s
[info] Iteration   1: 368566.013 ops/s
[info]                  ·gc.alloc.rate:      3.748 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 367974.659 ops/s
[info]                  ·gc.alloc.rate:      4.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 20.023 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 368452.882 ops/s
[info]                  ·gc.alloc.rate:      3.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368524.261 ops/s
[info]                  ·gc.alloc.rate:      3.747 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 368413.289 ops/s
[info]                  ·gc.alloc.rate:      3.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   368386.221 ±(99.9%) 915.166 ops/s [Average]
[info]   (min, avg, max) = (367974.659, 368386.221, 368566.013), stdev = 237.666
[info]   CI (99.9%): [367471.055, 369301.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   3.934 ±(99.9%) 1.611 MB/sec [Average]
[info]   (min, avg, max) = (3.746, 3.934, 4.682), stdev = 0.418
[info]   CI (99.9%): [2.323, 5.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.806 ±(99.9%) 6.926 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.806, 20.023), stdev = 1.799
[info]   CI (99.9%): [9.879, 23.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12157.584 ops/s
[info] # Warmup Iteration   2: 49318.597 ops/s
[info] # Warmup Iteration   3: 56099.642 ops/s
[info] # Warmup Iteration   4: 58017.495 ops/s
[info] # Warmup Iteration   5: 57909.369 ops/s
[info] Iteration   1: 57829.398 ops/s
[info]                  ·gc.alloc.rate:                   1384.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              37692.252 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36347.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 57627.645 ops/s
[info]                  ·gc.alloc.rate:               1388.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          37931.794 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36504.403 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 58084.629 ops/s
[info]                  ·gc.alloc.rate:                   1388.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              37607.890 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36243.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 58355.802 ops/s
[info]                  ·gc.alloc.rate:                   1420.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              38303.276 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36045.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58065.853 ops/s
[info]                  ·gc.alloc.rate:               1426.876 MB/sec
[info]                  ·gc.alloc.rate.norm:          38673.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1333.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36147.209 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   57992.665 ±(99.9%) 1064.300 ops/s [Average]
[info]   (min, avg, max) = (57627.645, 57992.665, 58355.802), stdev = 276.395
[info]   CI (99.9%): [56928.365, 59056.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1401.889 ±(99.9%) 77.225 MB/sec [Average]
[info]   (min, avg, max) = (1384.980, 1401.889, 1426.876), stdev = 20.055
[info]   CI (99.9%): [1324.664, 1479.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38041.833 ±(99.9%) 1711.858 B/op [Average]
[info]   (min, avg, max) = (37607.890, 38041.833, 38673.953), stdev = 444.564
[info]   CI (99.9%): [36329.975, 39753.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1336.097 ±(99.9%) 6.145 MB/sec [Average]
[info]   (min, avg, max) = (1333.652, 1336.097, 1337.904), stdev = 1.596
[info]   CI (99.9%): [1329.953, 1342.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36257.821 ±(99.9%) 684.007 B/op [Average]
[info]   (min, avg, max) = (36045.979, 36257.821, 36504.403), stdev = 177.635
[info]   CI (99.9%): [35573.814, 36941.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.895 ±(99.9%) 6.403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.895, 3.831), stdev = 1.663
[info]   CI (99.9%): [≈ 0, 7.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24.239 ±(99.9%) 173.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.239, 103.785), stdev = 45.049
[info]   CI (99.9%): [≈ 0, 197.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.683
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14929.656 ops/s
[info] # Warmup Iteration   2: 68851.078 ops/s
[info] # Warmup Iteration   3: 71280.966 ops/s
[info] # Warmup Iteration   4: 73224.726 ops/s
[info] # Warmup Iteration   5: 72515.956 ops/s
[info] Iteration   1: 73204.652 ops/s
[info]                  ·gc.alloc.rate:                   1688.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              36309.826 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28886.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.895 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 73196.123 ops/s
[info]                  ·gc.alloc.rate:                   1715.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              36866.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28904.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 73683.495 ops/s
[info]                  ·gc.alloc.rate:                   1726.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              36855.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43014.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73363.459 ops/s
[info]                  ·gc.alloc.rate:               1716.981 MB/sec
[info]                  ·gc.alloc.rate.norm:          36834.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28724.194 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 72775.231 ops/s
[info]                  ·gc.alloc.rate:                   1718.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              37147.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43434.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   73244.592 ±(99.9%) 1263.999 ops/s [Average]
[info]   (min, avg, max) = (72775.231, 73244.592, 73683.495), stdev = 328.257
[info]   CI (99.9%): [71980.593, 74508.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1713.138 ±(99.9%) 54.660 MB/sec [Average]
[info]   (min, avg, max) = (1688.875, 1713.138, 1726.199), stdev = 14.195
[info]   CI (99.9%): [1658.477, 1767.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   36802.825 ±(99.9%) 1170.399 B/op [Average]
[info]   (min, avg, max) = (36309.826, 36802.825, 37147.169), stdev = 303.949
[info]   CI (99.9%): [35632.426, 37973.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1610.230 ±(99.9%) 1412.046 MB/sec [Average]
[info]   (min, avg, max) = (1338.942, 1610.230, 2014.628), stdev = 366.704
[info]   CI (99.9%): [198.183, 3022.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34592.618 ±(99.9%) 30348.092 B/op [Average]
[info]   (min, avg, max) = (28724.194, 34592.618, 43434.358), stdev = 7881.303
[info]   CI (99.9%): [4244.527, 64940.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 4.666 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 2.811), stdev = 1.212
[info]   CI (99.9%): [≈ 0, 5.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.267 ±(99.9%) 100.265 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.267, 60.426), stdev = 26.038
[info]   CI (99.9%): [≈ 0, 116.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27222.917 ops/s
[info] # Warmup Iteration   2: 120979.282 ops/s
[info] # Warmup Iteration   3: 126077.991 ops/s
[info] # Warmup Iteration   4: 132617.498 ops/s
[info] # Warmup Iteration   5: 131784.508 ops/s
[info] Iteration   1: 133117.678 ops/s
[info]                  ·gc.alloc.rate:                   912.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              10782.566 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7883.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 131137.570 ops/s
[info]                  ·gc.alloc.rate:               904.050 MB/sec
[info]                  ·gc.alloc.rate.norm:          10848.670 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8002.993 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 132405.955 ops/s
[info]                  ·gc.alloc.rate:                   928.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              11031.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15868.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 131786.740 ops/s
[info]                  ·gc.alloc.rate:               899.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          10743.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7979.498 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 132604.701 ops/s
[info]                  ·gc.alloc.rate:               916.083 MB/sec
[info]                  ·gc.alloc.rate.norm:          10872.613 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7930.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   132210.529 ±(99.9%) 2949.779 ops/s [Average]
[info]   (min, avg, max) = (131137.570, 132210.529, 133117.678), stdev = 766.048
[info]   CI (99.9%): [129260.750, 135160.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   911.999 ±(99.9%) 42.589 MB/sec [Average]
[info]   (min, avg, max) = (899.662, 911.999, 928.037), stdev = 11.060
[info]   CI (99.9%): [869.410, 954.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10855.693 ±(99.9%) 426.087 B/op [Average]
[info]   (min, avg, max) = (10743.618, 10855.693, 11031.001), stdev = 110.654
[info]   CI (99.9%): [10429.606, 11281.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   801.057 ±(99.9%) 1149.443 MB/sec [Average]
[info]   (min, avg, max) = (666.912, 801.057, 1335.041), stdev = 298.507
[info]   CI (99.9%): [≈ 0, 1950.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9533.120 ±(99.9%) 13639.170 B/op [Average]
[info]   (min, avg, max) = (7883.971, 9533.120, 15868.799), stdev = 3542.049
[info]   CI (99.9%): [≈ 0, 23172.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.148 ±(99.9%) 0.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.495), stdev = 0.221
[info]   CI (99.9%): [≈ 0, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114255.991 ops/s
[info] # Warmup Iteration   2: 251249.493 ops/s
[info] # Warmup Iteration   3: 254750.088 ops/s
[info] # Warmup Iteration   4: 260952.971 ops/s
[info] # Warmup Iteration   5: 255049.993 ops/s
[info] Iteration   1: 261631.046 ops/s
[info]                  ·gc.alloc.rate:                   1114.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              6706.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8082.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 263309.167 ops/s
[info]                  ·gc.alloc.rate:               1100.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          6576.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4017.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 262413.305 ops/s
[info]                  ·gc.alloc.rate:                   1110.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              6660.686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8062.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.250 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 261955.926 ops/s
[info]                  ·gc.alloc.rate:                   1116.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              6706.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8084.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 262750.114 ops/s
[info]                  ·gc.alloc.rate:                   1095.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              6562.680 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4029.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.810 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   262411.912 ±(99.9%) 2537.575 ops/s [Average]
[info]   (min, avg, max) = (261631.046, 262411.912, 263309.167), stdev = 659.000
[info]   CI (99.9%): [259874.336, 264949.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1107.554 ±(99.9%) 35.064 MB/sec [Average]
[info]   (min, avg, max) = (1095.710, 1107.554, 1116.289), stdev = 9.106
[info]   CI (99.9%): [1072.489, 1142.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6642.846 ±(99.9%) 267.565 B/op [Average]
[info]   (min, avg, max) = (6562.680, 6642.846, 6706.984), stdev = 69.486
[info]   CI (99.9%): [6375.281, 6910.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075.674 ±(99.9%) 1417.277 MB/sec [Average]
[info]   (min, avg, max) = (672.121, 1075.674, 1345.600), stdev = 368.062
[info]   CI (99.9%): [≈ 0, 2492.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6455.403 ±(99.9%) 8547.858 B/op [Average]
[info]   (min, avg, max) = (4017.441, 6455.403, 8084.749), stdev = 2219.852
[info]   CI (99.9%): [≈ 0, 15003.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.591 ±(99.9%) 4.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.591, 2.810), stdev = 1.241
[info]   CI (99.9%): [≈ 0, 5.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.542 ±(99.9%) 28.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.542, 16.833), stdev = 7.431
[info]   CI (99.9%): [≈ 0, 32.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1417.486 ops/s
[info] # Warmup Iteration   2: 22237.218 ops/s
[info] # Warmup Iteration   3: 28898.254 ops/s
[info] # Warmup Iteration   4: 27976.487 ops/s
[info] # Warmup Iteration   5: 28575.417 ops/s
[info] Iteration   1: 29107.175 ops/s
[info]                  ·gc.alloc.rate:                   1430.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              77311.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72073.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.821 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28887.906 ops/s
[info]                  ·gc.alloc.rate:                   1440.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              78460.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72764.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.134 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28973.297 ops/s
[info]                  ·gc.alloc.rate:                   1430.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              77689.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72696.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28718.930 ops/s
[info]                  ·gc.alloc.rate:                   1421.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              77897.685 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73466.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 29797.702 ops/s
[info]                  ·gc.alloc.rate:               1459.118 MB/sec
[info]                  ·gc.alloc.rate.norm:          77066.732 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70859.714 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   29097.002 ±(99.9%) 1602.819 ops/s [Average]
[info]   (min, avg, max) = (28718.930, 29097.002, 29797.702), stdev = 416.247
[info]   CI (99.9%): [27494.183, 30699.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1436.274 ±(99.9%) 55.645 MB/sec [Average]
[info]   (min, avg, max) = (1421.435, 1436.274, 1459.118), stdev = 14.451
[info]   CI (99.9%): [1380.630, 1491.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   77685.191 ±(99.9%) 2080.316 B/op [Average]
[info]   (min, avg, max) = (77066.732, 77685.191, 78460.037), stdev = 540.251
[info]   CI (99.9%): [75604.875, 79765.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1337.922 ±(99.9%) 13.222 MB/sec [Average]
[info]   (min, avg, max) = (1333.169, 1337.922, 1341.599), stdev = 3.434
[info]   CI (99.9%): [1324.700, 1351.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72372.175 ±(99.9%) 3769.937 B/op [Average]
[info]   (min, avg, max) = (70859.714, 72372.175, 73466.760), stdev = 979.041
[info]   CI (99.9%): [68602.237, 76142.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.317 ±(99.9%) 2.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.317, 1.433), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.328 ±(99.9%) 132.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.328, 78.555), stdev = 34.300
[info]   CI (99.9%): [≈ 0, 149.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51750.416 ops/s
[info] # Warmup Iteration   2: 175795.191 ops/s
[info] # Warmup Iteration   3: 180280.287 ops/s
[info] # Warmup Iteration   4: 181042.283 ops/s
[info] # Warmup Iteration   5: 180437.881 ops/s
[info] Iteration   1: 181731.464 ops/s
[info]                  ·gc.alloc.rate:               1022.592 MB/sec
[info]                  ·gc.alloc.rate.norm:          8853.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5774.974 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 180641.772 ops/s
[info]                  ·gc.alloc.rate:                   1033.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              9004.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11630.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.363 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 181380.908 ops/s
[info]                  ·gc.alloc.rate:                   1017.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              8828.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5797.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 180113.104 ops/s
[info]                  ·gc.alloc.rate:                   1037.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              9062.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11682.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 181471.015 ops/s
[info]                  ·gc.alloc.rate:               1030.456 MB/sec
[info]                  ·gc.alloc.rate.norm:          8935.620 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5800.515 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   181067.653 ±(99.9%) 2578.791 ops/s [Average]
[info]   (min, avg, max) = (180113.104, 181067.653, 181731.464), stdev = 669.704
[info]   CI (99.9%): [178488.862, 183646.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1028.240 ±(99.9%) 31.045 MB/sec [Average]
[info]   (min, avg, max) = (1017.478, 1028.240, 1037.160), stdev = 8.062
[info]   CI (99.9%): [997.195, 1059.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   8937.105 ±(99.9%) 381.254 B/op [Average]
[info]   (min, avg, max) = (8828.945, 8937.105, 9062.949), stdev = 99.010
[info]   CI (99.9%): [8555.851, 9318.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   935.183 ±(99.9%) 1408.613 MB/sec [Average]
[info]   (min, avg, max) = (667.053, 935.183, 1336.915), stdev = 365.812
[info]   CI (99.9%): [≈ 0, 2343.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8137.259 ±(99.9%) 12371.337 B/op [Average]
[info]   (min, avg, max) = (5774.974, 8137.259, 11682.277), stdev = 3212.797
[info]   CI (99.9%): [≈ 0, 20508.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.145 ±(99.9%) 0.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.363), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215890.033 ops/s
[info] # Warmup Iteration   2: 465506.606 ops/s
[info] # Warmup Iteration   3: 475426.128 ops/s
[info] # Warmup Iteration   4: 476696.682 ops/s
[info] # Warmup Iteration   5: 486531.384 ops/s
[info] Iteration   1: 482466.069 ops/s
[info]                  ·gc.alloc.rate:                   1468.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              4789.390 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6575.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 482274.337 ops/s
[info]                  ·gc.alloc.rate:                   1452.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              4738.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4389.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 482986.402 ops/s
[info]                  ·gc.alloc.rate:                   1454.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              4738.636 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4384.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.446 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 483263.895 ops/s
[info]                  ·gc.alloc.rate:                   1466.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4775.560 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4373.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 482607.398 ops/s
[info]                  ·gc.alloc.rate:                   1465.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              4779.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4375.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   482719.620 ±(99.9%) 1543.344 ops/s [Average]
[info]   (min, avg, max) = (482274.337, 482719.620, 483263.895), stdev = 400.801
[info]   CI (99.9%): [481176.276, 484262.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1461.351 ±(99.9%) 29.112 MB/sec [Average]
[info]   (min, avg, max) = (1452.151, 1461.351, 1468.358), stdev = 7.560
[info]   CI (99.9%): [1432.239, 1490.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4764.481 ±(99.9%) 92.385 B/op [Average]
[info]   (min, avg, max) = (4738.636, 4764.481, 4789.390), stdev = 23.992
[info]   CI (99.9%): [4672.096, 4856.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.221 ±(99.9%) 1157.647 MB/sec [Average]
[info]   (min, avg, max) = (1341.584, 1478.221, 2016.010), stdev = 300.637
[info]   CI (99.9%): [320.574, 2635.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4819.678 ±(99.9%) 3780.018 B/op [Average]
[info]   (min, avg, max) = (4373.586, 4819.678, 6575.684), stdev = 981.659
[info]   CI (99.9%): [1039.660, 8599.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.662 ±(99.9%) 5.476 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.662, 3.206), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.157 ±(99.9%) 17.843 B/op [Average]
[info]   (min, avg, max) = (0.068, 2.157, 10.446), stdev = 4.634
[info]   CI (99.9%): [≈ 0, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 209312.244 ops/s
[info] # Warmup Iteration   2: 513757.066 ops/s
[info] # Warmup Iteration   3: 521866.261 ops/s
[info] # Warmup Iteration   4: 512633.876 ops/s
[info] # Warmup Iteration   5: 522386.280 ops/s
[info] Iteration   1: 516476.732 ops/s
[info]                  ·gc.alloc.rate:               987.714 MB/sec
[info]                  ·gc.alloc.rate.norm:          3009.935 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4090.362 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 523827.851 ops/s
[info]                  ·gc.alloc.rate:               986.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          2964.180 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2017.385 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 519138.069 ops/s
[info]                  ·gc.alloc.rate:                   993.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              3012.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4073.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 522526.122 ops/s
[info]                  ·gc.alloc.rate:               985.994 MB/sec
[info]                  ·gc.alloc.rate.norm:          2969.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2024.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 521996.784 ops/s
[info]                  ·gc.alloc.rate:                   987.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              2978.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2026.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   520793.111 ±(99.9%) 11395.580 ops/s [Average]
[info]   (min, avg, max) = (516476.732, 520793.111, 523827.851), stdev = 2959.396
[info]   CI (99.9%): [509397.532, 532188.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   988.338 ±(99.9%) 11.668 MB/sec [Average]
[info]   (min, avg, max) = (985.994, 988.338, 993.585), stdev = 3.030
[info]   CI (99.9%): [976.670, 1000.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2986.912 ±(99.9%) 87.087 B/op [Average]
[info]   (min, avg, max) = (2964.180, 2986.912, 3012.154), stdev = 22.616
[info]   CI (99.9%): [2899.824, 3073.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   940.313 ±(99.9%) 1415.256 MB/sec [Average]
[info]   (min, avg, max) = (671.469, 940.313, 1343.602), stdev = 367.538
[info]   CI (99.9%): [≈ 0, 2355.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2846.411 ±(99.9%) 4342.697 B/op [Average]
[info]   (min, avg, max) = (2017.385, 2846.411, 4090.362), stdev = 1127.785
[info]   CI (99.9%): [≈ 0, 7189.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 2.049
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14801.209 ops/s
[info] # Warmup Iteration   2: 67822.510 ops/s
[info] # Warmup Iteration   3: 74613.015 ops/s
[info] # Warmup Iteration   4: 74296.840 ops/s
[info] # Warmup Iteration   5: 76262.789 ops/s
[info] Iteration   1: 76245.467 ops/s
[info]                  ·gc.alloc.rate:                   1497.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              30915.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27563.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 75819.307 ops/s
[info]                  ·gc.alloc.rate:               1498.730 MB/sec
[info]                  ·gc.alloc.rate.norm:          31109.989 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41616.414 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     11.000 ms
[info] Iteration   3: 76668.951 ops/s
[info]                  ·gc.alloc.rate:                   1498.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              30768.763 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27458.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.351 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 76466.886 ops/s
[info]                  ·gc.alloc.rate:                   1508.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              31045.529 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27447.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 76538.521 ops/s
[info]                  ·gc.alloc.rate:                   1520.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              31258.959 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27394.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   76347.826 ±(99.9%) 1282.142 ops/s [Average]
[info]   (min, avg, max) = (75819.307, 76347.826, 76668.951), stdev = 332.968
[info]   CI (99.9%): [75065.685, 77629.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1504.781 ±(99.9%) 37.056 MB/sec [Average]
[info]   (min, avg, max) = (1497.765, 1504.781, 1520.177), stdev = 9.623
[info]   CI (99.9%): [1467.725, 1541.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   31019.738 ±(99.9%) 720.136 B/op [Average]
[info]   (min, avg, max) = (30768.763, 31019.738, 31258.959), stdev = 187.017
[info]   CI (99.9%): [30299.602, 31739.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1468.730 ±(99.9%) 1154.128 MB/sec [Average]
[info]   (min, avg, max) = (1332.238, 1468.730, 2004.879), stdev = 299.723
[info]   CI (99.9%): [314.601, 2622.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30296.048 ±(99.9%) 24369.087 B/op [Average]
[info]   (min, avg, max) = (27394.414, 30296.048, 41616.414), stdev = 6328.575
[info]   CI (99.9%): [5926.961, 54665.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.899 ±(99.9%) 7.430 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.899, 4.351), stdev = 1.930
[info]   CI (99.9%): [≈ 0, 8.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   18.462 ±(99.9%) 152.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.462, 89.311), stdev = 39.611
[info]   CI (99.9%): [≈ 0, 170.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.162
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28770.140 ops/s
[info] # Warmup Iteration   2: 86031.155 ops/s
[info] # Warmup Iteration   3: 91596.242 ops/s
[info] # Warmup Iteration   4: 98393.971 ops/s
[info] # Warmup Iteration   5: 99387.244 ops/s
[info] Iteration   1: 99023.894 ops/s
[info]                  ·gc.alloc.rate:               1609.830 MB/sec
[info]                  ·gc.alloc.rate.norm:          25585.553 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343.020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21345.059 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 98620.974 ops/s
[info]                  ·gc.alloc.rate:                   1627.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              25967.761 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32159.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.182 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 99964.703 ops/s
[info]                  ·gc.alloc.rate:                   1635.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              25746.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21133.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 99839.853 ops/s
[info]                  ·gc.alloc.rate:                   1633.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              25755.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21117.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 98972.666 ops/s
[info]                  ·gc.alloc.rate:               1630.246 MB/sec
[info]                  ·gc.alloc.rate.norm:          25924.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31916.913 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   99284.418 ±(99.9%) 2258.885 ops/s [Average]
[info]   (min, avg, max) = (98620.974, 99284.418, 99964.703), stdev = 586.625
[info]   CI (99.9%): [97025.534, 101543.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1627.348 ±(99.9%) 39.475 MB/sec [Average]
[info]   (min, avg, max) = (1609.830, 1627.348, 1635.280), stdev = 10.252
[info]   CI (99.9%): [1587.873, 1666.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25796.029 ±(99.9%) 591.934 B/op [Average]
[info]   (min, avg, max) = (25585.553, 25796.029, 25967.761), stdev = 153.723
[info]   CI (99.9%): [25204.094, 26387.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1609.500 ±(99.9%) 1412.485 MB/sec [Average]
[info]   (min, avg, max) = (1339.575, 1609.500, 2015.585), stdev = 366.818
[info]   CI (99.9%): [197.016, 3021.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25534.221 ±(99.9%) 22866.617 B/op [Average]
[info]   (min, avg, max) = (21117.061, 25534.221, 32159.038), stdev = 5938.388
[info]   CI (99.9%): [2667.603, 48400.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.770 ±(99.9%) 4.677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.832), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12.249 ±(99.9%) 74.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.249, 45.182), stdev = 19.377
[info]   CI (99.9%): [≈ 0, 86.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33405.146 ops/s
[info] # Warmup Iteration   2: 156213.340 ops/s
[info] # Warmup Iteration   3: 173608.422 ops/s
[info] # Warmup Iteration   4: 175327.911 ops/s
[info] # Warmup Iteration   5: 175596.937 ops/s
[info] Iteration   1: 175180.818 ops/s
[info]                  ·gc.alloc.rate:               749.800 MB/sec
[info]                  ·gc.alloc.rate.norm:          6736.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5981.689 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 173956.445 ops/s
[info]                  ·gc.alloc.rate:               749.145 MB/sec
[info]                  ·gc.alloc.rate.norm:          6774.876 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6029.901 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 168914.800 ops/s
[info]                  ·gc.alloc.rate:                   730.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              6807.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6209.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 174263.838 ops/s
[info]                  ·gc.alloc.rate:               748.062 MB/sec
[info]                  ·gc.alloc.rate.norm:          6753.635 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6025.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 167561.553 ops/s
[info]                  ·gc.alloc.rate:               720.447 MB/sec
[info]                  ·gc.alloc.rate.norm:          6766.504 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6266.104 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   171975.491 ±(99.9%) 13378.635 ops/s [Average]
[info]   (min, avg, max) = (167561.553, 171975.491, 175180.818), stdev = 3474.389
[info]   CI (99.9%): [158596.856, 185354.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   739.630 ±(99.9%) 51.404 MB/sec [Average]
[info]   (min, avg, max) = (720.447, 739.630, 749.800), stdev = 13.349
[info]   CI (99.9%): [688.226, 791.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6767.707 ±(99.9%) 101.407 B/op [Average]
[info]   (min, avg, max) = (6736.471, 6767.707, 6807.047), stdev = 26.335
[info]   CI (99.9%): [6666.300, 6869.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   666.735 ±(99.9%) 2.384 MB/sec [Average]
[info]   (min, avg, max) = (665.789, 666.735, 667.384), stdev = 0.619
[info]   CI (99.9%): [664.351, 669.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6102.512 ±(99.9%) 487.336 B/op [Average]
[info]   (min, avg, max) = (5981.689, 6102.512, 6266.104), stdev = 126.560
[info]   CI (99.9%): [5615.176, 6589.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.116 ±(99.9%) 1.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.582), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119339.234 ops/s
[info] # Warmup Iteration   2: 275136.793 ops/s
[info] # Warmup Iteration   3: 279692.359 ops/s
[info] # Warmup Iteration   4: 281913.870 ops/s
[info] # Warmup Iteration   5: 278133.570 ops/s
[info] Iteration   1: 280384.903 ops/s
[info]                  ·gc.alloc.rate:               1025.172 MB/sec
[info]                  ·gc.alloc.rate.norm:          5754.427 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3767.323 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 280599.867 ops/s
[info]                  ·gc.alloc.rate:                   1032.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              5790.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7532.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.350 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 280938.460 ops/s
[info]                  ·gc.alloc.rate:               1028.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          5760.838 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3765.413 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 280624.399 ops/s
[info]                  ·gc.alloc.rate:                   1040.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              5834.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7539.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 281975.007 ops/s
[info]                  ·gc.alloc.rate:                   1018.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              5684.232 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3751.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   280904.527 ±(99.9%) 2426.500 ops/s [Average]
[info]   (min, avg, max) = (280384.903, 280904.527, 281975.007), stdev = 630.154
[info]   CI (99.9%): [278478.027, 283331.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1029.039 ±(99.9%) 31.872 MB/sec [Average]
[info]   (min, avg, max) = (1018.482, 1029.039, 1040.636), stdev = 8.277
[info]   CI (99.9%): [997.167, 1060.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5764.841 ±(99.9%) 211.616 B/op [Average]
[info]   (min, avg, max) = (5684.232, 5764.841, 5834.072), stdev = 54.956
[info]   CI (99.9%): [5553.225, 5976.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   940.692 ±(99.9%) 1417.644 MB/sec [Average]
[info]   (min, avg, max) = (671.163, 940.692, 1344.750), stdev = 368.158
[info]   CI (99.9%): [≈ 0, 2358.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5271.187 ±(99.9%) 7960.554 B/op [Average]
[info]   (min, avg, max) = (3751.554, 5271.187, 7539.009), stdev = 2067.330
[info]   CI (99.9%): [≈ 0, 13231.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.117 ±(99.9%) 0.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.350), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3957.248 ops/s
[info] # Warmup Iteration   2: 58335.212 ops/s
[info] # Warmup Iteration   3: 64204.345 ops/s
[info] # Warmup Iteration   4: 65147.723 ops/s
[info] # Warmup Iteration   5: 65248.500 ops/s
[info] Iteration   1: 65887.076 ops/s
[info]                  ·gc.alloc.rate:                   2581.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              61657.261 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63872.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 65977.876 ops/s
[info]                  ·gc.alloc.rate:                   2560.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              61073.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47766.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.483 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 66089.953 ops/s
[info]                  ·gc.alloc.rate:               2605.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          62037.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2671.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63612.553 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 65975.396 ops/s
[info]                  ·gc.alloc.rate:               2601.129 MB/sec
[info]                  ·gc.alloc.rate.norm:          62053.092 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2677.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63881.362 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 65772.124 ops/s
[info]                  ·gc.alloc.rate:                   2593.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              62059.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64303.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   65940.485 ±(99.9%) 456.246 ops/s [Average]
[info]   (min, avg, max) = (65772.124, 65940.485, 66089.953), stdev = 118.486
[info]   CI (99.9%): [65484.239, 66396.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2588.275 ±(99.9%) 69.234 MB/sec [Average]
[info]   (min, avg, max) = (2560.592, 2588.275, 2605.136), stdev = 17.980
[info]   CI (99.9%): [2519.041, 2657.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   61776.147 ±(99.9%) 1649.266 B/op [Average]
[info]   (min, avg, max) = (61073.131, 61776.147, 62059.621), stdev = 428.309
[info]   CI (99.9%): [60126.881, 63425.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2542.549 ±(99.9%) 1162.315 MB/sec [Average]
[info]   (min, avg, max) = (2002.692, 2542.549, 2687.163), stdev = 301.849
[info]   CI (99.9%): [1380.234, 3704.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   60687.248 ±(99.9%) 27829.117 B/op [Average]
[info]   (min, avg, max) = (47766.555, 60687.248, 64303.607), stdev = 7227.133
[info]   CI (99.9%): [32858.132, 88516.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.541), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.182 ±(99.9%) 21.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.182, 12.929), stdev = 5.544
[info]   CI (99.9%): [≈ 0, 24.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77550.443 ops/s
[info] # Warmup Iteration   2: 186835.690 ops/s
[info] # Warmup Iteration   3: 199522.114 ops/s
[info] # Warmup Iteration   4: 204923.434 ops/s
[info] # Warmup Iteration   5: 205405.036 ops/s
[info] Iteration   1: 205403.855 ops/s
[info]                  ·gc.alloc.rate:               1428.625 MB/sec
[info]                  ·gc.alloc.rate.norm:          10942.426 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10277.054 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 206232.797 ops/s
[info]                  ·gc.alloc.rate:                   1438.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              10978.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10241.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 204874.106 ops/s
[info]                  ·gc.alloc.rate:                   1418.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              10899.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10314.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.998 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23.028 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 206826.646 ops/s
[info]                  ·gc.alloc.rate:                   1443.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              10982.365 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10208.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.911 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 206474.065 ops/s
[info]                  ·gc.alloc.rate:               1468.119 MB/sec
[info]                  ·gc.alloc.rate.norm:          11191.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15304.195 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   205962.294 ±(99.9%) 3091.442 ops/s [Average]
[info]   (min, avg, max) = (204874.106, 205962.294, 206826.646), stdev = 802.838
[info]   CI (99.9%): [202870.852, 209053.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1439.517 ±(99.9%) 71.339 MB/sec [Average]
[info]   (min, avg, max) = (1418.986, 1439.517, 1468.119), stdev = 18.526
[info]   CI (99.9%): [1368.179, 1510.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10998.868 ±(99.9%) 433.221 B/op [Average]
[info]   (min, avg, max) = (10899.985, 10998.868, 11191.159), stdev = 112.506
[info]   CI (99.9%): [10565.647, 11432.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1475.156 ±(99.9%) 1146.320 MB/sec [Average]
[info]   (min, avg, max) = (1341.584, 1475.156, 2007.690), stdev = 297.696
[info]   CI (99.9%): [328.836, 2621.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11269.109 ±(99.9%) 8687.146 B/op [Average]
[info]   (min, avg, max) = (10208.794, 11269.109, 15304.195), stdev = 2256.024
[info]   CI (99.9%): [2581.963, 19956.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 4.991 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 2.998), stdev = 1.296
[info]   CI (99.9%): [≈ 0, 5.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.620 ±(99.9%) 38.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.620, 23.028), stdev = 9.957
[info]   CI (99.9%): [≈ 0, 43.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 6.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:16:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111834.031 ops/s
[info] # Warmup Iteration   2: 500168.768 ops/s
[info] # Warmup Iteration   3: 508200.159 ops/s
[info] # Warmup Iteration   4: 506578.127 ops/s
[info] # Warmup Iteration   5: 505611.223 ops/s
[info] Iteration   1: 501635.143 ops/s
[info]                  ·gc.alloc.rate:               413.779 MB/sec
[info]                  ·gc.alloc.rate.norm:          1298.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1605.178 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 504974.619 ops/s
[info]                  ·gc.alloc.rate:               415.225 MB/sec
[info]                  ·gc.alloc.rate.norm:          1294.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1594.562 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 510376.143 ops/s
[info]                  ·gc.alloc.rate:      402.140 MB/sec
[info]                  ·gc.alloc.rate.norm: 1240.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 505557.062 ops/s
[info]                  ·gc.alloc.rate:               423.778 MB/sec
[info]                  ·gc.alloc.rate.norm:          1319.222 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2072.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 506638.965 ops/s
[info]                  ·gc.alloc.rate:               421.677 MB/sec
[info]                  ·gc.alloc.rate.norm:          1309.926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2068.428 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   505836.386 ±(99.9%) 12134.820 ops/s [Average]
[info]   (min, avg, max) = (501635.143, 505836.386, 510376.143), stdev = 3151.374
[info]   CI (99.9%): [493701.567, 517971.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   415.320 ±(99.9%) 32.676 MB/sec [Average]
[info]   (min, avg, max) = (402.140, 415.320, 423.778), stdev = 8.486
[info]   CI (99.9%): [382.643, 447.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1292.266 ±(99.9%) 118.804 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1292.266, 1319.222), stdev = 30.853
[info]   CI (99.9%): [1173.463, 1411.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   471.000 ±(99.9%) 1056.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 471.000, 665.855), stdev = 274.353
[info]   CI (99.9%): [≈ 0, 1527.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1468.195 ±(99.9%) 3287.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1468.195, 2072.809), stdev = 853.839
[info]   CI (99.9%): [≈ 0, 4756.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359176.053 ops/s
[info] # Warmup Iteration   2: 620196.500 ops/s
[info] # Warmup Iteration   3: 630561.286 ops/s
[info] # Warmup Iteration   4: 636248.851 ops/s
[info] # Warmup Iteration   5: 611725.669 ops/s
[info] Iteration   1: 626699.577 ops/s
[info]                  ·gc.alloc.rate:               348.242 MB/sec
[info]                  ·gc.alloc.rate.norm:          874.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1284.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 639014.400 ops/s
[info]                  ·gc.alloc.rate:      344.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 634624.875 ops/s
[info]                  ·gc.alloc.rate:               358.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          889.130 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1268.796 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 633858.676 ops/s
[info]                  ·gc.alloc.rate:      341.523 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 636117.683 ops/s
[info]                  ·gc.alloc.rate:                   363.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              899.494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1658.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   634063.042 ±(99.9%) 17573.827 ops/s [Average]
[info]   (min, avg, max) = (626699.577, 634063.042, 639014.400), stdev = 4563.867
[info]   CI (99.9%): [616489.215, 651636.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   351.281 ±(99.9%) 36.441 MB/sec [Average]
[info]   (min, avg, max) = (341.523, 351.281, 363.618), stdev = 9.464
[info]   CI (99.9%): [314.840, 387.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   871.760 ±(99.9%) 90.423 B/op [Average]
[info]   (min, avg, max) = (848.001, 871.760, 899.494), stdev = 23.483
[info]   CI (99.9%): [781.337, 962.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.840 ±(99.9%) 1216.950 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.840, 670.603), stdev = 316.038
[info]   CI (99.9%): [≈ 0, 1555.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   842.497 ±(99.9%) 3021.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 842.497, 1658.891), stdev = 784.771
[info]   CI (99.9%): [≈ 0, 3864.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 403765.704 ops/s
[info] # Warmup Iteration   2: 652429.232 ops/s
[info] # Warmup Iteration   3: 670068.285 ops/s
[info] # Warmup Iteration   4: 693595.917 ops/s
[info] # Warmup Iteration   5: 693112.046 ops/s
[info] Iteration   1: 693625.616 ops/s
[info]                  ·gc.alloc.rate:      7.052 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 694075.020 ops/s
[info]                  ·gc.alloc.rate:      7.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 693450.835 ops/s
[info]                  ·gc.alloc.rate:      7.053 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 693917.509 ops/s
[info]                  ·gc.alloc.rate:      7.055 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 693115.032 ops/s
[info]                  ·gc.alloc.rate:      7.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   693636.802 ±(99.9%) 1463.478 ops/s [Average]
[info]   (min, avg, max) = (693115.032, 693636.802, 694075.020), stdev = 380.061
[info]   CI (99.9%): [692173.325, 695100.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.052 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (7.046, 7.052, 7.056), stdev = 0.004
[info]   CI (99.9%): [7.037, 7.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11884.693 ops/s
[info] # Warmup Iteration   2: 32590.764 ops/s
[info] # Warmup Iteration   3: 35425.482 ops/s
[info] # Warmup Iteration   4: 34783.622 ops/s
[info] # Warmup Iteration   5: 35523.857 ops/s
[info] Iteration   1: 34877.601 ops/s
[info]                  ·gc.alloc.rate:                   1893.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              85446.924 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90838.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 136.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 35413.676 ops/s
[info]                  ·gc.alloc.rate:                   1933.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              85924.764 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89347.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41.632 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 35802.214 ops/s
[info]                  ·gc.alloc.rate:                   1939.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              85255.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58800.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.745 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 35827.608 ops/s
[info]                  ·gc.alloc.rate:               1943.165 MB/sec
[info]                  ·gc.alloc.rate.norm:          85336.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2005.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88061.657 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 35284.443 ops/s
[info]                  ·gc.alloc.rate:                   1939.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              86503.817 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89510.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   35441.108 ±(99.9%) 1519.196 ops/s [Average]
[info]   (min, avg, max) = (34877.601, 35441.108, 35827.608), stdev = 394.530
[info]   CI (99.9%): [33921.913, 36960.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1929.789 ±(99.9%) 79.096 MB/sec [Average]
[info]   (min, avg, max) = (1893.581, 1929.789, 1943.165), stdev = 20.541
[info]   CI (99.9%): [1850.692, 2008.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85693.451 ±(99.9%) 2010.406 B/op [Average]
[info]   (min, avg, max) = (85255.682, 85693.451, 86503.817), stdev = 522.096
[info]   CI (99.9%): [83683.045, 87703.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.620 ±(99.9%) 1155.945 MB/sec [Average]
[info]   (min, avg, max) = (1337.642, 1874.620, 2013.054), stdev = 300.195
[info]   CI (99.9%): [718.674, 3030.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83311.795 ±(99.9%) 52897.377 B/op [Average]
[info]   (min, avg, max) = (58800.844, 83311.795, 90838.111), stdev = 13737.281
[info]   CI (99.9%): [30414.418, 136209.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.824 ±(99.9%) 4.948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.824, 3.018), stdev = 1.285
[info]   CI (99.9%): [≈ 0, 5.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37.045 ±(99.9%) 223.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.045, 136.205), stdev = 57.992
[info]   CI (99.9%): [≈ 0, 260.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:15:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62065.702 ops/s
[info] # Warmup Iteration   2: 782319.986 ops/s
[info] # Warmup Iteration   3: 850820.996 ops/s
[info] # Warmup Iteration   4: 838611.356 ops/s
[info] # Warmup Iteration   5: 859411.635 ops/s
[info] Iteration   1: 871579.803 ops/s
[info]                  ·gc.alloc.rate:                   2333.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              4212.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3632.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.180 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 871918.607 ops/s
[info]                  ·gc.alloc.rate:                   2348.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              4238.512 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3620.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 870251.939 ops/s
[info]                  ·gc.alloc.rate:                   2358.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              4263.908 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2673.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4834.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 875854.777 ops/s
[info]                  ·gc.alloc.rate:               2359.566 MB/sec
[info]                  ·gc.alloc.rate.norm:          4239.701 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2008.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3608.506 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 875828.425 ops/s
[info]                  ·gc.alloc.rate:                   2386.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              4288.362 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4822.737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   873086.710 ±(99.9%) 9976.504 ops/s [Average]
[info]   (min, avg, max) = (870251.939, 873086.710, 875854.777), stdev = 2590.866
[info]   CI (99.9%): [863110.206, 883063.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2357.225 ±(99.9%) 75.989 MB/sec [Average]
[info]   (min, avg, max) = (2333.069, 2357.225, 2386.987), stdev = 19.734
[info]   CI (99.9%): [2281.236, 2433.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4248.689 ±(99.9%) 110.039 B/op [Average]
[info]   (min, avg, max) = (4212.960, 4248.689, 4288.362), stdev = 28.577
[info]   CI (99.9%): [4138.650, 4358.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2276.836 ±(99.9%) 1414.455 MB/sec [Average]
[info]   (min, avg, max) = (2005.796, 2276.836, 2684.431), stdev = 367.329
[info]   CI (99.9%): [862.381, 3691.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4103.800 ±(99.9%) 2548.281 B/op [Average]
[info]   (min, avg, max) = (3608.506, 4103.800, 4834.601), stdev = 661.781
[info]   CI (99.9%): [1555.519, 6652.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.808 ±(99.9%) 6.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.808, 3.976), stdev = 1.771
[info]   CI (99.9%): [≈ 0, 7.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.458 ±(99.9%) 12.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.458, 7.180), stdev = 3.198
[info]   CI (99.9%): [≈ 0, 13.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56578.956 ops/s
[info] # Warmup Iteration   2: 1779891.150 ops/s
[info] # Warmup Iteration   3: 1803871.630 ops/s
[info] # Warmup Iteration   4: 1876896.024 ops/s
[info] # Warmup Iteration   5: 1902960.924 ops/s
[info] Iteration   1: 1873169.355 ops/s
[info]                  ·gc.alloc.rate:                   1250.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              1050.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1887037.871 ops/s
[info]                  ·gc.alloc.rate:                   1251.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1043.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1873112.425 ops/s
[info]                  ·gc.alloc.rate:               1246.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          1047.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1122.813 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 1895832.299 ops/s
[info]                  ·gc.alloc.rate:                   1252.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1039.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1888022.420 ops/s
[info]                  ·gc.alloc.rate:               1258.709 MB/sec
[info]                  ·gc.alloc.rate.norm:          1049.274 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1335.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1113.356 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1883434.874 ±(99.9%) 38489.933 ops/s [Average]
[info]   (min, avg, max) = (1873112.425, 1883434.874, 1895832.299), stdev = 9995.713
[info]   CI (99.9%): [1844944.941, 1921924.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1251.864 ±(99.9%) 16.629 MB/sec [Average]
[info]   (min, avg, max) = (1246.824, 1251.864, 1258.709), stdev = 4.319
[info]   CI (99.9%): [1235.235, 1268.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1046.115 ±(99.9%) 17.552 B/op [Average]
[info]   (min, avg, max) = (1039.457, 1046.115, 1050.632), stdev = 4.558
[info]   CI (99.9%): [1028.563, 1063.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1335.746 ±(99.9%) 4.336 MB/sec [Average]
[info]   (min, avg, max) = (1334.251, 1335.746, 1337.246), stdev = 1.126
[info]   CI (99.9%): [1331.410, 1340.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1116.218 ±(99.9%) 20.876 B/op [Average]
[info]   (min, avg, max) = (1110.200, 1116.218, 1122.813), stdev = 5.422
[info]   CI (99.9%): [1095.342, 1137.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.881 ±(99.9%) 7.448 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.881, 4.340), stdev = 1.934
[info]   CI (99.9%): [≈ 0, 8.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.731 ±(99.9%) 6.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.731, 3.603), stdev = 1.606
[info]   CI (99.9%): [≈ 0, 6.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1418389.468 ops/s
[info] # Warmup Iteration   2: 7968431.599 ops/s
[info] # Warmup Iteration   3: 8400987.264 ops/s
[info] # Warmup Iteration   4: 8429139.516 ops/s
[info] # Warmup Iteration   5: 8239642.854 ops/s
[info] Iteration   1: 8209930.780 ops/s
[info]                  ·gc.alloc.rate:               260.995 MB/sec
[info]                  ·gc.alloc.rate.norm:          50.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98.075 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 8490046.907 ops/s
[info]                  ·gc.alloc.rate:      258.979 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8465661.905 ops/s
[info]                  ·gc.alloc.rate:                   273.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8490210.590 ops/s
[info]                  ·gc.alloc.rate:      258.955 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8451704.475 ops/s
[info]                  ·gc.alloc.rate:                   271.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              50.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8421510.931 ±(99.9%) 459841.466 ops/s [Average]
[info]   (min, avg, max) = (8209930.780, 8421510.931, 8490210.590), stdev = 119419.368
[info]   CI (99.9%): [7961669.466, 8881352.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   264.871 ±(99.9%) 27.963 MB/sec [Average]
[info]   (min, avg, max) = (258.955, 264.871, 273.976), stdev = 7.262
[info]   CI (99.9%): [236.908, 292.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   49.504 ±(99.9%) 5.424 B/op [Average]
[info]   (min, avg, max) = (48.000, 49.504, 50.934), stdev = 1.409
[info]   CI (99.9%): [44.080, 54.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306.958 ±(99.9%) 1079.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306.958, 511.604), stdev = 280.213
[info]   CI (99.9%): [≈ 0, 1385.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57.691 ±(99.9%) 202.843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.691, 98.075), stdev = 52.678
[info]   CI (99.9%): [≈ 0, 260.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2046.247 ops/s
[info] # Warmup Iteration   2: 81339.388 ops/s
[info] # Warmup Iteration   3: 173822.521 ops/s
[info] # Warmup Iteration   4: 336460.717 ops/s
[info] # Warmup Iteration   5: 347379.984 ops/s
[info] Iteration   1: 347218.629 ops/s
[info]                  ·gc.alloc.rate:                   2234.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              10125.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9093.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 343559.135 ops/s
[info]                  ·gc.alloc.rate:                   2211.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              10130.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2681.957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12285.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 351240.364 ops/s
[info]                  ·gc.alloc.rate:                   2250.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              10083.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9026.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.933 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 349896.875 ops/s
[info]                  ·gc.alloc.rate:                   2254.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              10143.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9067.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 351359.031 ops/s
[info]                  ·gc.alloc.rate:               2274.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          10190.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9044.156 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   348654.807 ±(99.9%) 12708.458 ops/s [Average]
[info]   (min, avg, max) = (343559.135, 348654.807, 351359.031), stdev = 3300.346
[info]   CI (99.9%): [335946.349, 361363.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2245.105 ±(99.9%) 91.385 MB/sec [Average]
[info]   (min, avg, max) = (2211.483, 2245.105, 2274.769), stdev = 23.732
[info]   CI (99.9%): [2153.719, 2336.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10134.581 ±(99.9%) 147.803 B/op [Average]
[info]   (min, avg, max) = (10083.358, 10134.581, 10190.110), stdev = 38.384
[info]   CI (99.9%): [9986.778, 10282.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2147.479 ±(99.9%) 1150.639 MB/sec [Average]
[info]   (min, avg, max) = (2006.475, 2147.479, 2681.957), stdev = 298.817
[info]   CI (99.9%): [996.840, 3298.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9703.439 ±(99.9%) 5559.911 B/op [Average]
[info]   (min, avg, max) = (9026.608, 9703.439, 12285.962), stdev = 1443.891
[info]   CI (99.9%): [4143.528, 15263.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.316 ±(99.9%) 2.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.332), stdev = 0.574
[info]   CI (99.9%): [≈ 0, 2.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.445 ±(99.9%) 10.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.445, 6.103), stdev = 2.632
[info]   CI (99.9%): [≈ 0, 11.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78594.239 ops/s
[info] # Warmup Iteration   2: 1023721.098 ops/s
[info] # Warmup Iteration   3: 1101327.623 ops/s
[info] # Warmup Iteration   4: 1132529.954 ops/s
[info] # Warmup Iteration   5: 1105677.372 ops/s
[info] Iteration   1: 1127725.864 ops/s
[info]                  ·gc.alloc.rate:                   1854.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              2587.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2805.658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1134758.410 ops/s
[info]                  ·gc.alloc.rate:                   1852.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              2569.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1860.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.370 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1131871.159 ops/s
[info]                  ·gc.alloc.rate:                   1861.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              2588.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2789.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1132399.105 ops/s
[info]                  ·gc.alloc.rate:               1862.276 MB/sec
[info]                  ·gc.alloc.rate.norm:          2587.791 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2785.978 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1139557.186 ops/s
[info]                  ·gc.alloc.rate:               1860.282 MB/sec
[info]                  ·gc.alloc.rate.norm:          2569.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1845.565 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1133262.345 ±(99.9%) 16695.598 ops/s [Average]
[info]   (min, avg, max) = (1127725.864, 1133262.345, 1139557.186), stdev = 4335.794
[info]   CI (99.9%): [1116566.747, 1149957.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1858.168 ±(99.9%) 17.117 MB/sec [Average]
[info]   (min, avg, max) = (1852.442, 1858.168, 1862.276), stdev = 4.445
[info]   CI (99.9%): [1841.050, 1875.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2580.435 ±(99.9%) 39.297 B/op [Average]
[info]   (min, avg, max) = (2569.150, 2580.435, 2588.165), stdev = 10.205
[info]   CI (99.9%): [2541.137, 2619.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1739.877 ±(99.9%) 1409.333 MB/sec [Average]
[info]   (min, avg, max) = (1336.234, 1739.877, 2010.589), stdev = 365.999
[info]   CI (99.9%): [330.544, 3149.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2417.423 ±(99.9%) 1983.746 B/op [Average]
[info]   (min, avg, max) = (1845.565, 2417.423, 2805.658), stdev = 515.173
[info]   CI (99.9%): [433.677, 4401.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.787 ±(99.9%) 6.642 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.872), stdev = 1.725
[info]   CI (99.9%): [≈ 0, 7.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.091 ±(99.9%) 9.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.091, 5.370), stdev = 2.392
[info]   CI (99.9%): [≈ 0, 10.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52829.541 ops/s
[info] # Warmup Iteration   2: 2553888.182 ops/s
[info] # Warmup Iteration   3: 2684769.840 ops/s
[info] # Warmup Iteration   4: 2688346.617 ops/s
[info] # Warmup Iteration   5: 2672222.629 ops/s
[info] Iteration   1: 2716731.621 ops/s
[info]                  ·gc.alloc.rate:                   1196.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              692.875 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2721707.381 ops/s
[info]                  ·gc.alloc.rate:               1197.989 MB/sec
[info]                  ·gc.alloc.rate.norm:          692.650 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1337.170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 773.121 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 2725315.964 ops/s
[info]                  ·gc.alloc.rate:               1185.993 MB/sec
[info]                  ·gc.alloc.rate.norm:          684.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 386.242 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2715388.177 ops/s
[info]                  ·gc.alloc.rate:                   1187.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              688.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2717449.746 ops/s
[info]                  ·gc.alloc.rate:                   1212.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              702.413 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     775.889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2719318.578 ±(99.9%) 15795.615 ops/s [Average]
[info]   (min, avg, max) = (2715388.177, 2719318.578, 2725315.964), stdev = 4102.071
[info]   CI (99.9%): [2703522.963, 2735114.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1195.989 ±(99.9%) 41.655 MB/sec [Average]
[info]   (min, avg, max) = (1185.993, 1195.989, 1212.855), stdev = 10.818
[info]   CI (99.9%): [1154.334, 1237.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   692.188 ±(99.9%) 25.439 B/op [Average]
[info]   (min, avg, max) = (684.971, 692.188, 702.413), stdev = 6.607
[info]   CI (99.9%): [666.749, 717.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1203.916 ±(99.9%) 1151.981 MB/sec [Average]
[info]   (min, avg, max) = (668.758, 1203.916, 1339.725), stdev = 299.166
[info]   CI (99.9%): [51.934, 2355.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   696.935 ±(99.9%) 668.807 B/op [Average]
[info]   (min, avg, max) = (386.242, 696.935, 775.889), stdev = 173.687
[info]   CI (99.9%): [28.128, 1365.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.772 ±(99.9%) 6.494 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.772, 3.789), stdev = 1.686
[info]   CI (99.9%): [≈ 0, 7.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.447 ±(99.9%) 3.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.447, 2.194), stdev = 0.977
[info]   CI (99.9%): [≈ 0, 4.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186478.955 ops/s
[info] # Warmup Iteration   2: 6015672.178 ops/s
[info] # Warmup Iteration   3: 6255099.192 ops/s
[info] # Warmup Iteration   4: 6258606.190 ops/s
[info] # Warmup Iteration   5: 6245854.216 ops/s
[info] Iteration   1: 6299591.363 ops/s
[info]                  ·gc.alloc.rate:               738.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          184.386 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 334.078 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   2: 6423947.659 ops/s
[info]                  ·gc.alloc.rate:               741.227 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.548 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6410499.821 ops/s
[info]                  ·gc.alloc.rate:                   731.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              179.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6348396.445 ops/s
[info]                  ·gc.alloc.rate:               730.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166.471 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6420817.977 ops/s
[info]                  ·gc.alloc.rate:               739.223 MB/sec
[info]                  ·gc.alloc.rate.norm:          181.205 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 164.590 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6380650.653 ±(99.9%) 210820.206 ops/s [Average]
[info]   (min, avg, max) = (6299591.363, 6380650.653, 6423947.659), stdev = 54749.338
[info]   CI (99.9%): [6169830.447, 6591470.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   736.276 ±(99.9%) 18.555 MB/sec [Average]
[info]   (min, avg, max) = (730.826, 736.276, 741.227), stdev = 4.819
[info]   CI (99.9%): [717.722, 754.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   181.573 ±(99.9%) 6.744 B/op [Average]
[info]   (min, avg, max) = (179.558, 181.573, 184.386), stdev = 1.751
[info]   CI (99.9%): [174.829, 188.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   804.786 ±(99.9%) 1148.768 MB/sec [Average]
[info]   (min, avg, max) = (671.138, 804.786, 1338.457), stdev = 298.331
[info]   CI (99.9%): [≈ 0, 1953.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.868 ±(99.9%) 291.067 B/op [Average]
[info]   (min, avg, max) = (164.434, 198.868, 334.078), stdev = 75.589
[info]   CI (99.9%): [≈ 0, 489.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1089289.649 ops/s
[info] # Warmup Iteration   2: 6537547.633 ops/s
[info] # Warmup Iteration   3: 6646040.766 ops/s
[info] # Warmup Iteration   4: 6727415.840 ops/s
[info] # Warmup Iteration   5: 6751533.079 ops/s
[info] Iteration   1: 6724371.845 ops/s
[info]                  ·gc.alloc.rate:               423.116 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 119.740 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6710646.686 ops/s
[info]                  ·gc.alloc.rate:                   424.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              99.669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6739227.307 ops/s
[info]                  ·gc.alloc.rate:      411.068 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6687646.037 ops/s
[info]                  ·gc.alloc.rate:               422.492 MB/sec
[info]                  ·gc.alloc.rate.norm:          99.391 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 157.706 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6710930.923 ops/s
[info]                  ·gc.alloc.rate:                   426.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              100.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6714564.560 ±(99.9%) 73505.804 ops/s [Average]
[info]   (min, avg, max) = (6687646.037, 6714564.560, 6739227.307), stdev = 19089.224
[info]   CI (99.9%): [6641058.756, 6788070.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   421.722 ±(99.9%) 23.897 MB/sec [Average]
[info]   (min, avg, max) = (411.068, 421.722, 426.961), stdev = 6.206
[info]   CI (99.9%): [397.825, 445.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   98.847 ±(99.9%) 6.321 B/op [Average]
[info]   (min, avg, max) = (96.000, 98.847, 100.137), stdev = 1.641
[info]   CI (99.9%): [92.526, 105.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   472.734 ±(99.9%) 1062.453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 472.734, 670.373), stdev = 275.916
[info]   CI (99.9%): [≈ 0, 1535.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   110.920 ±(99.9%) 249.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.920, 157.706), stdev = 64.790
[info]   CI (99.9%): [≈ 0, 360.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.021), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13136.997 ops/s
[info] # Warmup Iteration   2: 331817.636 ops/s
[info] # Warmup Iteration   3: 429618.551 ops/s
[info] # Warmup Iteration   4: 422981.358 ops/s
[info] # Warmup Iteration   5: 422625.313 ops/s
[info] Iteration   1: 429744.646 ops/s
[info]                  ·gc.alloc.rate:                   2646.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              9688.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9770.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.973 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 432314.684 ops/s
[info]                  ·gc.alloc.rate:                   2634.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.542 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2661.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9690.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 424839.335 ops/s
[info]                  ·gc.alloc.rate:                   2608.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              9663.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2665.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9871.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 433601.469 ops/s
[info]                  ·gc.alloc.rate:               2632.618 MB/sec
[info]                  ·gc.alloc.rate.norm:          9555.849 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2004.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7275.297 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 433094.651 ops/s
[info]                  ·gc.alloc.rate:               2668.388 MB/sec
[info]                  ·gc.alloc.rate.norm:          9697.141 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2681.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9746.134 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   430718.957 ±(99.9%) 13886.148 ops/s [Average]
[info]   (min, avg, max) = (424839.335, 430718.957, 433601.469), stdev = 3606.188
[info]   CI (99.9%): [416832.809, 444605.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2638.264 ±(99.9%) 83.390 MB/sec [Average]
[info]   (min, avg, max) = (2608.964, 2638.264, 2668.388), stdev = 21.656
[info]   CI (99.9%): [2554.874, 2721.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9639.482 ±(99.9%) 239.708 B/op [Average]
[info]   (min, avg, max) = (9555.849, 9639.482, 9697.141), stdev = 62.251
[info]   CI (99.9%): [9399.773, 9879.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2536.414 ±(99.9%) 1145.724 MB/sec [Average]
[info]   (min, avg, max) = (2004.330, 2536.414, 2681.869), stdev = 297.541
[info]   CI (99.9%): [1390.690, 3682.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9270.827 ±(99.9%) 4302.912 B/op [Average]
[info]   (min, avg, max) = (7275.297, 9270.827, 9871.214), stdev = 1117.453
[info]   CI (99.9%): [4967.915, 13573.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.175 ±(99.9%) 1.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.175, 0.812), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.641 ±(99.9%) 5.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.641, 2.973), stdev = 1.306
[info]   CI (99.9%): [≈ 0, 5.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12145.851 ops/s
[info] # Warmup Iteration   2: 72443.100 ops/s
[info] # Warmup Iteration   3: 76607.230 ops/s
[info] # Warmup Iteration   4: 76974.953 ops/s
[info] # Warmup Iteration   5: 79283.793 ops/s
[info] Iteration   1: 77848.062 ops/s
[info]                  ·gc.alloc.rate:                   2159.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              43663.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40759.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 80027.703 ops/s
[info]                  ·gc.alloc.rate:                   2245.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              44151.440 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2679.327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52688.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.228 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 80136.364 ops/s
[info]                  ·gc.alloc.rate:                   2234.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              43877.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39420.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 77390.153 ops/s
[info]                  ·gc.alloc.rate:                   2173.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              44205.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40857.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 78457.583 ops/s
[info]                  ·gc.alloc.rate:                   2202.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              44191.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40361.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.835 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   78771.973 ±(99.9%) 4832.634 ops/s [Average]
[info]   (min, avg, max) = (77390.153, 78771.973, 80136.364), stdev = 1255.020
[info]   CI (99.9%): [73939.339, 83604.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2203.128 ±(99.9%) 142.532 MB/sec [Average]
[info]   (min, avg, max) = (2159.749, 2203.128, 2245.184), stdev = 37.015
[info]   CI (99.9%): [2060.595, 2345.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44017.730 ±(99.9%) 920.226 B/op [Average]
[info]   (min, avg, max) = (43663.299, 44017.730, 44205.308), stdev = 238.980
[info]   CI (99.9%): [43097.505, 44937.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2144.734 ±(99.9%) 1150.825 MB/sec [Average]
[info]   (min, avg, max) = (2007.197, 2144.734, 2679.327), stdev = 298.866
[info]   CI (99.9%): [993.909, 3295.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   42817.504 ±(99.9%) 21361.065 B/op [Average]
[info]   (min, avg, max) = (39420.052, 42817.504, 52688.838), stdev = 5547.401
[info]   CI (99.9%): [21456.439, 64178.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.812 ±(99.9%) 6.367 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.812, 3.768), stdev = 1.653
[info]   CI (99.9%): [≈ 0, 7.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.387 ±(99.9%) 128.771 B/op [Average]
[info]   (min, avg, max) = (0.423, 16.387, 76.176), stdev = 33.441
[info]   CI (99.9%): [≈ 0, 145.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27039.802 ops/s
[info] # Warmup Iteration   2: 120638.587 ops/s
[info] # Warmup Iteration   3: 124095.740 ops/s
[info] # Warmup Iteration   4: 127328.190 ops/s
[info] # Warmup Iteration   5: 127158.604 ops/s
[info] Iteration   1: 127937.459 ops/s
[info]                  ·gc.alloc.rate:               2023.158 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1997.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24560.442 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 126305.453 ops/s
[info]                  ·gc.alloc.rate:                   1988.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              24767.176 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24930.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 126532.751 ops/s
[info]                  ·gc.alloc.rate:               2004.186 MB/sec
[info]                  ·gc.alloc.rate.norm:          24928.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24952.680 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 127334.368 ops/s
[info]                  ·gc.alloc.rate:               2016.409 MB/sec
[info]                  ·gc.alloc.rate.norm:          24922.596 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2012.759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24877.487 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 127472.272 ops/s
[info]                  ·gc.alloc.rate:               2032.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          25093.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24917.138 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   127116.461 ±(99.9%) 2616.295 ops/s [Average]
[info]   (min, avg, max) = (126305.453, 127116.461, 127937.459), stdev = 679.444
[info]   CI (99.9%): [124500.166, 129732.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2012.938 ±(99.9%) 65.887 MB/sec [Average]
[info]   (min, avg, max) = (1988.493, 2012.938, 2032.442), stdev = 17.111
[info]   CI (99.9%): [1947.051, 2078.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24918.425 ±(99.9%) 451.920 B/op [Average]
[info]   (min, avg, max) = (24767.176, 24918.425, 25093.510), stdev = 117.362
[info]   CI (99.9%): [24466.505, 25370.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2007.157 ±(99.9%) 32.487 MB/sec [Average]
[info]   (min, avg, max) = (1997.142, 2007.157, 2018.157), stdev = 8.437
[info]   CI (99.9%): [1974.669, 2039.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24847.614 ±(99.9%) 627.057 B/op [Average]
[info]   (min, avg, max) = (24560.442, 24847.614, 24952.680), stdev = 162.845
[info]   CI (99.9%): [24220.558, 25474.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.259), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:12:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51321.912 ops/s
[info] # Warmup Iteration   2: 167327.872 ops/s
[info] # Warmup Iteration   3: 174092.473 ops/s
[info] # Warmup Iteration   4: 178354.300 ops/s
[info] # Warmup Iteration   5: 177460.489 ops/s
[info] Iteration   1: 180225.001 ops/s
[info]                  ·gc.alloc.rate:                   2739.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              23915.673 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2684.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23438.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.364 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 180880.900 ops/s
[info]                  ·gc.alloc.rate:                   2723.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              23693.285 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17510.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.449 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 178160.573 ops/s
[info]                  ·gc.alloc.rate:               2725.733 MB/sec
[info]                  ·gc.alloc.rate.norm:          24078.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2686.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23732.306 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 180036.501 ops/s
[info]                  ·gc.alloc.rate:               2748.983 MB/sec
[info]                  ·gc.alloc.rate.norm:          24032.243 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2692.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23537.988 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   5: 179219.309 ops/s
[info]                  ·gc.alloc.rate:                   2740.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              24064.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699.162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23704.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   179704.457 ±(99.9%) 4031.324 ops/s [Average]
[info]   (min, avg, max) = (178160.573, 179704.457, 180880.900), stdev = 1046.922
[info]   CI (99.9%): [175673.133, 183735.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2735.637 ±(99.9%) 40.985 MB/sec [Average]
[info]   (min, avg, max) = (2723.760, 2735.637, 2748.983), stdev = 10.644
[info]   CI (99.9%): [2694.652, 2776.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23956.809 ±(99.9%) 618.469 B/op [Average]
[info]   (min, avg, max) = (23693.285, 23956.809, 24078.088), stdev = 160.615
[info]   CI (99.9%): [23338.339, 24575.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2555.184 ±(99.9%) 1167.390 MB/sec [Average]
[info]   (min, avg, max) = (2012.955, 2555.184, 2699.162), stdev = 303.168
[info]   CI (99.9%): [1387.793, 3722.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22384.515 ±(99.9%) 10502.690 B/op [Average]
[info]   (min, avg, max) = (17510.174, 22384.515, 23732.306), stdev = 2727.515
[info]   CI (99.9%): [11881.825, 32887.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.399 ±(99.9%) 2.334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.399, 1.449), stdev = 0.606
[info]   CI (99.9%): [≈ 0, 2.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6350.320 ops/s
[info] # Warmup Iteration   2: 50768.536 ops/s
[info] # Warmup Iteration   3: 59101.854 ops/s
[info] # Warmup Iteration   4: 59715.546 ops/s
[info] # Warmup Iteration   5: 61183.992 ops/s
[info] Iteration   1: 61541.680 ops/s
[info]                  ·gc.alloc.rate:                   3104.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              79386.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2667.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68210.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 61577.230 ops/s
[info]                  ·gc.alloc.rate:                   3120.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              79764.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3337.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85305.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 61758.653 ops/s
[info]                  ·gc.alloc.rate:                   3130.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              79770.399 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68261.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.531 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 60984.252 ops/s
[info]                  ·gc.alloc.rate:                   3120.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              80527.155 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3360.272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86722.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.074 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 61541.995 ops/s
[info]                  ·gc.alloc.rate:               3120.713 MB/sec
[info]                  ·gc.alloc.rate.norm:          79808.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2697.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68973.832 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   61480.762 ±(99.9%) 1123.491 ops/s [Average]
[info]   (min, avg, max) = (60984.252, 61480.762, 61758.653), stdev = 291.767
[info]   CI (99.9%): [60357.271, 62604.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119.300 ±(99.9%) 36.131 MB/sec [Average]
[info]   (min, avg, max) = (3104.316, 3119.300, 3130.357), stdev = 9.383
[info]   CI (99.9%): [3083.169, 3155.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   79851.593 ±(99.9%) 1597.627 B/op [Average]
[info]   (min, avg, max) = (79386.559, 79851.593, 80527.155), stdev = 414.899
[info]   CI (99.9%): [78253.966, 81449.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2948.203 ±(99.9%) 1409.699 MB/sec [Average]
[info]   (min, avg, max) = (2667.293, 2948.203, 3360.272), stdev = 366.094
[info]   CI (99.9%): [1538.503, 4357.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75494.833 ±(99.9%) 37044.809 B/op [Average]
[info]   (min, avg, max) = (68210.591, 75494.833, 86722.327), stdev = 9620.419
[info]   CI (99.9%): [38450.024, 112539.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.172 ±(99.9%) 4.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.172, 3.192), stdev = 1.213
[info]   CI (99.9%): [≈ 0, 5.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66663.399 ops/s
[info] # Warmup Iteration   2: 179013.798 ops/s
[info] # Warmup Iteration   3: 185181.457 ops/s
[info] # Warmup Iteration   4: 190878.370 ops/s
[info] # Warmup Iteration   5: 190973.743 ops/s
[info] Iteration   1: 191429.645 ops/s
[info]                  ·gc.alloc.rate:                   1346.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              11064.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11027.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.342 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 192288.949 ops/s
[info]                  ·gc.alloc.rate:               1347.349 MB/sec
[info]                  ·gc.alloc.rate.norm:          11026.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5490.583 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 189143.514 ops/s
[info]                  ·gc.alloc.rate:                   1340.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              11155.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11169.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 191830.436 ops/s
[info]                  ·gc.alloc.rate:                   1344.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              11033.374 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11018.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 192102.233 ops/s
[info]                  ·gc.alloc.rate:                   1358.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              11126.641 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10980.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   191358.955 ±(99.9%) 4928.531 ops/s [Average]
[info]   (min, avg, max) = (189143.514, 191358.955, 192288.949), stdev = 1279.924
[info]   CI (99.9%): [186430.425, 196287.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1347.561 ±(99.9%) 25.894 MB/sec [Average]
[info]   (min, avg, max) = (1340.558, 1347.561, 1358.654), stdev = 6.725
[info]   CI (99.9%): [1321.667, 1373.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11081.183 ±(99.9%) 220.800 B/op [Average]
[info]   (min, avg, max) = (11026.343, 11081.183, 11155.369), stdev = 57.341
[info]   CI (99.9%): [10860.382, 11301.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.788 ±(99.9%) 1155.665 MB/sec [Average]
[info]   (min, avg, max) = (670.914, 1207.788, 1342.998), stdev = 300.123
[info]   CI (99.9%): [52.123, 2363.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9937.304 ±(99.9%) 9575.879 B/op [Average]
[info]   (min, avg, max) = (5490.583, 9937.304, 11169.334), stdev = 2486.825
[info]   CI (99.9%): [361.426, 19513.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.766 ±(99.9%) 6.151 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.766, 3.622), stdev = 1.597
[info]   CI (99.9%): [≈ 0, 6.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.288 ±(99.9%) 50.456 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.288, 29.718), stdev = 13.103
[info]   CI (99.9%): [≈ 0, 56.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.817
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181713.653 ops/s
[info] # Warmup Iteration   2: 444669.139 ops/s
[info] # Warmup Iteration   3: 455694.856 ops/s
[info] # Warmup Iteration   4: 470252.590 ops/s
[info] # Warmup Iteration   5: 471474.862 ops/s
[info] Iteration   1: 472654.901 ops/s
[info]                  ·gc.alloc.rate:      408.518 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 464823.273 ops/s
[info]                  ·gc.alloc.rate:               421.726 MB/sec
[info]                  ·gc.alloc.rate.norm:          1427.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1732.229 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 468337.172 ops/s
[info]                  ·gc.alloc.rate:               422.386 MB/sec
[info]                  ·gc.alloc.rate.norm:          1419.351 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2237.605 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 472878.004 ops/s
[info]                  ·gc.alloc.rate:      408.755 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 470538.128 ops/s
[info]                  ·gc.alloc.rate:                   423.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1414.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2227.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   469846.296 ±(99.9%) 12924.972 ops/s [Average]
[info]   (min, avg, max) = (464823.273, 469846.296, 472878.004), stdev = 3356.574
[info]   CI (99.9%): [456921.323, 482771.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   416.881 ±(99.9%) 29.037 MB/sec [Average]
[info]   (min, avg, max) = (408.518, 416.881, 423.021), stdev = 7.541
[info]   CI (99.9%): [387.845, 445.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1396.434 ±(99.9%) 129.301 B/op [Average]
[info]   (min, avg, max) = (1360.001, 1396.434, 1427.846), stdev = 33.579
[info]   CI (99.9%): [1267.133, 1525.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   368.664 ±(99.9%) 1318.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 368.664, 665.891), stdev = 342.382
[info]   CI (99.9%): [≈ 0, 1687.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1239.379 ±(99.9%) 4426.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1239.379, 2237.605), stdev = 1149.673
[info]   CI (99.9%): [≈ 0, 5666.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:11:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264983.128 ops/s
[info] # Warmup Iteration   2: 630673.747 ops/s
[info] # Warmup Iteration   3: 651816.750 ops/s
[info] # Warmup Iteration   4: 653700.446 ops/s
[info] # Warmup Iteration   5: 655991.727 ops/s
[info] Iteration   1: 656934.799 ops/s
[info]                  ·gc.alloc.rate:               366.331 MB/sec
[info]                  ·gc.alloc.rate.norm:          877.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1225.671 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 659165.011 ops/s
[info]                  ·gc.alloc.rate:      355.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 657769.793 ops/s
[info]                  ·gc.alloc.rate:               373.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          894.506 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1224.089 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 659052.370 ops/s
[info]                  ·gc.alloc.rate:                   376.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              898.133 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1601.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 657966.285 ops/s
[info]                  ·gc.alloc.rate:      354.514 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   658177.652 ±(99.9%) 3599.742 ops/s [Average]
[info]   (min, avg, max) = (656934.799, 658177.652, 659165.011), stdev = 934.842
[info]   CI (99.9%): [654577.909, 661777.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   365.196 ±(99.9%) 39.003 MB/sec [Average]
[info]   (min, avg, max) = (354.514, 365.196, 376.091), stdev = 10.129
[info]   CI (99.9%): [326.192, 404.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   873.256 ±(99.9%) 93.637 B/op [Average]
[info]   (min, avg, max) = (848.001, 873.256, 898.133), stdev = 24.317
[info]   CI (99.9%): [779.619, 966.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   338.744 ±(99.9%) 1216.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 338.744, 670.473), stdev = 315.956
[info]   CI (99.9%): [≈ 0, 1555.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   810.180 ±(99.9%) 2908.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 810.180, 1601.140), stdev = 755.373
[info]   CI (99.9%): [≈ 0, 3718.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358077.913 ops/s
[info] # Warmup Iteration   2: 699296.352 ops/s
[info] # Warmup Iteration   3: 715436.758 ops/s
[info] # Warmup Iteration   4: 715762.445 ops/s
[info] # Warmup Iteration   5: 718943.349 ops/s
[info] Iteration   1: 717936.711 ops/s
[info]                  ·gc.alloc.rate:      7.301 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 717927.619 ops/s
[info]                  ·gc.alloc.rate:      7.300 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 718466.498 ops/s
[info]                  ·gc.alloc.rate:      7.306 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 718624.127 ops/s
[info]                  ·gc.alloc.rate:      7.307 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 718753.020 ops/s
[info]                  ·gc.alloc.rate:      7.308 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   718341.595 ±(99.9%) 1491.352 ops/s [Average]
[info]   (min, avg, max) = (717927.619, 718341.595, 718753.020), stdev = 387.299
[info]   CI (99.9%): [716850.244, 719832.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.304 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (7.300, 7.304, 7.308), stdev = 0.004
[info]   CI (99.9%): [7.290, 7.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9551.866 ops/s
[info] # Warmup Iteration   2: 32515.591 ops/s
[info] # Warmup Iteration   3: 35038.869 ops/s
[info] # Warmup Iteration   4: 34643.940 ops/s
[info] # Warmup Iteration   5: 34804.135 ops/s
[info] Iteration   1: 34509.791 ops/s
[info]                  ·gc.alloc.rate:                   1889.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              86178.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91806.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 141.454 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 35295.970 ops/s
[info]                  ·gc.alloc.rate:                   1899.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              84708.332 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59790.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34939.750 ops/s
[info]                  ·gc.alloc.rate:                   1922.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              86562.263 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007.324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90404.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.938 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34979.430 ops/s
[info]                  ·gc.alloc.rate:                   1898.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              85387.540 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90203.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34177.800 ops/s
[info]                  ·gc.alloc.rate:               1882.298 MB/sec
[info]                  ·gc.alloc.rate.norm:          86675.880 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2006.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92409.537 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   34780.548 ±(99.9%) 1686.360 ops/s [Average]
[info]   (min, avg, max) = (34177.800, 34780.548, 35295.970), stdev = 437.942
[info]   CI (99.9%): [33094.188, 36466.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1898.493 ±(99.9%) 57.594 MB/sec [Average]
[info]   (min, avg, max) = (1882.298, 1898.493, 1922.016), stdev = 14.957
[info]   CI (99.9%): [1840.899, 1956.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85902.410 ±(99.9%) 3221.994 B/op [Average]
[info]   (min, avg, max) = (84708.332, 85902.410, 86675.880), stdev = 836.741
[info]   CI (99.9%): [82680.417, 89124.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1874.791 ±(99.9%) 1149.162 MB/sec [Average]
[info]   (min, avg, max) = (1340.961, 1874.791, 2013.113), stdev = 298.434
[info]   CI (99.9%): [725.629, 3023.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84922.946 ±(99.9%) 54217.801 B/op [Average]
[info]   (min, avg, max) = (59790.485, 84922.946, 92409.537), stdev = 14080.191
[info]   CI (99.9%): [30705.145, 139140.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.799 ±(99.9%) 5.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.102), stdev = 1.337
[info]   CI (99.9%): [≈ 0, 5.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   36.277 ±(99.9%) 234.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.277, 141.454), stdev = 60.990
[info]   CI (99.9%): [≈ 0, 271.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1136478.037 ops/s
[info] # Warmup Iteration   2: 3196948.549 ops/s
[info] # Warmup Iteration   3: 3311180.246 ops/s
[info] # Warmup Iteration   4: 3267259.332 ops/s
[info] # Warmup Iteration   5: 3322898.204 ops/s
[info] Iteration   1: 3366267.384 ops/s
[info]                  ·gc.alloc.rate:                   2903.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              1357.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3366193.724 ops/s
[info]                  ·gc.alloc.rate:                   2928.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1369.407 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3352.397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1567.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3371220.333 ops/s
[info]                  ·gc.alloc.rate:               2934.679 MB/sec
[info]                  ·gc.alloc.rate.norm:          1369.692 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2688.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1254.698 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 3369704.851 ops/s
[info]                  ·gc.alloc.rate:               2932.903 MB/sec
[info]                  ·gc.alloc.rate.norm:          1369.823 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2694.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1258.662 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3367040.758 ops/s
[info]                  ·gc.alloc.rate:                   2931.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1370.343 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1262.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3368085.410 ±(99.9%) 8701.374 ops/s [Average]
[info]   (min, avg, max) = (3366193.724, 3368085.410, 3371220.333), stdev = 2259.719
[info]   CI (99.9%): [3359384.037, 3376786.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2926.342 ±(99.9%) 49.549 MB/sec [Average]
[info]   (min, avg, max) = (2903.635, 2926.342, 2934.679), stdev = 12.868
[info]   CI (99.9%): [2876.794, 2975.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1367.264 ±(99.9%) 22.011 B/op [Average]
[info]   (min, avg, max) = (1357.057, 1367.264, 1370.343), stdev = 5.716
[info]   CI (99.9%): [1345.254, 1389.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2823.457 ±(99.9%) 1138.986 MB/sec [Average]
[info]   (min, avg, max) = (2680.237, 2823.457, 3352.397), stdev = 295.791
[info]   CI (99.9%): [1684.471, 3962.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1319.238 ±(99.9%) 534.420 B/op [Average]
[info]   (min, avg, max) = (1252.649, 1319.238, 1567.411), stdev = 138.787
[info]   CI (99.9%): [784.818, 1853.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.748 ops/s
[info] # Warmup Iteration   2: 5709681.782 ops/s
[info] # Warmup Iteration   3: 5932361.797 ops/s
[info] # Warmup Iteration   4: 5995751.764 ops/s
[info] # Warmup Iteration   5: 6003921.861 ops/s
[info] Iteration   1: 6023180.330 ops/s
[info]                  ·gc.alloc.rate:                   1154.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              301.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6003559.542 ops/s
[info]                  ·gc.alloc.rate:                   1163.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.927 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5986901.124 ops/s
[info]                  ·gc.alloc.rate:               1166.076 MB/sec
[info]                  ·gc.alloc.rate.norm:          306.539 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1334.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 350.767 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 5985168.607 ops/s
[info]                  ·gc.alloc.rate:                   1174.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              308.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     350.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6020689.021 ops/s
[info]                  ·gc.alloc.rate:                   1146.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              299.551 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   6003899.725 ±(99.9%) 69245.915 ops/s [Average]
[info]   (min, avg, max) = (5985168.607, 6003899.725, 6023180.330), stdev = 17982.944
[info]   CI (99.9%): [5934653.810, 6073145.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1160.909 ±(99.9%) 41.423 MB/sec [Average]
[info]   (min, avg, max) = (1146.433, 1160.909, 1174.289), stdev = 10.757
[info]   CI (99.9%): [1119.486, 1202.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.256 ±(99.9%) 14.110 B/op [Average]
[info]   (min, avg, max) = (299.551, 304.256, 308.622), stdev = 3.664
[info]   CI (99.9%): [290.145, 318.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1067.403 ±(99.9%) 1405.830 MB/sec [Average]
[info]   (min, avg, max) = (666.500, 1067.403, 1334.320), stdev = 365.090
[info]   CI (99.9%): [≈ 0, 2473.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   279.955 ±(99.9%) 371.039 B/op [Average]
[info]   (min, avg, max) = (174.148, 279.955, 350.767), stdev = 96.358
[info]   CI (99.9%): [≈ 0, 650.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.904 ±(99.9%) 7.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.904, 4.437), stdev = 1.975
[info]   CI (99.9%): [≈ 0, 8.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.236 ±(99.9%) 1.987 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.236, 1.159), stdev = 0.516
[info]   CI (99.9%): [≈ 0, 2.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1141147.387 ops/s
[info] # Warmup Iteration   2: 3974927.947 ops/s
[info] # Warmup Iteration   3: 4204547.274 ops/s
[info] # Warmup Iteration   4: 4124843.221 ops/s
[info] # Warmup Iteration   5: 4162940.810 ops/s
[info] Iteration   1: 4171072.001 ops/s
[info]                  ·gc.alloc.rate:                   2315.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              873.695 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1009.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.477 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4217662.925 ops/s
[info]                  ·gc.alloc.rate:                   2315.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              863.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     747.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4283270.179 ops/s
[info]                  ·gc.alloc.rate:               2365.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.157 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2003.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736.012 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 4270706.510 ops/s
[info]                  ·gc.alloc.rate:                   2385.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              879.277 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2676.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4278807.234 ops/s
[info]                  ·gc.alloc.rate:               2364.209 MB/sec
[info]                  ·gc.alloc.rate.norm:          869.491 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2013.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 740.356 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4244303.770 ±(99.9%) 187445.706 ops/s [Average]
[info]   (min, avg, max) = (4171072.001, 4244303.770, 4283270.179), stdev = 48679.055
[info]   CI (99.9%): [4056858.064, 4431749.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2349.275 ±(99.9%) 123.485 MB/sec [Average]
[info]   (min, avg, max) = (2315.406, 2349.275, 2385.890), stdev = 32.069
[info]   CI (99.9%): [2225.790, 2472.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   871.093 ±(99.9%) 22.166 B/op [Average]
[info]   (min, avg, max) = (863.848, 871.093, 879.277), stdev = 5.756
[info]   CI (99.9%): [848.927, 893.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2274.362 ±(99.9%) 1413.415 MB/sec [Average]
[info]   (min, avg, max) = (2002.821, 2274.362, 2676.487), stdev = 367.059
[info]   CI (99.9%): [860.947, 3687.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   843.969 ±(99.9%) 543.083 B/op [Average]
[info]   (min, avg, max) = (736.012, 843.969, 1009.902), stdev = 141.037
[info]   CI (99.9%): [300.887, 1387.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.795 ±(99.9%) 6.712 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.913), stdev = 1.743
[info]   CI (99.9%): [≈ 0, 7.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.300 ±(99.9%) 2.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.477), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3567421.723 ops/s
[info] # Warmup Iteration   2: 6667380.281 ops/s
[info] # Warmup Iteration   3: 6821979.012 ops/s
[info] # Warmup Iteration   4: 6900044.455 ops/s
[info] # Warmup Iteration   5: 6800023.983 ops/s
[info] Iteration   1: 6910631.742 ops/s
[info]                  ·gc.alloc.rate:                   1329.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              302.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6975340.915 ops/s
[info]                  ·gc.alloc.rate:                   1352.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6972621.062 ops/s
[info]                  ·gc.alloc.rate:                   1352.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303.666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7003238.333 ops/s
[info]                  ·gc.alloc.rate:                   1357.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              305.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     302.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6992620.112 ops/s
[info]                  ·gc.alloc.rate:               1344.683 MB/sec
[info]                  ·gc.alloc.rate.norm:          302.633 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.130 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6970890.433 ±(99.9%) 138469.033 ops/s [Average]
[info]   (min, avg, max) = (6910631.742, 6970890.433, 7003238.333), stdev = 35959.968
[info]   CI (99.9%): [6832421.400, 7109359.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1347.246 ±(99.9%) 41.796 MB/sec [Average]
[info]   (min, avg, max) = (1329.637, 1347.246, 1357.524), stdev = 10.854
[info]   CI (99.9%): [1305.450, 1389.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.116 ±(99.9%) 4.984 B/op [Average]
[info]   (min, avg, max) = (302.633, 304.116, 305.150), stdev = 1.294
[info]   CI (99.9%): [299.132, 309.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210.104 ±(99.9%) 1159.365 MB/sec [Average]
[info]   (min, avg, max) = (671.511, 1210.104, 1345.715), stdev = 301.083
[info]   CI (99.9%): [50.739, 2369.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   273.258 ±(99.9%) 262.946 B/op [Average]
[info]   (min, avg, max) = (151.130, 273.258, 305.994), stdev = 68.286
[info]   CI (99.9%): [10.312, 536.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.600 ±(99.9%) 4.637 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.749), stdev = 1.204
[info]   CI (99.9%): [≈ 0, 5.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.135 ±(99.9%) 1.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.620), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1463280.863 ops/s
[info] # Warmup Iteration   2: 3986287.181 ops/s
[info] # Warmup Iteration   3: 4209435.445 ops/s
[info] # Warmup Iteration   4: 4248028.429 ops/s
[info] # Warmup Iteration   5: 4222462.995 ops/s
[info] Iteration   1: 4260639.528 ops/s
[info]                  ·gc.alloc.rate:                   2547.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              940.933 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2675.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     988.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4202692.683 ops/s
[info]                  ·gc.alloc.rate:                   2501.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.584 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4227158.297 ops/s
[info]                  ·gc.alloc.rate:               2555.891 MB/sec
[info]                  ·gc.alloc.rate.norm:          951.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2676.574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 996.512 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 4255154.188 ops/s
[info]                  ·gc.alloc.rate:                   2572.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              951.516 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2683.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4255455.204 ops/s
[info]                  ·gc.alloc.rate:               2546.055 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.558 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 746.394 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4240219.980 ±(99.9%) 95318.140 ops/s [Average]
[info]   (min, avg, max) = (4202692.683, 4240219.980, 4260639.528), stdev = 24753.818
[info]   CI (99.9%): [4144901.839, 4335538.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2544.715 ±(99.9%) 100.711 MB/sec [Average]
[info]   (min, avg, max) = (2501.939, 2544.715, 2572.530), stdev = 26.154
[info]   CI (99.9%): [2444.004, 2645.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   944.434 ±(99.9%) 26.072 B/op [Average]
[info]   (min, avg, max) = (936.584, 944.434, 951.581), stdev = 6.771
[info]   CI (99.9%): [918.362, 970.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2411.907 ±(99.9%) 1406.136 MB/sec [Average]
[info]   (min, avg, max) = (2005.546, 2411.907, 2683.912), stdev = 365.169
[info]   CI (99.9%): [1005.770, 3818.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   894.922 ±(99.9%) 514.575 B/op [Average]
[info]   (min, avg, max) = (746.394, 894.922, 996.512), stdev = 133.634
[info]   CI (99.9%): [380.346, 1409.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.416), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.034 ±(99.9%) 0.259 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.154), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 2.074
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1093869.529 ops/s
[info] # Warmup Iteration   2: 2184710.583 ops/s
[info] # Warmup Iteration   3: 2201143.654 ops/s
[info] # Warmup Iteration   4: 2237963.650 ops/s
[info] # Warmup Iteration   5: 2222712.750 ops/s
[info] Iteration   1: 2237250.986 ops/s
[info]                  ·gc.alloc.rate:               1338.608 MB/sec
[info]                  ·gc.alloc.rate.norm:          941.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 943.803 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 2175976.967 ops/s
[info]                  ·gc.alloc.rate:                   1288.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              932.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2243020.638 ops/s
[info]                  ·gc.alloc.rate:                   1313.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              921.453 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     471.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2239609.185 ops/s
[info]                  ·gc.alloc.rate:                   1313.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              922.961 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944.705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2244098.378 ops/s
[info]                  ·gc.alloc.rate:                   1332.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              934.903 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     940.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2227991.231 ±(99.9%) 112454.739 ops/s [Average]
[info]   (min, avg, max) = (2175976.967, 2227991.231, 2244098.378), stdev = 29204.139
[info]   CI (99.9%): [2115536.492, 2340445.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1317.482 ±(99.9%) 75.310 MB/sec [Average]
[info]   (min, avg, max) = (1288.985, 1317.482, 1338.608), stdev = 19.558
[info]   CI (99.9%): [1242.172, 1392.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   930.629 ±(99.9%) 32.581 B/op [Average]
[info]   (min, avg, max) = (921.453, 930.629, 941.715), stdev = 8.461
[info]   CI (99.9%): [898.048, 963.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208.426 ±(99.9%) 1155.874 MB/sec [Average]
[info]   (min, avg, max) = (671.458, 1208.426, 1344.630), stdev = 300.177
[info]   CI (99.9%): [52.551, 2364.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   854.343 ±(99.9%) 826.181 B/op [Average]
[info]   (min, avg, max) = (471.153, 854.343, 971.116), stdev = 214.556
[info]   CI (99.9%): [28.163, 1680.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.633 ±(99.9%) 5.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.633, 3.040), stdev = 1.346
[info]   CI (99.9%): [≈ 0, 5.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.445 ±(99.9%) 3.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.445, 2.136), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.770 ops/s
[info] # Warmup Iteration   2: 5779659.204 ops/s
[info] # Warmup Iteration   3: 5575810.489 ops/s
[info] # Warmup Iteration   4: 5911955.028 ops/s
[info] # Warmup Iteration   5: 6049155.243 ops/s
[info] Iteration   1: 6018397.176 ops/s
[info]                  ·gc.alloc.rate:               599.358 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 6018957.253 ops/s
[info]                  ·gc.alloc.rate:               595.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.637 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.008 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 6025875.680 ops/s
[info]                  ·gc.alloc.rate:                   604.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5868041.395 ops/s
[info]                  ·gc.alloc.rate:                   581.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              155.918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5847226.990 ops/s
[info]                  ·gc.alloc.rate:                   583.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   5955699.699 ±(99.9%) 346062.722 ops/s [Average]
[info]   (min, avg, max) = (5847226.990, 5955699.699, 6025875.680), stdev = 89871.390
[info]   CI (99.9%): [5609636.976, 6301762.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   592.862 ±(99.9%) 38.135 MB/sec [Average]
[info]   (min, avg, max) = (581.568, 592.862, 604.425), stdev = 9.904
[info]   CI (99.9%): [554.727, 630.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   156.638 ±(99.9%) 3.412 B/op [Average]
[info]   (min, avg, max) = (155.637, 156.638, 157.836), stdev = 0.886
[info]   CI (99.9%): [153.226, 160.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   666.130 ±(99.9%) 2.630 MB/sec [Average]
[info]   (min, avg, max) = (665.438, 666.130, 667.061), stdev = 0.683
[info]   CI (99.9%): [663.500, 668.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   176.032 ±(99.9%) 10.739 B/op [Average]
[info]   (min, avg, max) = (173.986, 176.032, 179.477), stdev = 2.789
[info]   CI (99.9%): [165.293, 186.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.010 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.019), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1864582.507 ops/s
[info] # Warmup Iteration   2: 4424386.227 ops/s
[info] # Warmup Iteration   3: 4631396.300 ops/s
[info] # Warmup Iteration   4: 4578209.236 ops/s
[info] # Warmup Iteration   5: 4657072.287 ops/s
[info] Iteration   1: 4678575.953 ops/s
[info]                  ·gc.alloc.rate:                   1269.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              427.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4672053.221 ops/s
[info]                  ·gc.alloc.rate:                   1274.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4706372.516 ops/s
[info]                  ·gc.alloc.rate:                   1284.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              429.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     448.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4729341.089 ops/s
[info]                  ·gc.alloc.rate:                   1302.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              433.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.212 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4696531.651 ops/s
[info]                  ·gc.alloc.rate:                   1268.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.942 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   4696574.886 ±(99.9%) 88121.990 ops/s [Average]
[info]   (min, avg, max) = (4672053.221, 4696574.886, 4729341.089), stdev = 22885.001
[info]   CI (99.9%): [4608452.896, 4784696.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1279.888 ±(99.9%) 55.243 MB/sec [Average]
[info]   (min, avg, max) = (1268.233, 1279.888, 1302.789), stdev = 14.346
[info]   CI (99.9%): [1224.645, 1335.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   428.860 ±(99.9%) 12.364 B/op [Average]
[info]   (min, avg, max) = (424.942, 428.860, 433.531), stdev = 3.211
[info]   CI (99.9%): [416.496, 441.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1205.540 ±(99.9%) 1155.139 MB/sec [Average]
[info]   (min, avg, max) = (668.912, 1205.540, 1341.063), stdev = 299.986
[info]   CI (99.9%): [50.401, 2360.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   403.964 ±(99.9%) 387.172 B/op [Average]
[info]   (min, avg, max) = (224.130, 403.964, 451.020), stdev = 100.547
[info]   CI (99.9%): [16.792, 791.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.754 ±(99.9%) 6.220 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.754, 3.643), stdev = 1.615
[info]   CI (99.9%): [≈ 0, 6.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.251 ±(99.9%) 2.070 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.251, 1.212), stdev = 0.538
[info]   CI (99.9%): [≈ 0, 2.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 4.800, 6.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:08:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3811881.227 ops/s
[info] # Warmup Iteration   2: 5925269.022 ops/s
[info] # Warmup Iteration   3: 5977802.695 ops/s
[info] # Warmup Iteration   4: 5911389.523 ops/s
[info] # Warmup Iteration   5: 5961584.095 ops/s
[info] Iteration   1: 6044264.317 ops/s
[info]                  ·gc.alloc.rate:               605.356 MB/sec
[info]                  ·gc.alloc.rate.norm:          157.626 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.666 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 6043347.840 ops/s
[info]                  ·gc.alloc.rate:               597.686 MB/sec
[info]                  ·gc.alloc.rate.norm:          155.628 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174.703 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 5950700.065 ops/s
[info]                  ·gc.alloc.rate:                   595.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              157.599 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6034618.462 ops/s
[info]                  ·gc.alloc.rate:               598.632 MB/sec
[info]                  ·gc.alloc.rate.norm:          156.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175.129 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 6053467.739 ops/s
[info]                  ·gc.alloc.rate:      584.646 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   6025279.684 ±(99.9%) 162581.707 ops/s [Average]
[info]   (min, avg, max) = (5950700.065, 6025279.684, 6053467.739), stdev = 42221.953
[info]   CI (99.9%): [5862697.977, 6187861.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   596.463 ±(99.9%) 28.889 MB/sec [Average]
[info]   (min, avg, max) = (584.646, 596.463, 605.356), stdev = 7.503
[info]   CI (99.9%): [567.573, 625.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   155.784 ±(99.9%) 8.846 B/op [Average]
[info]   (min, avg, max) = (152.000, 155.784, 157.626), stdev = 2.297
[info]   CI (99.9%): [146.938, 164.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   537.024 ±(99.9%) 1155.986 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537.024, 671.750), stdev = 300.206
[info]   CI (99.9%): [≈ 0, 1693.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   140.419 ±(99.9%) 302.299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.419, 177.600), stdev = 78.506
[info]   CI (99.9%): [≈ 0, 442.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4119987.053 ops/s
[info] # Warmup Iteration   2: 6329210.973 ops/s
[info] # Warmup Iteration   3: 6408521.552 ops/s
[info] # Warmup Iteration   4: 6459201.165 ops/s
[info] # Warmup Iteration   5: 6452558.606 ops/s
[info] Iteration   1: 6452136.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6438904.618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6461153.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6460050.642 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6451552.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   6452759.661 ±(99.9%) 34302.454 ops/s [Average]
[info]   (min, avg, max) = (6438904.618, 6452759.661, 6461153.794), stdev = 8908.238
[info]   CI (99.9%): [6418457.207, 6487062.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1815013.221 ops/s
[info] # Warmup Iteration   2: 4416059.078 ops/s
[info] # Warmup Iteration   3: 4642387.836 ops/s
[info] # Warmup Iteration   4: 4677839.003 ops/s
[info] # Warmup Iteration   5: 4644654.195 ops/s
[info] Iteration   1: 4693495.131 ops/s
[info]                  ·gc.alloc.rate:                   1304.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              437.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4653343.243 ops/s
[info]                  ·gc.alloc.rate:               1306.381 MB/sec
[info]                  ·gc.alloc.rate.norm:          441.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453.537 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   3: 4688037.665 ops/s
[info]                  ·gc.alloc.rate:                   1314.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              441.213 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4681878.717 ops/s
[info]                  ·gc.alloc.rate:                   1325.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              445.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4695032.453 ops/s
[info]                  ·gc.alloc.rate:               1328.885 MB/sec
[info]                  ·gc.alloc.rate.norm:          445.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 448.816 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   4682357.442 ±(99.9%) 65546.450 ops/s [Average]
[info]   (min, avg, max) = (4653343.243, 4682357.442, 4695032.453), stdev = 17022.205
[info]   CI (99.9%): [4616810.992, 4747903.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1315.778 ±(99.9%) 42.620 MB/sec [Average]
[info]   (min, avg, max) = (1304.110, 1315.778, 1328.885), stdev = 11.068
[info]   CI (99.9%): [1273.159, 1358.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   442.273 ±(99.9%) 13.168 B/op [Average]
[info]   (min, avg, max) = (437.310, 442.273, 445.517), stdev = 3.420
[info]   CI (99.9%): [429.106, 455.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206.887 ±(99.9%) 1155.429 MB/sec [Average]
[info]   (min, avg, max) = (670.127, 1206.887, 1342.960), stdev = 300.061
[info]   CI (99.9%): [51.457, 2362.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   405.783 ±(99.9%) 389.818 B/op [Average]
[info]   (min, avg, max) = (224.716, 405.783, 453.537), stdev = 101.234
[info]   CI (99.9%): [15.965, 795.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.758 ±(99.9%) 6.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.758, 3.747), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.255 ±(99.9%) 2.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.255, 1.260), stdev = 0.562
[info]   CI (99.9%): [≈ 0, 2.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324896.156 ops/s
[info] # Warmup Iteration   2: 1452125.926 ops/s
[info] # Warmup Iteration   3: 1539969.583 ops/s
[info] # Warmup Iteration   4: 1533384.659 ops/s
[info] # Warmup Iteration   5: 1540866.037 ops/s
[info] Iteration   1: 1541974.472 ops/s
[info]                  ·gc.alloc.rate:                   2122.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              2165.864 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2059.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1544641.373 ops/s
[info]                  ·gc.alloc.rate:                   2122.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              2162.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2051.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1545120.549 ops/s
[info]                  ·gc.alloc.rate:               2152.117 MB/sec
[info]                  ·gc.alloc.rate.norm:          2192.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2011.213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2048.530 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 1524582.741 ops/s
[info]                  ·gc.alloc.rate:                   2125.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              2193.478 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2077.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1547067.413 ops/s
[info]                  ·gc.alloc.rate:                   2155.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              2192.747 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2049.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1540677.309 ±(99.9%) 35344.599 ops/s [Average]
[info]   (min, avg, max) = (1524582.741, 1540677.309, 1547067.413), stdev = 9178.880
[info]   CI (99.9%): [1505332.710, 1576021.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2135.544 ±(99.9%) 64.615 MB/sec [Average]
[info]   (min, avg, max) = (2122.122, 2135.544, 2155.510), stdev = 16.780
[info]   CI (99.9%): [2070.929, 2200.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2181.282 ±(99.9%) 60.738 B/op [Average]
[info]   (min, avg, max) = (2162.271, 2181.282, 2193.478), stdev = 15.774
[info]   CI (99.9%): [2120.544, 2242.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2014.221 ±(99.9%) 10.353 MB/sec [Average]
[info]   (min, avg, max) = (2011.213, 2014.221, 2018.413), stdev = 2.689
[info]   CI (99.9%): [2003.868, 2024.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2057.393 ±(99.9%) 45.761 B/op [Average]
[info]   (min, avg, max) = (2048.530, 2057.393, 2077.123), stdev = 11.884
[info]   CI (99.9%): [2011.632, 2103.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.675 ±(99.9%) 5.452 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.675, 3.206), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.688 ±(99.9%) 5.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.688, 3.272), stdev = 1.445
[info]   CI (99.9%): [≈ 0, 6.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.629 ops/s
[info] # Warmup Iteration   2: 2604657.985 ops/s
[info] # Warmup Iteration   3: 2813332.617 ops/s
[info] # Warmup Iteration   4: 2825188.618 ops/s
[info] # Warmup Iteration   5: 2858971.749 ops/s
[info] Iteration   1: 2875000.914 ops/s
[info]                  ·gc.alloc.rate:               556.419 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 364.688 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 2871669.494 ops/s
[info]                  ·gc.alloc.rate:               562.568 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.309 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 365.113 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 2872848.201 ops/s
[info]                  ·gc.alloc.rate:                   559.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              306.531 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2882995.797 ops/s
[info]                  ·gc.alloc.rate:      542.203 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2862135.001 ops/s
[info]                  ·gc.alloc.rate:               560.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          308.368 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366.492 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2872929.881 ±(99.9%) 28798.629 ops/s [Average]
[info]   (min, avg, max) = (2862135.001, 2872929.881, 2882995.797), stdev = 7478.913
[info]   CI (99.9%): [2844131.252, 2901728.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   556.335 ±(99.9%) 31.628 MB/sec [Average]
[info]   (min, avg, max) = (542.203, 556.335, 562.568), stdev = 8.214
[info]   CI (99.9%): [524.707, 587.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   304.744 ±(99.9%) 19.780 B/op [Average]
[info]   (min, avg, max) = (296.000, 304.744, 308.368), stdev = 5.137
[info]   CI (99.9%): [284.965, 324.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   533.153 ±(99.9%) 1147.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.153, 666.600), stdev = 298.041
[info]   CI (99.9%): [≈ 0, 1680.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   292.284 ±(99.9%) 629.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 292.284, 366.492), stdev = 163.393
[info]   CI (99.9%): [≈ 0, 921.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.005 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.023), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214636.036 ops/s
[info] # Warmup Iteration   2: 1627500.838 ops/s
[info] # Warmup Iteration   3: 1712248.111 ops/s
[info] # Warmup Iteration   4: 1725668.990 ops/s
[info] # Warmup Iteration   5: 1708446.366 ops/s
[info] Iteration   1: 1735579.437 ops/s
[info]                  ·gc.alloc.rate:                   950.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              861.963 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     605.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1730091.437 ops/s
[info]                  ·gc.alloc.rate:                   961.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              874.538 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1215.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1728671.116 ops/s
[info]                  ·gc.alloc.rate:               937.824 MB/sec
[info]                  ·gc.alloc.rate.norm:          853.487 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 608.627 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 1735984.258 ops/s
[info]                  ·gc.alloc.rate:                   941.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.734 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     606.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1736454.203 ops/s
[info]                  ·gc.alloc.rate:                   955.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              865.472 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1213.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1733356.090 ±(99.9%) 14155.475 ops/s [Average]
[info]   (min, avg, max) = (1728671.116, 1733356.090, 1736454.203), stdev = 3676.132
[info]   CI (99.9%): [1719200.615, 1747511.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   949.360 ±(99.9%) 37.285 MB/sec [Average]
[info]   (min, avg, max) = (937.824, 949.360, 961.561), stdev = 9.683
[info]   CI (99.9%): [912.074, 986.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   861.839 ±(99.9%) 33.894 B/op [Average]
[info]   (min, avg, max) = (853.487, 861.839, 874.538), stdev = 8.802
[info]   CI (99.9%): [827.945, 895.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   936.271 ±(99.9%) 1411.391 MB/sec [Average]
[info]   (min, avg, max) = (667.851, 936.271, 1338.945), stdev = 366.534
[info]   CI (99.9%): [≈ 0, 2347.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   849.960 ±(99.9%) 1281.315 B/op [Average]
[info]   (min, avg, max) = (605.587, 849.960, 1215.661), stdev = 332.753
[info]   CI (99.9%): [≈ 0, 2131.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.025 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.052), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.047), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1202496.299 ops/s
[info] # Warmup Iteration   2: 2322598.374 ops/s
[info] # Warmup Iteration   3: 2408218.859 ops/s
[info] # Warmup Iteration   4: 2427894.941 ops/s
[info] # Warmup Iteration   5: 2371933.559 ops/s
[info] Iteration   1: 2431665.389 ops/s
[info]                  ·gc.alloc.rate:                   475.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              307.559 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     331.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2432622.284 ops/s
[info]                  ·gc.alloc.rate:      457.494 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2423917.761 ops/s
[info]                  ·gc.alloc.rate:               473.836 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.662 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 2427075.566 ops/s
[info]                  ·gc.alloc.rate:               474.919 MB/sec
[info]                  ·gc.alloc.rate.norm:          307.972 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 435.635 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 2432657.947 ops/s
[info]                  ·gc.alloc.rate:      457.509 MB/sec
[info]                  ·gc.alloc.rate.norm: 296.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2429587.789 ±(99.9%) 15087.811 ops/s [Average]
[info]   (min, avg, max) = (2423917.761, 2429587.789, 2432657.947), stdev = 3918.257
[info]   CI (99.9%): [2414499.979, 2444675.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   467.804 ±(99.9%) 36.273 MB/sec [Average]
[info]   (min, avg, max) = (457.494, 467.804, 475.263), stdev = 9.420
[info]   CI (99.9%): [431.531, 504.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   303.039 ±(99.9%) 24.748 B/op [Average]
[info]   (min, avg, max) = (296.000, 303.039, 307.972), stdev = 6.427
[info]   CI (99.9%): [278.291, 327.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   371.053 ±(99.9%) 1328.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 371.053, 671.787), stdev = 344.971
[info]   CI (99.9%): [≈ 0, 1699.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   240.592 ±(99.9%) 861.605 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 240.592, 436.190), stdev = 223.756
[info]   CI (99.9%): [≈ 0, 1102.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361732.341 ops/s
[info] # Warmup Iteration   2: 1576361.703 ops/s
[info] # Warmup Iteration   3: 1675053.682 ops/s
[info] # Warmup Iteration   4: 1710646.001 ops/s
[info] # Warmup Iteration   5: 1717786.306 ops/s
[info] Iteration   1: 1707551.016 ops/s
[info]                  ·gc.alloc.rate:                   1022.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              942.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1232.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1718073.231 ops/s
[info]                  ·gc.alloc.rate:               1014.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          929.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 612.676 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1712798.521 ops/s
[info]                  ·gc.alloc.rate:               1025.427 MB/sec
[info]                  ·gc.alloc.rate.norm:          942.238 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229.692 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 1707146.386 ops/s
[info]                  ·gc.alloc.rate:                   1015.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              935.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     617.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1704308.233 ops/s
[info]                  ·gc.alloc.rate:                   1026.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              947.851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1237.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1709975.478 ±(99.9%) 21050.613 ops/s [Average]
[info]   (min, avg, max) = (1704308.233, 1709975.478, 1718073.231), stdev = 5466.777
[info]   CI (99.9%): [1688924.865, 1731026.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1020.733 ±(99.9%) 22.182 MB/sec [Average]
[info]   (min, avg, max) = (1014.151, 1020.733, 1026.409), stdev = 5.761
[info]   CI (99.9%): [998.551, 1042.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   939.509 ±(99.9%) 27.865 B/op [Average]
[info]   (min, avg, max) = (929.036, 939.509, 947.851), stdev = 7.237
[info]   CI (99.9%): [911.643, 967.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1070.750 ±(99.9%) 1411.730 MB/sec [Average]
[info]   (min, avg, max) = (668.807, 1070.750, 1340.295), stdev = 366.622
[info]   CI (99.9%): [≈ 0, 2482.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   985.919 ±(99.9%) 1304.107 B/op [Average]
[info]   (min, avg, max) = (612.676, 985.919, 1237.713), stdev = 338.672
[info]   CI (99.9%): [≈ 0, 2290.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.012 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.038), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399574.138 ops/s
[info] # Warmup Iteration   2: 1817430.516 ops/s
[info] # Warmup Iteration   3: 1863563.621 ops/s
[info] # Warmup Iteration   4: 1866436.186 ops/s
[info] # Warmup Iteration   5: 1879170.903 ops/s
[info] Iteration   1: 1822738.054 ops/s
[info]                  ·gc.alloc.rate:                   1381.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              1193.271 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1158.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1869620.455 ops/s
[info]                  ·gc.alloc.rate:                   1415.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1191.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1130.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1882105.506 ops/s
[info]                  ·gc.alloc.rate:                   1424.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              1190.912 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1123.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1892481.536 ops/s
[info]                  ·gc.alloc.rate:                   1444.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.884 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1889962.658 ops/s
[info]                  ·gc.alloc.rate:                   1454.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1211.621 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1871381.642 ±(99.9%) 110177.571 ops/s [Average]
[info]   (min, avg, max) = (1822738.054, 1871381.642, 1892481.536), stdev = 28612.765
[info]   CI (99.9%): [1761204.071, 1981559.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1424.043 ±(99.9%) 109.010 MB/sec [Average]
[info]   (min, avg, max) = (1381.971, 1424.043, 1454.972), stdev = 28.310
[info]   CI (99.9%): [1315.033, 1533.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1197.549 ±(99.9%) 34.098 B/op [Average]
[info]   (min, avg, max) = (1190.912, 1197.549, 1211.621), stdev = 8.855
[info]   CI (99.9%): [1163.451, 1231.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1342.473 ±(99.9%) 4.117 MB/sec [Average]
[info]   (min, avg, max) = (1340.905, 1342.473, 1343.684), stdev = 1.069
[info]   CI (99.9%): [1338.355, 1346.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1129.213 ±(99.9%) 67.096 B/op [Average]
[info]   (min, avg, max) = (1116.632, 1129.213, 1158.723), stdev = 17.425
[info]   CI (99.9%): [1062.117, 1196.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.641 ±(99.9%) 4.940 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.641, 2.935), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.536 ±(99.9%) 4.131 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.536, 2.455), stdev = 1.073
[info]   CI (99.9%): [≈ 0, 4.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.636 ops/s
[info] # Warmup Iteration   2: 2854120.578 ops/s
[info] # Warmup Iteration   3: 3079458.295 ops/s
[info] # Warmup Iteration   4: 3078261.256 ops/s
[info] # Warmup Iteration   5: 3075059.345 ops/s
[info] Iteration   1: 3074200.239 ops/s
[info]                  ·gc.alloc.rate:               812.394 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.923 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 341.030 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 3084319.571 ops/s
[info]                  ·gc.alloc.rate:               816.954 MB/sec
[info]                  ·gc.alloc.rate.norm:          416.881 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 339.919 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 3084821.706 ops/s
[info]                  ·gc.alloc.rate:               820.036 MB/sec
[info]                  ·gc.alloc.rate.norm:          418.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 340.024 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 3085367.411 ops/s
[info]                  ·gc.alloc.rate:                   818.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              417.467 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     339.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3073929.649 ops/s
[info]                  ·gc.alloc.rate:                   837.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              428.900 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     683.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   3080527.715 ±(99.9%) 22765.304 ops/s [Average]
[info]   (min, avg, max) = (3073929.649, 3080527.715, 3085367.411), stdev = 5912.077
[info]   CI (99.9%): [3057762.412, 3103293.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   821.092 ±(99.9%) 37.341 MB/sec [Average]
[info]   (min, avg, max) = (812.394, 821.092, 837.676), stdev = 9.697
[info]   CI (99.9%): [783.751, 858.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   419.486 ±(99.9%) 20.529 B/op [Average]
[info]   (min, avg, max) = (415.923, 419.486, 428.900), stdev = 5.331
[info]   CI (99.9%): [398.958, 440.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   799.924 ±(99.9%) 1150.217 MB/sec [Average]
[info]   (min, avg, max) = (666.110, 799.924, 1334.268), stdev = 298.708
[info]   CI (99.9%): [≈ 0, 1950.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   408.819 ±(99.9%) 590.545 B/op [Average]
[info]   (min, avg, max) = (339.919, 408.819, 683.162), stdev = 153.363
[info]   CI (99.9%): [≈ 0, 999.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0.007 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0.004 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 788350.206 ops/s
[info] # Warmup Iteration   2: 2865555.811 ops/s
[info] # Warmup Iteration   3: 2872389.311 ops/s
[info] # Warmup Iteration   4: 2958536.143 ops/s
[info] # Warmup Iteration   5: 2950473.185 ops/s
[info] Iteration   1: 2954829.848 ops/s
[info]                  ·gc.alloc.rate:                   1295.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              690.076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2972610.183 ops/s
[info]                  ·gc.alloc.rate:                   1298.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              687.682 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2977877.959 ops/s
[info]                  ·gc.alloc.rate:               1310.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          692.450 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 708.690 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 2985906.903 ops/s
[info]                  ·gc.alloc.rate:                   1328.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              700.306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.788 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2994196.920 ops/s
[info]                  ·gc.alloc.rate:                   1329.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              698.490 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2977084.363 ±(99.9%) 57327.680 ops/s [Average]
[info]   (min, avg, max) = (2954829.848, 2977084.363, 2994196.920), stdev = 14887.817
[info]   CI (99.9%): [2919756.682, 3034412.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1312.493 ±(99.9%) 61.323 MB/sec [Average]
[info]   (min, avg, max) = (1295.558, 1312.493, 1329.134), stdev = 15.925
[info]   CI (99.9%): [1251.170, 1373.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   693.801 ±(99.9%) 20.865 B/op [Average]
[info]   (min, avg, max) = (687.682, 693.801, 700.306), stdev = 5.419
[info]   CI (99.9%): [672.936, 714.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1339.951 ±(99.9%) 5.248 MB/sec [Average]
[info]   (min, avg, max) = (1338.225, 1339.951, 1341.584), stdev = 1.363
[info]   CI (99.9%): [1334.702, 1345.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   708.345 ±(99.9%) 12.588 B/op [Average]
[info]   (min, avg, max) = (703.821, 708.345, 712.802), stdev = 3.269
[info]   CI (99.9%): [695.757, 720.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.741 ±(99.9%) 5.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.741, 3.393), stdev = 1.486
[info]   CI (99.9%): [≈ 0, 6.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.391 ±(99.9%) 3.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.391, 1.788), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1344750.427 ops/s
[info] # Warmup Iteration   2: 3073060.470 ops/s
[info] # Warmup Iteration   3: 3240102.991 ops/s
[info] # Warmup Iteration   4: 3359272.397 ops/s
[info] # Warmup Iteration   5: 3367178.721 ops/s
[info] Iteration   1: 3340784.920 ops/s
[info]                  ·gc.alloc.rate:                   903.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              425.587 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3370819.397 ops/s
[info]                  ·gc.alloc.rate:               890.442 MB/sec
[info]                  ·gc.alloc.rate.norm:          415.749 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.957 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3379965.857 ops/s
[info]                  ·gc.alloc.rate:                   893.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              415.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3372732.106 ops/s
[info]                  ·gc.alloc.rate:               904.567 MB/sec
[info]                  ·gc.alloc.rate.norm:          422.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1336.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 623.577 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 3373248.140 ops/s
[info]                  ·gc.alloc.rate:               889.128 MB/sec
[info]                  ·gc.alloc.rate.norm:          414.862 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3367510.084 ±(99.9%) 59045.799 ops/s [Average]
[info]   (min, avg, max) = (3340784.920, 3367510.084, 3379965.857), stdev = 15334.006
[info]   CI (99.9%): [3308464.285, 3426555.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   896.195 ±(99.9%) 28.098 MB/sec [Average]
[info]   (min, avg, max) = (889.128, 896.195, 904.567), stdev = 7.297
[info]   CI (99.9%): [868.097, 924.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   418.830 ±(99.9%) 18.336 B/op [Average]
[info]   (min, avg, max) = (414.862, 418.830, 425.587), stdev = 4.762
[info]   CI (99.9%): [400.494, 437.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.724 ±(99.9%) 1410.447 MB/sec [Average]
[info]   (min, avg, max) = (668.107, 935.724, 1337.672), stdev = 366.289
[info]   CI (99.9%): [≈ 0, 2346.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   437.708 ±(99.9%) 664.986 B/op [Average]
[info]   (min, avg, max) = (311.110, 437.708, 630.159), stdev = 172.695
[info]   CI (99.9%): [≈ 0, 1102.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.018 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1251026.183 ops/s
[info] # Warmup Iteration   2: 3614473.303 ops/s
[info] # Warmup Iteration   3: 3650542.055 ops/s
[info] # Warmup Iteration   4: 3649553.226 ops/s
[info] # Warmup Iteration   5: 3651072.864 ops/s
[info] Iteration   1: 3651237.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3649299.918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3650987.452 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3651444.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3649960.050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3650585.871 ±(99.9%) 3533.645 ops/s [Average]
[info]   (min, avg, max) = (3649299.918, 3650585.871, 3651444.853), stdev = 917.677
[info]   CI (99.9%): [3647052.225, 3654119.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651035.390 ops/s
[info] # Warmup Iteration   2: 2740953.071 ops/s
[info] # Warmup Iteration   3: 2773009.786 ops/s
[info] # Warmup Iteration   4: 2895641.294 ops/s
[info] # Warmup Iteration   5: 2893929.971 ops/s
[info] Iteration   1: 2889437.718 ops/s
[info]                  ·gc.alloc.rate:                   1426.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              777.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2894096.442 ops/s
[info]                  ·gc.alloc.rate:                   1437.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.582 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2895619.968 ops/s
[info]                  ·gc.alloc.rate:                   1426.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              774.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     730.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2894141.132 ops/s
[info]                  ·gc.alloc.rate:                   1437.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              781.597 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2887837.399 ops/s
[info]                  ·gc.alloc.rate:               1447.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          789.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 730.111 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2892226.532 ±(99.9%) 13018.314 ops/s [Average]
[info]   (min, avg, max) = (2887837.399, 2892226.532, 2895619.968), stdev = 3380.815
[info]   CI (99.9%): [2879208.218, 2905244.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1435.212 ±(99.9%) 34.426 MB/sec [Average]
[info]   (min, avg, max) = (1426.312, 1435.212, 1447.985), stdev = 8.940
[info]   CI (99.9%): [1400.787, 1469.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   780.879 ±(99.9%) 20.967 B/op [Average]
[info]   (min, avg, max) = (774.911, 780.879, 789.137), stdev = 5.445
[info]   CI (99.9%): [759.912, 801.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341.882 ±(99.9%) 5.879 MB/sec [Average]
[info]   (min, avg, max) = (1339.677, 1341.882, 1343.827), stdev = 1.527
[info]   CI (99.9%): [1336.003, 1347.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   730.097 ±(99.9%) 1.143 B/op [Average]
[info]   (min, avg, max) = (729.756, 730.097, 730.562), stdev = 0.297
[info]   CI (99.9%): [728.954, 731.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.093), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 5.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 2.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.680), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1370.314 ops/s
[info] # Warmup Iteration   2: 8780.047 ops/s
[info] # Warmup Iteration   3: 11798.208 ops/s
[info] # Warmup Iteration   4: 11984.027 ops/s
[info] # Warmup Iteration   5: 11687.312 ops/s
[info] Iteration   1: 11950.812 ops/s
[info]                  ·gc.alloc.rate:                   1421.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              187143.759 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175610.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 11880.980 ops/s
[info]                  ·gc.alloc.rate:                   1414.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              187346.839 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176792.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 11868.497 ops/s
[info]                  ·gc.alloc.rate:                   1425.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              189035.655 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177103.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.663 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 11967.216 ops/s
[info]                  ·gc.alloc.rate:                   1423.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              187150.484 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175551.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 11862.845 ops/s
[info]                  ·gc.alloc.rate:                   1424.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              188944.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176736.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11906.070 ±(99.9%) 189.136 ops/s [Average]
[info]   (min, avg, max) = (11862.845, 11906.070, 11967.216), stdev = 49.118
[info]   CI (99.9%): [11716.934, 12095.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1421.732 ±(99.9%) 17.364 MB/sec [Average]
[info]   (min, avg, max) = (1414.293, 1421.732, 1425.854), stdev = 4.509
[info]   CI (99.9%): [1404.368, 1439.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   187924.256 ±(99.9%) 3761.775 B/op [Average]
[info]   (min, avg, max) = (187143.759, 187924.256, 189035.655), stdev = 976.921
[info]   CI (99.9%): [184162.481, 191686.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1334.234 ±(99.9%) 5.263 MB/sec [Average]
[info]   (min, avg, max) = (1332.298, 1334.234, 1335.852), stdev = 1.367
[info]   CI (99.9%): [1328.971, 1339.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   176358.711 ±(99.9%) 2788.071 B/op [Average]
[info]   (min, avg, max) = (175551.070, 176358.711, 177103.435), stdev = 724.053
[info]   CI (99.9%): [173570.640, 179146.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.887 ±(99.9%) 6.396 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.887, 3.852), stdev = 1.661
[info]   CI (99.9%): [≈ 0, 7.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   117.473 ±(99.9%) 848.101 B/op [Average]
[info]   (min, avg, max) = (5.515, 117.473, 510.663), stdev = 220.249
[info]   CI (99.9%): [≈ 0, 965.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3038.642 ops/s
[info] # Warmup Iteration   2: 16162.055 ops/s
[info] # Warmup Iteration   3: 21182.465 ops/s
[info] # Warmup Iteration   4: 21312.498 ops/s
[info] # Warmup Iteration   5: 21596.221 ops/s
[info] Iteration   1: 21499.142 ops/s
[info]                  ·gc.alloc.rate:               335.785 MB/sec
[info]                  ·gc.alloc.rate.norm:          24580.364 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37452.626 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 21649.696 ops/s
[info]                  ·gc.alloc.rate:      326.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 23722.300 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 21720.224 ops/s
[info]                  ·gc.alloc.rate:               332.511 MB/sec
[info]                  ·gc.alloc.rate.norm:          24089.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37069.894 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 21689.946 ops/s
[info]                  ·gc.alloc.rate:      322.197 MB/sec
[info]                  ·gc.alloc.rate.norm: 23368.020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21784.124 ops/s
[info]                  ·gc.alloc.rate:                   343.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              24827.911 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47647.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   21668.626 ±(99.9%) 410.865 ops/s [Average]
[info]   (min, avg, max) = (21499.142, 21668.626, 21784.124), stdev = 106.700
[info]   CI (99.9%): [21257.761, 22079.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   332.098 ±(99.9%) 32.134 MB/sec [Average]
[info]   (min, avg, max) = (322.197, 332.098, 343.656), stdev = 8.345
[info]   CI (99.9%): [299.964, 364.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24117.549 ±(99.9%) 2308.488 B/op [Average]
[info]   (min, avg, max) = (23368.020, 24117.549, 24827.911), stdev = 599.507
[info]   CI (99.9%): [21809.062, 26426.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   336.566 ±(99.9%) 1205.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 336.566, 659.510), stdev = 313.114
[info]   CI (99.9%): [≈ 0, 1542.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24433.950 ±(99.9%) 87428.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24433.950, 47647.232), stdev = 22704.874
[info]   CI (99.9%): [≈ 0, 111862.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.602 ±(99.9%) 5.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 3.008), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 5.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11278.136 ops/s
[info] # Warmup Iteration   2: 21198.493 ops/s
[info] # Warmup Iteration   3: 22215.159 ops/s
[info] # Warmup Iteration   4: 22042.687 ops/s
[info] # Warmup Iteration   5: 22207.045 ops/s
[info] Iteration   1: 22037.635 ops/s
[info]                  ·gc.alloc.rate:               259.318 MB/sec
[info]                  ·gc.alloc.rate.norm:          18510.604 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36536.744 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 22272.958 ops/s
[info]                  ·gc.alloc.rate:      242.355 MB/sec
[info]                  ·gc.alloc.rate.norm: 17121.944 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22169.492 ops/s
[info]                  ·gc.alloc.rate:               258.454 MB/sec
[info]                  ·gc.alloc.rate.norm:          18347.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36319.234 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 22223.173 ops/s
[info]                  ·gc.alloc.rate:      241.529 MB/sec
[info]                  ·gc.alloc.rate.norm: 17104.019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21961.986 ops/s
[info]                  ·gc.alloc.rate:                   257.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              18482.259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36661.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   22133.049 ±(99.9%) 499.809 ops/s [Average]
[info]   (min, avg, max) = (21961.986, 22133.049, 22272.958), stdev = 129.799
[info]   CI (99.9%): [21633.239, 22632.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   251.910 ±(99.9%) 35.111 MB/sec [Average]
[info]   (min, avg, max) = (241.529, 251.910, 259.318), stdev = 9.118
[info]   CI (99.9%): [216.799, 287.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17913.189 ±(99.9%) 2822.988 B/op [Average]
[info]   (min, avg, max) = (17104.019, 17913.189, 18510.604), stdev = 733.121
[info]   CI (99.9%): [15090.202, 20736.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   307.007 ±(99.9%) 1079.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 307.007, 511.849), stdev = 280.258
[info]   CI (99.9%): [≈ 0, 1386.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   21903.494 ±(99.9%) 76995.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21903.494, 36661.494), stdev = 19995.438
[info]   CI (99.9%): [≈ 0, 98898.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.597 ±(99.9%) 5.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.597, 2.984), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135.922 ops/s
[info] # Warmup Iteration   2: 2973.125 ops/s
[info] # Warmup Iteration   3: 7076.045 ops/s
[info] # Warmup Iteration   4: 7508.127 ops/s
[info] # Warmup Iteration   5: 7562.532 ops/s
[info] Iteration   1: 7492.913 ops/s
[info]                  ·gc.alloc.rate:                   2063.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              433446.323 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418940.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.744 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 7514.227 ops/s
[info]                  ·gc.alloc.rate:                   2074.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              434561.945 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1999.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418746.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.037 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 7576.542 ops/s
[info]                  ·gc.alloc.rate:                   2102.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              436730.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415597.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7601.169 ops/s
[info]                  ·gc.alloc.rate:                   2095.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              433787.471 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2002.720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     414644.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7594.996 ops/s
[info]                  ·gc.alloc.rate:               2094.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          433980.163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2007.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 415938.367 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   7555.969 ±(99.9%) 189.699 ops/s [Average]
[info]   (min, avg, max) = (7492.913, 7555.969, 7601.169), stdev = 49.264
[info]   CI (99.9%): [7366.271, 7745.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2086.023 ±(99.9%) 62.435 MB/sec [Average]
[info]   (min, avg, max) = (2063.432, 2086.023, 2102.288), stdev = 16.214
[info]   CI (99.9%): [2023.587, 2148.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   434501.234 ±(99.9%) 5044.961 B/op [Average]
[info]   (min, avg, max) = (433446.323, 434501.234, 436730.267), stdev = 1310.160
[info]   CI (99.9%): [429456.272, 439546.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2000.859 ±(99.9%) 18.134 MB/sec [Average]
[info]   (min, avg, max) = (1994.378, 2000.859, 2007.259), stdev = 4.709
[info]   CI (99.9%): [1982.725, 2018.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   416773.625 ±(99.9%) 7507.003 B/op [Average]
[info]   (min, avg, max) = (414644.712, 416773.625, 418940.738), stdev = 1949.545
[info]   CI (99.9%): [409266.622, 424280.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.502 ±(99.9%) 3.793 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.502, 2.259), stdev = 0.985
[info]   CI (99.9%): [≈ 0, 4.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   105.001 ±(99.9%) 794.406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105.001, 473.037), stdev = 206.305
[info]   CI (99.9%): [≈ 0, 899.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2152.206 ops/s
[info] # Warmup Iteration   2: 55653.463 ops/s
[info] # Warmup Iteration   3: 62450.103 ops/s
[info] # Warmup Iteration   4: 63962.035 ops/s
[info] # Warmup Iteration   5: 63789.110 ops/s
[info] Iteration   1: 64346.922 ops/s
[info]                  ·gc.alloc.rate:                   828.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              20268.510 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16186.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.254 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 63914.675 ops/s
[info]                  ·gc.alloc.rate:                   839.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              20679.355 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32656.773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 63471.506 ops/s
[info]                  ·gc.alloc.rate:               817.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          20278.904 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16460.397 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   4: 63960.832 ops/s
[info]                  ·gc.alloc.rate:                   821.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              20221.733 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16333.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.768 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 63601.888 ops/s
[info]                  ·gc.alloc.rate:               816.606 MB/sec
[info]                  ·gc.alloc.rate.norm:          20205.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16450.190 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   63859.165 ±(99.9%) 1316.835 ops/s [Average]
[info]   (min, avg, max) = (63471.506, 63859.165, 64346.922), stdev = 341.978
[info]   CI (99.9%): [62542.329, 65176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   824.974 ±(99.9%) 36.861 MB/sec [Average]
[info]   (min, avg, max) = (816.606, 824.974, 839.843), stdev = 9.573
[info]   CI (99.9%): [788.114, 861.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20330.710 ±(99.9%) 759.889 B/op [Average]
[info]   (min, avg, max) = (20205.047, 20330.710, 20679.355), stdev = 197.341
[info]   CI (99.9%): [19570.821, 21090.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   796.128 ±(99.9%) 1141.193 MB/sec [Average]
[info]   (min, avg, max) = (661.876, 796.128, 1326.277), stdev = 296.364
[info]   CI (99.9%): [≈ 0, 1937.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19617.574 ±(99.9%) 28071.088 B/op [Average]
[info]   (min, avg, max) = (16186.707, 19617.574, 32656.773), stdev = 7289.973
[info]   CI (99.9%): [≈ 0, 47688.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.307 ±(99.9%) 1.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 0.768), stdev = 0.334
[info]   CI (99.9%): [≈ 0, 1.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31027.310 ops/s
[info] # Warmup Iteration   2: 69777.275 ops/s
[info] # Warmup Iteration   3: 69999.683 ops/s
[info] # Warmup Iteration   4: 70054.426 ops/s
[info] # Warmup Iteration   5: 70048.568 ops/s
[info] Iteration   1: 70506.257 ops/s
[info]                  ·gc.alloc.rate:      471.392 MB/sec
[info]                  ·gc.alloc.rate.norm: 10522.484 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 70365.400 ops/s
[info]                  ·gc.alloc.rate:               487.521 MB/sec
[info]                  ·gc.alloc.rate.norm:          10903.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14899.201 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 70530.426 ops/s
[info]                  ·gc.alloc.rate:                   490.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              10944.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14864.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.644 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 70991.030 ops/s
[info]                  ·gc.alloc.rate:      474.525 MB/sec
[info]                  ·gc.alloc.rate.norm: 10520.007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 70241.981 ops/s
[info]                  ·gc.alloc.rate:               500.002 MB/sec
[info]                  ·gc.alloc.rate.norm:          11203.098 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14947.887 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   70527.019 ±(99.9%) 1094.417 ops/s [Average]
[info]   (min, avg, max) = (70241.981, 70527.019, 70991.030), stdev = 284.217
[info]   CI (99.9%): [69432.602, 71621.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   484.778 ±(99.9%) 45.390 MB/sec [Average]
[info]   (min, avg, max) = (471.392, 484.778, 500.002), stdev = 11.788
[info]   CI (99.9%): [439.388, 530.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10818.591 ±(99.9%) 1135.124 B/op [Average]
[info]   (min, avg, max) = (10520.007, 10818.591, 11203.098), stdev = 294.788
[info]   CI (99.9%): [9683.467, 11953.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   399.896 ±(99.9%) 1405.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 399.896, 667.134), stdev = 365.053
[info]   CI (99.9%): [≈ 0, 1805.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8942.372 ±(99.9%) 31433.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8942.372, 14947.887), stdev = 8163.285
[info]   CI (99.9%): [≈ 0, 40376.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.129 ±(99.9%) 1.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.644), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32990.217 ops/s
[info] # Warmup Iteration   2: 72176.145 ops/s
[info] # Warmup Iteration   3: 74574.444 ops/s
[info] # Warmup Iteration   4: 75538.933 ops/s
[info] # Warmup Iteration   5: 75039.206 ops/s
[info] Iteration   1: 75581.792 ops/s
[info]                  ·gc.alloc.rate:      20.365 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 75601.523 ops/s
[info]                  ·gc.alloc.rate:      20.371 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 75631.856 ops/s
[info]                  ·gc.alloc.rate:      20.379 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 75582.172 ops/s
[info]                  ·gc.alloc.rate:      20.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 75597.704 ops/s
[info]                  ·gc.alloc.rate:      20.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   75599.009 ±(99.9%) 78.606 ops/s [Average]
[info]   (min, avg, max) = (75581.792, 75599.009, 75631.856), stdev = 20.414
[info]   CI (99.9%): [75520.404, 75677.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   20.370 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (20.363, 20.370, 20.379), stdev = 0.006
[info]   CI (99.9%): [20.346, 20.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   424.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.006, 424.006, 424.006), stdev = 0.001
[info]   CI (99.9%): [424.006, 424.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55894.555 ops/s
[info] # Warmup Iteration   2: 292158.341 ops/s
[info] # Warmup Iteration   3: 302409.862 ops/s
[info] # Warmup Iteration   4: 313632.624 ops/s
[info] # Warmup Iteration   5: 315518.430 ops/s
[info] Iteration   1: 314699.406 ops/s
[info]                  ·gc.alloc.rate:               1875.736 MB/sec
[info]                  ·gc.alloc.rate.norm:          9377.602 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2015.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10074.389 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     9.000 ms
[info] Iteration   2: 314754.372 ops/s
[info]                  ·gc.alloc.rate:                   1886.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              9433.716 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10072.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.591 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 311241.097 ops/s
[info]                  ·gc.alloc.rate:               1852.841 MB/sec
[info]                  ·gc.alloc.rate.norm:          9369.393 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6774.047 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 314894.141 ops/s
[info]                  ·gc.alloc.rate:                   1900.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              9499.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2008.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10038.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 316266.431 ops/s
[info]                  ·gc.alloc.rate:                   1909.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              9502.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2009.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9998.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   314371.089 ±(99.9%) 7182.626 ops/s [Average]
[info]   (min, avg, max) = (311241.097, 314371.089, 316266.431), stdev = 1865.305
[info]   CI (99.9%): [307188.463, 321553.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1885.125 ±(99.9%) 85.729 MB/sec [Average]
[info]   (min, avg, max) = (1852.841, 1885.125, 1909.793), stdev = 22.264
[info]   CI (99.9%): [1799.396, 1970.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   9436.463 ±(99.9%) 245.459 B/op [Average]
[info]   (min, avg, max) = (9369.393, 9436.463, 9502.198), stdev = 63.745
[info]   CI (99.9%): [9191.004, 9681.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1877.405 ±(99.9%) 1157.723 MB/sec [Average]
[info]   (min, avg, max) = (1339.599, 1877.405, 2015.109), stdev = 300.657
[info]   CI (99.9%): [719.682, 3035.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9391.500 ±(99.9%) 5635.534 B/op [Average]
[info]   (min, avg, max) = (6774.047, 9391.500, 10074.389), stdev = 1463.530
[info]   CI (99.9%): [3755.966, 15027.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.733 ±(99.9%) 5.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.733, 3.518), stdev = 1.558
[info]   CI (99.9%): [≈ 0, 6.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.664 ±(99.9%) 29.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.664, 17.591), stdev = 7.790
[info]   CI (99.9%): [≈ 0, 33.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 9.000), stdev = 2.510
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43107.684 ops/s
[info] # Warmup Iteration   2: 441722.275 ops/s
[info] # Warmup Iteration   3: 465627.304 ops/s
[info] # Warmup Iteration   4: 470814.316 ops/s
[info] # Warmup Iteration   5: 472415.428 ops/s
[info] Iteration   1: 472207.895 ops/s
[info]                  ·gc.alloc.rate:               521.474 MB/sec
[info]                  ·gc.alloc.rate.norm:          1737.284 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1705.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 472987.621 ops/s
[info]                  ·gc.alloc.rate:               527.649 MB/sec
[info]                  ·gc.alloc.rate.norm:          1755.671 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2215.543 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 472006.095 ops/s
[info]                  ·gc.alloc.rate:                   527.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1759.712 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2220.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 474121.862 ops/s
[info]                  ·gc.alloc.rate:      510.921 MB/sec
[info]                  ·gc.alloc.rate.norm: 1696.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 466488.731 ops/s
[info]                  ·gc.alloc.rate:               526.315 MB/sec
[info]                  ·gc.alloc.rate.norm:          1775.714 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2248.668 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   471562.441 ±(99.9%) 11380.223 ops/s [Average]
[info]   (min, avg, max) = (466488.731, 471562.441, 474121.862), stdev = 2955.408
[info]   CI (99.9%): [460182.218, 482942.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   522.827 ±(99.9%) 27.465 MB/sec [Average]
[info]   (min, avg, max) = (510.921, 522.827, 527.776), stdev = 7.133
[info]   CI (99.9%): [495.362, 550.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1744.876 ±(99.9%) 117.651 B/op [Average]
[info]   (min, avg, max) = (1696.001, 1744.876, 1775.714), stdev = 30.553
[info]   CI (99.9%): [1627.226, 1862.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   502.016 ±(99.9%) 1110.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 502.016, 666.497), stdev = 288.474
[info]   CI (99.9%): [≈ 0, 1612.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1677.917 ±(99.9%) 3715.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1677.917, 2248.668), stdev = 965.016
[info]   CI (99.9%): [≈ 0, 5393.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659067.076 ops/s
[info] # Warmup Iteration   2: 1182076.264 ops/s
[info] # Warmup Iteration   3: 1248585.173 ops/s
[info] # Warmup Iteration   4: 1258487.347 ops/s
[info] # Warmup Iteration   5: 1260686.804 ops/s
[info] Iteration   1: 1235988.684 ops/s
[info]                  ·gc.alloc.rate:               677.699 MB/sec
[info]                  ·gc.alloc.rate.norm:          862.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 854.177 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 1259344.373 ops/s
[info]                  ·gc.alloc.rate:               683.814 MB/sec
[info]                  ·gc.alloc.rate.norm:          854.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 838.338 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1259440.753 ops/s
[info]                  ·gc.alloc.rate:                   682.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              853.147 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     839.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1263417.104 ops/s
[info]                  ·gc.alloc.rate:               677.256 MB/sec
[info]                  ·gc.alloc.rate.norm:          843.299 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 836.474 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 1258213.044 ops/s
[info]                  ·gc.alloc.rate:               676.175 MB/sec
[info]                  ·gc.alloc.rate.norm:          845.632 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 840.765 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1255280.792 ±(99.9%) 42216.875 ops/s [Average]
[info]   (min, avg, max) = (1235988.684, 1255280.792, 1263417.104), stdev = 10963.588
[info]   CI (99.9%): [1213063.917, 1297497.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   679.535 ±(99.9%) 13.388 MB/sec [Average]
[info]   (min, avg, max) = (676.175, 679.535, 683.814), stdev = 3.477
[info]   CI (99.9%): [666.147, 692.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   851.922 ±(99.9%) 30.079 B/op [Average]
[info]   (min, avg, max) = (843.299, 851.922, 862.948), stdev = 7.811
[info]   CI (99.9%): [821.843, 882.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.430 ±(99.9%) 2.443 MB/sec [Average]
[info]   (min, avg, max) = (670.810, 671.430, 672.284), stdev = 0.634
[info]   CI (99.9%): [668.988, 673.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   841.766 ±(99.9%) 27.366 B/op [Average]
[info]   (min, avg, max) = (836.474, 841.766, 854.177), stdev = 7.107
[info]   CI (99.9%): [814.400, 869.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16983.359 ops/s
[info] # Warmup Iteration   2: 92203.312 ops/s
[info] # Warmup Iteration   3: 101087.202 ops/s
[info] # Warmup Iteration   4: 102838.661 ops/s
[info] # Warmup Iteration   5: 103258.027 ops/s
[info] Iteration   1: 104485.824 ops/s
[info]                  ·gc.alloc.rate:                   3287.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              49515.850 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2669.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40216.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.509 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 103413.020 ops/s
[info]                  ·gc.alloc.rate:                   3321.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              50549.609 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3344.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50898.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.317 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 104416.120 ops/s
[info]                  ·gc.alloc.rate:               3353.500 MB/sec
[info]                  ·gc.alloc.rate.norm:          50545.975 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3356.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50590.338 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   4: 104405.775 ops/s
[info]                  ·gc.alloc.rate:               3353.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          50558.605 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3369.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50795.531 B/op
[info]                  ·gc.count:                    5.000 counts
[info]                  ·gc.time:                     7.000 ms
[info] Iteration   5: 104129.986 ops/s
[info]                  ·gc.alloc.rate:                   3345.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              50567.810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3379.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51082.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.944 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   104170.145 ±(99.9%) 1711.837 ops/s [Average]
[info]   (min, avg, max) = (103413.020, 104170.145, 104485.824), stdev = 444.559
[info]   CI (99.9%): [102458.308, 105881.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3332.314 ±(99.9%) 109.541 MB/sec [Average]
[info]   (min, avg, max) = (3287.260, 3332.314, 3353.890), stdev = 28.447
[info]   CI (99.9%): [3222.773, 3441.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   50347.570 ±(99.9%) 1790.636 B/op [Average]
[info]   (min, avg, max) = (49515.850, 50347.570, 50567.810), stdev = 465.022
[info]   CI (99.9%): [48556.934, 52138.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3223.962 ±(99.9%) 1193.787 MB/sec [Average]
[info]   (min, avg, max) = (2669.887, 3223.962, 3379.535), stdev = 310.023
[info]   CI (99.9%): [2030.175, 4417.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   48716.570 ±(99.9%) 18310.085 B/op [Average]
[info]   (min, avg, max) = (40216.384, 48716.570, 51082.148), stdev = 4755.071
[info]   CI (99.9%): [30406.485, 67026.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.754 ±(99.9%) 4.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 2.509), stdev = 1.054
[info]   CI (99.9%): [≈ 0, 4.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82933.025 ops/s
[info] # Warmup Iteration   2: 321945.997 ops/s
[info] # Warmup Iteration   3: 341957.569 ops/s
[info] # Warmup Iteration   4: 340565.425 ops/s
[info] # Warmup Iteration   5: 345302.037 ops/s
[info] Iteration   1: 341373.572 ops/s
[info]                  ·gc.alloc.rate:               1197.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          5519.524 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6177.361 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   2: 343260.122 ops/s
[info]                  ·gc.alloc.rate:                   1195.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              5483.774 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6148.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 339698.253 ops/s
[info]                  ·gc.alloc.rate:               1182.220 MB/sec
[info]                  ·gc.alloc.rate.norm:          5475.436 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6217.421 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     6.000 ms
[info] Iteration   4: 340232.201 ops/s
[info]                  ·gc.alloc.rate:               1169.591 MB/sec
[info]                  ·gc.alloc.rate.norm:          5410.339 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3104.584 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 342721.590 ops/s
[info]                  ·gc.alloc.rate:                   1214.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              5576.672 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6167.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3.476 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   341457.148 ±(99.9%) 5918.830 ops/s [Average]
[info]   (min, avg, max) = (339698.253, 341457.148, 343260.122), stdev = 1537.101
[info]   CI (99.9%): [335538.318, 347375.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1191.863 ±(99.9%) 64.988 MB/sec [Average]
[info]   (min, avg, max) = (1169.591, 1191.863, 1214.334), stdev = 16.877
[info]   CI (99.9%): [1126.875, 1256.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5493.149 ±(99.9%) 235.259 B/op [Average]
[info]   (min, avg, max) = (5410.339, 5493.149, 5576.672), stdev = 61.096
[info]   CI (99.9%): [5257.890, 5728.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1207.461 ±(99.9%) 1154.480 MB/sec [Average]
[info]   (min, avg, max) = (671.140, 1207.461, 1342.918), stdev = 299.815
[info]   CI (99.9%): [52.980, 2361.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5563.000 ±(99.9%) 5292.816 B/op [Average]
[info]   (min, avg, max) = (3104.584, 5563.000, 6217.421), stdev = 1374.527
[info]   CI (99.9%): [270.184, 10855.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.704 ±(99.9%) 5.969 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.476), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 6.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.231 ±(99.9%) 27.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.231, 15.965), stdev = 7.119
[info]   CI (99.9%): [≈ 0, 30.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250991.582 ops/s
[info] # Warmup Iteration   2: 707472.592 ops/s
[info] # Warmup Iteration   3: 719381.791 ops/s
[info] # Warmup Iteration   4: 725813.225 ops/s
[info] # Warmup Iteration   5: 721120.724 ops/s
[info] Iteration   1: 709646.531 ops/s
[info]                  ·gc.alloc.rate:               564.144 MB/sec
[info]                  ·gc.alloc.rate.norm:          1251.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1477.384 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 730928.496 ops/s
[info]                  ·gc.alloc.rate:      557.326 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 725577.008 ops/s
[info]                  ·gc.alloc.rate:                   577.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              1253.583 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1445.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 721729.141 ops/s
[info]                  ·gc.alloc.rate:               572.335 MB/sec
[info]                  ·gc.alloc.rate.norm:          1248.088 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1454.814 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 720326.718 ops/s
[info]                  ·gc.alloc.rate:               568.210 MB/sec
[info]                  ·gc.alloc.rate.norm:          1241.522 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1457.698 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   721641.579 ±(99.9%) 30280.371 ops/s [Average]
[info]   (min, avg, max) = (709646.531, 721641.579, 730928.496), stdev = 7863.716
[info]   CI (99.9%): [691361.208, 751921.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   567.994 ±(99.9%) 30.245 MB/sec [Average]
[info]   (min, avg, max) = (557.326, 567.994, 577.956), stdev = 7.854
[info]   CI (99.9%): [537.749, 598.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1238.864 ±(99.9%) 85.445 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1238.864, 1253.583), stdev = 22.190
[info]   CI (99.9%): [1153.419, 1324.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   533.333 ±(99.9%) 1148.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 533.333, 667.148), stdev = 298.142
[info]   CI (99.9%): [≈ 0, 1681.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1166.983 ±(99.9%) 2512.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1166.983, 1477.384), stdev = 652.469
[info]   CI (99.9%): [≈ 0, 3679.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.004 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659531.933 ops/s
[info] # Warmup Iteration   2: 1494807.626 ops/s
[info] # Warmup Iteration   3: 1606137.212 ops/s
[info] # Warmup Iteration   4: 1608932.325 ops/s
[info] # Warmup Iteration   5: 1618800.045 ops/s
[info] Iteration   1: 1609175.260 ops/s
[info]                  ·gc.alloc.rate:               771.844 MB/sec
[info]                  ·gc.alloc.rate.norm:          754.917 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 655.435 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 1618327.842 ops/s
[info]                  ·gc.alloc.rate:               767.808 MB/sec
[info]                  ·gc.alloc.rate.norm:          746.711 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 652.373 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 1567482.945 ops/s
[info]                  ·gc.alloc.rate:               750.395 MB/sec
[info]                  ·gc.alloc.rate.norm:          753.341 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670.940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 673.575 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1624337.520 ops/s
[info]                  ·gc.alloc.rate:               768.716 MB/sec
[info]                  ·gc.alloc.rate.norm:          744.488 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.616 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 1624187.988 ops/s
[info]                  ·gc.alloc.rate:               766.717 MB/sec
[info]                  ·gc.alloc.rate.norm:          742.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 650.699 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1608702.311 ±(99.9%) 91855.750 ops/s [Average]
[info]   (min, avg, max) = (1567482.945, 1608702.311, 1624337.520), stdev = 23854.646
[info]   CI (99.9%): [1516846.562, 1700558.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   765.096 ±(99.9%) 32.489 MB/sec [Average]
[info]   (min, avg, max) = (750.395, 765.096, 771.844), stdev = 8.437
[info]   CI (99.9%): [732.607, 797.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   748.482 ±(99.9%) 20.617 B/op [Average]
[info]   (min, avg, max) = (742.954, 748.482, 754.917), stdev = 5.354
[info]   CI (99.9%): [727.865, 769.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   671.036 ±(99.9%) 2.490 MB/sec [Average]
[info]   (min, avg, max) = (670.132, 671.036, 671.788), stdev = 0.647
[info]   CI (99.9%): [668.546, 673.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   656.540 ±(99.9%) 37.431 B/op [Average]
[info]   (min, avg, max) = (650.616, 656.540, 673.575), stdev = 9.721
[info]   CI (99.9%): [619.108, 693.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754507.308 ops/s
[info] # Warmup Iteration   2: 1710565.975 ops/s
[info] # Warmup Iteration   3: 1684522.179 ops/s
[info] # Warmup Iteration   4: 1741576.291 ops/s
[info] # Warmup Iteration   5: 1742583.656 ops/s
[info] Iteration   1: 1743706.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻³ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1711791.146 ops/s
[info]                  ·gc.alloc.rate:      13.622 MB/sec
[info]                  ·gc.alloc.rate.norm: 12.524 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1742096.483 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1743755.169 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1743387.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   1736947.436 ±(99.9%) 54212.818 ops/s [Average]
[info]   (min, avg, max) = (1711791.146, 1736947.436, 1743755.169), stdev = 14078.897
[info]   CI (99.9%): [1682734.619, 1791160.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   2.725 ±(99.9%) 23.458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.725, 13.622), stdev = 6.092
[info]   CI (99.9%): [≈ 0, 26.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   2.505 ±(99.9%) 21.567 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 2.505, 12.524), stdev = 5.601
[info]   CI (99.9%): [≈ 0, 24.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 1.8.0_161, GraalVM 1.0.0-rc1, 25.71-b01-internal-jvmci-0.42
[info] # *** WARNING: JMH support for this VM is experimental. Be extra careful with the produced data.
[info] # VM invoker: /usr/lib/jvm/graalvm-ce-1.0.0-rc1/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124281.356 ops/s
[info] # Warmup Iteration   2: 414306.536 ops/s
[info] # Warmup Iteration   3: 440154.762 ops/s
[info] # Warmup Iteration   4: 439182.446 ops/s
[info] # Warmup Iteration   5: 440611.415 ops/s
[info] Iteration   1: 441240.415 ops/s
[info]                  ·gc.alloc.rate:                   678.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              2420.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2382.085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.074 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 440705.028 ops/s
[info]                  ·gc.alloc.rate:               678.673 MB/sec
[info]                  ·gc.alloc.rate.norm:          2423.352 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2384.960 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 442967.731 ops/s
[info]                  ·gc.alloc.rate:                   683.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              2426.954 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2375.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 442963.962 ops/s
[info]                  ·gc.alloc.rate:                   676.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              2401.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2375.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 442771.457 ops/s
[info]                  ·gc.alloc.rate:               675.398 MB/sec
[info]                  ·gc.alloc.rate.norm:          2400.811 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2377.262 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   442129.719 ±(99.9%) 4143.093 ops/s [Average]
[info]   (min, avg, max) = (440705.028, 442129.719, 442967.731), stdev = 1075.948
[info]   CI (99.9%): [437986.626, 446272.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   678.375 ±(99.9%) 11.800 MB/sec [Average]
[info]   (min, avg, max) = (675.398, 678.375, 683.220), stdev = 3.064
[info]   CI (99.9%): [666.575, 690.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2414.555 ±(99.9%) 47.912 B/op [Average]
[info]   (min, avg, max) = (2400.811, 2414.555, 2426.954), stdev = 12.443
[info]   CI (99.9%): [2366.643, 2462.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   668.357 ±(99.9%) 1.731 MB/sec [Average]
[info]   (min, avg, max) = (667.819, 668.357, 668.773), stdev = 0.449
[info]   CI (99.9%): [666.626, 670.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2378.895 ±(99.9%) 17.080 B/op [Average]
[info]   (min, avg, max) = (2375.075, 2378.895, 2384.960), stdev = 4.436
[info]   CI (99.9%): [2361.815, 2395.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.059 ±(99.9%) 0.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.059, 0.185), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:54:05
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                        (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                              N/A  thrpt    5    802967.282 ±   24704.056   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      2325.818 ±      56.800  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5      4557.407 ±      84.536    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      2276.253 ±    1411.845  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5      4463.194 ±    2855.697    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.797 ±       5.247  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         1.564 ±      10.328    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        34.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                       N/A  thrpt    5   1752187.106 ±   55206.823   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      1163.516 ±      60.482  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1044.658 ±      37.380    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1202.595 ±    1150.785  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1080.335 ±    1040.715    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.837 ±       6.941  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.760 ±       6.306    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                      N/A  thrpt    5   5676096.788 ±  341158.517   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5       386.126 ±      47.660  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       107.019 ±      10.950    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       339.136 ±    1218.447  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        94.163 ±     340.068    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5         3.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5         8.000                    ms
[info] AdtBenchmark.readPlayJson                                                                           N/A  thrpt    5    245310.503 ±   13539.271   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      2140.725 ±     118.879  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5     13732.509 ±     268.999    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2013.221 ±      13.302  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5     12916.447 ±     669.760    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.358 ±       2.820  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         2.314 ±      18.205    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        15.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        24.000                    ms
[info] AdtBenchmark.writeCirce                                                                             N/A  thrpt    5    913442.594 ±   25804.324   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      2455.320 ±      65.941  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5      4230.033 ±      84.603    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      2411.616 ±    1421.379  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5      4154.212 ±    2432.278    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.804 ±       6.479  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         1.383 ±      11.145    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        18.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        29.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                      N/A  thrpt    5   2832826.349 ±   97888.099   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1212.697 ±      48.221  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       673.669 ±      10.914    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1203.731 ±    1150.502  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       668.226 ±     633.065    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.793 ±       6.762  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.443 ±       3.781    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5         9.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        28.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  14977732.775 ±  189792.115   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5       784.780 ±      21.533  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        82.465 ±       2.640    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5       670.951 ±       2.139  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        70.503 ±       0.929    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        14.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  17254230.848 ±   63015.845   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.036 ±       0.310  MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.028    B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                          N/A  thrpt    5    703455.959 ±   41274.204   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2080.946 ±      95.947  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      4655.679 ±      68.046    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space                                         N/A  thrpt    5         0.003 ±       0.030  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.Compressed_Class_Space.norm                                    N/A  thrpt    5         0.008 ±       0.068    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.Metaspace                                                      N/A  thrpt    5         0.010 ±       0.086  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.Metaspace.norm                                                 N/A  thrpt    5         0.023 ±       0.198    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2000.599 ±      28.383  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      4476.734 ±     318.182    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen                                                     N/A  thrpt    5         0.452 ±       3.893  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Old_Gen.norm                                                N/A  thrpt    5         1.033 ±       8.897    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.999 ±       7.336  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         2.249 ±      16.541    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        17.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        62.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                          N/A  thrpt    5   2107070.904 ±   27283.742   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2963.418 ±      50.257  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5      2213.046 ±      35.399    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2954.784 ±    1427.151  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      2206.897 ±    1077.575    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.017 ±       0.088  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.012 ±       0.066    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        22.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                    N/A  thrpt    5  10130291.487 ±  648571.765   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                     N/A  thrpt    5      1274.533 ±      73.750  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                N/A  thrpt    5       198.017 ±       7.157    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1202.349 ±    1149.929  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       187.355 ±     185.571    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.868 ±       7.189  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.136 ±       1.130    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                          N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                   N/A  thrpt    5   3355366.787 ±   61090.800   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2099.975 ±      59.154  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       985.006 ±      14.761    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2002.676 ±      13.529  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5       939.395 ±      22.110    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.856 ±       7.323  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.404 ±       3.461    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                  N/A  thrpt    5  13078305.752 ± 1144700.906   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5      1714.902 ±     161.113  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       206.370 ±       5.848    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1615.169 ±    1420.623  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       194.330 ±     169.368    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.600 ±       4.895  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.070 ±       0.571    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5        12.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        23.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                       N/A  thrpt    5   1144156.700 ±   75783.695   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                        N/A  thrpt    5      2628.944 ±     187.432  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                   N/A  thrpt    5      3616.167 ±      45.442    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2554.546 ±    1141.853  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      3519.371 ±    1739.638    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.329 ±       1.836  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.452 ±       2.503    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                             N/A  thrpt    5        19.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                              N/A  thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                         N/A  thrpt    5   2376766.436 ±   40233.295   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      2097.395 ±      77.084  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1388.804 ±      30.542    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2009.256 ±      10.527  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5      1330.485 ±      25.263    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.745 ±       5.801  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0.494 ±       3.845    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5        15.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        30.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                   N/A  thrpt    5  19704681.026 ± 2212309.714   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       618.244 ±      82.591  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5        49.375 ±       1.114    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       666.154 ±       1.544  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        53.243 ±       5.843    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.012 ±       0.082  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.001 ±       0.006    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                         N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                          N/A  thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                  N/A  thrpt    5   6495887.724 ±  167520.204   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5      1840.272 ±      60.746  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5       445.821 ±      12.823    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1737.547 ±    1406.233  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       420.849 ±     338.747    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.768 ±       6.548  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.185 ±       1.574    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5  28859897.104 ±  169153.150   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       903.455 ±      28.917  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5        49.266 ±       1.725    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       805.737 ±    1156.635  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        43.955 ±      63.422    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.001 ±       0.004    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         6.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5  34888356.622 ±  270216.596   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5         0.161 ±       0.888  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5         0.007 ±       0.040    B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                      N/A  thrpt    5   1923713.595 ±   33032.912   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                       N/A  thrpt    5      3019.889 ±      89.309  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2470.471 ±      60.503    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2811.369 ±    1150.195  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2299.677 ±     928.576    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.046 ±       0.036  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.037 ±       0.029    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                            N/A  thrpt    5        21.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                             N/A  thrpt    5        40.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                            128  thrpt    5    319672.120 ±    4139.340   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1962.817 ±      48.364  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      9663.877 ±     273.719    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1878.968 ±    1167.727  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      9251.449 ±    5760.827    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.020 ±       0.176    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    508139.574 ±   17477.151   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       667.090 ±       6.648  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      2066.334 ±      88.445    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       665.877 ±       2.780  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2062.549 ±      73.281    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.026 ±       0.221    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        18.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5   1332505.594 ±   33536.257   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       908.999 ±      15.915  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1073.615 ±      42.976    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       806.356 ±    1156.585  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       953.531 ±    1388.668    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.015 ±       0.085    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         6.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                         128  thrpt    5    114987.627 ±    2296.156   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      3662.321 ±      89.436  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     50126.249 ±     672.010    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3500.881 ±    1191.930  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     47917.235 ±   16321.252    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.227 ±       0.912    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        26.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        35.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                           128  thrpt    5    354482.750 ±    3534.613   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1217.608 ±      28.726  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      5405.769 ±     148.852    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1073.739 ±    1415.421  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4770.070 ±    6321.459    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.708 ±       5.187  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3.146 ±      23.077    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         8.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        21.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    908873.954 ±   85379.189   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5       679.712 ±      53.556  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5      1177.098 ±      24.191    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       666.570 ±       2.643  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1154.815 ±     113.274    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.015 ±       0.130    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        16.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5   2555265.350 ±   88269.084   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1219.414 ±      78.560  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       750.913 ±      22.886    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1210.074 ±    1157.924  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       744.179 ±     699.501    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.641 ±       4.744  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.393 ±       2.912    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        23.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   2925704.335 ±   26201.495   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                        128  thrpt    5    458658.387 ±    4288.711   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       681.836 ±      14.903  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5      2339.597 ±      47.114    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       668.699 ±       2.028  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2294.533 ±      26.548    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.057 ±       0.358    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                               128  thrpt    5     17210.040 ±    1052.323   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1380.842 ±      91.145  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    126261.079 ±    2244.230    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1343.073 ±       5.538  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    122833.924 ±    7699.233    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.749 ±       4.427  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        68.199 ±     404.760    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                        128  thrpt    5     36727.322 ±     507.749   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1011.923 ±      35.167  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     43364.951 ±    2068.179    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1069.834 ±    1410.226  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     45882.816 ±   60890.860    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.179 ±       1.540    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                       128  thrpt    5     41418.012 ±    1535.083   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       617.516 ±      24.976  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     23465.096 ±    1228.602    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       670.990 ±       1.770  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     25497.323 ±     972.123    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        14.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                            128  thrpt    5     30850.257 ±     443.402   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1559.746 ±      68.888  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     79565.323 ±    2710.981    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1471.077 ±    1146.311  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     75018.418 ±   57700.527    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.903 ±       7.467  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        46.164 ±     381.587    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                              128  thrpt    5     24926.075 ±    1669.470   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1818.496 ±      55.190  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5    114838.508 ±    5713.682    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1876.630 ±    1155.845  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    118586.938 ±   75080.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.745 ±       6.194  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        46.775 ±     388.737    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                       128  thrpt    5     25151.708 ±     305.454   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1571.573 ±      42.291  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     98337.510 ±    2901.268    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1469.659 ±    1155.300  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     91978.141 ±   72823.949    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.828 ±       7.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        51.948 ±     441.695    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                      128  thrpt    5     27418.332 ±    1356.175   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1622.789 ±      77.112  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     93145.375 ±    2447.027    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1477.297 ±    1159.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     84747.089 ±   64944.233    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.708 ±       4.208  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        40.375 ±     240.105    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5     27490.402 ±     296.235   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5      1611.544 ±      44.363  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5     92261.147 ±    2546.223    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5      1610.986 ±    1414.479  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5     92255.573 ±   81583.614    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.708 ±       4.594  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5        40.507 ±     263.064    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5        25.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                           128  thrpt    5      7919.969 ±     288.433   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1182.281 ±      80.754  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    234902.738 ±    9758.378    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1200.334 ±    1147.493  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    238081.645 ±  222396.872    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1.644 ±       8.669    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                   128  thrpt    5     18077.966 ±     782.027   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1656.934 ±      61.146  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    144237.318 ±    2369.049    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1609.606 ±    1419.716  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    140195.037 ±  125263.153    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.766 ±       4.559  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        67.042 ±     400.680    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                            128  thrpt    5     43083.270 ±     253.257   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1217.251 ±      36.573  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     44465.669 ±    1401.149    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.088 ±    1152.978  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     44019.949 ±   42101.490    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.820 ±       5.289  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        29.979 ±     193.494    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                           128  thrpt    5     62688.485 ±     963.638   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       833.380 ±      27.543  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     20921.706 ±     829.054    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       806.208 ±    1154.723  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20241.890 ±   29037.327    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.314 ±       1.801    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                128  thrpt    5     33247.846 ±     517.857   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2196.554 ±      22.757  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    103970.099 ±    1490.540    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2015.572 ±      20.730  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     95404.696 ±    2363.083    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.258 ±       2.046  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        12.178 ±      96.512    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                           128  thrpt    5     27523.358 ±     444.452   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1777.468 ±      56.940  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    101629.618 ±    3591.463    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1738.042 ±    1408.522  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     99413.193 ±   81348.485    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.804 ±       6.829  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        46.251 ±     393.127    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                          128  thrpt    5     34139.464 ±     938.212   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1538.996 ±      48.490  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     70943.577 ±    1763.186    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1478.281 ±    1162.574  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     68209.316 ±   55480.194    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.764 ±       5.181  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        35.459 ±     241.265    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34881.933 ±     208.416   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5      1517.605 ±      42.702  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     68470.838 ±    2088.354    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5      1478.773 ±    1148.522  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     66725.617 ±   52031.535    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.670 ±       5.077  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        30.222 ±     228.802    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                  128  thrpt    5    326455.286 ±    7370.517   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1853.426 ±      61.097  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5      8934.945 ±     287.105    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1877.359 ±    1157.610  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      9054.235 ±    5672.651    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.708 ±       6.094  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         3.403 ±      29.304    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                        128  thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                            128  thrpt    5   1517145.291 ±   31227.500   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       487.096 ±      22.461  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       505.317 ±      32.844    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       399.786 ±    1405.305  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       416.240 ±    1463.151    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.007 ±       0.058  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.007 ±       0.060    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                           128  thrpt    5    676973.694 ±    9644.925   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       578.890 ±      34.073  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1345.836 ±      91.738    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       533.445 ±    1148.281  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1241.494 ±    2672.456    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.010 ±       0.083    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                          128  thrpt    5   1882352.370 ±   20061.401   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       371.482 ±      24.464  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       310.593 ±      23.537    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       338.769 ±    1216.779  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       283.767 ±    1019.037    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.007 ±       0.060    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                               128  thrpt    5    104078.089 ±    1986.287   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3499.862 ±      80.590  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     52922.303 ±     773.336    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3358.091 ±      71.211  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     50779.414 ±    1410.483    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.126 ±       0.663    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        35.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                 128  thrpt    5    362952.264 ±   15668.294   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1251.911 ±      31.621  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      5427.472 ±     339.322    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1207.144 ±    1153.721  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      5236.810 ±    5054.438    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.725 ±       5.185  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.192 ±      22.936    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                           128  thrpt    5   1578691.923 ±   24253.095   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       750.635 ±      27.753  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       748.164 ±      35.739    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       799.640 ±    1143.519  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       797.637 ±    1152.261    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.077  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.021 ±       0.077    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         6.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                          128  thrpt    5   1032483.185 ±   46405.539   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       749.482 ±      34.282  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1142.311 ±      25.964    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       667.977 ±       2.413  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1018.181 ±      44.148    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.013 ±       0.078  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.020 ±       0.118    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                         128  thrpt    5   2667302.447 ±   27778.382   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1269.131 ±      38.217  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       748.860 ±      26.812    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1210.026 ±    1159.256  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       714.304 ±     688.224    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.679 ±       5.575  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.402 ±       3.299    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5        23.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   3256720.954 ±    8711.195   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                              128  thrpt    5    487132.867 ±   10781.969   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5       576.623 ±      41.646  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5      1862.936 ±     124.137    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       534.793 ±    1151.183  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1726.222 ±    3716.082    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.013 ±       0.116    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                     128  thrpt    5    159983.869 ±   11052.331   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2022.930 ±      97.688  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     19900.814 ±     476.839    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2010.975 ±      14.529  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     19786.810 ±    1412.111    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.774 ±       4.753  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         7.586 ±      46.637    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                              128  thrpt    5    454607.446 ±    4010.903   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       375.464 ±      35.980  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1299.882 ±     131.680    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       338.013 ±    1212.942  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1171.653 ±    4202.851    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.029 ±       0.248    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                             128  thrpt    5   1239786.221 ±   92456.327   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       249.408 ±      51.748  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       316.379 ±      43.667    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       307.044 ±    1079.301  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       384.904 ±    1353.145    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                  128  thrpt    5     87363.659 ±    1530.891   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3505.291 ±      33.979  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     63142.040 ±     906.647    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3358.882 ±      73.040  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     60505.477 ±    1951.658    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.150 ±       0.793    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        33.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                    128  thrpt    5    308057.014 ±    6188.854   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1740.030 ±      78.996  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5      8889.334 ±     317.021    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1608.924 ±    1414.740  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      8221.517 ±    7268.326    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.724 ±       5.927  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         3.718 ±      30.437    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        22.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                             128  thrpt    5   1910852.599 ±   30726.079   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1009.874 ±      49.397  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       831.653 ±      43.528    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1070.896 ±    1412.107  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       882.305 ±    1167.902    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.025 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.021 ±       0.086    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                            128  thrpt    5   2698292.108 ±  849963.765   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       746.615 ±     239.649  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       435.301 ±      13.492    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       805.274 ±    1152.757  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       469.013 ±     625.534    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.005 ±       0.040    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        16.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3114539.887 ±    3430.496   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                 128  thrpt    5     48665.967 ±     541.424   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2205.318 ±      86.082  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     71310.062 ±    2560.020    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2141.987 ±    1145.149  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     69269.560 ±   37309.869    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.829 ±       6.648  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        26.825 ±     215.230    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        16.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                     128  thrpt    5    244214.226 ±    9279.028   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2683.981 ±     119.087  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     17294.705 ±     276.875    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2550.430 ±    1161.197  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     16441.338 ±    7702.586    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.054 ±       0.263  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.352 ±       1.718    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        27.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                              128  thrpt    5    378049.252 ±   31425.067   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1954.941 ±     215.067  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      8137.186 ±     240.662    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1872.001 ±    1146.078  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7775.589 ±    4298.055    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.799 ±       5.589  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.429 ±      24.142    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                             128  thrpt    5   2211157.271 ±  485292.087   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       786.145 ±     181.697  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       559.458 ±      23.892    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.214 ±    1157.169  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       573.212 ±     791.130    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.003 ±       0.025    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                  128  thrpt    5     89010.616 ±     534.991   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3515.224 ±      99.690  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     62136.865 ±    1813.087    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3515.668 ±    1143.421  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     62145.089 ±   20239.799    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.441 ±       3.070    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        26.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        37.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                    128  thrpt    5    256000.119 ±   19323.893   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2081.219 ±     147.799  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     12793.727 ±     138.682    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2010.520 ±      12.175  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12362.771 ±     963.107    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.729 ±       5.624  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         4.427 ±      34.143    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        15.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        24.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                             128  thrpt    5   1495031.553 ±   60496.047   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       896.701 ±      49.363  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5       943.950 ±      43.211    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       802.861 ±    1151.119  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       844.966 ±    1207.216    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.004 ±       0.038    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                            128  thrpt    5   2866615.789 ±   19608.867   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1002.415 ±      58.579  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       550.364 ±      34.172    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       940.988 ±    1419.317  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       516.889 ±     782.843    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.002 ±       0.020    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        19.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   3148354.066 ±   19225.439   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.100 ±       0.861  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.050 ±       0.431    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                 128  thrpt    5    400994.772 ±    3980.770   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      2586.759 ±      67.130  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10151.527 ±     233.904    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2542.802 ±    1155.834  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9979.727 ±    4558.321    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.037 ±       0.067  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.147 ±       0.263    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        19.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                   128  thrpt    5     26249.223 ±     540.931   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1682.506 ±      37.535  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5    100877.145 ±    3078.898    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1744.721 ±    1414.201  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5    104647.089 ±   85662.875    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.749 ±       4.266  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        44.890 ±     255.578    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                             128  thrpt    5     98775.165 ±    5276.121   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       959.583 ±      65.960  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5     15287.096 ±     626.498    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       933.913 ±    1407.884  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14866.545 ±   22243.195    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.011 ±       0.069  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.181 ±       1.093    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                            128  thrpt    5     69274.233 ±     974.887   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1239.526 ±      36.187  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     28160.401 ±     667.496    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1205.713 ±    1153.597  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     27379.753 ±   26044.861    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.849 ±       5.397  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        19.264 ±     122.467    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                           128  thrpt    5    137587.170 ±    2832.552   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       950.714 ±      36.298  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     10873.046 ±     575.407    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940.542 ±    1414.018  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     10770.390 ±   16369.370    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.143 ±       0.503    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        19.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                128  thrpt    5     37885.420 ±     744.947   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1896.484 ±      51.402  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78785.360 ±    1738.535    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1870.841 ±    1156.543  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     77748.541 ±   48710.271    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.895 ±       7.573  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.248 ±     315.126    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                  128  thrpt    5     32455.279 ±     233.071   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       531.150 ±      41.846  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     25754.124 ±    2196.721    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       401.214 ±    1410.324  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19478.255 ±   68468.824    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.404 ±       3.480    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                           128  thrpt    5     32312.279 ±     712.569   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       408.433 ±      31.741  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     19889.646 ±    1699.306    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       471.606 ±    1058.507  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     23005.982 ±   51716.474    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.202 ±       1.743    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                          128  thrpt    5     34372.210 ±     360.742   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       423.829 ±      41.192  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5     19405.514 ±    1995.214    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.535 ±    1326.233  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16991.194 ±   60790.000    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.574 ±       4.944    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5     34397.028 ±     487.802   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5       382.864 ±      29.302  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5     17518.854 ±    1506.078    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                          128  thrpt    5       338.737 ±    1216.622  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     15531.801 ±   55773.069    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                         128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                 128  thrpt    5     14009.395 ±     401.110   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1042.303 ±      63.478  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    117078.671 ±    7049.035    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1075.421 ±    1417.207  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    120784.586 ±  159041.728    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.942 ±       8.112    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                          128  thrpt    5     15803.552 ±     453.920   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1027.138 ±      36.726  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    102287.362 ±    3825.670    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       936.959 ±    1411.324  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     93299.123 ±  140428.264    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.657 ±      10.361    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        24.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                         128  thrpt    5    107454.838 ±    1634.018   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       284.454 ±      22.188  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4166.242 ±     372.545    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.648 ±    1079.049  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3008.237 ±   15861.666    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.183 ±       1.577    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                              128  thrpt    5     13842.671 ±     406.366   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1348.475 ±      55.323  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    153295.054 ±    3843.868    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1336.937 ±       6.447  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    151991.222 ±    4491.147    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.920 ±       6.924  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5       104.251 ±     784.627    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        34.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                128  thrpt    5     45503.379 ±    1868.475   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1158.270 ±      39.538  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     40060.262 ±    1096.850    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.765 ±    1155.522  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41819.337 ±   40578.740    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.720 ±       6.157  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        24.799 ±     211.984    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                         128  thrpt    5     63623.023 ±     381.645   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1120.035 ±      35.278  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     27704.003 ±    1013.210    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.033 ±    1408.631  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     26474.580 ±   34935.734    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.758 ±       6.394  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        18.757 ±     158.186    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        25.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                        128  thrpt    5    174546.727 ±    1159.067   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       285.316 ±      29.989  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      2572.579 ±     285.968    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306.976 ±    1079.062  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2770.727 ±    9739.505    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.075 ±       0.396    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    185145.030 ±    1616.725   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                             128  thrpt    5     58833.337 ±    1465.696   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1146.993 ±      35.692  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     30676.957 ±     711.067    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1205.613 ±    1153.320  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32255.936 ±   30990.628    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.798 ±       6.695  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        21.244 ±     178.114    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                     128  thrpt    5     97359.455 ±    1980.051   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      2168.470 ±      97.351  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     35053.193 ±    1307.353    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2141.295 ±    1157.340  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     34609.740 ±   18508.969    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.816 ±       6.760  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5        13.304 ±     110.239    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        16.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                              128  thrpt    5    126998.698 ±    5188.873   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1794.497 ±      72.332  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22237.361 ±     787.973    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1737.185 ±    1409.856  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21547.154 ±   17893.361    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.858 ±       6.898  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        10.820 ±      87.137    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                             128  thrpt    5    167746.872 ±    7447.584   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1575.513 ±      54.808  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5     14782.358 ±     418.991    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478.197 ±    1159.962  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     13892.452 ±   11557.190    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.658 ±       5.351  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6.274 ±      51.109    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                  128  thrpt    5     51955.465 ±     377.383   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2795.773 ±      73.778  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     84684.880 ±    1818.585    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2697.437 ±      40.114  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     81706.763 ±    1218.637    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.033 ±       0.122  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1.010 ±       3.687    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        20.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                    128  thrpt    5    179972.802 ±    1942.470   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1198.055 ±      32.217  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     10476.742 ±     336.257    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.585 ±    1415.245  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5      9393.840 ±   12445.153    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.691 ±       5.011  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         6.045 ±      43.832    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                             128  thrpt    5    534641.807 ±    8655.485   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       556.311 ±      39.729  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1637.477 ±      98.559    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       534.027 ±    1149.535  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1569.870 ±    3379.369    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.012 ±       0.105    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        12.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                            128  thrpt    5    709968.473 ±  126326.624   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       562.333 ±     100.505  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1246.621 ±      87.699    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.990 ±    1155.912  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1198.912 ±    2595.383    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.019 ±       0.101    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    782463.215 ±    3140.986   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                 128  thrpt    5    331264.986 ±    7034.622   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5       935.868 ±      38.139  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5      4445.629 ±     204.026    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5       934.876 ±    1408.862  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      4442.297 ±    6712.367    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.059 ±       0.342    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                    128  thrpt    5     38510.102 ±    1684.744   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1965.459 ±      75.737  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     80329.068 ±    2862.783    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1878.514 ±    1152.165  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     76799.587 ±   47689.463    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.762 ±       4.472  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        31.031 ±     182.109    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                              128  thrpt    5    297548.188 ±    3882.768   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       314.325 ±      27.210  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1662.689 ±     161.932    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       235.478 ±    1259.236  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1249.276 ±    6679.402    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.044 ±       0.380    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                             128  thrpt    5    113744.800 ±    2621.862   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1360.628 ±      33.752  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     18822.928 ±     536.927    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1338.879 ±       6.048  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18522.206 ±     423.313    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.796 ±       5.291  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        10.972 ±      72.738    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                            128  thrpt    5    479128.873 ±    5133.572   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       321.660 ±      31.902  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1056.632 ±     115.502    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.740 ±    1216.606  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1114.851 ±    4003.769    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.014 ±       0.118    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                 128  thrpt    5     42598.329 ±     732.868   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      2111.109 ±      36.885  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     77989.406 ±    2406.489    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2004.749 ±      12.825  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     74059.515 ±    1367.609    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.920 ±       7.342  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        33.994 ±     271.180    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                   128  thrpt    5     74141.336 ±   11147.303   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5       602.278 ±     117.917  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5     12779.186 ±     654.525    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       535.354 ±    1152.390  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11168.489 ±   24041.166    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.174 ±       1.499    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                             128  thrpt    5     86136.146 ±   13044.294   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       500.727 ±      77.002  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      9148.592 ±     581.478    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       532.867 ±    1147.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      9809.709 ±   21194.216    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.015 ±       0.085  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.273 ±       1.529    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                            128  thrpt    5     78321.756 ±     581.767   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       475.830 ±      32.560  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      9561.566 ±     705.295    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       502.749 ±    1112.949  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     10110.764 ±   22391.700    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.335 ±       1.765    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                           128  thrpt    5     86189.717 ±     976.438   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       503.079 ±      33.128  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      9186.036 ±     674.908    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.777 ±    1118.494  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      9225.745 ±   20432.129    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.152 ±       0.803    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5     87972.128 ±    3596.273   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5       441.696 ±      39.118  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5      7902.743 ±     927.009    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                           128  thrpt    5       370.674 ±    1326.817  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      6651.307 ±   23744.778    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.074 ±       0.639    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                          128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                  128  thrpt    5     10153.694 ±     115.548   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1667.427 ±      36.774  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5    258407.471 ±    4925.807    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1608.886 ±    1420.125  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    249395.177 ±  221420.979    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.804 ±       5.119  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       124.822 ±     795.640    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                           128  thrpt    5      9385.092 ±     165.436   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1482.406 ±      76.547  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5    248585.042 ±   13076.214    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1469.321 ±    1141.530  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    246415.025 ±  192155.480    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.896 ±       6.569  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       150.904 ±    1108.581    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                          128  thrpt    5    157941.869 ±    3185.041   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       421.962 ±      36.112  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4204.560 ±     434.035    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       370.823 ±    1327.394  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3707.828 ±   13270.342    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.125 ±       0.715    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                               128  thrpt    5      5711.939 ±     176.015   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      1502.495 ±      80.299  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    413948.786 ±   12520.831    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1468.896 ±    1149.447  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    404659.880 ±  314962.725    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.971 ±       7.235  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5       267.374 ±    1992.048    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        34.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                 128  thrpt    5     19798.451 ±    1206.193   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1541.953 ±      71.136  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122583.803 ±    4100.070    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1474.701 ±    1158.925  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    117213.616 ±   91199.184    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.754 ±       6.046  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        59.676 ±     478.929    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                          128  thrpt    5     22954.931 ±     438.045   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1552.735 ±      64.054  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5    106447.488 ±    3804.515    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1472.516 ±    1156.548  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    100915.599 ±   78268.122    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.791 ±       6.636  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        54.062 ±     453.251    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5        25.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                         128  thrpt    5    133837.379 ±    9106.201   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       302.216 ±      42.554  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3553.300 ±     401.359    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204.639 ±    1079.003  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2399.220 ±   12650.440    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         2.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    140334.553 ±    1245.649   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5         0.003 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                              128  thrpt    5     23147.085 ±     350.446   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1614.340 ±      52.481  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    109753.796 ±    2979.973    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1606.270 ±    1410.973  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    109237.900 ±   96657.882    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.829 ±       5.102  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        56.344 ±     346.872    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        12.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                      128  thrpt    5    124869.517 ±    2667.290   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1782.773 ±      73.629  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     22468.178 ±     929.227    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1743.374 ±    1412.197  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     21982.868 ±   18034.166    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0.758 ±       5.815  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         9.551 ±      73.327    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        13.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5        26.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                128  thrpt    5    563575.566 ±   18373.763   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                 128  thrpt    5       603.838 ±      14.491  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                            128  thrpt    5      1686.319 ±      47.087    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                        128  thrpt    5       665.355 ±       2.098  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1858.157 ±      59.835    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.012 ±       0.067  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.035 ±       0.185    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                      128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                       128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    326176.933 ±    3262.123   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5       463.500 ±      38.319  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5      2236.549 ±     196.580    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.903 ±    1319.404  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1782.377 ±    6371.954    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    762913.888 ±   13459.375   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       511.561 ±      33.202  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      1055.305 ±      78.837    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       504.911 ±    1118.893  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1042.433 ±    2309.833    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.009 ±       0.075    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        12.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     76108.016 ±     898.078   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3151.566 ±      52.218  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     65166.994 ±    1489.378    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3083.590 ±    1424.143  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     63770.356 ±   29809.065    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.054 ±       0.287  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1.116 ±       5.915    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        32.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    201779.791 ±    3334.434   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1482.145 ±      67.084  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     11559.700 ±     537.503    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1470.630 ±    1149.848  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     11471.595 ±    9020.142    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0.065 ±       0.343    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5        15.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                               128  thrpt    5    642549.326 ±   88488.011   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       358.368 ±      41.787  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5       878.037 ±      78.942    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       368.836 ±    1319.078  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       916.857 ±    3259.527    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.017 ±       0.143  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.042 ±       0.358    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                     128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    661932.389 ±    2843.892   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       507.963 ±      37.582  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1207.709 ±      91.644    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       502.996 ±    1113.566  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1196.056 ±    2647.541    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.010 ±       0.085    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        14.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5   1103089.926 ±   41657.215   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       618.590 ±      16.324  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       882.511 ±      24.511    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       671.364 ±       1.850  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       957.836 ±      35.942    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.018 ±       0.103    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5   1196681.154 ±    4048.340   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     35084.943 ±    1082.627   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1994.708 ±     101.326  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     89474.196 ±    2381.651    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2008.157 ±      13.735  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     90085.146 ±    3297.771    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.845 ±       5.060  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        38.113 ±     227.911    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                 128  thrpt    5    131042.484 ±    1837.404   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1678.361 ±      61.236  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     20154.929 ±     798.353    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1607.378 ±    1410.483  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     19314.534 ±   17213.969    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.804 ±       5.363  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         9.633 ±      64.256    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        25.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                          128  thrpt    5    203971.678 ±    6678.983   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1236.265 ±      52.477  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      9538.357 ±     308.069    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1202.774 ±    1152.311  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      9281.773 ±    8914.714    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.841 ±       6.966  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6.508 ±      53.900    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                         128  thrpt    5    244923.489 ±   22611.276   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1316.602 ±     156.228  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      8458.125 ±     265.477    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345.236 ±       3.015  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      8647.190 ±     809.139    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.629 ±       4.881  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3.982 ±      30.888    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        24.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                              128  thrpt    5     69954.907 ±    2547.592   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2816.964 ±     160.786  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     63369.582 ±    1685.389    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2696.792 ±      36.447  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60672.149 ±    2121.374    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.050 ±       0.314  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1.137 ±       7.168    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                128  thrpt    5    180221.519 ±    2160.887   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1197.433 ±      27.811  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10455.582 ±     293.191    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1073.859 ±    1415.605  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9384.492 ±   12458.319    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.691 ±       5.178  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         6.043 ±      45.296    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                         128  thrpt    5    705960.169 ±   12873.467   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       733.232 ±      12.424  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1634.520 ±      28.537    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       667.353 ±       1.663  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1487.673 ±      25.594    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.019 ±       0.160    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                        128  thrpt    5    706967.795 ±   34552.778   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       560.116 ±      33.886  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1246.827 ±      88.491    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       536.506 ±    1154.871  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1197.707 ±    2578.907    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.019 ±       0.099    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        11.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    780729.111 ±    4208.342   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                             128  thrpt    5    355471.813 ±    2935.199   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1001.551 ±      26.543  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      4433.678 ±     146.629    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       932.652 ±    1404.811  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4130.382 ±    6243.338    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.055 ±       0.318    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                            128  thrpt    5     11307.776 ±     148.445   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1417.602 ±      57.675  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5    197302.530 ±    9189.819    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1341.853 ±       6.587  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    186758.004 ±    2503.106    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.795 ±       5.739  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5       110.475 ±     797.713    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5     10636.159 ±     265.807   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1237.102 ±      37.657  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5    183041.679 ±    5065.092    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1204.708 ±    1153.595  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5    178195.270 ±  170020.761    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.909 ±       6.190  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5       134.421 ±     917.483    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5    280078.972 ±    7537.359   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1872.455 ±      99.130  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     10520.483 ±     303.137    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1881.659 ±    1153.902  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     10564.073 ±    6273.249    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.687 ±       4.139  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         3.866 ±      23.265    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                         128  thrpt    5      7672.513 ±     121.375   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1377.466 ±      48.473  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    282520.908 ±    6995.374    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1335.960 ±       5.538  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    274014.654 ±    4645.284    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.945 ±       7.179  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5       193.414 ±    1469.534    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                           128  thrpt    5     25669.726 ±    1620.749   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1346.950 ±     116.371  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5     82575.893 ±    2527.824    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1207.447 ±    1156.422  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     73837.543 ±   68301.452    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.762 ±       6.337  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        46.183 ±     384.078    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     30925.701 ±     483.203   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1289.758 ±      23.455  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     65630.116 ±    1698.430    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1339.351 ±       4.684  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     68153.616 ±    1168.545    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.791 ±       6.681  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        40.521 ±     342.068    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    635379.248 ±   15026.673   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1185.205 ±      57.923  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      2934.969 ±      81.847    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1209.929 ±    1157.121  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      2992.988 ±    2822.015    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.676 ±       5.642  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1.667 ±      13.913    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    786536.541 ±     800.050   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     30180.352 ±     163.263   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1370.511 ±      21.342  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     71453.569 ±     713.690    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1339.873 ±       5.754  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69856.517 ±     429.098    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.829 ±       5.404  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        43.158 ±     281.433    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                128  thrpt    5     34578.819 ±     688.625   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1827.775 ±      37.822  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     83182.903 ±    1952.032    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1742.551 ±    1411.435  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     79347.745 ±   65157.857    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.833 ±       6.589  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        37.842 ±     299.379    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                         128  thrpt    5     33363.979 ±    1652.572   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1478.937 ±     121.181  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     69760.025 ±    3614.917    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1471.212 ±    1141.856  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     69389.157 ±   53390.626    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.879 ±       5.974  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        41.186 ±     279.923    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                        128  thrpt    5    471330.170 ±    8319.792   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1257.728 ±      31.067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4199.480 ±      71.303    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1211.405 ±    1159.378  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4046.714 ±    3895.410    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.591 ±       4.239  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.973 ±      14.152    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                             128  thrpt    5     18785.368 ±     492.407   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1920.652 ±      51.160  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    160893.903 ±    3698.635    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1869.276 ±    1153.341  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    156591.992 ±   96692.709    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.924 ±       7.869  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        78.199 ±     665.837    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                               128  thrpt    5     57522.953 ±     571.333   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1766.709 ±      58.548  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     48335.057 ±    1336.959    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1742.649 ±    1410.219  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     47674.721 ±   38530.537    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.754 ±       6.135  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        20.676 ±     168.353    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                        128  thrpt    5    159683.179 ±    3499.480   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1932.764 ±      49.848  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     19049.026 ±     497.590    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1873.303 ±    1156.088  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     18471.168 ±   11586.853    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.775 ±       5.199  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7.648 ±      51.391    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        14.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1185786.712 ±   31147.055   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1310.211 ±      10.110  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1738.968 ±      48.211    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.499 ±       5.155  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1784.479 ±      49.929    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.668 ±       5.567  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.894 ±       7.448    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1386223.253 ±    8170.098   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                            128  thrpt    5     68409.442 ±    1087.357   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1728.736 ±      60.907  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     39769.453 ±    1297.502    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1607.866 ±    1414.511  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     36991.437 ±   32594.680    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.816 ±       6.451  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        18.799 ±     148.654    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                128  thrpt    5     16995.259 ±     467.354   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1551.280 ±      55.012  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    143633.025 ±    5817.269    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1608.635 ±    1410.337  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    149053.417 ±  133111.680    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.766 ±       6.374  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        70.925 ±     590.194    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                         128  thrpt    5     17526.663 ±     749.599   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1443.645 ±      36.917  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    129632.052 ±    4381.830    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336.895 ±       5.422  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    120051.279 ±    5362.972    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.904 ±       6.640  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        81.652 ±     601.536    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                        128  thrpt    5    678222.790 ±   20685.191   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1828.163 ±      86.068  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4242.172 ±      99.410    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1748.047 ±    1415.657  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4053.291 ±    3217.502    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.600 ±       4.677  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.390 ±      10.848    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                             128  thrpt    5     12039.422 ±     529.652   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1654.924 ±      99.365  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    216293.301 ±    8423.992    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1602.844 ±    1407.242  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    209619.000 ±  186640.905    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.933 ±       6.629  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5       122.909 ±     875.789    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                               128  thrpt    5     45029.958 ±     519.628   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1766.086 ±      70.125  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     61725.947 ±    2351.043    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1742.942 ±    1411.199  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     60921.741 ±   49419.459    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.749 ±       6.052  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        26.297 ±     212.462    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                        128  thrpt    5     58091.019 ±    1794.514   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1788.086 ±      51.392  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     48443.551 ±     793.883    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1740.076 ±    1415.832  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47168.997 ±   38898.926    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.776 ±       6.456  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20.860 ±     173.514    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                       128  thrpt    5   1360786.794 ±   22337.023   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1286.668 ±      43.076  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1488.047 ±      39.908    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.791 ±       4.052  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1555.298 ±      28.885    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.679 ±       5.363  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.783 ±       6.187    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1577534.554 ±    8506.625   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                            128  thrpt    5      3692.428 ±      55.020   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       501.490 ±      24.644  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    213727.949 ±    9755.914    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       503.744 ±    1115.663  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    214967.128 ±  475897.940    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3.553 ±      18.734    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        15.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                     128  thrpt    5    124787.011 ±    1427.636   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1983.164 ±      58.849  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5     25009.139 ±     628.806    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2011.000 ±      14.641  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     25360.446 ±     358.702    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.771 ±       4.694  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         9.734 ±      59.385    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        15.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                               128  thrpt    5    381891.133 ±    7722.492   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                128  thrpt    5       787.631 ±      44.861  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                           128  thrpt    5      3245.788 ±     202.096    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                       128  thrpt    5       799.883 ±    1145.992  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      3296.673 ±    4730.909    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.001 ±       0.008  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.004 ±       0.032    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                      128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                              128  thrpt    5    263013.544 ±    4163.785   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5       587.886 ±      31.116  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      3517.891 ±     223.254    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       533.435 ±    1148.259  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      3196.530 ±    6880.878    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.025 ±       0.215    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                             128  thrpt    5    518129.748 ±    4494.535   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       667.016 ±      28.711  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      2026.048 ±     100.536    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537.181 ±    1156.325  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1633.003 ±    3515.167    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.025 ±       0.218    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                  128  thrpt    5     75012.343 ±    1824.819   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      3169.949 ±     106.362  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     66504.943 ±    1222.427    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3084.628 ±    1419.839  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     64735.967 ±   30536.349    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.440 ±       2.942    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        32.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                    128  thrpt    5    135678.055 ±    2728.594   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      1186.774 ±      22.358  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5     13766.295 ±     502.870    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1073.448 ±    1415.100  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     12466.608 ±   16600.684    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.720 ±       5.186  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.345 ±      60.126    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        23.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                              128  thrpt    5    208355.937 ±    1702.998   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       168.125 ±      25.653  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1269.889 ±     203.089    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204.671 ±    1079.169  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1549.065 ±    8167.770    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.382 ±       3.293  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.895 ±      24.923    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                    128  thrpt    5         2.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                     128  thrpt    5         6.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                             128  thrpt    5    424653.722 ±    3435.785   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       426.367 ±      34.330  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1580.012 ±     128.851    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       369.233 ±    1320.790  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1368.106 ±    4891.934    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                            128  thrpt    5    467106.232 ±    5572.719   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       374.150 ±      30.264  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1260.699 ±     109.014    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       338.731 ±    1216.598  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1142.317 ±    4106.808    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.021 ±       0.139  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.070 ±       0.470    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    501993.773 ±     809.874   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5         0.036 ±       0.310  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.114 ±       0.972    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                 128  thrpt    5     29011.750 ±     431.707   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1577.643 ±      28.565  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     85583.852 ±    1073.090    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1473.804 ±    1159.433  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     79951.075 ±   62889.444    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.829 ±       6.955  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        44.943 ±     377.251    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        11.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                           128  thrpt    5      8276.878 ±     301.933   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                            128  thrpt    5      1191.032 ±      67.065  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                       128  thrpt    5    226436.474 ±    7529.482    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1208.301 ±    1155.717  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    229821.742 ±  220983.067    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.749 ±       6.363  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       141.841 ±    1204.119    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                  128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                    128  thrpt    5      8410.897 ±     173.971   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1102.254 ±      48.395  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5    206207.399 ±   10815.565    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1070.098 ±    1411.313  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5    200434.196 ±  267031.174    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.804 ±       6.745  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5       150.817 ±    1265.083    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                           128  thrpt    5        29.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                   128  thrpt    5    192504.741 ±   19551.967   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                    128  thrpt    5      1687.081 ±     119.958  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5     13793.298 ±     568.485    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1613.669 ±    1419.690  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     13240.584 ±   12647.167    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.616 ±       5.083  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4.992 ±      41.152    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                         128  thrpt    5        12.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                          128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                        128  thrpt    5      7589.987 ±    1545.546   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                         128  thrpt    5      1262.139 ±     244.989  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    261674.500 ±    8498.580    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1202.152 ±    1148.074  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    250632.323 ±  256162.647    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.928 ±       6.872  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       209.832 ±    1577.234    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                               128  thrpt    5        32.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                          128  thrpt    5     21307.410 ±     394.360   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                           128  thrpt    5      1209.867 ±      31.177  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                      128  thrpt    5     89358.111 ±    2439.951    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1201.096 ±    1147.870  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     88707.394 ±   84751.253    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1.539 ±       5.924    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                 128  thrpt    5        12.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                   128  thrpt    5     23406.396 ±     791.666   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1323.127 ±      60.184  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5     88964.524 ±    3310.626    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1205.426 ±    1154.393  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     81047.157 ±   77592.025    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.810 ±       6.610  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        55.005 ±     449.395    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                         128  thrpt    5         9.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                          128  thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                  128  thrpt    5    367703.961 ±   28513.309   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       857.196 ±      98.943  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      3668.354 ±     170.758    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       805.962 ±    1159.253  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      3437.996 ±    4721.016    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0.071 ±       0.438    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                        128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                         128  thrpt    5        18.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                          128  thrpt    5    429383.786 ±    4020.747   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                       128  thrpt    5     23194.459 ±     390.797   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                        128  thrpt    5      1117.081 ±      41.776  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     75795.476 ±    2707.459    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1072.733 ±    1413.801  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     72756.446 ±   95560.603    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.670 ±       5.682  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        45.517 ±     385.859    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                             128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                              128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                               128  thrpt    5     13432.031 ±     303.218   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1295.845 ±      56.619  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5    151781.150 ±    4428.506    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1206.520 ±    1152.488  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    141321.966 ±  135003.698    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.804 ±       6.003  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        94.063 ±     703.323    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                     128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                        128  thrpt    5     13434.577 ±     516.617   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1192.002 ±      55.157  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5    139636.514 ±    6930.911    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1203.173 ±    1151.515  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    141125.331 ±  137254.295    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.870 ±       7.313  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       102.274 ±     859.768    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                       128  thrpt    5    290795.894 ±   12421.686   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1745.612 ±     128.160  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      9447.245 ±     364.628    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1747.456 ±    1416.055  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      9445.173 ±    7383.205    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.600 ±       4.940  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3.300 ±      27.216    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                            128  thrpt    5     12492.017 ±     671.932   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1539.248 ±      45.034  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    193934.148 ±    6912.404    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1600.954 ±    1406.307  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    202178.397 ±  187765.267    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.117 ±       0.872  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        14.598 ±     109.188    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                              128  thrpt    5     32950.702 ±     120.871   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1425.850 ±      24.381  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     68099.994 ±    1208.802    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1340.915 ±       5.758  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     64043.355 ±     253.675    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.754 ±       5.011  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        35.975 ±     239.131    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                       128  thrpt    5     81223.541 ±    2140.601   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      2045.573 ±      53.250  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     39632.713 ±     883.155    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      2007.762 ±      11.982  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     38900.977 ±     998.357    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.749 ±       6.101  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        14.533 ±     118.324    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                      128  thrpt    5    532244.058 ±    3431.032   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       749.028 ±      12.298  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2214.806 ±      36.044    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       671.164 ±       1.397  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1984.571 ±      11.067    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.012 ±       0.106    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         5.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    727092.512 ±    1311.485   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                           128  thrpt    5     73479.960 ±    8253.825   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      2115.080 ±     234.851  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     45297.095 ±     510.331    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2005.506 ±      12.338  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     42981.397 ±    5196.648    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.842 ±       7.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        17.862 ±     149.005    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                   128  thrpt    5     17080.731 ±     552.335   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       905.250 ±      48.401  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     83412.889 ±    6001.141    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       805.259 ±    1154.532  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     74292.048 ±  108238.199    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.387 ±       3.329    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         6.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                            128  thrpt    5     17476.019 ±     891.833   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       765.838 ±      38.901  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     68955.247 ±    1312.012    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       668.273 ±       1.547  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     60178.560 ±    3140.267    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1.117 ±       6.412    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        17.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                           128  thrpt    5    120641.283 ±    1745.526   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       308.267 ±      23.743  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      4021.487 ±     367.203    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204.644 ±    1079.030  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2680.270 ±   14132.298    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                128  thrpt    5     14400.909 ±     382.594   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1114.878 ±      59.566  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    121824.721 ±    7021.591    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1065.305 ±    1403.475  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    116427.754 ±  153638.125    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.096 ±       0.736  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        10.558 ±      81.272    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                  128  thrpt    5     47900.984 ±     611.973   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1472.520 ±      46.937  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     48366.802 ±    1221.582    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1475.790 ±    1158.516  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     48491.926 ±   38566.984    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.740 ±       5.845  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        24.406 ±     192.740    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                           128  thrpt    5     77235.029 ±     982.622   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1643.919 ±      42.272  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     33495.899 ±    1164.650    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1605.841 ±    1409.415  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     32735.546 ±   29079.733    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.021 ±       0.098  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.425 ±       2.004    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                          128  thrpt    5    329459.003 ±    5830.151   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       653.540 ±      14.830  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      3121.991 ±      65.419    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       671.065 ±       1.117  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      3205.746 ±      59.483    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.080 ±       0.420    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    362212.862 ±    2338.035   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5         0.187 ±       1.608  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.814 ±       6.996    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                               128  thrpt    5     66878.591 ±    2492.715   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1546.622 ±      64.407  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     36395.265 ±    1015.065    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1474.645 ±    1157.598  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     34697.012 ±   27064.242    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.779 ±       6.614  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        18.282 ±     155.313    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        24.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                    128  thrpt    5    147211.857 ±    3077.751   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1925.508 ±      80.930  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     20583.784 ±     484.215    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1876.414 ±    1156.494  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     20058.348 ±   12337.478    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.791 ±       4.739  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         8.502 ±      51.019    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                              128  thrpt    5    848259.256 ±   35172.090   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       480.903 ±      47.967  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5       892.001 ±      70.395    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       399.920 ±    1405.775  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       739.996 ±    2601.219    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.004 ±       0.019  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.008 ±       0.034    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                             128  thrpt    5    430443.363 ±    7720.352   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       438.829 ±      33.784  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      1604.374 ±     135.018    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       368.953 ±    1319.503  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1351.664 ±    4829.788    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                            128  thrpt    5   1101735.289 ±  288731.780   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       391.855 ±     125.152  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       559.351 ±      54.869    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       370.109 ±    1324.453  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       514.879 ±    1840.790    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.583 ±       4.930  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.807 ±       6.826    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                 128  thrpt    5     81904.983 ±    1755.986   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3307.653 ±      68.389  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     63555.248 ±    1386.187    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3221.690 ±    1159.356  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     61918.183 ±   22946.468    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.025 ±       0.174  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.479 ±       3.336    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                   128  thrpt    5    276256.115 ±    4582.502   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1682.861 ±      50.612  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9587.150 ±     282.779    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1742.444 ±    1414.342  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9928.369 ±    8094.414    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.716 ±       5.258  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         4.095 ±      30.077    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5        27.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1229397.501 ±  215416.145   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       431.223 ±      76.889  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       552.155 ±      55.630    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       399.599 ±    1404.647  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       519.958 ±    1833.433    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.005 ±       0.045    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                            128  thrpt    5   1572014.466 ±   72353.936   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       945.470 ±      48.895  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       946.542 ±      22.348    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       933.062 ±    1405.996  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       933.435 ±    1397.037    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.013 ±       0.108    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1915408.329 ±   38348.090   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       673.202 ±      30.897  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       553.069 ±      18.221    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       671.384 ±       1.753  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       551.596 ±      10.435    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.014 ±       0.087    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   2052147.915 ±    2819.072   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                128  thrpt    5     42412.500 ±     601.785   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2109.568 ±      65.287  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78272.034 ±    1642.919    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2007.915 ±      15.081  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     74501.681 ±    1005.503    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.887 ±       6.793  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32.881 ±     251.808    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                     128  thrpt    5     15363.452 ±    1504.654   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                      128  thrpt    5      1895.177 ±     176.603  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                 128  thrpt    5    194125.546 ±    6161.947    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1878.386 ±    1149.389  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5    192794.321 ±  126141.381    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1.277 ±       4.492    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                           128  thrpt    5        14.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                            128  thrpt    5        20.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                              128  thrpt    5     99660.233 ±    4308.384   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1341.393 ±      69.087  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     21181.175 ±     212.508    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1337.749 ±       5.079  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     21126.099 ±     895.534    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.829 ±       6.910  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        12.998 ±     108.357    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        28.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                             128  thrpt    5    256918.705 ±   12464.626   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       861.225 ±      43.664  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      5275.246 ±     114.882    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       806.088 ±    1157.575  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4947.769 ±    7280.466    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.051 ±       0.270    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                  128  thrpt    5     12879.792 ±     193.698   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2072.863 ±      45.249  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    253286.282 ±    2788.650    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2004.192 ±      16.616  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    244900.110 ±    5111.997    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.928 ±       5.788  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5       113.847 ±     711.299    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        15.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                    128  thrpt    5     33241.677 ±     978.476   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                     128  thrpt    5      2791.529 ±      80.256  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                128  thrpt    5    132164.424 ±    1297.721    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      2685.997 ±      32.622  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5    127172.564 ±    3435.972    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.012 ±       0.044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0.592 ±       2.081    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                          128  thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                             128  thrpt    5    105720.852 ±    1236.645   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5      1499.466 ±      27.532  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     22319.385 ±     362.589    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1472.803 ±    1152.336  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     21931.892 ±   17431.440    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.770 ±       6.365  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        11.474 ±      94.829    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                            128  thrpt    5    179171.274 ±     918.232   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       585.797 ±      30.445  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      5145.637 ±     282.976    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       536.671 ±    1155.226  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4716.242 ±   10152.077    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.073 ±       0.629    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         4.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5    194157.388 ±    1045.258   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                 128  thrpt    5     48159.839 ±     723.904   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      3413.541 ±      39.315  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5    111545.731 ±     897.134    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3364.236 ±      57.467  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    109936.220 ±    3069.785    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.050 ±       0.387  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.630 ±      12.617    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        37.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                128  thrpt    5     26092.653 ±     795.645   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1401.507 ±      35.819  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5     84535.827 ±    1581.194    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1342.090 ±       7.108  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     80954.887 ±    2670.188    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.791 ±       5.207  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        47.499 ±     312.848    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                         128  thrpt    5     27675.012 ±    1682.393   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1127.939 ±      60.192  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     64137.232 ±    1475.066    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.063 ±    1409.101  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     61014.186 ±   82168.835    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.762 ±       6.515  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5        42.915 ±     366.994    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                        128  thrpt    5    632983.172 ±    8234.897   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1703.031 ±      49.220  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4234.069 ±     154.169    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1612.228 ±    1417.427  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4009.965 ±    3562.836    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.645 ±       5.512  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1.614 ±      13.783    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5        22.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                             128  thrpt    5     22378.561 ±     267.808   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1691.705 ±      34.696  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    118973.549 ±    3253.580    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1607.002 ±    1417.954  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    113064.789 ±  100835.950    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.125 ±       0.942  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         8.781 ±      66.176    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        12.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        20.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                               128  thrpt    5     72891.967 ±    5648.179   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1938.205 ±     112.383  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     41851.132 ±    1012.222    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1876.316 ±    1154.687  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     40571.620 ±   26228.252    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.779 ±       4.876  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        16.761 ±     104.907    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        14.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                        128  thrpt    5    185312.394 ±    1237.529   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2078.825 ±      43.247  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     17653.644 ±     400.158    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2007.452 ±      11.558  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     17047.513 ±     130.984    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.758 ±       6.393  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.437 ±      54.290    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                       128  thrpt    5   1515031.774 ±   23622.726   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1299.213 ±      50.500  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1349.523 ±      37.184    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1344.420 ±       4.234  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1396.518 ±      22.133    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.633 ±       5.226  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.655 ±       5.407    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5        23.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   1759765.081 ±    2388.136   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                            128  thrpt    5    154879.926 ±    3561.755   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      2015.025 ±      68.543  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     20475.338 ±     420.306    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2007.159 ±      29.490  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     20396.104 ±     557.392    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.079 ±       0.550  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.803 ±       5.584    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        15.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                              128  thrpt    5     42801.860 ±     869.928   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1573.399 ±      59.243  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     57846.078 ±    1375.633    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1470.498 ±    1155.053  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     54052.680 ±   42113.400    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.849 ±       7.179  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        31.150 ±     263.279    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                             128  thrpt    5    754228.360 ±   99158.529   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1515.210 ±     200.324  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      3161.626 ±      85.863    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479.354 ±    1161.899  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3085.516 ±    2328.718    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.587 ±       4.333  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1.219 ±       8.902    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                   128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                  128  thrpt    5     32673.983 ±    1536.714   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                   128  thrpt    5      2316.359 ±     101.093  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                              128  thrpt    5    111565.316 ±    2247.616    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2286.226 ±    1409.934  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5    110226.089 ±   71281.982    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.329 ±       2.206  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5        16.109 ±     108.737    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                        128  thrpt    5        17.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                         128  thrpt    5        28.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                             128  thrpt    5    347976.685 ±   31023.110   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                              128  thrpt    5       991.301 ±     100.894  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      4482.995 ±     107.921    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       937.255 ±    1413.864  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4231.221 ±    6269.929    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.037 ±       0.197    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                   128  thrpt    5         7.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                    128  thrpt    5        22.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                            128  thrpt    5   1989100.168 ±   32528.537   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                             128  thrpt    5      1192.967 ±      32.764  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5       943.938 ±      33.057    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1076.248 ±    1418.796  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       852.373 ±    1132.421    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.633 ±       4.714  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.503 ±       3.749    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                  128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                    128  thrpt    5   2247512.983 ±   23362.357   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                 128  thrpt    5    252170.447 ±   11526.555   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                  128  thrpt    5      1689.398 ±      58.708  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     10541.538 ±     264.885    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1603.348 ±    1408.449  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9999.154 ±    8655.646    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.852 ±       6.584  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         5.299 ±      40.942    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                       128  thrpt    5        12.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                   128  thrpt    5     72420.513 ±    1515.884   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1607.711 ±      91.753  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     34936.475 ±    1526.320    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1608.281 ±    1413.263  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     34944.348 ±   30577.224    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.779 ±       5.193  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        16.936 ±     112.972    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                            128  thrpt    5     88862.947 ±    2494.984   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1163.859 ±      21.994  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20611.822 ±     860.796    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.737 ±    1150.807  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     21336.586 ±   20630.256    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.825 ±       6.788  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        14.598 ±     120.145    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                           128  thrpt    5     99748.411 ±    4195.122   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1230.255 ±      91.159  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5     19407.050 ±     677.280    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1210.048 ±    1157.121  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     19053.530 ±   17771.006    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.608 ±       4.465  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         9.596 ±      70.506    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                128  thrpt    5     45777.154 ±    1787.062   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2079.720 ±      83.916  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     71497.207 ±    1302.089    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2003.287 ±      14.454  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68875.163 ±    2900.345    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.933 ±       5.800  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        32.323 ±     201.985    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                  128  thrpt    5    116771.906 ±    2032.766   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1122.988 ±      54.844  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     15134.036 ±     723.611    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1071.477 ±    1410.950  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     14444.532 ±   19072.267    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.737 ±       6.168  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         9.881 ±      82.662    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                           128  thrpt    5    334905.961 ±    6223.212   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       513.598 ±      38.296  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      2413.302 ±     180.200    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       502.451 ±    1112.130  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2361.365 ±    5221.132    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.004 ±       0.036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.019 ±       0.168    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                          128  thrpt    5    726767.890 ±   19757.033   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       926.521 ±      40.867  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      2006.460 ±      98.464    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.276 ±    1416.646  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2036.799 ±    3075.925    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.036 ±       0.226    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    563052.756 ±   41719.107   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                               128  thrpt    5    249108.169 ±    2537.345   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       818.238 ±      26.401  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      5169.665 ±     199.408    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       802.236 ±    1149.534  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      5071.169 ±    7314.217    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.052 ±       0.277    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        20.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                               128  thrpt    5    125081.759 ±    2496.575   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1757.663 ±      54.588  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     22115.685 ±     488.332    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1739.288 ±    1410.751  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21894.758 ±   17961.427    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.791 ±       6.239  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         9.958 ±      78.542    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                        128  thrpt    5    183606.028 ±    6319.145   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1107.976 ±      30.614  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      9496.417 ±     507.532    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1070.563 ±    1410.254  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      9184.914 ±   12207.288    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.724 ±       6.148  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6.172 ±      52.369    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                       128  thrpt    5    506624.447 ±    9768.513   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       341.283 ±      37.002  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      1060.305 ±     134.673    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       369.972 ±    1323.877  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1152.925 ±    4126.444    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.583 ±       5.019  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1.824 ±      15.708    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                            128  thrpt    5     69144.480 ±     418.842   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2789.259 ±      56.728  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     63475.928 ±    1024.446    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2697.354 ±      35.505  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61384.518 ±     545.967    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.190 ±       1.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                              128  thrpt    5    186303.538 ±    2035.153   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1211.724 ±      37.880  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     10236.594 ±     340.258    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1207.447 ±    1155.207  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10204.484 ±    9811.531    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.712 ±       5.063  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         6.018 ±      42.815    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                       128  thrpt    5    552814.799 ±    6406.921   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       561.594 ±      30.837  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1598.847 ±     103.097    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       534.008 ±    1149.494  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1521.908 ±    3276.042    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.024 ±       0.125    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                      128  thrpt    5   1153988.933 ±   44902.116   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       875.104 ±      49.973  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1193.457 ±      42.197    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       806.197 ±    1157.224  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1098.922 ±    1565.917    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.011 ±       0.060    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   1289108.679 ±    1104.742   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                           128  thrpt    5    355564.548 ±   13456.924   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       993.091 ±      32.936  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4395.814 ±     249.982    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       931.593 ±    1403.179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4130.623 ±    6313.377    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.012 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.055 ±       0.317    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                            128  thrpt    5       602.550 ±       7.085   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1282.860 ±      14.277  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5   3349217.606 ±   45766.244    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1203.554 ±    1156.044  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5   3141481.477 ± 3009556.142    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         1.138 ±       9.577  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5      2963.503 ±   24932.671    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                  128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                   128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                     128  thrpt    5       597.201 ±      15.942   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1266.611 ±      18.227  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5   3336827.037 ±   66889.705    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1199.720 ±    1152.393  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5   3157734.675 ± 2999267.475    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         1.132 ±       9.476  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5      2952.238 ±   24709.453    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                    128  thrpt    5     50410.391 ±    1081.495   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       845.955 ±      31.692  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     26408.039 ±    1531.045    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       939.040 ±    1414.326  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     29362.704 ±   44852.637    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.021 ±       0.080  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.650 ±       2.506    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5        23.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                         128  thrpt    5       581.723 ±      11.147   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1274.238 ±      37.304  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5   3446480.765 ±  157721.299    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1201.067 ±    1149.247  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5   3251414.082 ± 3146134.724    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         1.132 ±       7.339  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5      3069.302 ±   19887.810    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                           128  thrpt    5     14594.452 ±     163.886   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1155.591 ±      40.990  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5    124610.822 ±    5636.751    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1202.118 ±    1150.096  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    129672.497 ±  124626.770    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         1.166 ±       9.903  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5       125.346 ±    1064.776    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                 128  thrpt    5         9.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                    128  thrpt    5     18131.591 ±     433.006   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1093.721 ±      34.753  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     94937.448 ±    3144.860    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1068.631 ±    1408.374  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     92882.597 ±  123762.193    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.774 ±       6.579  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        67.628 ±     574.567    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        28.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                   128  thrpt    5    221190.098 ±    5403.596   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       803.592 ±      44.641  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      5717.199 ±     214.385    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       802.955 ±    1148.749  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      5708.380 ±    8084.074    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.017 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.119 ±       0.476    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        17.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    243230.788 ±    3754.972   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         0.183 ±       1.576  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5         1.194 ±      10.264    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                        128  thrpt    5     18256.109 ±     340.315   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1172.615 ±      17.954  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5    101091.265 ±    2021.379    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1068.472 ±    1408.372  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     92176.122 ±  122192.351    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         1.203 ±       8.389  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5       103.536 ±     722.636    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        32.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                   128  thrpt    5   1515797.897 ±  287877.583   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5        65.326 ±      33.648  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5        67.818 ±      32.584    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       102.317 ±     880.983  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       106.130 ±     913.815    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         1.000                counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5         3.000                    ms
[info] BitSetBenchmark.readPlayJson                                                                        128  thrpt    5     82919.568 ±    1548.639   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      3545.832 ±      90.336  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     67286.239 ±    1556.626    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                128  thrpt    5      3517.002 ±    1164.719  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     66729.943 ±   21495.947    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.033 ±       0.146  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5         0.631 ±       2.757    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        26.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        38.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                   128  thrpt    5   1863915.584 ±   37716.715   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1001.941 ±      52.519  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5       845.990 ±      55.738    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                           128  thrpt    5       936.488 ±    1412.944  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5       791.303 ±    1201.561    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0.011 ±       0.060    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5         7.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        23.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                  128  thrpt    5   2222409.156 ±  223328.659   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       642.821 ±      52.855  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5       455.204 ±      12.942    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                          128  thrpt    5       671.061 ±       1.583  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5       475.409 ±      48.516    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.012 ±       0.072  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.009 ±       0.050    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5   2402370.238 ±   11969.825   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5        24.426 ±       0.120  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                       128  thrpt    5     51625.569 ±    2141.560   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      2228.166 ±     137.090  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     67918.584 ±    2073.497    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                               128  thrpt    5      2137.492 ±    1160.321  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5     65138.193 ±   34460.993    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.874 ±       7.262  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5        26.622 ±     220.958    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        25.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                    N/A  thrpt    5    874871.274 ±   22534.145   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      2833.410 ±      74.662  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      5096.929 ±      85.551    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2683.151 ±      30.013  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      4826.834 ±     171.141    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0.022 ±       0.079    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        20.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                              N/A  thrpt    5   4979045.849 ±   51589.072   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       313.729 ±      36.724  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5        99.164 ±      12.387    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       337.891 ±    1212.330  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       106.992 ±     383.790    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.003 ±       0.023    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                             N/A  thrpt    5   1018181.947 ±   41960.094   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1201.011 ±      90.074  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5      1856.246 ±      74.678    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1202.892 ±    1152.530  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5      1855.922 ±    1736.690    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.874 ±       7.416  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         1.337 ±      11.334    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         9.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5        30.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                            N/A  thrpt    5   9060231.067 ± 2266550.087   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       426.097 ±      97.624  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5        74.048 ±       7.239    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       371.095 ±    1328.476  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        65.546 ±     231.315    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.017 ±       0.105  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.003 ±       0.018    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                 N/A  thrpt    5    514263.070 ±   14710.709   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2221.342 ±      52.813  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      6798.109 ±     295.273    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2149.424 ±    1172.908  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      6581.852 ±    3750.056    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.300 ±       2.449  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0.915 ±       7.478    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        16.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                          N/A  thrpt    5      4109.736 ±      82.484   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                           N/A  thrpt    5      2059.390 ±      85.803  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                      N/A  thrpt    5    788568.893 ±   19164.978    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2001.645 ±      13.637  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5    766493.135 ±   19035.324    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.991 ±       6.381  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5       381.855 ±    2465.101    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                 N/A  thrpt    5        31.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                   N/A  thrpt    5      6902.474 ±     127.028   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                    N/A  thrpt    5      2511.151 ±     108.254  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                               N/A  thrpt    5    572498.561 ±   18993.132    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2417.541 ±    1405.753  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    551037.033 ±  316505.797    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.192 ±       1.250  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5        43.819 ±     285.728    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                         N/A  thrpt    5        18.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                          N/A  thrpt    5        29.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                  N/A  thrpt    5     48073.427 ±    4101.934   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                   N/A  thrpt    5       797.040 ±      85.714  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                              N/A  thrpt    5     26090.744 ±    1665.177    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       805.720 ±    1155.159  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     26375.091 ±   37671.746    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.012 ±       0.044  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.411 ±       1.446    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                        N/A  thrpt    5         6.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                         N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                         N/A  thrpt    5      4608.226 ±      57.951   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1007.053 ±      41.749  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5    343932.878 ±   15838.748    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       936.486 ±    1412.242  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5    319896.247 ±  483249.506    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.047 ±       0.251  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        16.030 ±      85.440    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                               N/A  thrpt    5         7.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                N/A  thrpt    5        26.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                  N/A  thrpt    5      5041.223 ±     116.965   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       663.428 ±      27.560  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5    207096.820 ±    4854.422    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5       661.666 ±       1.753  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    206556.036 ±    4639.740    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.042 ±       0.127  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        13.030 ±      39.863    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                        N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                         N/A  thrpt    5         8.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                 N/A  thrpt    5      6556.530 ±      86.471   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       330.718 ±      35.348  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5     79388.352 ±    9513.727    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       338.665 ±    1216.317  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5     81489.752 ±  292824.884    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         2.008 ±      17.288    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                       N/A  thrpt    5         3.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                        N/A  thrpt    5        10.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                         N/A  thrpt    5      6647.493 ±     170.221   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                          N/A  thrpt    5       283.324 ±      30.957  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                     N/A  thrpt    5     67080.274 ±    8530.363    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       204.679 ±    1079.212  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     48733.899 ±  256965.446    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                               N/A  thrpt    5         2.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                N/A  thrpt    5         6.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                    N/A  thrpt    5      7797.754 ±     371.059   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1656.538 ±     105.472  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5    334332.396 ±   13596.693    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1607.539 ±    1414.206  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    324056.206 ±  275909.344    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.861 ±       4.723  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       173.105 ±     945.470    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                          N/A  thrpt    5        12.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                           N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                              N/A  thrpt    5     18903.999 ±    2713.121   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                               N/A  thrpt    5       479.712 ±     100.092  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          N/A  thrpt    5     39912.929 ±    3305.592    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       399.200 ±    1403.246  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     32651.788 ±  114775.845    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                     N/A  thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                             N/A  thrpt    5     15966.917 ±     876.845   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       439.134 ±      57.580  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     43291.767 ±    6483.592    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       395.775 ±    1391.206  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     39270.852 ±  138076.025    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.420 ±       3.619    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                   N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                    N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                            N/A  thrpt    5     23284.085 ±     189.970   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       438.515 ±      34.650  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     29636.090 ±    2319.685    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       402.369 ±    1414.384  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     27196.451 ±   95599.844    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.647 ±       5.568  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        43.740 ±     376.615    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                  N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                   N/A  thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                 N/A  thrpt    5      4248.900 ±      72.668   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2574.811 ±      94.713  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5    953623.005 ±   24980.041    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2418.161 ±    1411.577  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    895416.735 ±  516642.688    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0.425 ±       2.873  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5       158.266 ±    1072.282    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                       N/A  thrpt    5        18.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                        N/A  thrpt    5        28.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                   N/A  thrpt    5     10262.354 ±     354.438   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                    N/A  thrpt    5      2200.910 ±      83.657  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                               N/A  thrpt    5    337526.272 ±   11885.230    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2140.824 ±    1147.067  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5    328550.704 ±  185358.769    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.800 ±       6.062  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5       123.301 ±     933.494    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                         N/A  thrpt    5        16.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                          N/A  thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                             N/A  thrpt    5     57965.334 ±     359.870   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                              N/A  thrpt    5       557.376 ±      32.673  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         N/A  thrpt    5     15133.816 ±     938.460    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       532.514 ±    1146.276  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     14465.885 ±   31139.045    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0.018 ±       0.065  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0.483 ±       1.771    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                   N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                    N/A  thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                            N/A  thrpt    5     45805.385 ±     443.695   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                             N/A  thrpt    5       677.769 ±      17.567  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     23285.809 ±     471.012    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       662.131 ±       6.164  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     22748.687 ±     159.185    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.286 ±       1.510    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                  N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                   N/A  thrpt    5         9.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                           N/A  thrpt    5     89526.809 ±    6707.246   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                            N/A  thrpt    5       693.113 ±      60.402  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     12182.594 ±     288.574    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       670.899 ±       1.832  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     11796.330 ±     917.688    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.012 ±       0.108  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.218 ±       1.873    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                 N/A  thrpt    5         5.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                  N/A  thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                   N/A  thrpt    5    104711.020 ±    2096.318   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    N/A  thrpt    5         0.395 ±       3.398  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               N/A  thrpt    5         5.987 ±      51.511    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                N/A  thrpt    5      7746.237 ±     419.398   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                 N/A  thrpt    5      2336.614 ±     122.734  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                            N/A  thrpt    5    474639.966 ±    9347.951    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      2286.288 ±    1434.915  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    464042.187 ±  278275.173    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.175 ±       1.334  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        35.416 ±     270.226    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                      N/A  thrpt    5        17.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                       N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readCirce                                                                              N/A  thrpt    5   9188817.328 ±   86195.743   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                               N/A  thrpt    5      4892.764 ±     112.366  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                          N/A  thrpt    5       838.027 ±      20.318    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                      N/A  thrpt    5      4742.306 ±      72.912  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                                 N/A  thrpt    5       812.259 ±      16.446    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                  N/A  thrpt    5         0.062 ±       0.188  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                             N/A  thrpt    5         0.011 ±       0.032    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                    N/A  thrpt    5        35.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                     N/A  thrpt    5        47.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                        N/A  thrpt    5  38177992.400 ±  259776.587   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                         N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                    N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                              N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readJacksonScala                                                                       N/A  thrpt    5  10959574.610 ±  238963.085   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                        N/A  thrpt    5      3765.268 ±     105.286  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       540.664 ±       7.782    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      3636.422 ±    1399.258  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5       522.121 ±     198.481    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                             N/A  thrpt    5        27.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                              N/A  thrpt    5        36.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                      N/A  thrpt    5  48773667.932 ±  863421.134   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5         2.938 ±      25.298  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5         0.095 ±       0.819    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                         N/A  thrpt    5  31569915.153 ± 1252792.088   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                          N/A  thrpt    5       830.165 ±      58.299  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        41.393 ±       4.588    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5       806.620 ±    1156.074  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5        40.338 ±      60.048    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                               N/A  thrpt    5         6.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readPlayJson                                                                           N/A  thrpt    5   9048807.212 ±  236618.735   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      3826.715 ±     125.482  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5       665.467 ±       8.729    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      3774.539 ±    1392.010  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       656.267 ±     234.951    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0.025 ±       0.088  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0.004 ±       0.015    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        28.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        37.000                    ms
[info] IntBenchmark.writeCirce                                                                             N/A  thrpt    5  14228679.984 ±  698257.565   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                              N/A  thrpt    5      1715.125 ±     127.824  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                         N/A  thrpt    5       189.692 ±       6.950    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                     N/A  thrpt    5      1610.286 ±    1413.421  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                                N/A  thrpt    5       177.838 ±     149.784    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                                 N/A  thrpt    5         0.641 ±       4.663  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                            N/A  thrpt    5         0.072 ±       0.523    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                   N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                    N/A  thrpt    5        22.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                       N/A  thrpt    5  42460035.129 ±  352101.773   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                        N/A  thrpt    5       891.271 ±      51.665  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                   N/A  thrpt    5        33.036 ±       2.130    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       933.933 ±    1407.692  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        34.636 ±      52.453    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.005 ±       0.036  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                             N/A  thrpt    5         7.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                              N/A  thrpt    5        24.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                      N/A  thrpt    5  13271782.508 ±  270474.444   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      2731.319 ±      89.941  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5       323.864 ±       4.010    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2681.645 ±      35.122  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5       317.982 ±       3.625    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0.001 ±       0.005    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        20.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        31.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5  48058481.862 ± 2174803.856   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1008.471 ±      55.424  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5        33.019 ±       1.449    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1074.277 ±    1414.312  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        35.222 ±      46.903    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0.001 ±       0.002    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5         8.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        21.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5  63354602.065 ±  309243.641   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5         0.134 ±       1.148  MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5         0.003 ±       0.029    B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                        N/A  thrpt    5  17703161.230 ±  677920.858   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                         N/A  thrpt    5      1677.694 ±      69.113  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5       149.147 ±       2.216    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1613.760 ±    1423.193  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5       143.267 ±     121.840    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0.001 ±       0.006    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                              N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                               N/A  thrpt    5        15.000                    ms
[info] IntBenchmark.writePlayJson                                                                          N/A  thrpt    5   2729431.215 ±   15127.035   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5      2196.192 ±      77.889  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1266.305 ±      48.435    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      2145.406 ±    1150.893  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5      1237.174 ±     670.069    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0.747 ±       6.122  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0.431 ±       3.532    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        16.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5    171202.845 ±    3220.022   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      3266.456 ±      62.411  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     30028.601 ±     408.593    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      3235.954 ±    1162.291  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     29753.393 ±   10911.748    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.038 ±       0.328    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        24.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        31.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5     35702.790 ±     819.934   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2555.708 ±      46.666  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    112658.797 ±    3423.766    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2424.921 ±    1411.496  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    106943.532 ±   63772.877    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.046 ±       0.351  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2.017 ±      15.476    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        18.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        26.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    151159.392 ±    6614.612   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1309.178 ±      48.168  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     13628.752 ±     232.817    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1336.937 ±       6.686  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     13918.976 ±     665.330    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.846 ±       7.012  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8.959 ±      74.354    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5    445495.920 ±   13341.849   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1776.386 ±      33.787  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      6274.798 ±     126.299    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1611.028 ±    1418.238  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      5698.321 ±    5181.373    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.691 ±       5.817  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2.434 ±      20.480    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        24.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    482026.807 ±    8891.921   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1385.868 ±      39.826  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5      4524.098 ±     111.348    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1343.437 ±       5.332  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      4385.651 ±      85.313    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.683 ±       4.946  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         2.225 ±      16.121    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5        22.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5     77412.838 ±     617.876   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1381.499 ±      41.939  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28085.117 ±     687.825    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1336.882 ±      15.345  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     27178.233 ±     153.139    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.146 ±       0.993  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2.961 ±      20.179    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        18.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                   128  thrpt    5    318348.205 ±    9928.131   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2378.551 ±      71.492  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     11758.355 ±     456.164    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2279.954 ±    1405.580  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11279.797 ±    7231.808    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0.754 ±       6.356  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         3.707 ±      31.245    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                         128  thrpt    5        17.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                          128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                            128  thrpt    5    502147.373 ±    2332.296   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1325.186 ±      42.706  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      4153.169 ±     145.309    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1336.103 ±       7.239  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      4187.361 ±       9.375    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.899 ±       7.609  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2.816 ±      23.829    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        10.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5        30.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                           128  thrpt    5   1351844.717 ±   65900.853   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      2745.266 ±     114.094  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3196.189 ±      77.175    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2693.494 ±      30.099  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3136.142 ±     128.975    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.054 ±       0.146  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.063 ±       0.167    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        20.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5        27.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                128  thrpt    5    108592.284 ±    2060.664   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3640.003 ±      65.274  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     52753.637 ±      99.623    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3497.665 ±    1100.735  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     50688.501 ±   15766.568    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.241 ±       1.512    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        35.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                  128  thrpt    5    339096.564 ±   15402.264   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1175.469 ±      43.013  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5455.559 ±     116.271    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1203.943 ±    1151.944  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5594.670 ±    5436.978    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0.067 ±       0.530  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0.313 ±       2.489    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         9.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                         128  thrpt    5        13.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                           128  thrpt    5    833942.333 ±    8381.678   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       620.909 ±      22.232  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1171.706 ±      31.992    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       667.258 ±       3.005  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1259.193 ±      12.705    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.017 ±       0.088  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.031 ±       0.166    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5        16.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                          128  thrpt    5   2132874.516 ±   23612.598   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1014.197 ±      28.825  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       748.387 ±      28.033    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       940.889 ±    1418.065  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       694.830 ±    1054.072    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.108  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.009 ±       0.080    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5        19.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2350990.791 ±    3160.584   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                               128  thrpt    5    475968.787 ±    4358.602   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       706.385 ±      14.304  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      2335.700 ±      51.785    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       669.161 ±       1.664  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2212.617 ±      19.357    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.008 ±       0.044  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.028 ±       0.145    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         5.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                              128  thrpt    5     60172.242 ±    2371.080   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      2107.990 ±     104.066  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     55132.114 ±    1132.907    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2010.259 ±      10.142  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     52581.610 ±    2310.360    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.762 ±       6.247  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        20.272 ±     166.384    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                    128  thrpt    5        15.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                     128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                       128  thrpt    5     96418.621 ±    2510.787   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1780.223 ±      44.008  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     29056.760 ±     544.551    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1734.932 ±    1407.935  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     28328.961 ±   23219.690    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.933 ±       7.275  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        15.245 ±     118.977    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        13.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5        30.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                      128  thrpt    5    165967.621 ±    1736.662   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      2640.806 ±      38.522  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5     25041.427 ±     495.559    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2554.306 ±    1160.435  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     24225.900 ±   11168.775    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.087 ±       0.418  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.830 ±       3.967    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        19.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5        25.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                           128  thrpt    5     34029.593 ±    1199.944   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2279.656 ±     146.732  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    105415.337 ±    3732.429    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2285.985 ±    1406.812  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    105689.750 ±   64195.777    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.092 ±       0.366  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4.238 ±      16.921    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        17.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5        26.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                      128  thrpt    5    159501.214 ±    2069.057   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1065.128 ±      16.615  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     10507.270 ±     282.654    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1068.463 ±    1408.411  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     10547.825 ±   13989.106    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.770 ±       6.409  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.600 ±      63.237    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5        27.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                     128  thrpt    5    458762.493 ±    9422.285   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       521.748 ±      34.945  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1789.827 ±     120.357    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       504.584 ±    1117.984  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1732.909 ±    3843.487    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.014 ±       0.123    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5        13.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5    506836.031 ±    1676.888   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5         5.153 ±       0.017  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                          128  thrpt    5     75622.320 ±     704.111   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1351.820 ±      34.487  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     28132.067 ±     699.280    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1337.052 ±      16.330  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27824.911 ±     531.094    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.162 ±       1.265  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         3.382 ±      26.353    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                  N/A  thrpt    5   2840573.030 ±   27014.509   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      3961.344 ±      31.942  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      2194.732 ±      33.397    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      3778.551 ±    1445.979  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      2093.817 ±     818.220    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0.017 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0.009 ±       0.037    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        28.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5        36.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                            N/A  thrpt    5    891541.952 ±   78867.098   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       519.386 ±      23.750  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5       916.991 ±      40.675    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       532.677 ±    1146.628  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       943.124 ±    2032.877    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0.005 ±       0.044  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0.009 ±       0.076    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                           N/A  thrpt    5    335503.454 ±   12662.935   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       800.617 ±      68.502  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      3755.455 ±     276.835    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       800.685 ±    1150.089  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      3758.785 ±    5447.775    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0.015 ±       0.067  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0.069 ±       0.319    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5        22.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                          N/A  thrpt    5    765110.836 ±    5398.594   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       699.608 ±      10.574  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5      1438.991 ±      18.673    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       672.071 ±       2.055  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1382.355 ±      12.180    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0.009 ±       0.074    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                      N/A  thrpt    5   3432837.090 ±   73747.989   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                       N/A  thrpt    5      2080.756 ±      60.309  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                  N/A  thrpt    5       953.933 ±      13.380    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                              N/A  thrpt    5      2020.258 ±       7.034  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       926.227 ±      22.338    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.545 ±       3.352  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.251 ±       1.543    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                            N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                             N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                N/A  thrpt    5   7509989.486 ±  670828.626   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                 N/A  thrpt    5       829.371 ±      72.921  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                            N/A  thrpt    5       173.772 ±       8.752    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                        N/A  thrpt    5       807.150 ±    1161.357  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                   N/A  thrpt    5       169.019 ±     240.684    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                    N/A  thrpt    5         0.004 ±       0.036  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm               N/A  thrpt    5         0.001 ±       0.007    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                      N/A  thrpt    5         6.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                       N/A  thrpt    5        15.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                               N/A  thrpt    5    233906.179 ±    9529.236   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2069.969 ±      84.907  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5     13926.273 ±     244.662    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2012.122 ±      14.619  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     13538.304 ±     605.522    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.371 ±       1.836  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2.511 ±      12.434    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        15.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5        26.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                            128  thrpt    5   1580064.179 ±   14238.977   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5        90.892 ±      20.818  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5        90.534 ±      21.646    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       102.320 ±     881.003  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       102.346 ±     881.230    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.083 ±       0.712  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.083 ±       0.712    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.readPlayJson                                                                 128  thrpt    5     75447.033 ±    2467.950   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3334.059 ±      97.937  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     69544.219 ±    1237.511    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3244.375 ±    1149.810  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     67692.394 ±   24819.520    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.083 ±       0.673  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1.735 ±      14.021    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        24.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        34.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                            128  thrpt    5   1598580.970 ±   31170.283   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       861.824 ±      19.578  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5       848.463 ±      22.448    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       802.098 ±    1152.506  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       790.226 ±    1145.519    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.025 ±       0.088  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.025 ±       0.086    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        20.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                           128  thrpt    5   1723478.849 ±   10351.798   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       499.433 ±      38.530  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       456.077 ±      36.576    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       504.694 ±    1118.261  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       461.045 ±    1021.084    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        12.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1807760.908 ±    1185.022   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        18.380 ±       0.015  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                128  thrpt    5     52571.286 ±    1032.329   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      2265.671 ±      98.923  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     67811.314 ±    2446.335    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2287.678 ±    1415.589  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68503.499 ±   43382.504    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.046 ±       0.200  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1.371 ±       5.961    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        17.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        25.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                 128  thrpt    5    273326.665 ±    3539.861   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1096.695 ±      32.367  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      6314.938 ±     261.694    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1075.886 ±    1417.414  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      6200.644 ±    8231.039    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.558 ±       4.715  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         3.202 ±      27.056    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5        22.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                      128  thrpt    5     41050.821 ±     226.672   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      2041.763 ±      48.955  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     78267.621 ±    1873.350    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      2015.030 ±      23.170  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     77242.930 ±    1029.317    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.206 ±       1.642  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         7.916 ±      63.058    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        15.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                             128  thrpt    5        26.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                 128  thrpt    5    111247.726 ±    1760.293   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1114.572 ±      31.139  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     15766.496 ±     680.448    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1069.640 ±    1408.783  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     15147.302 ±   20134.117    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0.725 ±       6.150  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5        10.219 ±      86.721    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         8.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5        28.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                128  thrpt    5    333758.988 ±    9728.479   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5       465.042 ±      28.155  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      2193.077 ±     169.285    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       504.673 ±    1118.234  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      2384.091 ±    5271.887    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.020 ±       0.169    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         4.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5        11.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    368386.221 ±     915.166   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5         3.934 ±       1.611  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5        16.806 ±       6.926    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                     128  thrpt    5     57992.665 ±    1064.300   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1401.889 ±      77.225  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     38041.833 ±    1711.858    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1336.097 ±       6.145  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     36257.821 ±     684.007    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.895 ±       6.403  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        24.239 ±     173.469    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                            128  thrpt    5        29.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                       128  thrpt    5     73244.592 ±    1263.999   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                        128  thrpt    5      1713.138 ±      54.660  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   128  thrpt    5     36802.825 ±    1170.399    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               128  thrpt    5      1610.230 ±    1412.046  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     34592.618 ±   30348.092    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.758 ±       4.666  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        16.267 ±     100.265    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                             128  thrpt    5        12.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                              128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                128  thrpt    5    132210.529 ±    2949.779   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 128  thrpt    5       911.999 ±      42.589  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            128  thrpt    5     10855.693 ±     426.087    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        128  thrpt    5       801.057 ±    1149.443  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9533.120 ±   13639.170    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0.148 ±       0.852    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                      128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                       128  thrpt    5        22.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    262411.912 ±    2537.575   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1107.554 ±      35.064  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6642.846 ±     267.565    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075.674 ±    1417.277  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6455.403 ±    8547.858    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.591 ±       4.778  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         3.542 ±      28.616    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                    128  thrpt    5     29097.002 ±    1602.819   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1436.274 ±      55.645  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     77685.191 ±    2080.316    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1337.922 ±      13.222  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     72372.175 ±    3769.937    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.317 ±       2.409  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5        17.328 ±     132.077    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    181067.653 ±    2578.791   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1028.240 ±      31.045  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5      8937.105 ±     381.254    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5       935.183 ±    1408.613  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      8137.259 ±   12371.337    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0.017 ±       0.067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0.145 ±       0.584    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5        23.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    482719.620 ±    1543.344   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1461.351 ±      29.112  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      4764.481 ±      92.385    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1478.221 ±    1157.647  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      4819.678 ±    3780.018    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0.662 ±       5.476  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         2.157 ±      17.843    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    520793.111 ±   11395.580   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5       988.338 ±      11.668  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      2986.912 ±      87.087    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5       940.313 ±    1415.256  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      2846.411 ±    4342.697    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0.012 ±       0.072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0.038 ±       0.217    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5         7.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5        19.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                   128  thrpt    5     76347.826 ±    1282.142   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5      1504.781 ±      37.056  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     31019.738 ±     720.136    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5      1468.730 ±    1154.128  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     30296.048 ±   24369.087    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.899 ±       7.430  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5        18.462 ±     152.526    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5        11.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                 128  thrpt    5     99284.418 ±    2258.885   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1627.348 ±      39.475  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     25796.029 ±     591.934    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1609.500 ±    1412.485  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     25534.221 ±   22866.617    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.770 ±       4.677  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12.249 ±      74.615    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                          128  thrpt    5    171975.491 ±   13378.635   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       739.630 ±      51.404  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      6767.707 ±     101.407    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       666.735 ±       2.384  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6102.512 ±     487.336    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.012 ±       0.108  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.116 ±       1.002    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        18.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                         128  thrpt    5    280904.527 ±    2426.500   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1029.039 ±      31.872  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      5764.841 ±     211.616    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       940.692 ±    1417.644  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5271.187 ±    7960.554    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.021 ±       0.098  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.117 ±       0.551    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        21.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                              128  thrpt    5     65940.485 ±     456.246   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2588.275 ±      69.234  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     61776.147 ±    1649.266    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2542.549 ±    1162.315  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     60687.248 ±   27829.117    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.133 ±       0.894  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3.182 ±      21.348    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        27.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                128  thrpt    5    205962.294 ±    3091.442   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1439.517 ±      71.339  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     10998.868 ±     433.221    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1475.156 ±    1146.320  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     11269.109 ±    8687.146    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.733 ±       4.991  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         5.620 ±      38.340    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5        11.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                         128  thrpt    5    505836.386 ±   12134.820   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       415.320 ±      32.676  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1292.266 ±     118.804    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       471.000 ±    1056.437  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1468.195 ±    3287.832    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        14.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5    634063.042 ±   17573.827   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       351.281 ±      36.441  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       871.760 ±      90.423    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       338.840 ±    1216.950  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       842.497 ±    3021.875    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.004 ±       0.036  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.010 ±       0.089    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         9.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    693636.802 ±    1463.478   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         7.052 ±       0.015  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        16.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                             128  thrpt    5     35441.108 ±    1519.196   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1929.789 ±      79.096  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     85693.451 ±    2010.406    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1874.620 ±    1155.945  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     83311.795 ±   52897.377    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.824 ±       4.948  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        37.045 ±     223.307    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        14.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        26.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                       N/A  thrpt    5    873086.710 ±    9976.504   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2357.225 ±      75.989  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      4248.689 ±     110.039    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2276.836 ±    1414.455  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      4103.800 ±    2548.281    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.808 ±       6.820  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         1.458 ±      12.315    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                N/A  thrpt    5   1883434.874 ±   38489.933   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1251.864 ±      16.629  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5      1046.115 ±      17.552    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1335.746 ±       4.336  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      1116.218 ±      20.876    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.881 ±       7.448  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.731 ±       6.183    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5        10.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5        32.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                               N/A  thrpt    5   8421510.931 ±  459841.466   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       264.871 ±      27.963  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        49.504 ±       5.424    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306.958 ±    1079.000  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        57.691 ±     202.843    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.002 ±       0.013    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                    N/A  thrpt    5    348654.807 ±   12708.458   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2245.105 ±      91.385  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5     10134.581 ±     147.803    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2147.479 ±    1150.639  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      9703.439 ±    5559.911    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.316 ±       2.211  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         1.445 ±      10.133    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        16.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        29.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                      N/A  thrpt    5   1133262.345 ±   16695.598   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                       N/A  thrpt    5      1858.168 ±      17.117  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                  N/A  thrpt    5      2580.435 ±      39.297    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      1739.877 ±    1409.333  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5      2417.423 ±    1983.746    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0.787 ±       6.642  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         1.091 ±       9.211    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                            N/A  thrpt    5        13.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                             N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                               N/A  thrpt    5   2719318.578 ±   15795.615   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5      1195.989 ±      41.655  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5       692.188 ±      25.439    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1203.916 ±    1151.981  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5       696.935 ±     668.807    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.772 ±       6.494  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.447 ±       3.761    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                              N/A  thrpt    5   6380650.653 ±  210820.206   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       736.276 ±      18.555  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5       181.573 ±       6.744    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       804.786 ±    1148.768  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5       198.868 ±     291.067    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.002 ±       0.018    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5   6714564.560 ±   73505.804   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5       421.722 ±      23.897  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5        98.847 ±       6.321    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                              N/A  thrpt    5       472.734 ±    1062.453  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                         N/A  thrpt    5       110.920 ±     249.482    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                          N/A  thrpt    5         0.008 ±       0.044  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                     N/A  thrpt    5         0.002 ±       0.010    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                             N/A  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                   N/A  thrpt    5    430718.957 ±   13886.148   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                    N/A  thrpt    5      2638.264 ±      83.390  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                               N/A  thrpt    5      9639.482 ±     239.708    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      2536.414 ±    1145.724  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5      9270.827 ±    4302.912    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0.175 ±       1.373  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0.641 ±       5.027    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                         N/A  thrpt    5        19.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                          N/A  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                        128  thrpt    5     78771.973 ±    4832.634   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      2203.128 ±     142.532  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     44017.730 ±     920.226    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                128  thrpt    5      2144.734 ±    1150.825  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           128  thrpt    5     42817.504 ±   21361.065    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            128  thrpt    5         0.812 ±       6.367  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       128  thrpt    5        16.387 ±     128.771    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                               128  thrpt    5        28.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                 128  thrpt    5    127116.461 ±    2616.295   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      2012.938 ±      65.887  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     24918.425 ±     451.920    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2007.157 ±      32.487  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     24847.614 ±     627.057    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0.052 ±       0.447    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        15.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        22.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                128  thrpt    5    179704.457 ±    4031.324   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      2735.637 ±      40.985  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     23956.809 ±     618.469    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2555.184 ±    1167.390  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     22384.515 ±   10502.690    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.046 ±       0.268  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.399 ±       2.334    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                     128  thrpt    5     61480.762 ±    1123.491   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      3119.300 ±      36.131  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     79851.593 ±    1597.627    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2948.203 ±    1409.699  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     75494.833 ±   37044.809    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0.046 ±       0.183  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1.172 ±       4.672    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        22.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                       128  thrpt    5    191358.955 ±    4928.531   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5      1347.561 ±      25.894  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     11081.183 ±     220.800    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               128  thrpt    5      1207.788 ±    1155.665  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          128  thrpt    5      9937.304 ±    9575.879    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           128  thrpt    5         0.766 ±       6.151  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      128  thrpt    5         6.288 ±      50.456    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        22.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                128  thrpt    5    469846.296 ±   12924.972   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       416.881 ±      29.037  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5      1396.434 ±     129.301    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       368.664 ±    1318.390  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      1239.379 ±    4426.980    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.008 ±       0.072  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0.028 ±       0.240    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        11.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                               128  thrpt    5    658177.652 ±    3599.742   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5       365.196 ±      39.003  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5       873.256 ±      93.637    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5       338.744 ±    1216.635  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5       810.180 ±    2908.674    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.004 ±       0.036  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.010 ±       0.086    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5         9.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    718341.595 ±    1491.352   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5         7.304 ±       0.014  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                    128  thrpt    5     34780.548 ±    1686.360   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5      1898.493 ±      57.594  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     85902.410 ±    3221.994    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1874.791 ±    1149.162  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     84922.946 ±   54217.801    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0.799 ±       5.150  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5        36.277 ±     234.852    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        14.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                               128  thrpt    5   3368085.410 ±    8701.374   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2926.342 ±      49.549  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      1367.264 ±      22.011    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2823.457 ±    1138.986  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      1319.238 ±     534.420    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0.037 ±       0.236  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0.018 ±       0.111    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                      128  thrpt    5        31.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                         128  thrpt    5   6003899.725 ±   69245.915   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                          128  thrpt    5      1160.909 ±      41.423  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       304.256 ±      14.110    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1067.403 ±    1405.830  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       279.955 ±     371.039    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.904 ±       7.606  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.236 ±       1.987    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                128  thrpt    5        26.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                        128  thrpt    5   4244303.770 ±  187445.706   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      2349.275 ±     123.485  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5       871.093 ±      22.166    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2274.362 ±    1413.415  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       843.969 ±     543.083    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.795 ±       6.712  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.300 ±       2.533    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5        17.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                       128  thrpt    5   6970890.433 ±  138469.033   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      1347.246 ±      41.796  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       304.116 ±       4.984    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1210.104 ±    1159.365  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       273.258 ±     262.946    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.600 ±       4.637  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.135 ±       1.046    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                            128  thrpt    5   4240219.980 ±   95318.140   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2544.715 ±     100.711  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5       944.434 ±      26.072    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2411.907 ±    1406.136  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       894.922 ±     514.575    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.092 ±       0.700  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.034 ±       0.259    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                              128  thrpt    5   2227991.231 ±  112454.739   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1317.482 ±      75.310  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5       930.629 ±      32.581    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1208.426 ±    1155.874  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5       854.343 ±     826.181    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.633 ±       5.183  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.445 ±       3.641    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5        22.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                        128  thrpt    5   5955699.699 ±  346062.722   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                         128  thrpt    5       592.862 ±      38.135  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                    128  thrpt    5       156.638 ±       3.412    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                128  thrpt    5       666.130 ±       2.630  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       176.032 ±      10.739    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.010 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.003 ±       0.010    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                              128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                               128  thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                       128  thrpt    5   4696574.886 ±   88121.990   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1279.888 ±      55.243  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5       428.860 ±      12.364    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1205.540 ±    1155.139  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       403.964 ±     387.172    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0.754 ±       6.220  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0.251 ±       2.070    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                      128  thrpt    5   6025279.684 ±  162581.707   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       596.463 ±      28.889  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       155.784 ±       8.846    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       537.024 ±    1155.986  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       140.419 ±     302.299    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.001 ±       0.009    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   6452759.661 ±   34302.454   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                           128  thrpt    5   4682357.442 ±   65546.450   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1315.778 ±      42.620  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5       442.273 ±      13.168    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206.887 ±    1155.429  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       405.783 ±     389.818    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.758 ±       6.435  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.255 ±       2.163    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                            128  thrpt    5   1540677.309 ±   35344.599   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2135.544 ±      64.615  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5      2181.282 ±      60.738    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2014.221 ±      10.353  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      2057.393 ±      45.761    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0.675 ±       5.452  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0.688 ±       5.564    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                  128  thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                   128  thrpt    5        24.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                      128  thrpt    5   2872929.881 ±   28798.629   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       556.335 ±      31.628  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       304.744 ±      19.780    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       533.153 ±    1147.651  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       292.284 ±     629.168    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0.008 ±       0.072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0.005 ±       0.039    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                            128  thrpt    5         4.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                             128  thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                     128  thrpt    5   1733356.090 ±   14155.475   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5       949.360 ±      37.285  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       861.839 ±      33.894    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       936.271 ±    1411.391  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       849.960 ±    1281.315    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.025 ±       0.073  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.023 ±       0.066    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                    128  thrpt    5   2429587.789 ±   15087.811   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       467.804 ±      36.273  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       303.039 ±      24.748    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       371.053 ±    1328.362  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       240.592 ±     861.605    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.004 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.003 ±       0.023    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5         3.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                         128  thrpt    5   1709975.478 ±   21050.613   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1020.733 ±      22.182  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       939.509 ±      27.865    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1070.750 ±    1411.730  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       985.919 ±    1304.107    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.066  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.012 ±       0.061    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                               128  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                           128  thrpt    5   1871381.642 ±  110177.571   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                            128  thrpt    5      1424.043 ±     109.010  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                       128  thrpt    5      1197.549 ±      34.098    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1342.473 ±       4.117  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1129.213 ±      67.096    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0.641 ±       4.940  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0.536 ±       4.131    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                 128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                  128  thrpt    5        22.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                     128  thrpt    5   3080527.715 ±   22765.304   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                      128  thrpt    5       821.092 ±      37.341  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                 128  thrpt    5       419.486 ±      20.529    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                             128  thrpt    5       799.924 ±    1150.217  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       408.819 ±     590.545    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0.007 ±       0.049  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0.004 ±       0.025    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                           128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                            128  thrpt    5        18.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                    128  thrpt    5   2977084.363 ±   57327.680   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1312.493 ±      61.323  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5       693.801 ±      20.865    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1339.951 ±       5.248  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       708.345 ±      12.588    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0.741 ±       5.722  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0.391 ±       3.016    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5        27.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                   128  thrpt    5   3367510.084 ±   59045.799   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       896.195 ±      28.098  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5       418.830 ±      18.336    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       935.724 ±    1410.447  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       437.708 ±     664.986    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0.037 ±       0.243  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0.018 ±       0.115    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5        10.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5   3650585.871 ±    3533.645   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                        128  thrpt    5   2892226.532 ±   13018.314   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5      1435.212 ±      34.426  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5       780.879 ±      20.967    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5      1341.882 ±       5.879  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       730.097 ±       1.143    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0.704 ±       5.177  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0.382 ±       2.812    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                              128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                               128  thrpt    5        24.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                       N/A  thrpt    5     11906.070 ±     189.136   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                        N/A  thrpt    5      1421.732 ±      17.364  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    187924.256 ±    3761.775    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1334.234 ±       5.263  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    176358.711 ±    2788.071    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0.887 ±       6.396  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5       117.473 ±     848.101    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                             N/A  thrpt    5        10.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                              N/A  thrpt    5        30.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                N/A  thrpt    5     21668.626 ±     410.865   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       332.098 ±      32.134  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     24117.549 ±    2308.488    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       336.566 ±    1205.690  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     24433.950 ±   87428.387    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0.602 ±       5.180    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                      N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                       N/A  thrpt    5         6.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                               N/A  thrpt    5     22133.049 ±     499.809   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       251.910 ±      35.111  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     17913.189 ±    2822.988    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       307.007 ±    1079.173  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     21903.494 ±   76995.313    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.008 ±       0.072  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.597 ±       5.138    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                     N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                      N/A  thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                    N/A  thrpt    5      7555.969 ±     189.699   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      2086.023 ±      62.435  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5    434501.234 ±    5044.961    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2000.859 ±      18.134  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5    416773.625 ±    7507.003    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0.502 ±       3.793  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5       105.001 ±     794.406    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                          N/A  thrpt    5        15.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                           N/A  thrpt    5        27.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                               N/A  thrpt    5     63859.165 ±    1316.835   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                N/A  thrpt    5       824.974 ±      36.861  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     20330.710 ±     759.889    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       796.128 ±    1141.193  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     19617.574 ±   28071.088    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0.012 ±       0.052  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0.307 ±       1.286    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                     N/A  thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                      N/A  thrpt    5        23.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                              N/A  thrpt    5     70527.019 ±    1094.417   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                               N/A  thrpt    5       484.778 ±      45.390  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     10818.591 ±    1135.124    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       399.896 ±    1405.691  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      8942.372 ±   31433.905    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0.006 ±       0.050  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0.129 ±       1.109    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                    N/A  thrpt    5         3.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                     N/A  thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                      N/A  thrpt    5     75599.009 ±      78.606   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                       N/A  thrpt    5        20.370 ±       0.024  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                  N/A  thrpt    5       424.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                            N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    314371.089 ±    7182.626   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1885.125 ±      85.729  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9436.463 ±     245.459    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1877.405 ±    1157.723  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9391.500 ±    5635.534    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0.733 ±       5.999  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3.664 ±      29.997    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    471562.441 ±   11380.223   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       522.827 ±      27.465  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      1744.876 ±     117.651    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       502.016 ±    1110.811  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1677.917 ±    3715.935    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0.008 ±       0.072  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0.028 ±       0.239    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1255280.792 ±   42216.875   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       679.535 ±      13.388  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       851.922 ±      30.079    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       671.430 ±       2.443  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       841.766 ±      27.366    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.012 ±       0.108  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.016 ±       0.134    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    104170.145 ±    1711.837   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      3332.314 ±     109.541  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     50347.570 ±    1790.636    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      3223.962 ±    1193.787  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     48716.570 ±   18310.085    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0.050 ±       0.269  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0.754 ±       4.058    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        24.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        33.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    341457.148 ±    5918.830   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1191.863 ±      64.988  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      5493.149 ±     235.259    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1207.461 ±    1154.480  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      5563.000 ±    5292.816    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0.704 ±       5.969  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3.231 ±      27.412    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    721641.579 ±   30280.371   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       567.994 ±      30.245  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1238.864 ±      85.445    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       533.333 ±    1148.041  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1166.983 ±    2512.427    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0.004 ±       0.036  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0.009 ±       0.078    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5        12.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   1608702.311 ±   91855.750   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       765.096 ±      32.489  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       748.482 ±      20.617    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671.036 ±       2.490  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       656.540 ±      37.431    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   1736947.436 ±   54212.818   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5         2.725 ±      23.458  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         2.505 ±      21.567    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    442129.719 ±    4143.093   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       678.375 ±      11.800  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2414.555 ±      47.912    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       668.357 ±       1.731  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2378.895 ±      17.080    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0.017 ±       0.083  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0.059 ±       0.295    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5        16.000                    ms
[info] Benchmark result is saved to graalvmce1.json
[success] Total time: 7072 s, completed May 16, 2018 2:03:37 AM
