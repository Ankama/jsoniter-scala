[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 13, 2018, 6:29:53 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:795:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.5-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.5-SNAPSHOT.jar ...
[info] Compiling 25 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:9:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:10:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:11:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT.jar ...
Processing 286 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 19 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 206 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_2059cc9c/target/1ea93b88/jmh-core-1.19.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418803.187 ops/s
[info] # Warmup Iteration   2: 732927.375 ops/s
[info] # Warmup Iteration   3: 746018.115 ops/s
[info] # Warmup Iteration   4: 751270.759 ops/s
[info] # Warmup Iteration   5: 746819.626 ops/s
[info] Iteration   1: 744050.136 ops/s
[info]                  ·gc.alloc.rate:                   1966.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4249.674 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 748617.568 ops/s
[info]                  ·gc.alloc.rate:                   1978.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4251.921 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 734671.703 ops/s
[info]                  ·gc.alloc.rate:                   1941.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4348.007 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 740528.947 ops/s
[info]                  ·gc.alloc.rate:                   1956.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4326.272 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 745964.318 ops/s
[info]                  ·gc.alloc.rate:                   1971.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3583.679 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   742766.535 ±(99.9%) 20793.579 ops/s [Average]
[info]   (min, avg, max) = (734671.703, 742766.535, 748617.568), stdev = 5400.026
[info]   CI (99.9%): [721972.955, 763560.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1962.862 ±(99.9%) 55.556 MB/sec [Average]
[info]   (min, avg, max) = (1941.243, 1962.862, 1978.475), stdev = 14.428
[info]   CI (99.9%): [1907.307, 2018.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.203 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (0.132, 0.203, 0.306), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1958.645 ±(99.9%) 561.473 MB/sec [Average]
[info]   (min, avg, max) = (1698.407, 1958.645, 2035.128), stdev = 145.813
[info]   CI (99.9%): [1397.172, 2520.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4151.910 ±(99.9%) 1234.765 B/op [Average]
[info]   (min, avg, max) = (3583.679, 4151.910, 4348.007), stdev = 320.664
[info]   CI (99.9%): [2917.146, 5386.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0.75% complete, ETA 00:34:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 491552.652 ops/s
[info] # Warmup Iteration   2: 1704551.754 ops/s
[info] # Warmup Iteration   3: 1724915.239 ops/s
[info] # Warmup Iteration   4: 1677791.529 ops/s
[info] # Warmup Iteration   5: 1717501.305 ops/s
[info] Iteration   1: 1728388.696 ops/s
[info]                  ·gc.alloc.rate:                   1229.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 908.341 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1725298.118 ops/s
[info]                  ·gc.alloc.rate:                   1227.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1220.233 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1723600.914 ops/s
[info]                  ·gc.alloc.rate:                   1226.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1227.463 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1715611.498 ops/s
[info]                  ·gc.alloc.rate:                   1220.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 927.326 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1712137.958 ops/s
[info]                  ·gc.alloc.rate:                   1218.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1242.415 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1721007.437 ±(99.9%) 26356.727 ops/s [Average]
[info]   (min, avg, max) = (1712137.958, 1721007.437, 1728388.696), stdev = 6844.758
[info]   CI (99.9%): [1694650.709, 1747364.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1224.606 ±(99.9%) 18.879 MB/sec [Average]
[info]   (min, avg, max) = (1218.092, 1224.606, 1229.559), stdev = 4.903
[info]   CI (99.9%): [1205.727, 1243.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.084, 0.114), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1208.273 ±(99.9%) 718.485 MB/sec [Average]
[info]   (min, avg, max) = (997.195, 1208.273, 1351.228), stdev = 186.588
[info]   CI (99.9%): [489.788, 1926.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1105.156 ±(99.9%) 659.691 B/op [Average]
[info]   (min, avg, max) = (908.341, 1105.156, 1242.415), stdev = 171.320
[info]   CI (99.9%): [445.465, 1764.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1.49% complete, ETA 00:34:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3054909.602 ops/s
[info] # Warmup Iteration   2: 3987683.407 ops/s
[info] # Warmup Iteration   3: 4112697.324 ops/s
[info] # Warmup Iteration   4: 4133056.456 ops/s
[info] # Warmup Iteration   5: 4087170.993 ops/s
[info] Iteration   1: 4130687.640 ops/s
[info]                  ·gc.alloc.rate:                   272.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.464 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4116879.710 ops/s
[info]                  ·gc.alloc.rate:                   271.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4089670.729 ops/s
[info]                  ·gc.alloc.rate:      270.185 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 4049845.821 ops/s
[info]                  ·gc.alloc.rate:                   267.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.181 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4118617.367 ops/s
[info]                  ·gc.alloc.rate:                   272.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126.260 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   4101140.254 ±(99.9%) 124610.086 ops/s [Average]
[info]   (min, avg, max) = (4049845.821, 4101140.254, 4130687.640), stdev = 32360.844
[info]   CI (99.9%): [3976530.167, 4225750.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   270.950 ±(99.9%) 8.266 MB/sec [Average]
[info]   (min, avg, max) = (267.542, 270.950, 272.866), stdev = 2.147
[info]   CI (99.9%): [262.684, 279.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.624 ±(99.9%) 5.240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.624, 3.058), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 5.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.239 ±(99.9%) 2.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 1.169), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   250.159 ±(99.9%) 553.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 250.159, 332.333), stdev = 143.663
[info]   CI (99.9%): [≈ 0, 803.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   95.996 ±(99.9%) 212.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.996, 129.181), stdev = 55.228
[info]   CI (99.9%): [≈ 0, 308.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2.24% complete, ETA 00:34:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32533.140 ops/s
[info] # Warmup Iteration   2: 181510.376 ops/s
[info] # Warmup Iteration   3: 181545.451 ops/s
[info] # Warmup Iteration   4: 184044.269 ops/s
[info] # Warmup Iteration   5: 185751.576 ops/s
[info] Iteration   1: 181346.785 ops/s
[info]                  ·gc.alloc.rate:                   1518.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14504.861 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 185482.339 ops/s
[info]                  ·gc.alloc.rate:                   1553.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11406.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 185099.758 ops/s
[info]                  ·gc.alloc.rate:                   1550.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14348.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 184490.815 ops/s
[info]                  ·gc.alloc.rate:                   1545.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14436.175 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 185367.613 ops/s
[info]                  ·gc.alloc.rate:                   1552.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11515.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   184357.462 ±(99.9%) 6646.884 ops/s [Average]
[info]   (min, avg, max) = (181346.785, 184357.462, 185482.339), stdev = 1726.175
[info]   CI (99.9%): [177710.578, 191004.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1544.099 ±(99.9%) 56.093 MB/sec [Average]
[info]   (min, avg, max) = (1518.640, 1544.099, 1553.698), stdev = 14.567
[info]   CI (99.9%): [1488.006, 1600.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.002), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.818 ±(99.9%) 0.788 B/op [Average]
[info]   (min, avg, max) = (0.531, 0.818, 1.065), stdev = 0.205
[info]   CI (99.9%): [0.030, 1.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1550.084 ±(99.9%) 703.796 MB/sec [Average]
[info]   (min, avg, max) = (1344.243, 1550.084, 1692.360), stdev = 182.773
[info]   CI (99.9%): [846.288, 2253.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   13242.331 ±(99.9%) 6267.193 B/op [Average]
[info]   (min, avg, max) = (11406.658, 13242.331, 14504.861), stdev = 1627.570
[info]   CI (99.9%): [6975.138, 19509.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 2.99% complete, ETA 00:33:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 632529.772 ops/s
[info] # Warmup Iteration   2: 2024952.620 ops/s
[info] # Warmup Iteration   3: 2098005.702 ops/s
[info] # Warmup Iteration   4: 2110387.510 ops/s
[info] # Warmup Iteration   5: 2097873.705 ops/s
[info] Iteration   1: 2112380.655 ops/s
[info]                  ·gc.alloc.rate:                   815.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 734.241 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2118101.965 ops/s
[info]                  ·gc.alloc.rate:                   818.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490.535 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2111042.384 ops/s
[info]                  ·gc.alloc.rate:                   815.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 741.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2127870.833 ops/s
[info]                  ·gc.alloc.rate:                   821.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2113018.659 ops/s
[info]                  ·gc.alloc.rate:                   816.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              608.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 746.930 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2116482.899 ±(99.9%) 26590.012 ops/s [Average]
[info]   (min, avg, max) = (2111042.384, 2116482.899, 2127870.833), stdev = 6905.342
[info]   CI (99.9%): [2089892.887, 2143072.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   817.484 ±(99.9%) 10.297 MB/sec [Average]
[info]   (min, avg, max) = (815.253, 817.484, 821.825), stdev = 2.674
[info]   CI (99.9%): [807.188, 827.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.078 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.059, 0.093), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   861.589 ±(99.9%) 699.466 MB/sec [Average]
[info]   (min, avg, max) = (660.174, 861.589, 1002.606), stdev = 181.649
[info]   CI (99.9%): [162.123, 1561.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   641.114 ±(99.9%) 526.706 B/op [Average]
[info]   (min, avg, max) = (490.535, 641.114, 746.930), stdev = 136.784
[info]   CI (99.9%): [114.409, 1167.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3.73% complete, ETA 00:33:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5602636.254 ops/s
[info] # Warmup Iteration   2: 13131472.956 ops/s
[info] # Warmup Iteration   3: 13833805.602 ops/s
[info] # Warmup Iteration   4: 13885494.329 ops/s
[info] # Warmup Iteration   5: 13925602.926 ops/s
[info] Iteration   1: 13906102.968 ops/s
[info]                  ·gc.alloc.rate:                   706.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13934464.055 ops/s
[info]                  ·gc.alloc.rate:                   708.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13801379.346 ops/s
[info]                  ·gc.alloc.rate:                   701.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13897655.945 ops/s
[info]                  ·gc.alloc.rate:                   706.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.759 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13748130.357 ops/s
[info]                  ·gc.alloc.rate:                   698.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   13857546.534 ±(99.9%) 304477.661 ops/s [Average]
[info]   (min, avg, max) = (13748130.357, 13857546.534, 13934464.055), stdev = 79071.882
[info]   CI (99.9%): [13553068.874, 14162024.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   704.279 ±(99.9%) 15.404 MB/sec [Average]
[info]   (min, avg, max) = (698.854, 704.279, 708.342), stdev = 4.000
[info]   CI (99.9%): [688.875, 719.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.008 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   724.451 ±(99.9%) 562.318 MB/sec [Average]
[info]   (min, avg, max) = (656.545, 724.451, 985.653), stdev = 146.032
[info]   CI (99.9%): [162.133, 1286.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   82.251 ±(99.9%) 62.605 B/op [Average]
[info]   (min, avg, max) = (74.332, 82.251, 111.319), stdev = 16.258
[info]   CI (99.9%): [19.646, 144.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4.48% complete, ETA 00:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65641.109 ops/s
[info] # Warmup Iteration   2: 312948.001 ops/s
[info] # Warmup Iteration   3: 320247.902 ops/s
[info] # Warmup Iteration   4: 320215.695 ops/s
[info] # Warmup Iteration   5: 316556.756 ops/s
[info] Iteration   1: 314169.025 ops/s
[info]                  ·gc.alloc.rate:                   1025.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4963.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 319666.938 ops/s
[info]                  ·gc.alloc.rate:                   1042.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4909.712 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 317779.059 ops/s
[info]                  ·gc.alloc.rate:                   1036.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4958.453 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 318552.551 ops/s
[info]                  ·gc.alloc.rate:                   1039.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6624.976 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 319075.273 ops/s
[info]                  ·gc.alloc.rate:                   1040.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1009.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4981.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   317848.569 ±(99.9%) 8359.254 ops/s [Average]
[info]   (min, avg, max) = (314169.025, 317848.569, 319666.938), stdev = 2170.872
[info]   CI (99.9%): [309489.315, 326207.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1037.066 ±(99.9%) 26.928 MB/sec [Average]
[info]   (min, avg, max) = (1025.193, 1037.066, 1042.974), stdev = 6.993
[info]   CI (99.9%): [1010.138, 1063.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.454 ±(99.9%) 0.915 B/op [Average]
[info]   (min, avg, max) = (0.103, 0.454, 0.717), stdev = 0.238
[info]   CI (99.9%): [≈ 0, 1.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1067.807 ±(99.9%) 587.598 MB/sec [Average]
[info]   (min, avg, max) = (990.783, 1067.807, 1340.509), stdev = 152.597
[info]   CI (99.9%): [480.209, 1655.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5287.601 ±(99.9%) 2880.610 B/op [Average]
[info]   (min, avg, max) = (4909.712, 5287.601, 6624.976), stdev = 748.085
[info]   CI (99.9%): [2406.991, 8168.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5.22% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 964136.691 ops/s
[info] # Warmup Iteration   2: 1581711.650 ops/s
[info] # Warmup Iteration   3: 1607729.998 ops/s
[info] # Warmup Iteration   4: 1608630.439 ops/s
[info] # Warmup Iteration   5: 1598976.011 ops/s
[info] Iteration   1: 1604697.404 ops/s
[info]                  ·gc.alloc.rate:                   2519.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2318.543 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1592619.086 ops/s
[info]                  ·gc.alloc.rate:                   2500.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2710.816 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2679.474 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1604256.143 ops/s
[info]                  ·gc.alloc.rate:                   2519.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2332.995 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1602170.965 ops/s
[info]                  ·gc.alloc.rate:                   2516.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2672.939 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1604341.829 ops/s
[info]                  ·gc.alloc.rate:                   2519.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              2472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2337.488 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1601617.085 ±(99.9%) 19742.577 ops/s [Average]
[info]   (min, avg, max) = (1592619.086, 1601617.085, 1604697.404), stdev = 5127.085
[info]   CI (99.9%): [1581874.508, 1621359.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2515.016 ±(99.9%) 30.768 MB/sec [Average]
[info]   (min, avg, max) = (2500.915, 2515.016, 2519.644), stdev = 7.990
[info]   CI (99.9%): [2484.248, 2545.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.133, 0.166), stdev = 0.019
[info]   CI (99.9%): [0.062, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.122, 0.131, 0.165), stdev = 0.019
[info]   CI (99.9%): [0.059, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2510.875 ±(99.9%) 721.073 MB/sec [Average]
[info]   (min, avg, max) = (2363.230, 2510.875, 2720.847), stdev = 187.260
[info]   CI (99.9%): [1789.802, 3231.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2468.288 ±(99.9%) 731.414 B/op [Average]
[info]   (min, avg, max) = (2318.543, 2468.288, 2679.474), stdev = 189.946
[info]   CI (99.9%): [1736.873, 3199.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 5.97% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029710.884 ops/s
[info] # Warmup Iteration   2: 2640486.741 ops/s
[info] # Warmup Iteration   3: 2621989.744 ops/s
[info] # Warmup Iteration   4: 2647009.015 ops/s
[info] # Warmup Iteration   5: 2656763.954 ops/s
[info] Iteration   1: 2617723.450 ops/s
[info]                  ·gc.alloc.rate:                   1835.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1214.716 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2661680.662 ops/s
[info]                  ·gc.alloc.rate:                   1866.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 999.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2628217.343 ops/s
[info]                  ·gc.alloc.rate:                   1843.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1218.040 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2644388.263 ops/s
[info]                  ·gc.alloc.rate:                   1854.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.747 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2639621.552 ops/s
[info]                  ·gc.alloc.rate:                   1851.058 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1215.322 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2638326.254 ±(99.9%) 64160.317 ops/s [Average]
[info]   (min, avg, max) = (2617723.450, 2638326.254, 2661680.662), stdev = 16662.231
[info]   CI (99.9%): [2574165.937, 2702486.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   1850.205 ±(99.9%) 45.388 MB/sec [Average]
[info]   (min, avg, max) = (1835.545, 1850.205, 1866.669), stdev = 11.787
[info]   CI (99.9%): [1804.817, 1895.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.166), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.065, 0.100), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1895.829 ±(99.9%) 709.534 MB/sec [Average]
[info]   (min, avg, max) = (1690.320, 1895.829, 2037.709), stdev = 184.264
[info]   CI (99.9%): [1186.295, 2605.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1131.706 ±(99.9%) 444.878 B/op [Average]
[info]   (min, avg, max) = (999.702, 1131.706, 1218.040), stdev = 115.533
[info]   CI (99.9%): [686.828, 1576.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 6.72% complete, ETA 00:32:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10152839.818 ops/s
[info] # Warmup Iteration   2: 11010723.032 ops/s
[info] # Warmup Iteration   3: 10909759.772 ops/s
[info] # Warmup Iteration   4: 10993220.424 ops/s
[info] # Warmup Iteration   5: 11010200.745 ops/s
[info] Iteration   1: 10952025.284 ops/s
[info]                  ·gc.alloc.rate:                   1391.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10961508.106 ops/s
[info]                  ·gc.alloc.rate:                   1392.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10689710.108 ops/s
[info]                  ·gc.alloc.rate:                   1358.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10935930.565 ops/s
[info]                  ·gc.alloc.rate:                   1389.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.322 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10975118.529 ops/s
[info]                  ·gc.alloc.rate:                   1394.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194.010 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   10902858.518 ±(99.9%) 462095.959 ops/s [Average]
[info]   (min, avg, max) = (10689710.108, 10902858.518, 10975118.529), stdev = 120004.853
[info]   CI (99.9%): [10440762.559, 11364954.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1385.228 ±(99.9%) 58.902 MB/sec [Average]
[info]   (min, avg, max) = (1358.073, 1385.228, 1394.320), stdev = 15.297
[info]   CI (99.9%): [1326.326, 1444.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.014, 0.021), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1344.376 ±(99.9%) 28.505 MB/sec [Average]
[info]   (min, avg, max) = (1334.104, 1344.376, 1352.558), stdev = 7.403
[info]   CI (99.9%): [1315.871, 1372.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   194.122 ±(99.9%) 9.534 B/op [Average]
[info]   (min, avg, max) = (191.730, 194.122, 198.110), stdev = 2.476
[info]   CI (99.9%): [184.587, 203.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7.46% complete, ETA 00:32:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153586.403 ops/s
[info] # Warmup Iteration   2: 681736.055 ops/s
[info] # Warmup Iteration   3: 682348.361 ops/s
[info] # Warmup Iteration   4: 684146.905 ops/s
[info] # Warmup Iteration   5: 697281.840 ops/s
[info] Iteration   1: 689891.249 ops/s
[info]                  ·gc.alloc.rate:                   1823.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3830.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 692069.811 ops/s
[info]                  ·gc.alloc.rate:                   1829.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3840.239 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 688359.031 ops/s
[info]                  ·gc.alloc.rate:                   1819.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3871.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 695421.253 ops/s
[info]                  ·gc.alloc.rate:                   1837.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4608.658 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 694677.680 ops/s
[info]                  ·gc.alloc.rate:                   1835.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3848.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   692083.805 ±(99.9%) 11639.553 ops/s [Average]
[info]   (min, avg, max) = (688359.031, 692083.805, 695421.253), stdev = 3022.755
[info]   CI (99.9%): [680444.252, 703723.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1829.172 ±(99.9%) 30.238 MB/sec [Average]
[info]   (min, avg, max) = (1819.664, 1829.172, 1837.777), stdev = 7.853
[info]   CI (99.9%): [1798.935, 1859.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.208 ±(99.9%) 0.206 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.208, 0.283), stdev = 0.054
[info]   CI (99.9%): [0.002, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1759.077 ±(99.9%) 596.702 MB/sec [Average]
[info]   (min, avg, max) = (1678.863, 1759.077, 2035.982), stdev = 154.962
[info]   CI (99.9%): [1162.374, 2355.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   3999.882 ±(99.9%) 1311.701 B/op [Average]
[info]   (min, avg, max) = (3830.885, 3999.882, 4608.658), stdev = 340.645
[info]   CI (99.9%): [2688.182, 5311.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8.21% complete, ETA 00:32:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1070277.912 ops/s
[info] # Warmup Iteration   2: 1925663.334 ops/s
[info] # Warmup Iteration   3: 1977730.412 ops/s
[info] # Warmup Iteration   4: 1964986.230 ops/s
[info] # Warmup Iteration   5: 1984012.908 ops/s
[info] Iteration   1: 1963280.158 ops/s
[info]                  ·gc.alloc.rate:                   1816.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1606.891 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1991097.244 ops/s
[info]                  ·gc.alloc.rate:                   1842.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.978 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1969874.611 ops/s
[info]                  ·gc.alloc.rate:                   1821.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1349.150 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1959121.064 ops/s
[info]                  ·gc.alloc.rate:                   1812.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1632.688 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1982286.764 ops/s
[info]                  ·gc.alloc.rate:                   1834.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1345.975 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1973131.968 ±(99.9%) 51321.132 ops/s [Average]
[info]   (min, avg, max) = (1959121.064, 1973131.968, 1991097.244), stdev = 13327.935
[info]   CI (99.9%): [1921810.836, 2024453.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1825.306 ±(99.9%) 47.960 MB/sec [Average]
[info]   (min, avg, max) = (1812.379, 1825.306, 1842.086), stdev = 12.455
[info]   CI (99.9%): [1777.347, 1873.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.108, 0.125), stdev = 0.009
[info]   CI (99.9%): [0.072, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.086 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.086, 0.100), stdev = 0.008
[info]   CI (99.9%): [0.057, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1820.343 ±(99.9%) 697.620 MB/sec [Average]
[info]   (min, avg, max) = (1681.382, 1820.343, 2032.314), stdev = 181.170
[info]   CI (99.9%): [1122.723, 2517.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1452.737 ±(99.9%) 589.005 B/op [Average]
[info]   (min, avg, max) = (1328.978, 1452.737, 1632.688), stdev = 152.963
[info]   CI (99.9%): [863.731, 2041.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 8.96% complete, ETA 00:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2233173.172 ops/s
[info] # Warmup Iteration   2: 6354905.082 ops/s
[info] # Warmup Iteration   3: 6448364.178 ops/s
[info] # Warmup Iteration   4: 6379799.195 ops/s
[info] # Warmup Iteration   5: 6484486.990 ops/s
[info] Iteration   1: 6460029.020 ops/s
[info]                  ·gc.alloc.rate:                   1772.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 408.715 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6474476.942 ops/s
[info]                  ·gc.alloc.rate:                   1776.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.940 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6464877.844 ops/s
[info]                  ·gc.alloc.rate:                   1774.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6466037.791 ops/s
[info]                  ·gc.alloc.rate:                   1774.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.808 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6473379.940 ops/s
[info]                  ·gc.alloc.rate:                   1776.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 412.991 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   6467760.307 ±(99.9%) 23402.122 ops/s [Average]
[info]   (min, avg, max) = (6460029.020, 6467760.307, 6474476.942), stdev = 6077.457
[info]   CI (99.9%): [6444358.186, 6491162.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1774.860 ±(99.9%) 6.612 MB/sec [Average]
[info]   (min, avg, max) = (1772.673, 1774.860, 1776.712), stdev = 1.717
[info]   CI (99.9%): [1768.248, 1781.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.024, 0.030), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1757.292 ±(99.9%) 573.321 MB/sec [Average]
[info]   (min, avg, max) = (1677.125, 1757.292, 2023.232), stdev = 148.890
[info]   CI (99.9%): [1183.971, 2330.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   427.706 ±(99.9%) 138.428 B/op [Average]
[info]   (min, avg, max) = (408.715, 427.706, 491.940), stdev = 35.949
[info]   CI (99.9%): [289.279, 566.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 9.70% complete, ETA 00:31:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18135874.866 ops/s
[info] # Warmup Iteration   2: 21795416.524 ops/s
[info] # Warmup Iteration   3: 22941122.139 ops/s
[info] # Warmup Iteration   4: 23210671.795 ops/s
[info] # Warmup Iteration   5: 23238560.451 ops/s
[info] Iteration   1: 22589614.556 ops/s
[info]                  ·gc.alloc.rate:                   688.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.762 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 22946986.394 ops/s
[info]                  ·gc.alloc.rate:                   699.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23108592.771 ops/s
[info]                  ·gc.alloc.rate:                   704.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.305 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23096356.527 ops/s
[info]                  ·gc.alloc.rate:                   704.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23076421.462 ops/s
[info]                  ·gc.alloc.rate:                   703.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   22963594.342 ±(99.9%) 842572.027 ops/s [Average]
[info]   (min, avg, max) = (22589614.556, 22963594.342, 23108592.771), stdev = 218813.280
[info]   CI (99.9%): [22121022.315, 23806166.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   700.244 ±(99.9%) 25.570 MB/sec [Average]
[info]   (min, avg, max) = (688.891, 700.244, 704.614), stdev = 6.641
[info]   CI (99.9%): [674.673, 725.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   725.179 ±(99.9%) 565.824 MB/sec [Average]
[info]   (min, avg, max) = (656.771, 725.179, 987.996), stdev = 146.943
[info]   CI (99.9%): [159.355, 1291.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   49.684 ±(99.9%) 37.947 B/op [Average]
[info]   (min, avg, max) = (45.072, 49.684, 67.305), stdev = 9.855
[info]   CI (99.9%): [11.737, 87.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 10.45% complete, ETA 00:31:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18474995.463 ops/s
[info] # Warmup Iteration   2: 22481536.339 ops/s
[info] # Warmup Iteration   3: 23087424.431 ops/s
[info] # Warmup Iteration   4: 23071349.469 ops/s
[info] # Warmup Iteration   5: 23147025.995 ops/s
[info] Iteration   1: 22889320.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23077248.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23147424.041 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22916442.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23092844.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   23024656.011 ±(99.9%) 441203.696 ops/s [Average]
[info]   (min, avg, max) = (22889320.688, 23024656.011, 23147424.041), stdev = 114579.199
[info]   CI (99.9%): [22583452.315, 23465859.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11.19% complete, ETA 00:31:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369715.754 ops/s
[info] # Warmup Iteration   2: 1425978.683 ops/s
[info] # Warmup Iteration   3: 1433114.416 ops/s
[info] # Warmup Iteration   4: 1440416.333 ops/s
[info] # Warmup Iteration   5: 1452498.763 ops/s
[info] Iteration   1: 1448261.733 ops/s
[info]                  ·gc.alloc.rate:                   2127.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2199.434 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1447005.315 ops/s
[info]                  ·gc.alloc.rate:                   2125.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2578.056 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1435562.824 ops/s
[info]                  ·gc.alloc.rate:                   2109.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.126 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1448309.673 ops/s
[info]                  ·gc.alloc.rate:                   2127.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2214.941 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1449564.004 ops/s
[info]                  ·gc.alloc.rate:                   2128.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              2312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2041.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2216.717 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1445740.710 ±(99.9%) 22183.962 ops/s [Average]
[info]   (min, avg, max) = (1435562.824, 1445740.710, 1449564.004), stdev = 5761.105
[info]   CI (99.9%): [1423556.747, 1467924.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   2123.631 ±(99.9%) 31.783 MB/sec [Average]
[info]   (min, avg, max) = (2109.022, 2123.631, 2128.829), stdev = 8.254
[info]   CI (99.9%): [2091.847, 2155.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.208), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.136 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.136, 0.226), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2102.034 ±(99.9%) 577.511 MB/sec [Average]
[info]   (min, avg, max) = (2023.752, 2102.034, 2370.057), stdev = 149.978
[info]   CI (99.9%): [1524.524, 2679.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   2288.455 ±(99.9%) 625.080 B/op [Average]
[info]   (min, avg, max) = (2199.434, 2288.455, 2578.056), stdev = 162.331
[info]   CI (99.9%): [1663.375, 2913.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 11.94% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613520.485 ops/s
[info] # Warmup Iteration   2: 932762.158 ops/s
[info] # Warmup Iteration   3: 938552.100 ops/s
[info] # Warmup Iteration   4: 940025.711 ops/s
[info] # Warmup Iteration   5: 943842.988 ops/s
[info] Iteration   1: 945316.781 ops/s
[info]                  ·gc.alloc.rate:                   3050.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5082.536 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 950063.625 ops/s
[info]                  ·gc.alloc.rate:                   3066.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5067.498 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 947922.611 ops/s
[info]                  ·gc.alloc.rate:                   3059.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5086.486 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 941754.113 ops/s
[info]                  ·gc.alloc.rate:                   3038.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4550.991 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 942603.591 ops/s
[info]                  ·gc.alloc.rate:                   3041.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5114.961 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   945532.144 ±(99.9%) 13497.176 ops/s [Average]
[info]   (min, avg, max) = (941754.113, 945532.144, 950063.625), stdev = 3505.174
[info]   CI (99.9%): [932034.968, 959029.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3051.294 ±(99.9%) 45.450 MB/sec [Average]
[info]   (min, avg, max) = (3038.809, 3051.294, 3066.321), stdev = 11.803
[info]   CI (99.9%): [3005.844, 3096.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5080.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5080.000, 5080.000, 5080.000), stdev = 0.001
[info]   CI (99.9%): [5080.000, 5080.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.194 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.194, 0.242), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2991.767 ±(99.9%) 580.195 MB/sec [Average]
[info]   (min, avg, max) = (2722.361, 2991.767, 3063.807), stdev = 150.675
[info]   CI (99.9%): [2411.572, 3571.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4980.495 ±(99.9%) 926.899 B/op [Average]
[info]   (min, avg, max) = (4550.991, 4980.495, 5114.961), stdev = 240.713
[info]   CI (99.9%): [4053.595, 5907.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 12.69% complete, ETA 00:30:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 822102.078 ops/s
[info] # Warmup Iteration   2: 1773759.070 ops/s
[info] # Warmup Iteration   3: 1657712.901 ops/s
[info] # Warmup Iteration   4: 1653403.806 ops/s
[info] # Warmup Iteration   5: 1599587.295 ops/s
[info] Iteration   1: 1753097.633 ops/s
[info]                  ·gc.alloc.rate:                   1648.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1506.116 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1684894.653 ops/s
[info]                  ·gc.alloc.rate:                   1584.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1574.914 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1700426.072 ops/s
[info]                  ·gc.alloc.rate:                   1599.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1565.379 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1661916.334 ops/s
[info]                  ·gc.alloc.rate:                   1563.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1284.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1761438.352 ops/s
[info]                  ·gc.alloc.rate:                   1656.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1517.166 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1712354.609 ±(99.9%) 166844.080 ops/s [Average]
[info]   (min, avg, max) = (1661916.334, 1712354.609, 1761438.352), stdev = 43328.878
[info]   CI (99.9%): [1545510.529, 1879198.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1610.354 ±(99.9%) 156.421 MB/sec [Average]
[info]   (min, avg, max) = (1563.095, 1610.354, 1656.396), stdev = 40.622
[info]   CI (99.9%): [1453.933, 1766.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.075, 0.096, 0.116), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1621.941 ±(99.9%) 572.172 MB/sec [Average]
[info]   (min, avg, max) = (1356.468, 1621.941, 1697.992), stdev = 148.591
[info]   CI (99.9%): [1049.769, 2194.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1489.587 ±(99.9%) 456.338 B/op [Average]
[info]   (min, avg, max) = (1284.358, 1489.587, 1574.914), stdev = 118.509
[info]   CI (99.9%): [1033.249, 1945.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 13.43% complete, ETA 00:30:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9056834.983 ops/s
[info] # Warmup Iteration   2: 9704976.329 ops/s
[info] # Warmup Iteration   3: 9962318.381 ops/s
[info] # Warmup Iteration   4: 9785063.876 ops/s
[info] # Warmup Iteration   5: 10004992.501 ops/s
[info] Iteration   1: 9857145.213 ops/s
[info]                  ·gc.alloc.rate:                   2454.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 432.230 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 9988852.962 ops/s
[info]                  ·gc.alloc.rate:                   2487.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.293 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 9974822.099 ops/s
[info]                  ·gc.alloc.rate:                   2483.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 375.327 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9853888.203 ops/s
[info]                  ·gc.alloc.rate:                   2453.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.928 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 9846272.445 ops/s
[info]                  ·gc.alloc.rate:                   2451.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 380.852 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   9904196.184 ±(99.9%) 274009.481 ops/s [Average]
[info]   (min, avg, max) = (9846272.445, 9904196.184, 9988852.962), stdev = 71159.392
[info]   CI (99.9%): [9630186.703, 10178205.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2466.219 ±(99.9%) 69.080 MB/sec [Average]
[info]   (min, avg, max) = (2451.550, 2466.219, 2487.672), stdev = 17.940
[info]   CI (99.9%): [2397.139, 2535.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.208), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.023 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.023, 0.033), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2512.787 ±(99.9%) 708.663 MB/sec [Average]
[info]   (min, avg, max) = (2375.300, 2512.787, 2722.285), stdev = 184.038
[info]   CI (99.9%): [1804.124, 3221.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   399.526 ±(99.9%) 120.142 B/op [Average]
[info]   (min, avg, max) = (374.293, 399.526, 434.928), stdev = 31.200
[info]   CI (99.9%): [279.384, 519.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 14.18% complete, ETA 00:30:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76589.808 ops/s
[info] # Warmup Iteration   2: 325060.019 ops/s
[info] # Warmup Iteration   3: 326460.456 ops/s
[info] # Warmup Iteration   4: 327335.269 ops/s
[info] # Warmup Iteration   5: 324121.354 ops/s
[info] Iteration   1: 328003.632 ops/s
[info]                  ·gc.alloc.rate:                   1998.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9693.915 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 327652.269 ops/s
[info]                  ·gc.alloc.rate:                   1996.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9748.354 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 327420.515 ops/s
[info]                  ·gc.alloc.rate:                   1994.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9779.037 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 326269.749 ops/s
[info]                  ·gc.alloc.rate:                   1988.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9830.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 326961.451 ops/s
[info]                  ·gc.alloc.rate:                   1992.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9815.299 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   327261.523 ±(99.9%) 2584.773 ops/s [Average]
[info]   (min, avg, max) = (326269.749, 327261.523, 328003.632), stdev = 671.257
[info]   CI (99.9%): [324676.751, 329846.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   1994.072 ±(99.9%) 15.559 MB/sec [Average]
[info]   (min, avg, max) = (1988.046, 1994.072, 1998.390), stdev = 4.041
[info]   CI (99.9%): [1978.512, 2009.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.521 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (0.400, 0.521, 0.600), stdev = 0.084
[info]   CI (99.9%): [0.198, 0.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2031.774 ±(99.9%) 29.806 MB/sec [Average]
[info]   (min, avg, max) = (2019.623, 2031.774, 2038.720), stdev = 7.740
[info]   CI (99.9%): [2001.968, 2061.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   9773.441 ±(99.9%) 210.948 B/op [Average]
[info]   (min, avg, max) = (9693.915, 9773.441, 9830.601), stdev = 54.783
[info]   CI (99.9%): [9562.493, 9984.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 14.93% complete, ETA 00:29:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 611263.571 ops/s
[info] # Warmup Iteration   2: 1032494.267 ops/s
[info] # Warmup Iteration   3: 1044278.297 ops/s
[info] # Warmup Iteration   4: 1047074.477 ops/s
[info] # Warmup Iteration   5: 1044015.830 ops/s
[info] Iteration   1: 1045230.296 ops/s
[info]                  ·gc.alloc.rate:                   2299.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3550.568 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1036849.426 ops/s
[info]                  ·gc.alloc.rate:                   2282.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3595.743 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1048123.046 ops/s
[info]                  ·gc.alloc.rate:                   2306.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3057.644 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1043217.815 ops/s
[info]                  ·gc.alloc.rate:                   2296.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3587.693 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1044465.054 ops/s
[info]                  ·gc.alloc.rate:                   2298.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3590.275 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1043577.128 ±(99.9%) 16059.752 ops/s [Average]
[info]   (min, avg, max) = (1036849.426, 1043577.128, 1048123.046), stdev = 4170.667
[info]   CI (99.9%): [1027517.376, 1059636.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2296.608 ±(99.9%) 34.980 MB/sec [Average]
[info]   (min, avg, max) = (2282.019, 2296.608, 2306.821), stdev = 9.084
[info]   CI (99.9%): [2261.628, 2331.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.166), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.138 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.138, 0.253), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2304.493 ±(99.9%) 578.670 MB/sec [Average]
[info]   (min, avg, max) = (2036.211, 2304.493, 2382.050), stdev = 150.279
[info]   CI (99.9%): [1725.823, 2883.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3476.384 ±(99.9%) 903.986 B/op [Average]
[info]   (min, avg, max) = (3057.644, 3476.384, 3595.743), stdev = 234.762
[info]   CI (99.9%): [2572.399, 4380.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 15.67% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1817062.045 ops/s
[info] # Warmup Iteration   2: 3949009.969 ops/s
[info] # Warmup Iteration   3: 3979036.166 ops/s
[info] # Warmup Iteration   4: 4002988.890 ops/s
[info] # Warmup Iteration   5: 4000953.028 ops/s
[info] Iteration   1: 3997733.946 ops/s
[info]                  ·gc.alloc.rate:                   2214.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2364.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.972 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 3971506.340 ops/s
[info]                  ·gc.alloc.rate:                   2200.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 805.721 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3999241.236 ops/s
[info]                  ·gc.alloc.rate:                   2215.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 935.562 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3998353.221 ops/s
[info]                  ·gc.alloc.rate:                   2214.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2039.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 802.882 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3987149.844 ops/s
[info]                  ·gc.alloc.rate:                   2208.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              872.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.383 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 940.548 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3990796.917 ±(99.9%) 45640.858 ops/s [Average]
[info]   (min, avg, max) = (3971506.340, 3990796.917, 3999241.236), stdev = 11852.786
[info]   CI (99.9%): [3945156.059, 4036437.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2210.729 ±(99.9%) 25.137 MB/sec [Average]
[info]   (min, avg, max) = (2200.093, 2210.729, 2215.450), stdev = 6.528
[info]   CI (99.9%): [2185.592, 2235.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   872.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.000, 872.000, 872.000), stdev = 0.001
[info]   CI (99.9%): [872.000, 872.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.125, 0.167), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.049 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.049, 0.066), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   2239.153 ±(99.9%) 714.558 MB/sec [Average]
[info]   (min, avg, max) = (2032.868, 2239.153, 2382.383), stdev = 185.568
[info]   CI (99.9%): [1524.595, 2953.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   883.137 ±(99.9%) 277.451 B/op [Average]
[info]   (min, avg, max) = (802.882, 883.137, 940.548), stdev = 72.053
[info]   CI (99.9%): [605.686, 1160.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 16.42% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6459394.433 ops/s
[info] # Warmup Iteration   2: 18787798.253 ops/s
[info] # Warmup Iteration   3: 19644243.398 ops/s
[info] # Warmup Iteration   4: 19832119.336 ops/s
[info] # Warmup Iteration   5: 19842384.339 ops/s
[info] Iteration   1: 19913231.572 ops/s
[info]                  ·gc.alloc.rate:                   910.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.968 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19840298.788 ops/s
[info]                  ·gc.alloc.rate:                   907.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19860595.124 ops/s
[info]                  ·gc.alloc.rate:                   908.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.729 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 19777647.038 ops/s
[info]                  ·gc.alloc.rate:                   904.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52.904 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19847511.563 ops/s
[info]                  ·gc.alloc.rate:                   908.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.901 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   19847856.817 ±(99.9%) 186892.929 ops/s [Average]
[info]   (min, avg, max) = (19777647.038, 19847856.817, 19913231.572), stdev = 48535.500
[info]   CI (99.9%): [19660963.888, 20034749.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   907.820 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (904.790, 907.820, 910.591), stdev = 2.086
[info]   CI (99.9%): [899.789, 915.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.166), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.013), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   926.988 ±(99.9%) 564.729 MB/sec [Average]
[info]   (min, avg, max) = (664.819, 926.988, 1000.901), stdev = 146.658
[info]   CI (99.9%): [362.259, 1491.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   73.503 ±(99.9%) 44.383 B/op [Average]
[info]   (min, avg, max) = (52.904, 73.503, 79.363), stdev = 11.526
[info]   CI (99.9%): [29.120, 117.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 17.16% complete, ETA 00:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117960.395 ops/s
[info] # Warmup Iteration   2: 491067.199 ops/s
[info] # Warmup Iteration   3: 489926.275 ops/s
[info] # Warmup Iteration   4: 495989.281 ops/s
[info] # Warmup Iteration   5: 491319.404 ops/s
[info] Iteration   1: 497700.972 ops/s
[info]                  ·gc.alloc.rate:                   1739.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5304.126 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 496150.983 ops/s
[info]                  ·gc.alloc.rate:                   1735.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5346.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 490741.886 ops/s
[info]                  ·gc.alloc.rate:                   1715.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5421.779 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 490519.750 ops/s
[info]                  ·gc.alloc.rate:                   1715.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5437.122 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 487078.312 ops/s
[info]                  ·gc.alloc.rate:                   1702.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              5504.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5486.377 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   492438.381 ±(99.9%) 16869.145 ops/s [Average]
[info]   (min, avg, max) = (487078.312, 492438.381, 497700.972), stdev = 4380.863
[info]   CI (99.9%): [475569.236, 509307.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   1721.764 ±(99.9%) 59.263 MB/sec [Average]
[info]   (min, avg, max) = (1702.891, 1721.764, 1739.935), stdev = 15.390
[info]   CI (99.9%): [1662.501, 1781.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5504.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5504.001, 5504.001, 5504.001), stdev = 0.001
[info]   CI (99.9%): [5504.001, 5504.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.265 ±(99.9%) 0.535 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.265, 0.462), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1688.795 ±(99.9%) 31.166 MB/sec [Average]
[info]   (min, avg, max) = (1676.750, 1688.795, 1697.439), stdev = 8.094
[info]   CI (99.9%): [1657.629, 1719.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5399.128 ±(99.9%) 281.599 B/op [Average]
[info]   (min, avg, max) = (5304.126, 5399.128, 5486.377), stdev = 73.130
[info]   CI (99.9%): [5117.528, 5680.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 17.91% complete, ETA 00:28:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6574.775 ops/s
[info] # Warmup Iteration   2: 8308.835 ops/s
[info] # Warmup Iteration   3: 8445.466 ops/s
[info] # Warmup Iteration   4: 8437.281 ops/s
[info] # Warmup Iteration   5: 8395.729 ops/s
[info] Iteration   1: 8444.964 ops/s
[info]                  ·gc.alloc.rate:                   1247.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246906.318 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8432.750 ops/s
[info]                  ·gc.alloc.rate:                   1245.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              232520.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248749.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8413.187 ops/s
[info]                  ·gc.alloc.rate:                   1242.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              232527.790 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187699.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8399.440 ops/s
[info]                  ·gc.alloc.rate:                   1240.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251847.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8380.209 ops/s
[info]                  ·gc.alloc.rate:                   1238.087 MB/sec
[info]                  ·gc.alloc.rate.norm:              232536.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253199.454 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   8414.110 ±(99.9%) 99.387 ops/s [Average]
[info]   (min, avg, max) = (8380.209, 8414.110, 8444.964), stdev = 25.811
[info]   CI (99.9%): [8314.723, 8513.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1242.929 ±(99.9%) 14.341 MB/sec [Average]
[info]   (min, avg, max) = (1238.087, 1242.929, 1247.320), stdev = 3.724
[info]   CI (99.9%): [1228.589, 1257.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   232527.997 ±(99.9%) 30.809 B/op [Average]
[info]   (min, avg, max) = (232520.048, 232527.997, 232536.049), stdev = 8.001
[info]   CI (99.9%): [232497.188, 232558.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.681 ±(99.9%) 21.197 B/op [Average]
[info]   (min, avg, max) = (7.758, 11.681, 19.424), stdev = 5.505
[info]   CI (99.9%): [≈ 0, 32.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1270.448 ±(99.9%) 576.433 MB/sec [Average]
[info]   (min, avg, max) = (1003.175, 1270.448, 1348.104), stdev = 149.698
[info]   CI (99.9%): [694.015, 1846.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   237680.525 ±(99.9%) 108011.768 B/op [Average]
[info]   (min, avg, max) = (187699.589, 237680.525, 253199.454), stdev = 28050.313
[info]   CI (99.9%): [129668.757, 345692.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 18.66% complete, ETA 00:28:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17466.219 ops/s
[info] # Warmup Iteration   2: 24406.949 ops/s
[info] # Warmup Iteration   3: 24359.754 ops/s
[info] # Warmup Iteration   4: 24817.301 ops/s
[info] # Warmup Iteration   5: 24655.707 ops/s
[info] Iteration   1: 24830.808 ops/s
[info]                  ·gc.alloc.rate:                   896.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      955.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61995.082 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         37.000 ms
[info] Iteration   2: 24933.673 ops/s
[info]                  ·gc.alloc.rate:                   922.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 41416.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 24927.801 ops/s
[info]                  ·gc.alloc.rate:                   921.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62473.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 24714.822 ops/s
[info]                  ·gc.alloc.rate:                   914.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63309.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24920.149 ops/s
[info]                  ·gc.alloc.rate:                   921.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63101.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   24865.451 ±(99.9%) 362.365 ops/s [Average]
[info]   (min, avg, max) = (24714.822, 24865.451, 24933.673), stdev = 94.105
[info]   CI (99.9%): [24503.086, 25227.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   915.307 ±(99.9%) 41.649 MB/sec [Average]
[info]   (min, avg, max) = (896.945, 915.307, 922.164), stdev = 10.816
[info]   CI (99.9%): [873.658, 956.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   58216.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58216.017, 58216.018), stdev = 0.001
[info]   CI (99.9%): [58216.015, 58216.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   2.636 ±(99.9%) 9.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.636, 5.257), stdev = 2.463
[info]   CI (99.9%): [≈ 0, 12.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   918.674 ±(99.9%) 569.161 MB/sec [Average]
[info]   (min, avg, max) = (656.055, 918.674, 998.886), stdev = 147.809
[info]   CI (99.9%): [349.512, 1487.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   58459.179 ±(99.9%) 36739.868 B/op [Average]
[info]   (min, avg, max) = (41416.608, 58459.179, 63309.049), stdev = 9541.227
[info]   CI (99.9%): [21719.311, 95199.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 37.000), stdev = 15.323
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 19.40% complete, ETA 00:28:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25539.934 ops/s
[info] # Warmup Iteration   2: 28397.357 ops/s
[info] # Warmup Iteration   3: 28381.839 ops/s
[info] # Warmup Iteration   4: 28445.285 ops/s
[info] # Warmup Iteration   5: 28567.900 ops/s
[info] Iteration   1: 28516.828 ops/s
[info]                  ·gc.alloc.rate:                   517.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18233.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 28584.757 ops/s
[info]                  ·gc.alloc.rate:                   518.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36384.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27141.319 ops/s
[info]                  ·gc.alloc.rate:                   492.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19158.423 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 28426.710 ops/s
[info]                  ·gc.alloc.rate:                   515.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36602.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 28640.413 ops/s
[info]                  ·gc.alloc.rate:                   519.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18172.926 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   28262.005 ±(99.9%) 2431.828 ops/s [Average]
[info]   (min, avg, max) = (27141.319, 28262.005, 28640.413), stdev = 631.538
[info]   CI (99.9%): [25830.177, 30693.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   512.999 ±(99.9%) 44.154 MB/sec [Average]
[info]   (min, avg, max) = (492.664, 512.999, 519.934), stdev = 11.467
[info]   CI (99.9%): [468.844, 557.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.015), stdev = 0.001
[info]   CI (99.9%): [28568.013, 28568.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.167), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   3.215 ±(99.9%) 14.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.215, 9.169), stdev = 3.838
[info]   CI (99.9%): [≈ 0, 17.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   462.676 ±(99.9%) 696.993 MB/sec [Average]
[info]   (min, avg, max) = (330.326, 462.676, 661.021), stdev = 181.007
[info]   CI (99.9%): [≈ 0, 1159.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   25710.265 ±(99.9%) 37934.570 B/op [Average]
[info]   (min, avg, max) = (18172.926, 25710.265, 36602.247), stdev = 9851.487
[info]   CI (99.9%): [≈ 0, 63644.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 20.15% complete, ETA 00:28:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8170.330 ops/s
[info] # Warmup Iteration   2: 15850.798 ops/s
[info] # Warmup Iteration   3: 15968.070 ops/s
[info] # Warmup Iteration   4: 15995.477 ops/s
[info] # Warmup Iteration   5: 16019.849 ops/s
[info] Iteration   1: 16035.677 ops/s
[info]                  ·gc.alloc.rate:                   1537.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.920 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131791.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 16003.773 ops/s
[info]                  ·gc.alloc.rate:                   1534.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165768.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16074.906 ops/s
[info]                  ·gc.alloc.rate:                   1541.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132457.884 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15967.359 ops/s
[info]                  ·gc.alloc.rate:                   1531.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.148 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167026.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 15892.951 ops/s
[info]                  ·gc.alloc.rate:                   1523.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134476.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   15994.933 ±(99.9%) 267.437 ops/s [Average]
[info]   (min, avg, max) = (15892.951, 15994.933, 16074.906), stdev = 69.452
[info]   CI (99.9%): [15727.497, 16262.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1533.739 ±(99.9%) 25.816 MB/sec [Average]
[info]   (min, avg, max) = (1523.861, 1533.739, 1541.391), stdev = 6.704
[info]   CI (99.9%): [1507.923, 1559.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   150944.028 ±(99.9%) 0.460 B/op [Average]
[info]   (min, avg, max) = (150943.906, 150944.028, 150944.154), stdev = 0.119
[info]   CI (99.9%): [150943.568, 150944.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   8.197 ±(99.9%) 15.810 B/op [Average]
[info]   (min, avg, max) = (4.086, 8.197, 14.327), stdev = 4.106
[info]   CI (99.9%): [≈ 0, 24.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1486.481 ±(99.9%) 715.107 MB/sec [Average]
[info]   (min, avg, max) = (1342.569, 1486.481, 1694.182), stdev = 185.711
[info]   CI (99.9%): [771.375, 2201.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   146304.020 ±(99.9%) 70753.537 B/op [Average]
[info]   (min, avg, max) = (131791.098, 146304.020, 167026.319), stdev = 18374.469
[info]   CI (99.9%): [75550.483, 217057.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 20.90% complete, ETA 00:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15602.336 ops/s
[info] # Warmup Iteration   2: 17384.834 ops/s
[info] # Warmup Iteration   3: 17337.116 ops/s
[info] # Warmup Iteration   4: 17433.535 ops/s
[info] # Warmup Iteration   5: 17438.266 ops/s
[info] Iteration   1: 17572.793 ops/s
[info]                  ·gc.alloc.rate:                   1592.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149975.540 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17297.609 ops/s
[info]                  ·gc.alloc.rate:                   1568.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153104.218 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17573.399 ops/s
[info]                  ·gc.alloc.rate:                   1592.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121042.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17493.160 ops/s
[info]                  ·gc.alloc.rate:                   1585.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152339.269 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 17539.448 ops/s
[info]                  ·gc.alloc.rate:                   1589.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152161.556 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   17495.282 ±(99.9%) 443.828 ops/s [Average]
[info]   (min, avg, max) = (17297.609, 17495.282, 17573.399), stdev = 115.261
[info]   CI (99.9%): [17051.454, 17939.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1585.470 ±(99.9%) 39.113 MB/sec [Average]
[info]   (min, avg, max) = (1568.001, 1585.470, 1592.357), stdev = 10.157
[info]   CI (99.9%): [1546.357, 1624.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   142648.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (142648.023, 142648.025, 142648.029), stdev = 0.003
[info]   CI (99.9%): [142648.015, 142648.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   9.386 ±(99.9%) 17.268 B/op [Average]
[info]   (min, avg, max) = (5.603, 9.386, 17.047), stdev = 4.485
[info]   CI (99.9%): [≈ 0, 26.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1619.320 ±(99.9%) 578.141 MB/sec [Average]
[info]   (min, avg, max) = (1351.176, 1619.320, 1695.377), stdev = 150.141
[info]   CI (99.9%): [1041.179, 2197.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   145724.579 ±(99.9%) 53319.006 B/op [Average]
[info]   (min, avg, max) = (121042.311, 145724.579, 153104.218), stdev = 13846.777
[info]   CI (99.9%): [92405.573, 199043.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 21.64% complete, ETA 00:27:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15500.535 ops/s
[info] # Warmup Iteration   2: 17466.472 ops/s
[info] # Warmup Iteration   3: 17570.656 ops/s
[info] # Warmup Iteration   4: 17588.168 ops/s
[info] # Warmup Iteration   5: 17507.570 ops/s
[info] Iteration   1: 17609.080 ops/s
[info]                  ·gc.alloc.rate:                   1537.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 119723.292 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17430.433 ops/s
[info]                  ·gc.alloc.rate:                   1522.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151858.583 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17633.214 ops/s
[info]                  ·gc.alloc.rate:                   1539.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120534.519 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 17520.276 ops/s
[info]                  ·gc.alloc.rate:                   1529.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152006.124 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17508.423 ops/s
[info]                  ·gc.alloc.rate:                   1528.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              137440.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121903.771 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   17540.285 ±(99.9%) 315.492 ops/s [Average]
[info]   (min, avg, max) = (17430.433, 17540.285, 17633.214), stdev = 81.932
[info]   CI (99.9%): [17224.793, 17855.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1531.588 ±(99.9%) 27.039 MB/sec [Average]
[info]   (min, avg, max) = (1522.291, 1531.588, 1539.424), stdev = 7.022
[info]   CI (99.9%): [1504.549, 1558.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   137440.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (137440.023, 137440.025, 137440.029), stdev = 0.003
[info]   CI (99.9%): [137440.015, 137440.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.026
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   9.344 ±(99.9%) 8.955 B/op [Average]
[info]   (min, avg, max) = (7.442, 9.344, 13.156), stdev = 2.325
[info]   CI (99.9%): [0.390, 18.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1483.869 ±(99.9%) 713.980 MB/sec [Average]
[info]   (min, avg, max) = (1339.532, 1483.869, 1691.701), stdev = 185.418
[info]   CI (99.9%): [769.889, 2197.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   133205.258 ±(99.9%) 65897.046 B/op [Average]
[info]   (min, avg, max) = (119723.292, 133205.258, 152006.124), stdev = 17113.254
[info]   CI (99.9%): [67308.212, 199102.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 22.39% complete, ETA 00:27:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1322507.016 ops/s
[info] # Warmup Iteration   2: 2408759.932 ops/s
[info] # Warmup Iteration   3: 2454309.644 ops/s
[info] # Warmup Iteration   4: 2463092.699 ops/s
[info] # Warmup Iteration   5: 2456405.184 ops/s
[info] Iteration   1: 2452667.785 ops/s
[info]                  ·gc.alloc.rate:                   1557.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1075.273 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2471863.549 ops/s
[info]                  ·gc.alloc.rate:                   1570.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.238 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2470721.541 ops/s
[info]                  ·gc.alloc.rate:                   1569.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2464029.376 ops/s
[info]                  ·gc.alloc.rate:                   1565.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1082.009 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2470266.129 ops/s
[info]                  ·gc.alloc.rate:                   1569.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1357.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 864.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2465909.676 ±(99.9%) 30833.087 ops/s [Average]
[info]   (min, avg, max) = (2452667.785, 2465909.676, 2471863.549), stdev = 8007.255
[info]   CI (99.9%): [2435076.589, 2496742.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1566.558 ±(99.9%) 20.069 MB/sec [Average]
[info]   (min, avg, max) = (1557.944, 1566.558, 1570.414), stdev = 5.212
[info]   CI (99.9%): [1546.489, 1586.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.146), stdev = 0.019
[info]   CI (99.9%): [0.045, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (0.066, 0.074, 0.093), stdev = 0.012
[info]   CI (99.9%): [0.029, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1552.470 ±(99.9%) 695.367 MB/sec [Average]
[info]   (min, avg, max) = (1352.237, 1552.470, 1693.699), stdev = 180.585
[info]   CI (99.9%): [857.103, 2247.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   991.172 ±(99.9%) 450.177 B/op [Average]
[info]   (min, avg, max) = (861.394, 991.172, 1082.009), stdev = 116.909
[info]   CI (99.9%): [540.996, 1441.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 23.13% complete, ETA 00:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8594759.534 ops/s
[info] # Warmup Iteration   2: 5158066.814 ops/s
[info] # Warmup Iteration   3: 5236357.829 ops/s
[info] # Warmup Iteration   4: 5262596.280 ops/s
[info] # Warmup Iteration   5: 5240385.942 ops/s
[info] Iteration   1: 5269853.209 ops/s
[info]                  ·gc.alloc.rate:                   696.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.903 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.255 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 5260956.097 ops/s
[info]                  ·gc.alloc.rate:                   695.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5131274.074 ops/s
[info]                  ·gc.alloc.rate:                   678.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5251878.503 ops/s
[info]                  ·gc.alloc.rate:                   694.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.317 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5260265.588 ops/s
[info]                  ·gc.alloc.rate:                   694.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5234845.494 ±(99.9%) 224286.765 ops/s [Average]
[info]   (min, avg, max) = (5131274.074, 5234845.494, 5269853.209), stdev = 58246.561
[info]   CI (99.9%): [5010558.730, 5459132.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   691.754 ±(99.9%) 29.359 MB/sec [Average]
[info]   (min, avg, max) = (678.188, 691.754, 696.217), stdev = 7.624
[info]   CI (99.9%): [662.395, 721.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.018, 0.026), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   660.052 ±(99.9%) 10.261 MB/sec [Average]
[info]   (min, avg, max) = (656.903, 660.052, 663.570), stdev = 2.665
[info]   CI (99.9%): [649.791, 670.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   198.488 ±(99.9%) 9.169 B/op [Average]
[info]   (min, avg, max) = (196.255, 198.488, 202.373), stdev = 2.381
[info]   CI (99.9%): [189.318, 207.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 23.88% complete, ETA 00:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115234.671 ops/s
[info] # Warmup Iteration   2: 365894.191 ops/s
[info] # Warmup Iteration   3: 367206.649 ops/s
[info] # Warmup Iteration   4: 365695.856 ops/s
[info] # Warmup Iteration   5: 365264.837 ops/s
[info] Iteration   1: 370122.832 ops/s
[info]                  ·gc.alloc.rate:                   1735.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.368 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7134.866 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 369351.860 ops/s
[info]                  ·gc.alloc.rate:                   1732.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8624.876 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 368691.630 ops/s
[info]                  ·gc.alloc.rate:                   1729.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7223.803 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 367854.696 ops/s
[info]                  ·gc.alloc.rate:                   1725.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7256.404 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 371833.772 ops/s
[info]                  ·gc.alloc.rate:                   1744.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7189.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   369570.958 ±(99.9%) 5837.146 ops/s [Average]
[info]   (min, avg, max) = (367854.696, 369570.958, 371833.772), stdev = 1515.888
[info]   CI (99.9%): [363733.813, 375408.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   1733.627 ±(99.9%) 26.915 MB/sec [Average]
[info]   (min, avg, max) = (1725.566, 1733.627, 1744.073), stdev = 6.990
[info]   CI (99.9%): [1706.713, 1760.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.355 ±(99.9%) 0.686 B/op [Average]
[info]   (min, avg, max) = (0.176, 0.355, 0.533), stdev = 0.178
[info]   CI (99.9%): [≈ 0, 1.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1757.485 ±(99.9%) 574.663 MB/sec [Average]
[info]   (min, avg, max) = (1677.368, 1757.485, 2024.061), stdev = 149.238
[info]   CI (99.9%): [1182.822, 2332.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7485.836 ±(99.9%) 2457.987 B/op [Average]
[info]   (min, avg, max) = (7134.866, 7485.836, 8624.876), stdev = 638.331
[info]   CI (99.9%): [5027.849, 9943.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 24.63% complete, ETA 00:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1497556.310 ops/s
[info] # Warmup Iteration   2: 2723286.325 ops/s
[info] # Warmup Iteration   3: 2721333.122 ops/s
[info] # Warmup Iteration   4: 2728546.643 ops/s
[info] # Warmup Iteration   5: 2726652.633 ops/s
[info] Iteration   1: 2727983.996 ops/s
[info]                  ·gc.alloc.rate:                   1441.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.180 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 771.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2727027.991 ops/s
[info]                  ·gc.alloc.rate:                   1441.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 775.828 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2735133.070 ops/s
[info]                  ·gc.alloc.rate:                   1445.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 970.552 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2750387.265 ops/s
[info]                  ·gc.alloc.rate:                   1453.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 774.356 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2727750.227 ops/s
[info]                  ·gc.alloc.rate:                   1441.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1355.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 782.319 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   2733656.510 ±(99.9%) 38172.744 ops/s [Average]
[info]   (min, avg, max) = (2727027.991, 2733656.510, 2750387.265), stdev = 9913.340
[info]   CI (99.9%): [2695483.766, 2771829.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1444.761 ±(99.9%) 20.159 MB/sec [Average]
[info]   (min, avg, max) = (1441.364, 1444.761, 1453.602), stdev = 5.235
[info]   CI (99.9%): [1424.602, 1464.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.053 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.053, 0.072), stdev = 0.014
[info]   CI (99.9%): [≈ 10⁻⁴, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1415.170 ±(99.9%) 584.203 MB/sec [Average]
[info]   (min, avg, max) = (1337.180, 1415.170, 1686.257), stdev = 151.716
[info]   CI (99.9%): [830.967, 1999.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   814.942 ±(99.9%) 335.304 B/op [Average]
[info]   (min, avg, max) = (771.653, 814.942, 970.552), stdev = 87.077
[info]   CI (99.9%): [479.637, 1150.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 25.37% complete, ETA 00:26:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6086144.071 ops/s
[info] # Warmup Iteration   2: 6739831.077 ops/s
[info] # Warmup Iteration   3: 6963664.955 ops/s
[info] # Warmup Iteration   4: 6945343.231 ops/s
[info] # Warmup Iteration   5: 6939266.584 ops/s
[info] Iteration   1: 6969391.425 ops/s
[info]                  ·gc.alloc.rate:                   1062.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6933298.028 ops/s
[info]                  ·gc.alloc.rate:                   1057.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.897 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6956907.927 ops/s
[info]                  ·gc.alloc.rate:                   1060.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6937754.734 ops/s
[info]                  ·gc.alloc.rate:                   1057.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6922676.353 ops/s
[info]                  ·gc.alloc.rate:                   1055.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.313 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   6944005.693 ±(99.9%) 72540.765 ops/s [Average]
[info]   (min, avg, max) = (6922676.353, 6944005.693, 6969391.425), stdev = 18838.606
[info]   CI (99.9%): [6871464.928, 7016546.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1058.672 ±(99.9%) 10.923 MB/sec [Average]
[info]   (min, avg, max) = (1055.409, 1058.672, 1062.434), stdev = 2.837
[info]   CI (99.9%): [1047.748, 1069.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.020, 0.024), stdev = 0.002
[info]   CI (99.9%): [0.012, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1065.884 ±(99.9%) 596.010 MB/sec [Average]
[info]   (min, avg, max) = (989.846, 1065.884, 1342.628), stdev = 154.782
[info]   CI (99.9%): [469.874, 1661.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   241.686 ±(99.9%) 137.072 B/op [Average]
[info]   (min, avg, max) = (223.603, 241.686, 305.313), stdev = 35.597
[info]   CI (99.9%): [104.614, 378.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 26.12% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272402.087 ops/s
[info] # Warmup Iteration   2: 715243.115 ops/s
[info] # Warmup Iteration   3: 720499.326 ops/s
[info] # Warmup Iteration   4: 725758.215 ops/s
[info] # Warmup Iteration   5: 725962.503 ops/s
[info] Iteration   1: 726335.769 ops/s
[info]                  ·gc.alloc.rate:                   2103.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4386.284 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 725615.471 ops/s
[info]                  ·gc.alloc.rate:                   2102.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4406.559 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 725357.504 ops/s
[info]                  ·gc.alloc.rate:                   2101.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4417.591 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 727568.430 ops/s
[info]                  ·gc.alloc.rate:                   2107.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4409.287 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 720209.083 ops/s
[info]                  ·gc.alloc.rate:                   2085.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4460.186 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   725017.251 ±(99.9%) 10863.854 ops/s [Average]
[info]   (min, avg, max) = (720209.083, 725017.251, 727568.430), stdev = 2821.308
[info]   CI (99.9%): [714153.397, 735881.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   2100.201 ±(99.9%) 32.122 MB/sec [Average]
[info]   (min, avg, max) = (2085.942, 2100.201, 2107.682), stdev = 8.342
[info]   CI (99.9%): [2068.079, 2132.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 0.401 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.253, 0.406), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   2033.835 ±(99.9%) 25.012 MB/sec [Average]
[info]   (min, avg, max) = (2023.778, 2033.835, 2040.283), stdev = 6.495
[info]   CI (99.9%): [2008.823, 2058.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   4415.981 ±(99.9%) 104.963 B/op [Average]
[info]   (min, avg, max) = (4386.284, 4415.981, 4460.186), stdev = 27.259
[info]   CI (99.9%): [4311.018, 4520.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 26.87% complete, ETA 00:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477778.029 ops/s
[info] # Warmup Iteration   2: 789466.241 ops/s
[info] # Warmup Iteration   3: 817134.759 ops/s
[info] # Warmup Iteration   4: 812618.994 ops/s
[info] # Warmup Iteration   5: 782452.089 ops/s
[info] Iteration   1: 765810.407 ops/s
[info]                  ·gc.alloc.rate:                   2491.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5557.151 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 800305.566 ops/s
[info]                  ·gc.alloc.rate:                   2603.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4668.665 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 817003.009 ops/s
[info]                  ·gc.alloc.rate:                   2657.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5235.258 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 816367.499 ops/s
[info]                  ·gc.alloc.rate:                   2655.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5250.065 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 812976.291 ops/s
[info]                  ·gc.alloc.rate:                   2643.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5271.552 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   802492.554 ±(99.9%) 83109.238 ops/s [Average]
[info]   (min, avg, max) = (765810.407, 802492.554, 817003.009), stdev = 21583.205
[info]   CI (99.9%): [719383.316, 885601.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2610.269 ±(99.9%) 269.547 MB/sec [Average]
[info]   (min, avg, max) = (2491.126, 2610.269, 2657.327), stdev = 70.000
[info]   CI (99.9%): [2340.722, 2879.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.000, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.245 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (0.171, 0.245, 0.368), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2648.008 ±(99.9%) 589.963 MB/sec [Average]
[info]   (min, avg, max) = (2374.272, 2648.008, 2722.637), stdev = 153.212
[info]   CI (99.9%): [2058.045, 3237.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5196.538 ±(99.9%) 1245.794 B/op [Average]
[info]   (min, avg, max) = (4668.665, 5196.538, 5557.151), stdev = 323.529
[info]   CI (99.9%): [3950.745, 6442.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 27.61% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296244.344 ops/s
[info] # Warmup Iteration   2: 993856.124 ops/s
[info] # Warmup Iteration   3: 997578.142 ops/s
[info] # Warmup Iteration   4: 995533.459 ops/s
[info] # Warmup Iteration   5: 993940.163 ops/s
[info] Iteration   1: 984976.870 ops/s
[info]                  ·gc.alloc.rate:                   1221.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2127.618 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 997522.039 ops/s
[info]                  ·gc.alloc.rate:                   1237.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1584.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 997826.793 ops/s
[info]                  ·gc.alloc.rate:                   1237.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2120.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 992562.671 ops/s
[info]                  ·gc.alloc.rate:                   1231.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2139.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 995384.229 ops/s
[info]                  ·gc.alloc.rate:                   1234.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1014.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1604.094 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   993654.520 ±(99.9%) 20362.152 ops/s [Average]
[info]   (min, avg, max) = (984976.870, 993654.520, 997826.793), stdev = 5287.986
[info]   CI (99.9%): [973292.368, 1014016.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1232.192 ±(99.9%) 25.513 MB/sec [Average]
[info]   (min, avg, max) = (1221.270, 1232.192, 1237.409), stdev = 6.626
[info]   CI (99.9%): [1206.678, 1257.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.151, 0.230), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1208.518 ±(99.9%) 701.405 MB/sec [Average]
[info]   (min, avg, max) = (1004.094, 1208.518, 1349.155), stdev = 182.153
[info]   CI (99.9%): [507.113, 1909.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1915.104 ±(99.9%) 1128.530 B/op [Average]
[info]   (min, avg, max) = (1584.374, 1915.104, 2139.296), stdev = 293.076
[info]   CI (99.9%): [786.574, 3043.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 28.36% complete, ETA 00:25:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7017051.987 ops/s
[info] # Warmup Iteration   2: 7477300.373 ops/s
[info] # Warmup Iteration   3: 7573395.364 ops/s
[info] # Warmup Iteration   4: 7679674.120 ops/s
[info] # Warmup Iteration   5: 7661786.796 ops/s
[info] Iteration   1: 7649806.782 ops/s
[info]                  ·gc.alloc.rate:                   349.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7660110.001 ops/s
[info]                  ·gc.alloc.rate:                   350.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 7460655.009 ops/s
[info]                  ·gc.alloc.rate:                   341.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69.700 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7661982.382 ops/s
[info]                  ·gc.alloc.rate:                   350.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7657781.757 ops/s
[info]                  ·gc.alloc.rate:                   350.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   7618067.186 ±(99.9%) 339312.448 ops/s [Average]
[info]   (min, avg, max) = (7460655.009, 7618067.186, 7661982.382), stdev = 88118.365
[info]   CI (99.9%): [7278754.738, 7957379.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   348.425 ±(99.9%) 15.523 MB/sec [Average]
[info]   (min, avg, max) = (341.225, 348.425, 350.429), stdev = 4.031
[info]   CI (99.9%): [332.902, 363.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.638 ±(99.9%) 5.270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.638, 3.085), stdev = 1.368
[info]   CI (99.9%): [≈ 0, 5.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.131 ±(99.9%) 1.084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.131, 0.635), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   331.117 ±(99.9%) 4.207 MB/sec [Average]
[info]   (min, avg, max) = (330.315, 331.117, 332.355), stdev = 1.093
[info]   CI (99.9%): [326.910, 335.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   68.430 ±(99.9%) 2.871 B/op [Average]
[info]   (min, avg, max) = (67.867, 68.430, 69.700), stdev = 0.746
[info]   CI (99.9%): [65.559, 71.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 29.10% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41802.786 ops/s
[info] # Warmup Iteration   2: 303718.916 ops/s
[info] # Warmup Iteration   3: 302649.463 ops/s
[info] # Warmup Iteration   4: 307783.801 ops/s
[info] # Warmup Iteration   5: 309364.843 ops/s
[info] Iteration   1: 309548.885 ops/s
[info]                  ·gc.alloc.rate:                   1587.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6804.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 306452.562 ops/s
[info]                  ·gc.alloc.rate:                   1571.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8634.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 308783.658 ops/s
[info]                  ·gc.alloc.rate:                   1583.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8606.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 311687.963 ops/s
[info]                  ·gc.alloc.rate:                   1598.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6838.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 308234.394 ops/s
[info]                  ·gc.alloc.rate:                   1580.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.526 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8659.396 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   308941.493 ±(99.9%) 7364.628 ops/s [Average]
[info]   (min, avg, max) = (306452.562, 308941.493, 311687.963), stdev = 1912.570
[info]   CI (99.9%): [301576.865, 316306.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1584.213 ±(99.9%) 37.124 MB/sec [Average]
[info]   (min, avg, max) = (1571.869, 1584.213, 1598.215), stdev = 9.641
[info]   CI (99.9%): [1547.089, 1621.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8072.001, 8072.001, 8072.001), stdev = 0.001
[info]   CI (99.9%): [8072.001, 8072.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.167), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.341 ±(99.9%) 1.315 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.341, 0.855), stdev = 0.342
[info]   CI (99.9%): [≈ 0, 1.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1551.363 ±(99.9%) 722.863 MB/sec [Average]
[info]   (min, avg, max) = (1337.879, 1551.363, 1695.526), stdev = 187.725
[info]   CI (99.9%): [828.499, 2274.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   7908.492 ±(99.9%) 3823.427 B/op [Average]
[info]   (min, avg, max) = (6804.097, 7908.492, 8659.396), stdev = 992.932
[info]   CI (99.9%): [4085.065, 11731.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce
[info] # Run progress: 29.85% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5707.979 ops/s
[info] # Warmup Iteration   2: 7151.266 ops/s
[info] # Warmup Iteration   3: 7346.178 ops/s
[info] # Warmup Iteration   4: 7323.920 ops/s
[info] # Warmup Iteration   5: 7299.338 ops/s
[info] Iteration   1: 7325.236 ops/s
[info]                  ·gc.alloc.rate:                   1386.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284791.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7360.959 ops/s
[info]                  ·gc.alloc.rate:                   1393.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 356646.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7327.739 ops/s
[info]                  ·gc.alloc.rate:                   1387.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              297936.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288108.058 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7225.089 ops/s
[info]                  ·gc.alloc.rate:                   1367.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              297941.985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 293374.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7334.813 ops/s
[info]                  ·gc.alloc.rate:                   1388.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              297952.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289730.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce":
[info]   7314.767 ±(99.9%) 200.599 ops/s [Average]
[info]   (min, avg, max) = (7225.089, 7314.767, 7360.959), stdev = 52.095
[info]   CI (99.9%): [7114.168, 7515.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1384.376 ±(99.9%) 38.333 MB/sec [Average]
[info]   (min, avg, max) = (1367.263, 1384.376, 1393.288), stdev = 9.955
[info]   CI (99.9%): [1346.043, 1422.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   297940.442 ±(99.9%) 26.891 B/op [Average]
[info]   (min, avg, max) = (297936.055, 297940.442, 297952.060), stdev = 6.984
[info]   CI (99.9%): [297913.551, 297967.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.276 ±(99.9%) 23.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.276, 13.411), stdev = 6.008
[info]   CI (99.9%): [≈ 0, 29.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1406.053 ±(99.9%) 564.711 MB/sec [Average]
[info]   (min, avg, max) = (1325.009, 1406.053, 1667.847), stdev = 146.654
[info]   CI (99.9%): [841.343, 1970.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   302530.361 ±(99.9%) 117095.806 B/op [Average]
[info]   (min, avg, max) = (284791.353, 302530.361, 356646.876), stdev = 30409.409
[info]   CI (99.9%): [185434.555, 419626.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson
[info] # Run progress: 30.60% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13891.238 ops/s
[info] # Warmup Iteration   2: 20226.442 ops/s
[info] # Warmup Iteration   3: 20173.687 ops/s
[info] # Warmup Iteration   4: 20383.823 ops/s
[info] # Warmup Iteration   5: 20251.060 ops/s
[info] Iteration   1: 20177.957 ops/s
[info]                  ·gc.alloc.rate:                   877.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              68464.568 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76449.467 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20298.394 ops/s
[info]                  ·gc.alloc.rate:                   882.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50977.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20029.683 ops/s
[info]                  ·gc.alloc.rate:                   870.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77855.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20361.451 ops/s
[info]                  ·gc.alloc.rate:                   885.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77075.433 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20329.120 ops/s
[info]                  ·gc.alloc.rate:                   883.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              68440.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51647.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson":
[info]   20239.321 ±(99.9%) 524.390 ops/s [Average]
[info]   (min, avg, max) = (20029.683, 20239.321, 20361.451), stdev = 136.182
[info]   CI (99.9%): [19714.931, 20763.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   880.028 ±(99.9%) 22.725 MB/sec [Average]
[info]   (min, avg, max) = (870.845, 880.028, 885.260), stdev = 5.902
[info]   CI (99.9%): [857.303, 902.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   68444.930 ±(99.9%) 42.273 B/op [Average]
[info]   (min, avg, max) = (68440.020, 68444.930, 68464.568), stdev = 10.978
[info]   CI (99.9%): [68402.657, 68487.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   5.178 ±(99.9%) 16.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.178, 11.298), stdev = 4.173
[info]   CI (99.9%): [≈ 0, 21.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   858.382 ±(99.9%) 690.070 MB/sec [Average]
[info]   (min, avg, max) = (657.499, 858.382, 996.957), stdev = 179.209
[info]   CI (99.9%): [168.312, 1548.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   66801.073 ±(99.9%) 54485.964 B/op [Average]
[info]   (min, avg, max) = (50977.466, 66801.073, 77855.486), stdev = 14149.832
[info]   CI (99.9%): [12315.109, 121287.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter
[info] # Run progress: 31.34% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38427.114 ops/s
[info] # Warmup Iteration   2: 39352.427 ops/s
[info] # Warmup Iteration   3: 38001.278 ops/s
[info] # Warmup Iteration   4: 39511.832 ops/s
[info] # Warmup Iteration   5: 38704.550 ops/s
[info] Iteration   1: 39424.186 ops/s
[info]                  ·gc.alloc.rate:      103.402 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 39417.822 ops/s
[info]                  ·gc.alloc.rate:      103.401 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 39384.594 ops/s
[info]                  ·gc.alloc.rate:                   103.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10221.440 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39436.916 ops/s
[info]                  ·gc.alloc.rate:      103.444 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39141.142 ops/s
[info]                  ·gc.alloc.rate:                   102.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻³ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10284.095 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter":
[info]   39360.932 ±(99.9%) 478.932 ops/s [Average]
[info]   (min, avg, max) = (39141.142, 39360.932, 39436.916), stdev = 124.377
[info]   CI (99.9%): [38882.001, 39839.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   103.244 ±(99.9%) 1.231 MB/sec [Average]
[info]   (min, avg, max) = (102.681, 103.244, 103.444), stdev = 0.320
[info]   CI (99.9%): [102.013, 104.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   4128.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (4128.010, 4128.011, 4128.011), stdev = 0.001
[info]   CI (99.9%): [4128.009, 4128.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.002 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.084 ±(99.9%) 0.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.421), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   102.315 ±(99.9%) 539.478 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.315, 255.809), stdev = 140.101
[info]   CI (99.9%): [≈ 0, 641.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   4101.107 ±(99.9%) 21624.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4101.107, 10284.095), stdev = 5615.716
[info]   CI (99.9%): [≈ 0, 25725.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay
[info] # Run progress: 32.09% complete, ETA 00:23:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3246.437 ops/s
[info] # Warmup Iteration   2: 6375.293 ops/s
[info] # Warmup Iteration   3: 6479.691 ops/s
[info] # Warmup Iteration   4: 6475.351 ops/s
[info] # Warmup Iteration   5: 6489.110 ops/s
[info] Iteration   1: 6485.768 ops/s
[info]                  ·gc.alloc.rate:                   1498.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322831.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6469.066 ops/s
[info]                  ·gc.alloc.rate:                   1495.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 406521.365 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6507.959 ops/s
[info]                  ·gc.alloc.rate:                   1503.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325636.718 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 6472.031 ops/s
[info]                  ·gc.alloc.rate:                   1495.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328307.623 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 6483.625 ops/s
[info]                  ·gc.alloc.rate:                   1498.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              363712.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410860.696 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay":
[info]   6483.690 ±(99.9%) 59.128 ops/s [Average]
[info]   (min, avg, max) = (6469.066, 6483.690, 6507.959), stdev = 15.355
[info]   CI (99.9%): [6424.562, 6542.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   1498.338 ±(99.9%) 12.752 MB/sec [Average]
[info]   (min, avg, max) = (1495.528, 1498.338, 1503.717), stdev = 3.312
[info]   CI (99.9%): [1485.586, 1511.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   363712.065 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (363712.063, 363712.065, 363712.068), stdev = 0.003
[info]   CI (99.9%): [363712.054, 363712.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   9.085 ±(99.9%) 16.191 B/op [Average]
[info]   (min, avg, max) = (5.051, 9.085, 15.098), stdev = 4.205
[info]   CI (99.9%): [≈ 0, 25.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1478.103 ±(99.9%) 718.090 MB/sec [Average]
[info]   (min, avg, max) = (1330.005, 1478.103, 1692.562), stdev = 186.486
[info]   CI (99.9%): [760.013, 2196.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   358831.574 ±(99.9%) 175520.987 B/op [Average]
[info]   (min, avg, max) = (322831.467, 358831.574, 410860.696), stdev = 45582.243
[info]   CI (99.9%): [183310.587, 534352.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce
[info] # Run progress: 32.84% complete, ETA 00:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13874.115 ops/s
[info] # Warmup Iteration   2: 16178.885 ops/s
[info] # Warmup Iteration   3: 16221.660 ops/s
[info] # Warmup Iteration   4: 16591.670 ops/s
[info] # Warmup Iteration   5: 17987.048 ops/s
[info] Iteration   1: 17896.594 ops/s
[info]                  ·gc.alloc.rate:                   464.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              40872.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57401.658 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 17373.651 ops/s
[info]                  ·gc.alloc.rate:                   485.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              43964.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29507.606 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 16619.374 ops/s
[info]                  ·gc.alloc.rate:                   517.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61751.438 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16705.637 ops/s
[info]                  ·gc.alloc.rate:                   520.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30750.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16562.952 ops/s
[info]                  ·gc.alloc.rate:                   515.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              49040.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62153.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce":
[info]   17031.642 ±(99.9%) 2246.139 ops/s [Average]
[info]   (min, avg, max) = (16562.952, 17031.642, 17896.594), stdev = 583.315
[info]   CI (99.9%): [14785.503, 19277.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   500.842 ±(99.9%) 95.276 MB/sec [Average]
[info]   (min, avg, max) = (464.645, 500.842, 520.427), stdev = 24.743
[info]   CI (99.9%): [405.567, 596.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   46391.225 ±(99.9%) 14586.940 B/op [Average]
[info]   (min, avg, max) = (40872.025, 46391.225, 49040.025), stdev = 3788.182
[info]   CI (99.9%): [31804.285, 60978.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.253 ±(99.9%) 16.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.253, 9.890), stdev = 4.247
[info]   CI (99.9%): [≈ 0, 20.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   522.122 ±(99.9%) 689.218 MB/sec [Average]
[info]   (min, avg, max) = (325.777, 522.122, 653.948), stdev = 178.988
[info]   CI (99.9%): [≈ 0, 1211.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   48312.902 ±(99.9%) 64343.305 B/op [Average]
[info]   (min, avg, max) = (29507.606, 48312.902, 62153.778), stdev = 16709.752
[info]   CI (99.9%): [≈ 0, 112656.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson
[info] # Run progress: 33.58% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14773.816 ops/s
[info] # Warmup Iteration   2: 21006.031 ops/s
[info] # Warmup Iteration   3: 21053.211 ops/s
[info] # Warmup Iteration   4: 21068.793 ops/s
[info] # Warmup Iteration   5: 20986.874 ops/s
[info] Iteration   1: 21180.066 ops/s
[info]                  ·gc.alloc.rate:                   348.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              25871.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24056.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21350.597 ops/s
[info]                  ·gc.alloc.rate:                   350.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23863.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21390.399 ops/s
[info]                  ·gc.alloc.rate:                   351.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              25871.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23720.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 21483.068 ops/s
[info]                  ·gc.alloc.rate:                   353.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              25872.110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.266 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23618.335 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 21341.795 ops/s
[info]                  ·gc.alloc.rate:                   350.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              25871.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23775.451 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson":
[info]   21349.185 ±(99.9%) 423.051 ops/s [Average]
[info]   (min, avg, max) = (21180.066, 21349.185, 21483.068), stdev = 109.865
[info]   CI (99.9%): [20926.134, 21772.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   350.871 ±(99.9%) 7.012 MB/sec [Average]
[info]   (min, avg, max) = (348.037, 350.871, 353.018), stdev = 1.821
[info]   CI (99.9%): [343.858, 357.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   25872.002 ±(99.9%) 0.361 B/op [Average]
[info]   (min, avg, max) = (25871.928, 25872.002, 25872.110), stdev = 0.094
[info]   CI (99.9%): [25871.641, 25872.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.739 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.934), stdev = 1.750
[info]   CI (99.9%): [≈ 0, 7.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   59.717 ±(99.9%) 501.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.717, 292.458), stdev = 130.111
[info]   CI (99.9%): [≈ 0, 560.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   322.856 ±(99.9%) 2.756 MB/sec [Average]
[info]   (min, avg, max) = (322.266, 322.856, 323.663), stdev = 0.716
[info]   CI (99.9%): [320.099, 325.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   23806.937 ±(99.9%) 636.600 B/op [Average]
[info]   (min, avg, max) = (23618.335, 23806.937, 24056.266), stdev = 165.323
[info]   CI (99.9%): [23170.337, 24443.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter
[info] # Run progress: 34.33% complete, ETA 00:23:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21122.032 ops/s
[info] # Warmup Iteration   2: 23091.095 ops/s
[info] # Warmup Iteration   3: 23033.762 ops/s
[info] # Warmup Iteration   4: 23064.752 ops/s
[info] # Warmup Iteration   5: 23011.614 ops/s
[info] Iteration   1: 23336.678 ops/s
[info]                  ·gc.alloc.rate:                   300.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17250.158 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23031.263 ops/s
[info]                  ·gc.alloc.rate:                   296.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22555.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22984.607 ops/s
[info]                  ·gc.alloc.rate:                   296.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22599.800 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 22985.929 ops/s
[info]                  ·gc.alloc.rate:                   296.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22484.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 22928.756 ops/s
[info]                  ·gc.alloc.rate:                   295.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              20280.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22539.698 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter":
[info]   23053.447 ±(99.9%) 625.529 ops/s [Average]
[info]   (min, avg, max) = (22928.756, 23053.447, 23336.678), stdev = 162.448
[info]   CI (99.9%): [22427.918, 23678.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   297.003 ±(99.9%) 7.983 MB/sec [Average]
[info]   (min, avg, max) = (295.402, 297.003, 300.616), stdev = 2.073
[info]   CI (99.9%): [289.020, 304.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   20280.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (20280.017, 20280.018, 20280.019), stdev = 0.001
[info]   CI (99.9%): [20280.015, 20280.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.662 ±(99.9%) 5.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.662, 3.248), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   45.252 ±(99.9%) 380.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.252, 221.983), stdev = 98.803
[info]   CI (99.9%): [≈ 0, 425.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   314.477 ±(99.9%) 126.552 MB/sec [Average]
[info]   (min, avg, max) = (255.704, 314.477, 330.012), stdev = 32.865
[info]   CI (99.9%): [187.925, 441.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   21486.021 ±(99.9%) 9119.390 B/op [Average]
[info]   (min, avg, max) = (17250.158, 21486.021, 22599.800), stdev = 2368.277
[info]   CI (99.9%): [12366.631, 30605.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 35.07% complete, ETA 00:22:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22486.862 ops/s
[info] # Warmup Iteration   2: 22632.802 ops/s
[info] # Warmup Iteration   3: 22734.451 ops/s
[info] # Warmup Iteration   4: 23089.210 ops/s
[info] # Warmup Iteration   5: 23572.957 ops/s
[info] Iteration   1: 23508.093 ops/s
[info]                  ·gc.alloc.rate:                   221.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17124.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23574.820 ops/s
[info]                  ·gc.alloc.rate:                   222.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17076.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23651.992 ops/s
[info]                  ·gc.alloc.rate:      223.023 MB/sec
[info]                  ·gc.alloc.rate.norm: 14840.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23396.173 ops/s
[info]                  ·gc.alloc.rate:                   220.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22202.872 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 22585.441 ops/s
[info]                  ·gc.alloc.rate:                   212.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              14840.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23000.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc":
[info]   23343.304 ±(99.9%) 1670.926 ops/s [Average]
[info]   (min, avg, max) = (22585.441, 23343.304, 23651.992), stdev = 433.934
[info]   CI (99.9%): [21672.378, 25014.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   220.073 ±(99.9%) 15.815 MB/sec [Average]
[info]   (min, avg, max) = (212.907, 220.073, 223.023), stdev = 4.107
[info]   CI (99.9%): [204.257, 235.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   14840.017 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14840.017, 14840.017, 14840.018), stdev = 0.001
[info]   CI (99.9%): [14840.016, 14840.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.661 ±(99.9%) 5.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 3.261), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   44.467 ±(99.9%) 376.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.467, 219.407), stdev = 97.797
[info]   CI (99.9%): [≈ 0, 421.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   234.292 ±(99.9%) 524.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 234.292, 329.995), stdev = 136.134
[info]   CI (99.9%): [≈ 0, 758.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   15880.923 ±(99.9%) 35804.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15880.923, 23000.992), stdev = 9298.406
[info]   CI (99.9%): [≈ 0, 51685.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 35.82% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5652.196 ops/s
[info] # Warmup Iteration   2: 7784.795 ops/s
[info] # Warmup Iteration   3: 7955.407 ops/s
[info] # Warmup Iteration   4: 8065.519 ops/s
[info] # Warmup Iteration   5: 8069.616 ops/s
[info] Iteration   1: 8053.246 ops/s
[info]                  ·gc.alloc.rate:                   1937.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327094.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8097.603 ops/s
[info]                  ·gc.alloc.rate:                   1948.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 392681.937 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 8089.862 ops/s
[info]                  ·gc.alloc.rate:                   1946.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              378793.750 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 394706.191 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7981.598 ops/s
[info]                  ·gc.alloc.rate:                   1921.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400964.745 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7974.751 ops/s
[info]                  ·gc.alloc.rate:                   1919.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              378832.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335065.842 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8039.412 ±(99.9%) 224.911 ops/s [Average]
[info]   (min, avg, max) = (7974.751, 8039.412, 8097.603), stdev = 58.409
[info]   CI (99.9%): [7814.501, 8264.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1934.650 ±(99.9%) 53.165 MB/sec [Average]
[info]   (min, avg, max) = (1919.184, 1934.650, 1948.564), stdev = 13.807
[info]   CI (99.9%): [1881.485, 1987.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378808.399 ±(99.9%) 83.252 B/op [Average]
[info]   (min, avg, max) = (378792.050, 378808.399, 378832.091), stdev = 21.620
[info]   CI (99.9%): [378725.147, 378891.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (0.058, 0.083, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16.311 ±(99.9%) 20.239 B/op [Average]
[info]   (min, avg, max) = (11.327, 16.311, 24.625), stdev = 5.256
[info]   CI (99.9%): [≈ 0, 36.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1890.506 ±(99.9%) 722.034 MB/sec [Average]
[info]   (min, avg, max) = (1673.298, 1890.506, 2033.490), stdev = 187.510
[info]   CI (99.9%): [1168.471, 2612.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   370102.598 ±(99.9%) 138099.756 B/op [Average]
[info]   (min, avg, max) = (327094.276, 370102.598, 400964.745), stdev = 35864.068
[info]   CI (99.9%): [232002.843, 508202.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 36.57% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6962.678 ops/s
[info] # Warmup Iteration   2: 14800.483 ops/s
[info] # Warmup Iteration   3: 14802.452 ops/s
[info] # Warmup Iteration   4: 14818.213 ops/s
[info] # Warmup Iteration   5: 14838.822 ops/s
[info] Iteration   1: 14855.216 ops/s
[info]                  ·gc.alloc.rate:                   376.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34192.696 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 14809.444 ops/s
[info]                  ·gc.alloc.rate:                   375.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34511.261 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14840.931 ops/s
[info]                  ·gc.alloc.rate:                   375.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34436.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14787.661 ops/s
[info]                  ·gc.alloc.rate:                   374.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69474.983 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 14810.362 ops/s
[info]                  ·gc.alloc.rate:                   375.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.953 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34862.869 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   14820.723 ±(99.9%) 104.141 ops/s [Average]
[info]   (min, avg, max) = (14787.661, 14820.723, 14855.216), stdev = 27.045
[info]   CI (99.9%): [14716.581, 14924.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   375.404 ±(99.9%) 2.750 MB/sec [Average]
[info]   (min, avg, max) = (374.565, 375.404, 376.346), stdev = 0.714
[info]   CI (99.9%): [372.654, 378.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   39872.029 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (39872.027, 39872.029, 39872.037), stdev = 0.004
[info]   CI (99.9%): [39872.014, 39872.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.324 ±(99.9%) 7.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.324, 4.415), stdev = 1.974
[info]   CI (99.9%): [≈ 0, 8.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   390.542 ±(99.9%) 564.276 MB/sec [Average]
[info]   (min, avg, max) = (322.740, 390.542, 652.660), stdev = 146.541
[info]   CI (99.9%): [≈ 0, 954.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   41495.735 ±(99.9%) 60234.527 B/op [Average]
[info]   (min, avg, max) = (34192.696, 41495.735, 69474.983), stdev = 15642.715
[info]   CI (99.9%): [≈ 0, 101730.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 37.31% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18522.570 ops/s
[info] # Warmup Iteration   2: 23397.063 ops/s
[info] # Warmup Iteration   3: 23717.821 ops/s
[info] # Warmup Iteration   4: 23828.629 ops/s
[info] # Warmup Iteration   5: 23803.326 ops/s
[info] Iteration   1: 23875.731 ops/s
[info]                  ·gc.alloc.rate:                   407.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21733.738 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 23881.456 ops/s
[info]                  ·gc.alloc.rate:                   408.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21641.394 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 23883.317 ops/s
[info]                  ·gc.alloc.rate:                   408.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43237.080 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23516.987 ops/s
[info]                  ·gc.alloc.rate:                   401.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21929.836 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 23887.696 ops/s
[info]                  ·gc.alloc.rate:                   408.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21592.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   23809.037 ±(99.9%) 628.878 ops/s [Average]
[info]   (min, avg, max) = (23516.987, 23809.037, 23887.696), stdev = 163.318
[info]   CI (99.9%): [23180.159, 24437.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   406.790 ±(99.9%) 10.721 MB/sec [Average]
[info]   (min, avg, max) = (401.812, 406.790, 408.112), stdev = 2.784
[info]   CI (99.9%): [396.069, 417.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   26896.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.017, 26896.019), stdev = 0.001
[info]   CI (99.9%): [26896.015, 26896.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.384 ±(99.9%) 7.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.384, 4.179), stdev = 1.962
[info]   CI (99.9%): [≈ 0, 8.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   393.832 ±(99.9%) 564.191 MB/sec [Average]
[info]   (min, avg, max) = (327.620, 393.832, 655.928), stdev = 146.519
[info]   CI (99.9%): [≈ 0, 958.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   26026.824 ±(99.9%) 37049.710 B/op [Average]
[info]   (min, avg, max) = (21592.073, 26026.824, 43237.080), stdev = 9621.692
[info]   CI (99.9%): [≈ 0, 63076.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 38.06% complete, ETA 00:21:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900.347 ops/s
[info] # Warmup Iteration   2: 2638.381 ops/s
[info] # Warmup Iteration   3: 2634.919 ops/s
[info] # Warmup Iteration   4: 2654.661 ops/s
[info] # Warmup Iteration   5: 2671.578 ops/s
[info] Iteration   1: 2673.308 ops/s
[info]                  ·gc.alloc.rate:                   1617.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 985441.843 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2678.417 ops/s
[info]                  ·gc.alloc.rate:                   1621.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.164 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.056 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 988517.636 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2680.629 ops/s
[info]                  ·gc.alloc.rate:                   1623.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 990213.337 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2653.950 ops/s
[info]                  ·gc.alloc.rate:                   1606.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1354.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 803315.851 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2661.947 ops/s
[info]                  ·gc.alloc.rate:                   1611.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1002506.382 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2669.650 ±(99.9%) 43.760 ops/s [Average]
[info]   (min, avg, max) = (2653.950, 2669.650, 2680.629), stdev = 11.364
[info]   CI (99.9%): [2625.890, 2713.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1615.950 ±(99.9%) 26.986 MB/sec [Average]
[info]   (min, avg, max) = (1606.251, 1615.950, 1623.283), stdev = 7.008
[info]   CI (99.9%): [1588.963, 1642.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   952664.155 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (952664.152, 952664.155, 952664.164), stdev = 0.005
[info]   CI (99.9%): [952664.135, 952664.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   14.707 ±(99.9%) 51.700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.707, 24.684), stdev = 13.426
[info]   CI (99.9%): [≈ 0, 66.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1618.580 ±(99.9%) 569.448 MB/sec [Average]
[info]   (min, avg, max) = (1354.440, 1618.580, 1695.822), stdev = 147.884
[info]   CI (99.9%): [1049.131, 2188.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   953999.010 ±(99.9%) 325317.000 B/op [Average]
[info]   (min, avg, max) = (803315.851, 953999.010, 1002506.382), stdev = 84483.792
[info]   CI (99.9%): [628682.009, 1279316.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 38.81% complete, ETA 00:21:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5809.871 ops/s
[info] # Warmup Iteration   2: 7746.491 ops/s
[info] # Warmup Iteration   3: 7941.124 ops/s
[info] # Warmup Iteration   4: 7920.748 ops/s
[info] # Warmup Iteration   5: 7885.506 ops/s
[info] Iteration   1: 7989.648 ops/s
[info]                  ·gc.alloc.rate:                   1656.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              326504.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328073.610 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7836.405 ops/s
[info]                  ·gc.alloc.rate:                   1625.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              326504.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 336683.989 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7993.907 ops/s
[info]                  ·gc.alloc.rate:                   1658.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              326504.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265225.733 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7923.035 ops/s
[info]                  ·gc.alloc.rate:                   1643.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              326550.198 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 335610.476 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7990.053 ops/s
[info]                  ·gc.alloc.rate:                   1657.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              326552.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 333648.244 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7946.609 ±(99.9%) 263.125 ops/s [Average]
[info]   (min, avg, max) = (7836.405, 7946.609, 7993.907), stdev = 68.333
[info]   CI (99.9%): [7683.484, 8209.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1648.461 ±(99.9%) 53.733 MB/sec [Average]
[info]   (min, avg, max) = (1625.995, 1648.461, 1658.020), stdev = 13.954
[info]   CI (99.9%): [1594.728, 1702.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   326522.881 ±(99.9%) 99.311 B/op [Average]
[info]   (min, avg, max) = (326504.051, 326522.881, 326552.051), stdev = 25.791
[info]   CI (99.9%): [326423.571, 326622.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.151 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.151, 0.229), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29.916 ±(99.9%) 41.324 B/op [Average]
[info]   (min, avg, max) = (16.400, 29.916, 45.101), stdev = 10.732
[info]   CI (99.9%): [≈ 0, 71.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1614.283 ±(99.9%) 577.323 MB/sec [Average]
[info]   (min, avg, max) = (1346.843, 1614.283, 1693.833), stdev = 149.929
[info]   CI (99.9%): [1036.959, 2191.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   319848.410 ±(99.9%) 118271.913 B/op [Average]
[info]   (min, avg, max) = (265225.733, 319848.410, 336683.989), stdev = 30714.840
[info]   CI (99.9%): [201576.497, 438120.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 39.55% complete, ETA 00:21:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 24012.356 ops/s
[info] # Warmup Iteration   2: 41472.894 ops/s
[info] # Warmup Iteration   3: 40873.982 ops/s
[info] # Warmup Iteration   4: 41594.265 ops/s
[info] # Warmup Iteration   5: 41103.465 ops/s
[info] Iteration   1: 41479.829 ops/s
[info]                  ·gc.alloc.rate:                   600.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24741.653 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41607.837 ops/s
[info]                  ·gc.alloc.rate:                   602.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24768.123 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41558.671 ops/s
[info]                  ·gc.alloc.rate:                   602.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24897.626 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41080.011 ops/s
[info]                  ·gc.alloc.rate:                   595.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.857 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12645.283 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41587.921 ops/s
[info]                  ·gc.alloc.rate:                   602.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.771 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25030.914 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   41462.854 ±(99.9%) 845.169 ops/s [Average]
[info]   (min, avg, max) = (41080.011, 41462.854, 41607.837), stdev = 219.488
[info]   CI (99.9%): [40617.685, 42308.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   600.759 ±(99.9%) 12.331 MB/sec [Average]
[info]   (min, avg, max) = (595.185, 600.759, 602.896), stdev = 3.202
[info]   CI (99.9%): [588.427, 613.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807.860 ±(99.9%) 0.426 B/op [Average]
[info]   (min, avg, max) = (22807.741, 22807.860, 22808.014), stdev = 0.111
[info]   CI (99.9%): [22807.434, 22808.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.738 ±(99.9%) 5.431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.738, 3.159), stdev = 1.410
[info]   CI (99.9%): [≈ 0, 7.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   591.054 ±(99.9%) 562.126 MB/sec [Average]
[info]   (min, avg, max) = (329.986, 591.054, 661.192), stdev = 145.982
[info]   CI (99.9%): [28.929, 1153.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   22416.720 ±(99.9%) 21038.430 B/op [Average]
[info]   (min, avg, max) = (12645.283, 22416.720, 25030.914), stdev = 5463.613
[info]   CI (99.9%): [1378.290, 43455.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 40.30% complete, ETA 00:21:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56915.276 ops/s
[info] # Warmup Iteration   2: 62485.638 ops/s
[info] # Warmup Iteration   3: 62701.572 ops/s
[info] # Warmup Iteration   4: 63395.871 ops/s
[info] # Warmup Iteration   5: 62623.897 ops/s
[info] Iteration   1: 62688.939 ops/s
[info]                  ·gc.alloc.rate:                   473.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16488.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 62886.101 ops/s
[info]                  ·gc.alloc.rate:                   474.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8201.377 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 62861.973 ops/s
[info]                  ·gc.alloc.rate:                   474.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8205.290 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 62692.735 ops/s
[info]                  ·gc.alloc.rate:                   473.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16454.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 61510.676 ops/s
[info]                  ·gc.alloc.rate:                   464.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8402.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   62528.085 ±(99.9%) 2218.519 ops/s [Average]
[info]   (min, avg, max) = (61510.676, 62528.085, 62886.101), stdev = 576.142
[info]   CI (99.9%): [60309.565, 64746.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   472.185 ±(99.9%) 16.812 MB/sec [Average]
[info]   (min, avg, max) = (464.483, 472.185, 474.918), stdev = 4.366
[info]   CI (99.9%): [455.373, 488.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.627 ±(99.9%) 4.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.627, 2.613), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 4.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.081 ±(99.9%) 691.843 MB/sec [Average]
[info]   (min, avg, max) = (327.639, 459.081, 656.576), stdev = 179.669
[info]   CI (99.9%): [≈ 0, 1150.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   11550.317 ±(99.9%) 17300.733 B/op [Average]
[info]   (min, avg, max) = (8201.377, 11550.317, 16488.254), stdev = 4492.945
[info]   CI (99.9%): [≈ 0, 28851.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 41.04% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68045.675 ops/s
[info] # Warmup Iteration   2: 74462.802 ops/s
[info] # Warmup Iteration   3: 74675.074 ops/s
[info] # Warmup Iteration   4: 74797.548 ops/s
[info] # Warmup Iteration   5: 74914.144 ops/s
[info] Iteration   1: 73899.265 ops/s
[info]                  ·gc.alloc.rate:      1.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 72298.735 ops/s
[info]                  ·gc.alloc.rate:      1.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 72945.478 ops/s
[info]                  ·gc.alloc.rate:      1.113 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74567.960 ops/s
[info]                  ·gc.alloc.rate:      1.137 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74837.965 ops/s
[info]                  ·gc.alloc.rate:      1.142 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   73709.881 ±(99.9%) 4138.495 ops/s [Average]
[info]   (min, avg, max) = (72298.735, 73709.881, 74837.965), stdev = 1074.754
[info]   CI (99.9%): [69571.386, 77848.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1.124 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (1.102, 1.124, 1.142), stdev = 0.016
[info]   CI (99.9%): [1.061, 1.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 41.79% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2775.084 ops/s
[info] # Warmup Iteration   2: 6166.604 ops/s
[info] # Warmup Iteration   3: 6276.693 ops/s
[info] # Warmup Iteration   4: 6304.601 ops/s
[info] # Warmup Iteration   5: 6315.186 ops/s
[info] Iteration   1: 6326.474 ops/s
[info]                  ·gc.alloc.rate:                   1860.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              462799.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 418154.478 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6316.661 ops/s
[info]                  ·gc.alloc.rate:                   1856.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              462800.304 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 505035.892 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 6321.950 ops/s
[info]                  ·gc.alloc.rate:                   1858.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              462800.725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 421652.240 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6258.639 ops/s
[info]                  ·gc.alloc.rate:                   1840.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              462800.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 511978.411 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 6292.920 ops/s
[info]                  ·gc.alloc.rate:                   1850.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              462800.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 424760.731 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   6303.329 ±(99.9%) 108.329 ops/s [Average]
[info]   (min, avg, max) = (6258.639, 6303.329, 6326.474), stdev = 28.133
[info]   CI (99.9%): [6195.000, 6411.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1853.235 ±(99.9%) 31.590 MB/sec [Average]
[info]   (min, avg, max) = (1840.112, 1853.235, 1860.110), stdev = 8.204
[info]   CI (99.9%): [1821.646, 1884.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   462800.128 ±(99.9%) 1.674 B/op [Average]
[info]   (min, avg, max) = (462799.536, 462800.128, 462800.725), stdev = 0.435
[info]   CI (99.9%): [462798.455, 462801.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   9.345 ±(99.9%) 32.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.345, 20.726), stdev = 8.508
[info]   CI (99.9%): [≈ 0, 42.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1826.880 ±(99.9%) 718.197 MB/sec [Average]
[info]   (min, avg, max) = (1680.670, 1826.880, 2035.647), stdev = 186.513
[info]   CI (99.9%): [1108.683, 2545.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   456316.350 ±(99.9%) 183921.614 B/op [Average]
[info]   (min, avg, max) = (418154.478, 456316.350, 511978.411), stdev = 47763.859
[info]   CI (99.9%): [272394.736, 640237.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 42.54% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4814017.884 ops/s
[info] # Warmup Iteration   2: 5491324.882 ops/s
[info] # Warmup Iteration   3: 5334761.801 ops/s
[info] # Warmup Iteration   4: 5405980.627 ops/s
[info] # Warmup Iteration   5: 5310998.362 ops/s
[info] Iteration   1: 5428433.238 ops/s
[info]                  ·gc.alloc.rate:                   1627.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 484.640 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5376739.402 ops/s
[info]                  ·gc.alloc.rate:                   1612.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 492.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5341769.465 ops/s
[info]                  ·gc.alloc.rate:                   1601.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 397.606 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5503735.572 ops/s
[info]                  ·gc.alloc.rate:                   1650.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 483.627 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5403700.248 ops/s
[info]                  ·gc.alloc.rate:                   1620.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.872 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   5410875.585 ±(99.9%) 235202.083 ops/s [Average]
[info]   (min, avg, max) = (5341769.465, 5410875.585, 5503735.572), stdev = 61081.234
[info]   CI (99.9%): [5175673.502, 5646077.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1622.654 ±(99.9%) 71.099 MB/sec [Average]
[info]   (min, avg, max) = (1601.601, 1622.654, 1650.708), stdev = 18.464
[info]   CI (99.9%): [1551.555, 1693.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.028, 0.037), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1617.806 ±(99.9%) 579.403 MB/sec [Average]
[info]   (min, avg, max) = (1349.167, 1617.806, 1695.753), stdev = 150.469
[info]   CI (99.9%): [1038.403, 2197.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   470.379 ±(99.9%) 157.602 B/op [Average]
[info]   (min, avg, max) = (397.606, 470.379, 493.872), stdev = 40.929
[info]   CI (99.9%): [312.777, 627.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 43.28% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130838.587 ops/s
[info] # Warmup Iteration   2: 363169.760 ops/s
[info] # Warmup Iteration   3: 373271.015 ops/s
[info] # Warmup Iteration   4: 361066.574 ops/s
[info] # Warmup Iteration   5: 374211.501 ops/s
[info] Iteration   1: 373051.962 ops/s
[info]                  ·gc.alloc.rate:                   2070.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8538.590 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 371742.203 ops/s
[info]                  ·gc.alloc.rate:                   2063.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8599.901 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 370214.667 ops/s
[info]                  ·gc.alloc.rate:                   2054.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8653.608 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 374878.390 ops/s
[info]                  ·gc.alloc.rate:                   2080.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8557.635 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 369324.885 ops/s
[info]                  ·gc.alloc.rate:                   2049.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              8736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2040.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8696.882 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   371842.421 ±(99.9%) 8540.645 ops/s [Average]
[info]   (min, avg, max) = (369324.885, 371842.421, 374878.390), stdev = 2217.978
[info]   CI (99.9%): [363301.777, 380383.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2063.589 ±(99.9%) 47.346 MB/sec [Average]
[info]   (min, avg, max) = (2049.596, 2063.589, 2080.340), stdev = 12.296
[info]   CI (99.9%): [2016.243, 2110.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8736.001, 8736.001, 8736.001), stdev = 0.001
[info]   CI (99.9%): [8736.001, 8736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.423 ±(99.9%) 0.375 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.423, 0.531), stdev = 0.098
[info]   CI (99.9%): [0.048, 0.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2033.598 ±(99.9%) 25.461 MB/sec [Average]
[info]   (min, avg, max) = (2023.513, 2033.598, 2040.418), stdev = 6.612
[info]   CI (99.9%): [2008.137, 2059.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8609.323 ±(99.9%) 253.903 B/op [Average]
[info]   (min, avg, max) = (8538.590, 8609.323, 8696.882), stdev = 65.938
[info]   CI (99.9%): [8355.420, 8863.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 44.03% complete, ETA 00:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3079860.577 ops/s
[info] # Warmup Iteration   2: 3488757.361 ops/s
[info] # Warmup Iteration   3: 3539348.986 ops/s
[info] # Warmup Iteration   4: 3540193.041 ops/s
[info] # Warmup Iteration   5: 3539914.713 ops/s
[info] Iteration   1: 3546783.263 ops/s
[info]                  ·gc.alloc.rate:                   576.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.416 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 3536142.158 ops/s
[info]                  ·gc.alloc.rate:                   575.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3534635.566 ops/s
[info]                  ·gc.alloc.rate:                   574.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 292.437 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3553636.805 ops/s
[info]                  ·gc.alloc.rate:                   577.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 291.480 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3540499.048 ops/s
[info]                  ·gc.alloc.rate:                   575.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146.430 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3542339.368 ±(99.9%) 30351.834 ops/s [Average]
[info]   (min, avg, max) = (3534635.566, 3542339.368, 3553636.805), stdev = 7882.275
[info]   CI (99.9%): [3511987.534, 3572691.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   576.032 ±(99.9%) 4.946 MB/sec [Average]
[info]   (min, avg, max) = (574.789, 576.032, 577.893), stdev = 1.284
[info]   CI (99.9%): [571.086, 580.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.046), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   525.426 ±(99.9%) 692.381 MB/sec [Average]
[info]   (min, avg, max) = (327.595, 525.426, 657.983), stdev = 179.809
[info]   CI (99.9%): [≈ 0, 1217.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   233.531 ±(99.9%) 307.959 B/op [Average]
[info]   (min, avg, max) = (145.416, 233.531, 292.437), stdev = 79.976
[info]   CI (99.9%): [≈ 0, 541.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 44.78% complete, ETA 00:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93696.037 ops/s
[info] # Warmup Iteration   2: 343971.462 ops/s
[info] # Warmup Iteration   3: 349712.435 ops/s
[info] # Warmup Iteration   4: 348411.704 ops/s
[info] # Warmup Iteration   5: 352611.076 ops/s
[info] Iteration   1: 351573.760 ops/s
[info]                  ·gc.alloc.rate:                   1366.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7458.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 352667.468 ops/s
[info]                  ·gc.alloc.rate:                   1371.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5984.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 352012.296 ops/s
[info]                  ·gc.alloc.rate:                   1368.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6022.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 347495.775 ops/s
[info]                  ·gc.alloc.rate:                   1351.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6115.544 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 352344.599 ops/s
[info]                  ·gc.alloc.rate:                   1369.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6046.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   351218.780 ±(99.9%) 8164.503 ops/s [Average]
[info]   (min, avg, max) = (347495.775, 351218.780, 352667.468), stdev = 2120.295
[info]   CI (99.9%): [343054.277, 359383.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1365.468 ±(99.9%) 31.080 MB/sec [Average]
[info]   (min, avg, max) = (1351.306, 1365.468, 1371.083), stdev = 8.071
[info]   CI (99.9%): [1334.389, 1396.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.429 ±(99.9%) 0.539 B/op [Average]
[info]   (min, avg, max) = (0.279, 0.429, 0.558), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1411.318 ±(99.9%) 548.232 MB/sec [Average]
[info]   (min, avg, max) = (1340.678, 1411.318, 1665.867), stdev = 142.374
[info]   CI (99.9%): [863.086, 1959.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6325.421 ±(99.9%) 2446.938 B/op [Average]
[info]   (min, avg, max) = (5984.286, 6325.421, 7458.946), stdev = 635.462
[info]   CI (99.9%): [3878.482, 8772.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 45.52% complete, ETA 00:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13766.406 ops/s
[info] # Warmup Iteration   2: 16957.459 ops/s
[info] # Warmup Iteration   3: 17050.089 ops/s
[info] # Warmup Iteration   4: 17140.227 ops/s
[info] # Warmup Iteration   5: 17073.917 ops/s
[info] Iteration   1: 17306.722 ops/s
[info]                  ·gc.alloc.rate:                   2152.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 183606.809 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16992.083 ops/s
[info]                  ·gc.alloc.rate:                   2113.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 219221.911 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17144.407 ops/s
[info]                  ·gc.alloc.rate:                   2131.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186736.900 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 17205.024 ops/s
[info]                  ·gc.alloc.rate:                   2140.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186420.958 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 17129.274 ops/s
[info]                  ·gc.alloc.rate:                   2129.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187309.102 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   17155.502 ±(99.9%) 442.559 ops/s [Average]
[info]   (min, avg, max) = (16992.083, 17155.502, 17306.722), stdev = 114.931
[info]   CI (99.9%): [16712.943, 17598.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2133.507 ±(99.9%) 54.635 MB/sec [Average]
[info]   (min, avg, max) = (2113.532, 2133.507, 2152.173), stdev = 14.189
[info]   CI (99.9%): [2078.872, 2188.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195751.837 ±(99.9%) 1.614 B/op [Average]
[info]   (min, avg, max) = (195751.087, 195751.837, 195752.026), stdev = 0.419
[info]   CI (99.9%): [195750.223, 195753.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.497 ±(99.9%) 8.476 B/op [Average]
[info]   (min, avg, max) = (3.822, 6.497, 9.639), stdev = 2.201
[info]   CI (99.9%): [≈ 0, 14.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2099.073 ±(99.9%) 577.435 MB/sec [Average]
[info]   (min, avg, max) = (2018.644, 2099.073, 2366.947), stdev = 149.958
[info]   CI (99.9%): [1521.638, 2676.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   192659.136 ±(99.9%) 57442.271 B/op [Average]
[info]   (min, avg, max) = (183606.809, 192659.136, 219221.911), stdev = 14917.575
[info]   CI (99.9%): [135216.865, 250101.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 46.27% complete, ETA 00:18:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28126.117 ops/s
[info] # Warmup Iteration   2: 38281.021 ops/s
[info] # Warmup Iteration   3: 39443.175 ops/s
[info] # Warmup Iteration   4: 39484.978 ops/s
[info] # Warmup Iteration   5: 39512.592 ops/s
[info] Iteration   1: 39454.285 ops/s
[info]                  ·gc.alloc.rate:                   283.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10203.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38272.686 ops/s
[info]                  ·gc.alloc.rate:                                  274.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11304.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.379 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         4.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    168.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     155.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                6381.367 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        38.000 ms
[info] Iteration   3: 39561.084 ops/s
[info]                  ·gc.alloc.rate:                   284.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12866.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39477.771 ops/s
[info]                  ·gc.alloc.rate:                   283.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12852.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38646.601 ops/s
[info]                  ·gc.alloc.rate:                   277.496 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13128.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   39082.485 ±(99.9%) 2252.967 ops/s [Average]
[info]   (min, avg, max) = (38272.686, 39082.485, 39561.084), stdev = 585.088
[info]   CI (99.9%): [36829.518, 41335.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   280.645 ±(99.9%) 16.182 MB/sec [Average]
[info]   (min, avg, max) = (274.845, 280.645, 284.112), stdev = 4.202
[info]   CI (99.9%): [264.463, 296.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11304.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (11304.010, 11304.011, 11304.011), stdev = 0.001
[info]   CI (99.9%): [11304.008, 11304.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.276 ±(99.9%) 2.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.276, 1.379), stdev = 0.617
[info]   CI (99.9%): [≈ 0, 2.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.826 ±(99.9%) 7.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.826, 4.090), stdev = 1.824
[info]   CI (99.9%): [≈ 0, 7.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   33.975 ±(99.9%) 288.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.975, 168.215), stdev = 75.044
[info]   CI (99.9%): [≈ 0, 322.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   275.770 ±(99.9%) 282.642 MB/sec [Average]
[info]   (min, avg, max) = (155.156, 275.770, 323.380), stdev = 73.401
[info]   CI (99.9%): [≈ 0, 558.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   11086.456 ±(99.9%) 11123.127 B/op [Average]
[info]   (min, avg, max) = (6381.367, 11086.456, 13128.561), stdev = 2888.641
[info]   CI (99.9%): [≈ 0, 22209.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.800, 38.000), stdev = 16.346
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 47.01% complete, ETA 00:18:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85439.678 ops/s
[info] # Warmup Iteration   2: 90823.480 ops/s
[info] # Warmup Iteration   3: 91054.424 ops/s
[info] # Warmup Iteration   4: 91382.692 ops/s
[info] # Warmup Iteration   5: 91883.635 ops/s
[info] Iteration   1: 91434.117 ops/s
[info]                  ·gc.alloc.rate:                   478.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11305.958 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 91622.794 ops/s
[info]                  ·gc.alloc.rate:                   479.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.341 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5641.320 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 88062.560 ops/s
[info]                  ·gc.alloc.rate:                   461.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11737.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 91592.808 ops/s
[info]                  ·gc.alloc.rate:                   479.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5642.798 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 91436.200 ops/s
[info]                  ·gc.alloc.rate:                   478.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5658.032 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   90829.696 ±(99.9%) 5965.875 ops/s [Average]
[info]   (min, avg, max) = (88062.560, 90829.696, 91622.794), stdev = 1549.319
[info]   CI (99.9%): [84863.821, 96795.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   475.471 ±(99.9%) 31.137 MB/sec [Average]
[info]   (min, avg, max) = (461.032, 475.471, 479.592), stdev = 8.086
[info]   CI (99.9%): [444.334, 506.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.004, 8240.005, 8240.005), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.584 ±(99.9%) 2.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.584, 1.488), stdev = 0.669
[info]   CI (99.9%): [≈ 0, 3.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.745 ±(99.9%) 692.205 MB/sec [Average]
[info]   (min, avg, max) = (328.341, 459.745, 656.725), stdev = 179.763
[info]   CI (99.9%): [≈ 0, 1151.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   7997.144 ±(99.9%) 12403.567 B/op [Average]
[info]   (min, avg, max) = (5641.320, 7997.144, 11737.613), stdev = 3221.167
[info]   CI (99.9%): [≈ 0, 20400.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 47.76% complete, ETA 00:18:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4922.793 ops/s
[info] # Warmup Iteration   2: 8409.058 ops/s
[info] # Warmup Iteration   3: 8708.001 ops/s
[info] # Warmup Iteration   4: 8778.348 ops/s
[info] # Warmup Iteration   5: 8756.598 ops/s
[info] Iteration   1: 8723.984 ops/s
[info]                  ·gc.alloc.rate:                   3090.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              557680.816 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551205.376 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8716.384 ops/s
[info]                  ·gc.alloc.rate:                   3082.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.928 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552432.848 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8777.122 ops/s
[info]                  ·gc.alloc.rate:                   3102.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              556472.316 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 549310.972 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8813.780 ops/s
[info]                  ·gc.alloc.rate:                   3115.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 547005.561 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8761.558 ops/s
[info]                  ·gc.alloc.rate:                   3096.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550251.144 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   8758.566 ±(99.9%) 153.750 ops/s [Average]
[info]   (min, avg, max) = (8716.384, 8758.566, 8813.780), stdev = 39.928
[info]   CI (99.9%): [8604.816, 8912.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3097.554 ±(99.9%) 48.677 MB/sec [Average]
[info]   (min, avg, max) = (3082.213, 3097.554, 3115.575), stdev = 12.641
[info]   CI (99.9%): [3048.877, 3146.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   556704.254 ±(99.9%) 2102.297 B/op [Average]
[info]   (min, avg, max) = (556456.046, 556704.254, 557680.816), stdev = 545.960
[info]   CI (99.9%): [554601.957, 558806.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   16.465 ±(99.9%) 13.104 B/op [Average]
[info]   (min, avg, max) = (14.868, 16.465, 22.552), stdev = 3.403
[info]   CI (99.9%): [3.361, 29.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   3060.445 ±(99.9%) 13.662 MB/sec [Average]
[info]   (min, avg, max) = (3054.455, 3060.445, 3062.784), stdev = 3.548
[info]   CI (99.9%): [3046.783, 3074.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   550041.180 ±(99.9%) 7907.356 B/op [Average]
[info]   (min, avg, max) = (547005.561, 550041.180, 552432.848), stdev = 2053.515
[info]   CI (99.9%): [542133.824, 557948.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 48.51% complete, ETA 00:18:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19094.578 ops/s
[info] # Warmup Iteration   2: 21993.009 ops/s
[info] # Warmup Iteration   3: 22647.110 ops/s
[info] # Warmup Iteration   4: 27700.906 ops/s
[info] # Warmup Iteration   5: 26416.571 ops/s
[info] Iteration   1: 23730.930 ops/s
[info]                  ·gc.alloc.rate:                   1279.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87731.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23597.511 ops/s
[info]                  ·gc.alloc.rate:                   1272.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88758.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23692.674 ops/s
[info]                  ·gc.alloc.rate:                   1277.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88885.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23567.046 ops/s
[info]                  ·gc.alloc.rate:                   1270.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89772.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23722.192 ops/s
[info]                  ·gc.alloc.rate:                   1278.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89535.760 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   23662.071 ±(99.9%) 288.736 ops/s [Average]
[info]   (min, avg, max) = (23567.046, 23662.071, 23730.930), stdev = 74.984
[info]   CI (99.9%): [23373.335, 23950.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1275.443 ±(99.9%) 15.518 MB/sec [Average]
[info]   (min, avg, max) = (1270.180, 1275.443, 1279.070), stdev = 4.030
[info]   CI (99.9%): [1259.925, 1290.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84856.018 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (84856.017, 84856.018, 84856.019), stdev = 0.001
[info]   CI (99.9%): [84856.015, 84856.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.090 ±(99.9%) 6.048 B/op [Average]
[info]   (min, avg, max) = (4.171, 6.090, 8.286), stdev = 1.571
[info]   CI (99.9%): [0.042, 12.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1336.763 ±(99.9%) 40.761 MB/sec [Average]
[info]   (min, avg, max) = (1322.406, 1336.763, 1349.203), stdev = 10.586
[info]   CI (99.9%): [1296.002, 1377.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88936.669 ±(99.9%) 3071.667 B/op [Average]
[info]   (min, avg, max) = (87731.050, 88936.669, 89772.448), stdev = 797.702
[info]   CI (99.9%): [85865.002, 92008.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 49.25% complete, ETA 00:17:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74151.766 ops/s
[info] # Warmup Iteration   2: 99815.414 ops/s
[info] # Warmup Iteration   3: 97909.264 ops/s
[info] # Warmup Iteration   4: 101412.283 ops/s
[info] # Warmup Iteration   5: 100853.517 ops/s
[info] Iteration   1: 101551.728 ops/s
[info]                  ·gc.alloc.rate:                   818.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10024.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 99001.867 ops/s
[info]                  ·gc.alloc.rate:                   798.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15476.922 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 101427.649 ops/s
[info]                  ·gc.alloc.rate:                   817.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.322 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10140.107 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101085.658 ops/s
[info]                  ·gc.alloc.rate:                   815.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.336 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15344.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 101373.599 ops/s
[info]                  ·gc.alloc.rate:                   817.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.311 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10247.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   100888.100 ±(99.9%) 4113.223 ops/s [Average]
[info]   (min, avg, max) = (99001.867, 100888.100, 101551.728), stdev = 1068.191
[info]   CI (99.9%): [96774.877, 105001.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   813.449 ±(99.9%) 33.066 MB/sec [Average]
[info]   (min, avg, max) = (798.274, 813.449, 818.737), stdev = 8.587
[info]   CI (99.9%): [780.383, 846.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12692.322 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (12692.311, 12692.322, 12692.336), stdev = 0.011
[info]   CI (99.9%): [12692.281, 12692.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.108 ±(99.9%) 2.637 B/op [Average]
[info]   (min, avg, max) = (0.323, 1.108, 1.986), stdev = 0.685
[info]   CI (99.9%): [≈ 0, 3.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   783.737 ±(99.9%) 688.265 MB/sec [Average]
[info]   (min, avg, max) = (646.645, 783.737, 985.421), stdev = 178.740
[info]   CI (99.9%): [95.473, 1472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   12246.561 ±(99.9%) 11127.639 B/op [Average]
[info]   (min, avg, max) = (10024.489, 12246.561, 15476.922), stdev = 2889.812
[info]   CI (99.9%): [1118.923, 23374.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 50.00% complete, ETA 00:17:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113862.773 ops/s
[info] # Warmup Iteration   2: 117876.345 ops/s
[info] # Warmup Iteration   3: 119289.242 ops/s
[info] # Warmup Iteration   4: 120160.942 ops/s
[info] # Warmup Iteration   5: 118703.558 ops/s
[info] Iteration   1: 119239.512 ops/s
[info]                  ·gc.alloc.rate:                   507.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4334.412 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 118821.192 ops/s
[info]                  ·gc.alloc.rate:                   506.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8700.118 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119296.224 ops/s
[info]                  ·gc.alloc.rate:                   508.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4332.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 119177.487 ops/s
[info]                  ·gc.alloc.rate:                   507.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8677.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 118031.151 ops/s
[info]                  ·gc.alloc.rate:                   502.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4383.389 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   118913.113 ±(99.9%) 2028.005 ops/s [Average]
[info]   (min, avg, max) = (118031.151, 118913.113, 119296.224), stdev = 526.667
[info]   CI (99.9%): [116885.108, 120941.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   506.422 ±(99.9%) 8.612 MB/sec [Average]
[info]   (min, avg, max) = (502.633, 506.422, 508.032), stdev = 2.236
[info]   CI (99.9%): [497.810, 515.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6704.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.003, 6704.003, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.495 ±(99.9%) 2.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.495, 1.103), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 2.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   459.806 ±(99.9%) 692.821 MB/sec [Average]
[info]   (min, avg, max) = (328.280, 459.806, 656.932), stdev = 179.924
[info]   CI (99.9%): [≈ 0, 1152.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   6085.526 ±(99.9%) 9151.193 B/op [Average]
[info]   (min, avg, max) = (4332.269, 6085.526, 8700.118), stdev = 2376.536
[info]   CI (99.9%): [≈ 0, 15236.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 50.75% complete, ETA 00:17:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 145997.661 ops/s
[info] # Warmup Iteration   2: 153938.781 ops/s
[info] # Warmup Iteration   3: 153919.405 ops/s
[info] # Warmup Iteration   4: 153366.356 ops/s
[info] # Warmup Iteration   5: 153382.819 ops/s
[info] Iteration   1: 153718.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 153575.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 153876.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 153267.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 153696.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   153626.726 ±(99.9%) 877.156 ops/s [Average]
[info]   (min, avg, max) = (153267.068, 153626.726, 153876.569), stdev = 227.795
[info]   CI (99.9%): [152749.570, 154503.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 51.49% complete, ETA 00:17:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2895.145 ops/s
[info] # Warmup Iteration   2: 4089.699 ops/s
[info] # Warmup Iteration   3: 4206.280 ops/s
[info] # Warmup Iteration   4: 4212.098 ops/s
[info] # Warmup Iteration   5: 4217.076 ops/s
[info] Iteration   1: 4234.540 ops/s
[info]                  ·gc.alloc.rate:                   1821.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 619219.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4212.899 ops/s
[info]                  ·gc.alloc.rate:                   1811.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752217.667 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4228.550 ops/s
[info]                  ·gc.alloc.rate:                   1819.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.652 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627658.258 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4203.135 ops/s
[info]                  ·gc.alloc.rate:                   1808.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633135.425 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4200.084 ops/s
[info]                  ·gc.alloc.rate:                   1806.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 762101.643 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   4215.842 ±(99.9%) 58.700 ops/s [Average]
[info]   (min, avg, max) = (4200.084, 4215.842, 4234.540), stdev = 15.244
[info]   CI (99.9%): [4157.142, 4274.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1813.590 ±(99.9%) 25.193 MB/sec [Average]
[info]   (min, avg, max) = (1806.868, 1813.590, 1821.573), stdev = 6.542
[info]   CI (99.9%): [1788.397, 1838.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   677212.393 ±(99.9%) 1.084 B/op [Average]
[info]   (min, avg, max) = (677212.134, 677212.393, 677212.741), stdev = 0.281
[info]   CI (99.9%): [677211.309, 677213.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   10.879 ±(99.9%) 50.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.879, 31.104), stdev = 13.005
[info]   CI (99.9%): [≈ 0, 60.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1817.665 ±(99.9%) 723.309 MB/sec [Average]
[info]   (min, avg, max) = (1665.583, 1817.665, 2033.360), stdev = 187.841
[info]   CI (99.9%): [1094.356, 2540.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   678866.454 ±(99.9%) 276200.766 B/op [Average]
[info]   (min, avg, max) = (619219.279, 678866.454, 762101.643), stdev = 71728.462
[info]   CI (99.9%): [402665.688, 955067.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 52.24% complete, ETA 00:16:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 509008.288 ops/s
[info] # Warmup Iteration   2: 707536.113 ops/s
[info] # Warmup Iteration   3: 713391.694 ops/s
[info] # Warmup Iteration   4: 719504.634 ops/s
[info] # Warmup Iteration   5: 708298.216 ops/s
[info] Iteration   1: 717879.169 ops/s
[info]                  ·gc.alloc.rate:                   2586.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5189.358 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 712241.906 ops/s
[info]                  ·gc.alloc.rate:                   2566.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5997.789 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 715274.412 ops/s
[info]                  ·gc.alloc.rate:                   2577.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5232.649 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 707465.721 ops/s
[info]                  ·gc.alloc.rate:                   2548.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6058.058 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 714260.823 ops/s
[info]                  ·gc.alloc.rate:                   2573.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6000.049 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   713424.406 ±(99.9%) 15021.368 ops/s [Average]
[info]   (min, avg, max) = (707465.721, 713424.406, 717879.169), stdev = 3901.002
[info]   CI (99.9%): [698403.038, 728445.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2570.494 ±(99.9%) 53.900 MB/sec [Average]
[info]   (min, avg, max) = (2548.790, 2570.494, 2586.162), stdev = 13.998
[info]   CI (99.9%): [2516.594, 2624.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5672.001, 5672.001, 5672.001), stdev = 0.001
[info]   CI (99.9%): [5672.000, 5672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.239 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.239, 0.324), stdev = 0.052
[info]   CI (99.9%): [0.040, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2580.504 ±(99.9%) 733.566 MB/sec [Average]
[info]   (min, avg, max) = (2366.100, 2580.504, 2722.270), stdev = 190.505
[info]   CI (99.9%): [1846.938, 3314.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5695.580 ±(99.9%) 1706.912 B/op [Average]
[info]   (min, avg, max) = (5189.358, 5695.580, 6058.058), stdev = 443.280
[info]   CI (99.9%): [3988.669, 7402.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 52.99% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281112.467 ops/s
[info] # Warmup Iteration   2: 628245.892 ops/s
[info] # Warmup Iteration   3: 651819.363 ops/s
[info] # Warmup Iteration   4: 652026.736 ops/s
[info] # Warmup Iteration   5: 648871.814 ops/s
[info] Iteration   1: 648957.337 ops/s
[info]                  ·gc.alloc.rate:                   755.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1587.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 649353.451 ops/s
[info]                  ·gc.alloc.rate:                   755.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2393.165 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 634497.960 ops/s
[info]                  ·gc.alloc.rate:                   738.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1640.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 649668.623 ops/s
[info]                  ·gc.alloc.rate:                   756.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1608.921 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 647018.657 ops/s
[info]                  ·gc.alloc.rate:                   753.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1621.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   645899.206 ±(99.9%) 24860.824 ops/s [Average]
[info]   (min, avg, max) = (634497.960, 645899.206, 649668.623), stdev = 6456.277
[info]   CI (99.9%): [621038.382, 670760.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   751.733 ±(99.9%) 29.117 MB/sec [Average]
[info]   (min, avg, max) = (738.361, 751.733, 756.028), stdev = 7.561
[info]   CI (99.9%): [722.617, 780.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.122 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.252), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   726.753 ±(99.9%) 561.490 MB/sec [Average]
[info]   (min, avg, max) = (654.563, 726.753, 987.477), stdev = 145.817
[info]   CI (99.9%): [165.263, 1288.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1770.375 ±(99.9%) 1342.631 B/op [Average]
[info]   (min, avg, max) = (1587.956, 1770.375, 2393.165), stdev = 348.677
[info]   CI (99.9%): [427.744, 3113.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 53.73% complete, ETA 00:16:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3420628.138 ops/s
[info] # Warmup Iteration   2: 3844678.141 ops/s
[info] # Warmup Iteration   3: 3942217.094 ops/s
[info] # Warmup Iteration   4: 3929752.017 ops/s
[info] # Warmup Iteration   5: 3923295.049 ops/s
[info] Iteration   1: 3911495.007 ops/s
[info]                  ·gc.alloc.rate:                   1630.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.532 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 672.612 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3925779.309 ops/s
[info]                  ·gc.alloc.rate:                   1635.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 674.014 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3942275.313 ops/s
[info]                  ·gc.alloc.rate:                   1642.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 673.614 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3937455.448 ops/s
[info]                  ·gc.alloc.rate:                   1641.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 676.568 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3920281.388 ops/s
[info]                  ·gc.alloc.rate:                   1633.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1356.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 544.569 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   3927457.293 ±(99.9%) 48273.033 ops/s [Average]
[info]   (min, avg, max) = (3911495.007, 3927457.293, 3942275.313), stdev = 12536.353
[info]   CI (99.9%): [3879184.260, 3975730.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1636.713 ±(99.9%) 19.946 MB/sec [Average]
[info]   (min, avg, max) = (1630.250, 1636.713, 1642.724), stdev = 5.180
[info]   CI (99.9%): [1616.766, 1656.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.045, 0.067), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1617.570 ±(99.9%) 563.704 MB/sec [Average]
[info]   (min, avg, max) = (1356.064, 1617.570, 1692.510), stdev = 146.392
[info]   CI (99.9%): [1053.866, 2181.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   648.275 ±(99.9%) 223.306 B/op [Average]
[info]   (min, avg, max) = (544.569, 648.275, 676.568), stdev = 57.992
[info]   CI (99.9%): [424.970, 871.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 54.48% complete, ETA 00:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60860.035 ops/s
[info] # Warmup Iteration   2: 239077.383 ops/s
[info] # Warmup Iteration   3: 245199.371 ops/s
[info] # Warmup Iteration   4: 243838.660 ops/s
[info] # Warmup Iteration   5: 248414.064 ops/s
[info] Iteration   1: 248518.408 ops/s
[info]                  ·gc.alloc.rate:                   1732.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10626.533 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 247204.113 ops/s
[info]                  ·gc.alloc.rate:                   1723.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10733.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 245192.658 ops/s
[info]                  ·gc.alloc.rate:                   1709.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10857.998 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 248074.932 ops/s
[info]                  ·gc.alloc.rate:                   1729.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10753.531 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 248287.849 ops/s
[info]                  ·gc.alloc.rate:                   1731.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10766.708 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   247455.592 ±(99.9%) 5233.875 ops/s [Average]
[info]   (min, avg, max) = (245192.658, 247455.592, 248518.408), stdev = 1359.221
[info]   CI (99.9%): [242221.717, 252689.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1725.420 ±(99.9%) 36.625 MB/sec [Average]
[info]   (min, avg, max) = (1709.454, 1725.420, 1732.596), stdev = 9.511
[info]   CI (99.9%): [1688.795, 1762.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10976.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10976.002, 10976.002, 10976.002), stdev = 0.001
[info]   CI (99.9%): [10976.001, 10976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.530 ±(99.9%) 0.818 B/op [Average]
[info]   (min, avg, max) = (0.264, 0.530, 0.802), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 1.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1689.477 ±(99.9%) 31.358 MB/sec [Average]
[info]   (min, avg, max) = (1677.432, 1689.477, 1698.231), stdev = 8.144
[info]   CI (99.9%): [1658.118, 1720.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10747.638 ±(99.9%) 318.966 B/op [Average]
[info]   (min, avg, max) = (10626.533, 10747.638, 10857.998), stdev = 82.834
[info]   CI (99.9%): [10428.673, 11066.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 55.22% complete, ETA 00:15:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591331.928 ops/s
[info] # Warmup Iteration   2: 877768.505 ops/s
[info] # Warmup Iteration   3: 887824.157 ops/s
[info] # Warmup Iteration   4: 900229.434 ops/s
[info] # Warmup Iteration   5: 890871.230 ops/s
[info] Iteration   1: 896622.779 ops/s
[info]                  ·gc.alloc.rate:                   2059.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3535.819 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 897730.256 ops/s
[info]                  ·gc.alloc.rate:                   2062.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3551.470 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 894266.227 ops/s
[info]                  ·gc.alloc.rate:                   2054.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3576.805 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 892670.969 ops/s
[info]                  ·gc.alloc.rate:                   2050.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3591.343 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 891525.532 ops/s
[info]                  ·gc.alloc.rate:                   2047.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3598.331 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   894563.153 ±(99.9%) 10035.391 ops/s [Average]
[info]   (min, avg, max) = (891525.532, 894563.153, 897730.256), stdev = 2606.159
[info]   CI (99.9%): [884527.761, 904598.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2054.717 ±(99.9%) 23.056 MB/sec [Average]
[info]   (min, avg, max) = (2047.712, 2054.717, 2062.137), stdev = 5.987
[info]   CI (99.9%): [2031.662, 2077.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.000), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.183 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.146, 0.183, 0.220), stdev = 0.036
[info]   CI (99.9%): [0.043, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2028.974 ±(99.9%) 38.020 MB/sec [Average]
[info]   (min, avg, max) = (2013.596, 2028.974, 2037.706), stdev = 9.874
[info]   CI (99.9%): [1990.955, 2066.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3570.754 ±(99.9%) 102.122 B/op [Average]
[info]   (min, avg, max) = (3535.819, 3570.754, 3598.331), stdev = 26.521
[info]   CI (99.9%): [3468.632, 3672.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 55.97% complete, ETA 00:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 848971.925 ops/s
[info] # Warmup Iteration   2: 1848501.221 ops/s
[info] # Warmup Iteration   3: 1870503.953 ops/s
[info] # Warmup Iteration   4: 1851318.031 ops/s
[info] # Warmup Iteration   5: 1872447.373 ops/s
[info] Iteration   1: 1866563.437 ops/s
[info]                  ·gc.alloc.rate:                   1261.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1121.669 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1867535.027 ops/s
[info]                  ·gc.alloc.rate:                   1262.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 844.552 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1855888.938 ops/s
[info]                  ·gc.alloc.rate:                   1254.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1138.791 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1856881.142 ops/s
[info]                  ·gc.alloc.rate:                   1255.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1142.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1856900.245 ops/s
[info]                  ·gc.alloc.rate:                   1255.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1146.145 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   1860753.758 ±(99.9%) 22224.853 ops/s [Average]
[info]   (min, avg, max) = (1855888.938, 1860753.758, 1867535.027), stdev = 5771.724
[info]   CI (99.9%): [1838528.905, 1882978.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1257.705 ±(99.9%) 14.688 MB/sec [Average]
[info]   (min, avg, max) = (1254.322, 1257.705, 1262.224), stdev = 3.814
[info]   CI (99.9%): [1243.017, 1272.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (0.071, 0.092, 0.105), stdev = 0.014
[info]   CI (99.9%): [0.036, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1274.762 ±(99.9%) 588.240 MB/sec [Average]
[info]   (min, avg, max) = (1001.893, 1274.762, 1352.035), stdev = 152.764
[info]   CI (99.9%): [686.522, 1863.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1078.656 ±(99.9%) 505.204 B/op [Average]
[info]   (min, avg, max) = (844.552, 1078.656, 1146.145), stdev = 131.200
[info]   CI (99.9%): [573.452, 1583.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 56.72% complete, ETA 00:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5985740.434 ops/s
[info] # Warmup Iteration   2: 6628395.608 ops/s
[info] # Warmup Iteration   3: 6955440.388 ops/s
[info] # Warmup Iteration   4: 6944839.777 ops/s
[info] # Warmup Iteration   5: 6928741.031 ops/s
[info] Iteration   1: 6913720.837 ops/s
[info]                  ·gc.alloc.rate:                   772.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 224.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6922770.376 ops/s
[info]                  ·gc.alloc.rate:                   774.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6941460.218 ops/s
[info]                  ·gc.alloc.rate:                   776.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6943800.258 ops/s
[info]                  ·gc.alloc.rate:                   776.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.108 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6923509.568 ops/s
[info]                  ·gc.alloc.rate:                   774.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150.976 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   6929052.252 ±(99.9%) 50084.168 ops/s [Average]
[info]   (min, avg, max) = (6913720.837, 6929052.252, 6943800.258), stdev = 13006.699
[info]   CI (99.9%): [6878968.083, 6979136.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   774.739 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (772.886, 774.739, 776.337), stdev = 1.462
[info]   CI (99.9%): [769.107, 780.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.015, 0.024), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   792.019 ±(99.9%) 692.785 MB/sec [Average]
[info]   (min, avg, max) = (658.250, 792.019, 992.952), stdev = 179.914
[info]   CI (99.9%): [99.234, 1484.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   179.930 ±(99.9%) 157.481 B/op [Average]
[info]   (min, avg, max) = (149.593, 179.930, 225.108), stdev = 40.897
[info]   CI (99.9%): [22.450, 337.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 57.46% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175831.074 ops/s
[info] # Warmup Iteration   2: 528239.881 ops/s
[info] # Warmup Iteration   3: 529081.388 ops/s
[info] # Warmup Iteration   4: 534832.161 ops/s
[info] # Warmup Iteration   5: 532391.162 ops/s
[info] Iteration   1: 532352.970 ops/s
[info]                  ·gc.alloc.rate:                   1836.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4970.338 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 531429.767 ops/s
[info]                  ·gc.alloc.rate:                   1833.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5998.412 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 535899.943 ops/s
[info]                  ·gc.alloc.rate:                   1849.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4975.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 529299.704 ops/s
[info]                  ·gc.alloc.rate:                   1826.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6054.493 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 529764.314 ops/s
[info]                  ·gc.alloc.rate:                   1828.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5046.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   531749.340 ±(99.9%) 10121.234 ops/s [Average]
[info]   (min, avg, max) = (529299.704, 531749.340, 535899.943), stdev = 2628.452
[info]   CI (99.9%): [521628.106, 541870.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1835.004 ±(99.9%) 34.457 MB/sec [Average]
[info]   (min, avg, max) = (1826.962, 1835.004, 1849.213), stdev = 8.948
[info]   CI (99.9%): [1800.547, 1869.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.166), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.320 ±(99.9%) 0.391 B/op [Average]
[info]   (min, avg, max) = (0.245, 0.320, 0.493), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1826.818 ±(99.9%) 717.280 MB/sec [Average]
[info]   (min, avg, max) = (1680.828, 1826.818, 2036.326), stdev = 186.275
[info]   CI (99.9%): [1109.538, 2544.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5408.896 ±(99.9%) 2175.208 B/op [Average]
[info]   (min, avg, max) = (4970.338, 5408.896, 6054.493), stdev = 564.895
[info]   CI (99.9%): [3233.688, 7584.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 58.21% complete, ETA 00:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424811.674 ops/s
[info] # Warmup Iteration   2: 682071.394 ops/s
[info] # Warmup Iteration   3: 692091.622 ops/s
[info] # Warmup Iteration   4: 693697.661 ops/s
[info] # Warmup Iteration   5: 687231.075 ops/s
[info] Iteration   1: 693196.586 ops/s
[info]                  ·gc.alloc.rate:                   2402.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2698.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6126.522 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 690085.696 ops/s
[info]                  ·gc.alloc.rate:                   2391.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5408.665 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 682427.694 ops/s
[info]                  ·gc.alloc.rate:                   2365.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5483.001 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   4: 685491.215 ops/s
[info]                  ·gc.alloc.rate:                   2375.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5463.158 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 691523.035 ops/s
[info]                  ·gc.alloc.rate:                   2396.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5422.707 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   688544.845 ±(99.9%) 17180.381 ops/s [Average]
[info]   (min, avg, max) = (682427.694, 688544.845, 693196.586), stdev = 4461.690
[info]   CI (99.9%): [671364.464, 705725.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2386.375 ±(99.9%) 59.641 MB/sec [Average]
[info]   (min, avg, max) = (2365.172, 2386.375, 2402.757), stdev = 15.489
[info]   CI (99.9%): [2326.734, 2446.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.112, 0.229), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.258 ±(99.9%) 0.624 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.258, 0.528), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2441.323 ±(99.9%) 552.850 MB/sec [Average]
[info]   (min, avg, max) = (2370.657, 2441.323, 2698.047), stdev = 143.573
[info]   CI (99.9%): [1888.473, 2994.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5580.811 ±(99.9%) 1180.336 B/op [Average]
[info]   (min, avg, max) = (5408.665, 5580.811, 6126.522), stdev = 306.529
[info]   CI (99.9%): [4400.475, 6761.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 17.000), stdev = 4.658
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 58.96% complete, ETA 00:14:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4805992.251 ops/s
[info] # Warmup Iteration   2: 5417597.146 ops/s
[info] # Warmup Iteration   3: 5585650.197 ops/s
[info] # Warmup Iteration   4: 5596201.337 ops/s
[info] # Warmup Iteration   5: 5597725.176 ops/s
[info] Iteration   1: 5593840.670 ops/s
[info]                  ·gc.alloc.rate:                   1392.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 467.866 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5607365.320 ops/s
[info]                  ·gc.alloc.rate:                   1396.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 375.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5605193.479 ops/s
[info]                  ·gc.alloc.rate:                   1395.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.354 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5595093.941 ops/s
[info]                  ·gc.alloc.rate:                   1393.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 379.429 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5502889.151 ops/s
[info]                  ·gc.alloc.rate:                   1370.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 386.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   5580876.512 ±(99.9%) 169441.513 ops/s [Average]
[info]   (min, avg, max) = (5502889.151, 5580876.512, 5607365.320), stdev = 44003.423
[info]   CI (99.9%): [5411434.999, 5750318.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1389.844 ±(99.9%) 42.418 MB/sec [Average]
[info]   (min, avg, max) = (1370.357, 1389.844, 1396.772), stdev = 11.016
[info]   CI (99.9%): [1347.426, 1432.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.028, 0.041), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1409.036 ±(99.9%) 545.637 MB/sec [Average]
[info]   (min, avg, max) = (1338.420, 1409.036, 1662.350), stdev = 141.700
[info]   CI (99.9%): [863.399, 1954.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   397.402 ±(99.9%) 152.552 B/op [Average]
[info]   (min, avg, max) = (375.624, 397.402, 467.866), stdev = 39.617
[info]   CI (99.9%): [244.849, 549.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 59.70% complete, ETA 00:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127990.554 ops/s
[info] # Warmup Iteration   2: 401393.063 ops/s
[info] # Warmup Iteration   3: 400133.137 ops/s
[info] # Warmup Iteration   4: 403873.329 ops/s
[info] # Warmup Iteration   5: 403688.208 ops/s
[info] Iteration   1: 400816.224 ops/s
[info]                  ·gc.alloc.rate:                   2146.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.072 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7954.141 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 400344.710 ops/s
[info]                  ·gc.alloc.rate:                   2144.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2370.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9322.282 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 401951.038 ops/s
[info]                  ·gc.alloc.rate:                   2153.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7978.435 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 400902.034 ops/s
[info]                  ·gc.alloc.rate:                   2147.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8003.289 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 401820.212 ops/s
[info]                  ·gc.alloc.rate:                   2152.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9331.582 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   401166.844 ±(99.9%) 2661.414 ops/s [Average]
[info]   (min, avg, max) = (400344.710, 401166.844, 401951.038), stdev = 691.161
[info]   CI (99.9%): [398505.429, 403828.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2148.720 ±(99.9%) 14.608 MB/sec [Average]
[info]   (min, avg, max) = (2144.242, 2148.720, 2153.179), stdev = 3.794
[info]   CI (99.9%): [2134.112, 2163.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.021
[info]   CI (99.9%): [0.024, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.408 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (0.327, 0.408, 0.491), stdev = 0.082
[info]   CI (99.9%): [0.094, 0.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   2170.588 ±(99.9%) 723.154 MB/sec [Average]
[info]   (min, avg, max) = (2025.072, 2170.588, 2381.742), stdev = 187.801
[info]   CI (99.9%): [1447.435, 2893.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8517.946 ±(99.9%) 2844.516 B/op [Average]
[info]   (min, avg, max) = (7954.141, 8517.946, 9331.582), stdev = 738.712
[info]   CI (99.9%): [5673.430, 11362.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.000, 14.000), stdev = 2.915
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 60.45% complete, ETA 00:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 289675.644 ops/s
[info] # Warmup Iteration   2: 528532.628 ops/s
[info] # Warmup Iteration   3: 532410.225 ops/s
[info] # Warmup Iteration   4: 531363.473 ops/s
[info] # Warmup Iteration   5: 533497.311 ops/s
[info] Iteration   1: 532798.661 ops/s
[info]                  ·gc.alloc.rate:                   1353.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3907.700 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 532498.414 ops/s
[info]                  ·gc.alloc.rate:                   1353.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3933.777 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 529920.563 ops/s
[info]                  ·gc.alloc.rate:                   1346.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3974.427 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 532428.620 ops/s
[info]                  ·gc.alloc.rate:                   1353.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3973.363 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 534657.324 ops/s
[info]                  ·gc.alloc.rate:                   1358.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              4000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3970.787 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   532460.716 ±(99.9%) 6498.959 ops/s [Average]
[info]   (min, avg, max) = (529920.563, 532460.716, 534657.324), stdev = 1687.759
[info]   CI (99.9%): [525961.757, 538959.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1353.042 ±(99.9%) 16.146 MB/sec [Average]
[info]   (min, avg, max) = (1346.742, 1353.042, 1358.535), stdev = 4.193
[info]   CI (99.9%): [1336.896, 1369.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4000.001, 4000.001, 4000.001), stdev = 0.001
[info]   CI (99.9%): [4000.001, 4000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 0.516 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.197, 0.371), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1336.806 ±(99.9%) 40.196 MB/sec [Average]
[info]   (min, avg, max) = (1322.479, 1336.806, 1348.613), stdev = 10.439
[info]   CI (99.9%): [1296.609, 1377.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3952.011 ±(99.9%) 115.629 B/op [Average]
[info]   (min, avg, max) = (3907.700, 3952.011, 3974.427), stdev = 30.029
[info]   CI (99.9%): [3836.382, 4067.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 61.19% complete, ETA 00:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2889184.007 ops/s
[info] # Warmup Iteration   2: 3340940.573 ops/s
[info] # Warmup Iteration   3: 3439165.382 ops/s
[info] # Warmup Iteration   4: 3370099.128 ops/s
[info] # Warmup Iteration   5: 3445084.505 ops/s
[info] Iteration   1: 3386019.845 ops/s
[info]                  ·gc.alloc.rate:                   722.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.962 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3377344.735 ops/s
[info]                  ·gc.alloc.rate:                   721.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3404933.542 ops/s
[info]                  ·gc.alloc.rate:                   726.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3374420.461 ops/s
[info]                  ·gc.alloc.rate:                   720.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 462.447 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3284806.429 ops/s
[info]                  ·gc.alloc.rate:                   701.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              336.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 317.889 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3365505.003 ±(99.9%) 179658.362 ops/s [Average]
[info]   (min, avg, max) = (3284806.429, 3365505.003, 3404933.542), stdev = 46656.706
[info]   CI (99.9%): [3185846.641, 3545163.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   718.427 ±(99.9%) 38.537 MB/sec [Average]
[info]   (min, avg, max) = (701.068, 718.427, 726.741), stdev = 10.008
[info]   CI (99.9%): [679.889, 756.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   336.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (336.000, 336.000, 336.000), stdev = 0.001
[info]   CI (99.9%): [336.000, 336.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.045, 0.068), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   725.271 ±(99.9%) 573.258 MB/sec [Average]
[info]   (min, avg, max) = (656.008, 725.271, 991.537), stdev = 148.873
[info]   CI (99.9%): [152.014, 1298.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   339.177 ±(99.9%) 266.203 B/op [Average]
[info]   (min, avg, max) = (304.506, 339.177, 462.447), stdev = 69.132
[info]   CI (99.9%): [72.974, 605.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 61.94% complete, ETA 00:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99147.637 ops/s
[info] # Warmup Iteration   2: 371923.867 ops/s
[info] # Warmup Iteration   3: 373671.622 ops/s
[info] # Warmup Iteration   4: 373570.581 ops/s
[info] # Warmup Iteration   5: 373816.847 ops/s
[info] Iteration   1: 372311.964 ops/s
[info]                  ·gc.alloc.rate:                   1343.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5631.329 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 375121.260 ops/s
[info]                  ·gc.alloc.rate:                   1353.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5619.113 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 371950.566 ops/s
[info]                  ·gc.alloc.rate:                   1341.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5693.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 374640.370 ops/s
[info]                  ·gc.alloc.rate:                   1352.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5669.340 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 373899.634 ops/s
[info]                  ·gc.alloc.rate:                   1349.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5694.699 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   373584.759 ±(99.9%) 5399.453 ops/s [Average]
[info]   (min, avg, max) = (371950.566, 373584.759, 375121.260), stdev = 1402.221
[info]   CI (99.9%): [368185.306, 378984.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1348.019 ±(99.9%) 20.271 MB/sec [Average]
[info]   (min, avg, max) = (1341.892, 1348.019, 1353.724), stdev = 5.264
[info]   CI (99.9%): [1327.747, 1368.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5680.001, 5680.001, 5680.001), stdev = 0.001
[info]   CI (99.9%): [5680.001, 5680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 0.298 B/op [Average]
[info]   (min, avg, max) = (0.350, 0.403, 0.524), stdev = 0.077
[info]   CI (99.9%): [0.106, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1343.638 ±(99.9%) 32.080 MB/sec [Average]
[info]   (min, avg, max) = (1331.762, 1343.638, 1352.531), stdev = 8.331
[info]   CI (99.9%): [1311.559, 1375.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5661.577 ±(99.9%) 134.614 B/op [Average]
[info]   (min, avg, max) = (5619.113, 5661.577, 5694.699), stdev = 34.959
[info]   CI (99.9%): [5526.963, 5796.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 62.69% complete, ETA 00:13:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1158372.537 ops/s
[info] # Warmup Iteration   2: 2104572.992 ops/s
[info] # Warmup Iteration   3: 2167621.366 ops/s
[info] # Warmup Iteration   4: 2160758.356 ops/s
[info] # Warmup Iteration   5: 2149036.510 ops/s
[info] Iteration   1: 2156666.004 ops/s
[info]                  ·gc.alloc.rate:                   3189.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3392.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2475.706 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2155742.818 ops/s
[info]                  ·gc.alloc.rate:                   3188.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.649 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 2140305.744 ops/s
[info]                  ·gc.alloc.rate:                   3166.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2503.073 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2142361.720 ops/s
[info]                  ·gc.alloc.rate:                   3168.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2250.579 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2131531.124 ops/s
[info]                  ·gc.alloc.rate:                   3152.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2262.011 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2145321.482 ±(99.9%) 41356.086 ops/s [Average]
[info]   (min, avg, max) = (2131531.124, 2145321.482, 2156666.004), stdev = 10740.044
[info]   CI (99.9%): [2103965.396, 2186677.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3173.104 ±(99.9%) 60.465 MB/sec [Average]
[info]   (min, avg, max) = (3152.773, 3173.104, 3189.886), stdev = 15.702
[info]   CI (99.9%): [3112.639, 3233.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.208), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.107 ±(99.9%) 0.118 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.107, 0.153), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3196.410 ±(99.9%) 709.602 MB/sec [Average]
[info]   (min, avg, max) = (3058.825, 3196.410, 3404.158), stdev = 184.281
[info]   CI (99.9%): [2486.808, 3906.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2345.004 ±(99.9%) 510.384 B/op [Average]
[info]   (min, avg, max) = (2233.649, 2345.004, 2503.073), stdev = 132.545
[info]   CI (99.9%): [1834.620, 2855.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.400, 10.000), stdev = 1.140
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 63.43% complete, ETA 00:12:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48162.823 ops/s
[info] # Warmup Iteration   2: 272555.174 ops/s
[info] # Warmup Iteration   3: 286964.640 ops/s
[info] # Warmup Iteration   4: 287692.243 ops/s
[info] # Warmup Iteration   5: 287051.198 ops/s
[info] Iteration   1: 285549.752 ops/s
[info]                  ·gc.alloc.rate:                   505.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3586.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 285846.277 ops/s
[info]                  ·gc.alloc.rate:                   505.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1802.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 284602.170 ops/s
[info]                  ·gc.alloc.rate:                   503.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3628.214 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 283982.052 ops/s
[info]                  ·gc.alloc.rate:                   502.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.867 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 282053.217 ops/s
[info]                  ·gc.alloc.rate:                   498.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3683.191 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   284406.693 ±(99.9%) 5819.560 ops/s [Average]
[info]   (min, avg, max) = (282053.217, 284406.693, 285846.277), stdev = 1511.321
[info]   CI (99.9%): [278587.134, 290226.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   502.977 ±(99.9%) 10.454 MB/sec [Average]
[info]   (min, avg, max) = (498.760, 502.977, 505.552), stdev = 2.715
[info]   CI (99.9%): [492.523, 513.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   2784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2784.001, 2784.001, 2784.002), stdev = 0.001
[info]   CI (99.9%): [2784.001, 2784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.017 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.092 ±(99.9%) 0.578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.345), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   524.497 ±(99.9%) 690.885 MB/sec [Average]
[info]   (min, avg, max) = (327.337, 524.497, 659.851), stdev = 179.421
[info]   CI (99.9%): [≈ 0, 1215.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2904.544 ±(99.9%) 3841.975 B/op [Average]
[info]   (min, avg, max) = (1802.597, 2904.544, 3683.191), stdev = 997.749
[info]   CI (99.9%): [≈ 0, 6746.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 64.18% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657056.713 ops/s
[info] # Warmup Iteration   2: 688321.509 ops/s
[info] # Warmup Iteration   3: 699224.045 ops/s
[info] # Warmup Iteration   4: 707665.520 ops/s
[info] # Warmup Iteration   5: 701534.569 ops/s
[info] Iteration   1: 701954.803 ops/s
[info]                  ·gc.alloc.rate:                   445.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.756 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 693126.150 ops/s
[info]                  ·gc.alloc.rate:                   440.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.245 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 689487.959 ops/s
[info]                  ·gc.alloc.rate:                   437.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1505.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 693799.138 ops/s
[info]                  ·gc.alloc.rate:                   440.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.948 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 691435.405 ops/s
[info]                  ·gc.alloc.rate:                   439.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.509 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   693960.691 ±(99.9%) 18367.490 ops/s [Average]
[info]   (min, avg, max) = (689487.959, 693960.691, 701954.803), stdev = 4769.979
[info]   CI (99.9%): [675593.201, 712328.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   440.854 ±(99.9%) 11.496 MB/sec [Average]
[info]   (min, avg, max) = (437.990, 440.854, 445.815), stdev = 2.986
[info]   CI (99.9%): [429.358, 452.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.143), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   395.860 ±(99.9%) 567.042 MB/sec [Average]
[info]   (min, avg, max) = (329.644, 395.860, 659.284), stdev = 147.259
[info]   CI (99.9%): [≈ 0, 962.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   898.941 ±(99.9%) 1305.211 B/op [Average]
[info]   (min, avg, max) = (740.756, 898.941, 1505.249), stdev = 338.959
[info]   CI (99.9%): [≈ 0, 2204.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 64.93% complete, ETA 00:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2394321.550 ops/s
[info] # Warmup Iteration   2: 2620485.611 ops/s
[info] # Warmup Iteration   3: 2676913.388 ops/s
[info] # Warmup Iteration   4: 2687273.418 ops/s
[info] # Warmup Iteration   5: 2684590.425 ops/s
[info] Iteration   1: 2686198.795 ops/s
[info]                  ·gc.alloc.rate:                   873.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 581.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2689668.698 ops/s
[info]                  ·gc.alloc.rate:                   874.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.776 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2679939.852 ops/s
[info]                  ·gc.alloc.rate:                   871.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 585.211 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2689190.764 ops/s
[info]                  ·gc.alloc.rate:                   874.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      666.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 390.210 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2674431.792 ops/s
[info]                  ·gc.alloc.rate:                   869.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   2683885.980 ±(99.9%) 25241.791 ops/s [Average]
[info]   (min, avg, max) = (2674431.792, 2683885.980, 2689668.698), stdev = 6555.213
[info]   CI (99.9%): [2658644.189, 2709127.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   873.027 ±(99.9%) 8.115 MB/sec [Average]
[info]   (min, avg, max) = (869.983, 873.027, 874.963), stdev = 2.107
[info]   CI (99.9%): [864.912, 881.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.037, 0.049), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   864.027 ±(99.9%) 700.879 MB/sec [Average]
[info]   (min, avg, max) = (662.675, 864.027, 1002.773), stdev = 182.016
[info]   CI (99.9%): [163.148, 1564.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   506.893 ±(99.9%) 414.631 B/op [Average]
[info]   (min, avg, max) = (387.776, 506.893, 590.149), stdev = 107.678
[info]   CI (99.9%): [92.262, 921.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 65.67% complete, ETA 00:12:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3651728.916 ops/s
[info] # Warmup Iteration   2: 3971171.048 ops/s
[info] # Warmup Iteration   3: 3991159.340 ops/s
[info] # Warmup Iteration   4: 4018725.684 ops/s
[info] # Warmup Iteration   5: 4015730.463 ops/s
[info] Iteration   1: 4027675.070 ops/s
[info]                  ·gc.alloc.rate:                   347.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4032384.424 ops/s
[info]                  ·gc.alloc.rate:                   348.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.740 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4034203.041 ops/s
[info]                  ·gc.alloc.rate:                   348.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.901 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4034144.855 ops/s
[info]                  ·gc.alloc.rate:                   348.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.893 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4023818.350 ops/s
[info]                  ·gc.alloc.rate:                   347.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.958 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   4030445.148 ±(99.9%) 17557.223 ops/s [Average]
[info]   (min, avg, max) = (4023818.350, 4030445.148, 4034203.041), stdev = 4559.555
[info]   CI (99.9%): [4012887.925, 4048002.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   348.205 ±(99.9%) 1.516 MB/sec [Average]
[info]   (min, avg, max) = (347.631, 348.205, 348.521), stdev = 0.394
[info]   CI (99.9%): [346.689, 349.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.636 ±(99.9%) 5.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 3.094), stdev = 1.375
[info]   CI (99.9%): [≈ 0, 5.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.248 ±(99.9%) 2.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.248, 1.209), stdev = 0.537
[info]   CI (99.9%): [≈ 0, 2.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   330.987 ±(99.9%) 4.861 MB/sec [Average]
[info]   (min, avg, max) = (329.632, 330.987, 332.359), stdev = 1.262
[info]   CI (99.9%): [326.125, 335.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   129.275 ±(99.9%) 1.897 B/op [Average]
[info]   (min, avg, max) = (128.893, 129.275, 129.883), stdev = 0.493
[info]   CI (99.9%): [127.378, 131.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.095
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 66.42% complete, ETA 00:11:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18375.470 ops/s
[info] # Warmup Iteration   2: 196560.804 ops/s
[info] # Warmup Iteration   3: 205959.329 ops/s
[info] # Warmup Iteration   4: 208412.477 ops/s
[info] # Warmup Iteration   5: 209620.904 ops/s
[info] Iteration   1: 203453.320 ops/s
[info]                  ·gc.alloc.rate:                   1294.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10289.654 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 209991.360 ops/s
[info]                  ·gc.alloc.rate:                   1336.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10029.896 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 210082.751 ops/s
[info]                  ·gc.alloc.rate:                   1336.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10070.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 210463.072 ops/s
[info]                  ·gc.alloc.rate:                   1339.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10091.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 206914.366 ops/s
[info]                  ·gc.alloc.rate:                   1316.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10289.942 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   208180.974 ±(99.9%) 11561.111 ops/s [Average]
[info]   (min, avg, max) = (203453.320, 208180.974, 210463.072), stdev = 3002.384
[info]   CI (99.9%): [196619.862, 219742.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1324.591 ±(99.9%) 73.105 MB/sec [Average]
[info]   (min, avg, max) = (1294.748, 1324.591, 1339.074), stdev = 18.985
[info]   CI (99.9%): [1251.486, 1397.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10016.002, 10016.002, 10016.002), stdev = 0.001
[info]   CI (99.9%): [10016.002, 10016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.754 ±(99.9%) 0.634 B/op [Average]
[info]   (min, avg, max) = (0.483, 0.754, 0.934), stdev = 0.165
[info]   CI (99.9%): [0.119, 1.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1342.711 ±(99.9%) 34.454 MB/sec [Average]
[info]   (min, avg, max) = (1330.122, 1342.711, 1352.485), stdev = 8.948
[info]   CI (99.9%): [1308.256, 1377.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10154.294 ±(99.9%) 483.959 B/op [Average]
[info]   (min, avg, max) = (10029.896, 10154.294, 10289.942), stdev = 125.683
[info]   CI (99.9%): [9670.335, 10638.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 67.16% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 506803.842 ops/s
[info] # Warmup Iteration   2: 725448.707 ops/s
[info] # Warmup Iteration   3: 735940.823 ops/s
[info] # Warmup Iteration   4: 736168.812 ops/s
[info] # Warmup Iteration   5: 731633.979 ops/s
[info] Iteration   1: 735527.928 ops/s
[info]                  ·gc.alloc.rate:                   2811.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5797.644 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 731159.809 ops/s
[info]                  ·gc.alloc.rate:                   2794.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5848.571 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 737529.497 ops/s
[info]                  ·gc.alloc.rate:                   2818.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6530.111 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 735983.767 ops/s
[info]                  ·gc.alloc.rate:                   2812.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5823.420 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 738738.322 ops/s
[info]                  ·gc.alloc.rate:                   2823.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5801.706 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   735787.865 ±(99.9%) 11104.172 ops/s [Average]
[info]   (min, avg, max) = (731159.809, 735787.865, 738738.322), stdev = 2883.718
[info]   CI (99.9%): [724683.692, 746892.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2811.919 ±(99.9%) 42.310 MB/sec [Average]
[info]   (min, avg, max) = (2794.190, 2811.919, 2823.006), stdev = 10.988
[info]   CI (99.9%): [2769.609, 2854.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.142, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.303 ±(99.9%) 0.411 B/op [Average]
[info]   (min, avg, max) = (0.134, 0.303, 0.401), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2786.015 ±(99.9%) 588.992 MB/sec [Average]
[info]   (min, avg, max) = (2709.098, 2786.015, 3059.457), stdev = 152.959
[info]   CI (99.9%): [2197.022, 3375.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5960.290 ±(99.9%) 1229.063 B/op [Average]
[info]   (min, avg, max) = (5797.644, 5960.290, 6530.111), stdev = 319.184
[info]   CI (99.9%): [4731.227, 7189.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 67.91% complete, ETA 00:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3188139.324 ops/s
[info] # Warmup Iteration   2: 3799990.088 ops/s
[info] # Warmup Iteration   3: 3870729.573 ops/s
[info] # Warmup Iteration   4: 3869793.110 ops/s
[info] # Warmup Iteration   5: 3878470.377 ops/s
[info] Iteration   1: 3862129.418 ops/s
[info]                  ·gc.alloc.rate:                   2492.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1102.510 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3880227.814 ops/s
[info]                  ·gc.alloc.rate:                   2505.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 963.490 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3871179.674 ops/s
[info]                  ·gc.alloc.rate:                   2498.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 966.990 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3882409.103 ops/s
[info]                  ·gc.alloc.rate:                   2505.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1103.769 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3854633.963 ops/s
[info]                  ·gc.alloc.rate:                   2487.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2382.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.890 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   3870115.994 ±(99.9%) 45479.166 ops/s [Average]
[info]   (min, avg, max) = (3854633.963, 3870115.994, 3882409.103), stdev = 11810.795
[info]   CI (99.9%): [3824636.828, 3915595.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2497.885 ±(99.9%) 30.089 MB/sec [Average]
[info]   (min, avg, max) = (2487.623, 2497.885, 2505.569), stdev = 7.814
[info]   CI (99.9%): [2467.796, 2527.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.041 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.041, 0.051), stdev = 0.007
[info]   CI (99.9%): [0.014, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   2512.515 ±(99.9%) 706.863 MB/sec [Average]
[info]   (min, avg, max) = (2375.673, 2512.515, 2722.016), stdev = 183.570
[info]   CI (99.9%): [1805.652, 3219.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1021.930 ±(99.9%) 285.761 B/op [Average]
[info]   (min, avg, max) = (963.490, 1021.930, 1103.769), stdev = 74.211
[info]   CI (99.9%): [736.168, 1307.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 68.66% complete, ETA 00:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65226.615 ops/s
[info] # Warmup Iteration   2: 271066.527 ops/s
[info] # Warmup Iteration   3: 270605.799 ops/s
[info] # Warmup Iteration   4: 273680.031 ops/s
[info] # Warmup Iteration   5: 273160.948 ops/s
[info] Iteration   1: 271679.844 ops/s
[info]                  ·gc.alloc.rate:                   1942.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11703.408 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 273514.548 ops/s
[info]                  ·gc.alloc.rate:                   1955.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.501 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9728.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 273147.495 ops/s
[info]                  ·gc.alloc.rate:                   1953.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11717.541 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 273183.518 ops/s
[info]                  ·gc.alloc.rate:                   1953.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11739.280 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 273558.344 ops/s
[info]                  ·gc.alloc.rate:                   1956.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2038.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11730.255 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   273016.750 ±(99.9%) 2966.090 ops/s [Average]
[info]   (min, avg, max) = (271679.844, 273016.750, 273558.344), stdev = 770.284
[info]   CI (99.9%): [270050.660, 275982.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1952.197 ±(99.9%) 21.563 MB/sec [Average]
[info]   (min, avg, max) = (1942.481, 1952.197, 1956.038), stdev = 5.600
[info]   CI (99.9%): [1930.634, 1973.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11256.001, 11256.002, 11256.002), stdev = 0.001
[info]   CI (99.9%): [11256.001, 11256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.125), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.624 ±(99.9%) 0.602 B/op [Average]
[info]   (min, avg, max) = (0.359, 0.624, 0.720), stdev = 0.156
[info]   CI (99.9%): [0.022, 1.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1963.826 ±(99.9%) 589.051 MB/sec [Average]
[info]   (min, avg, max) = (1690.501, 1963.826, 2038.453), stdev = 152.975
[info]   CI (99.9%): [1374.774, 2552.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   11323.794 ±(99.9%) 3434.415 B/op [Average]
[info]   (min, avg, max) = (9728.487, 11323.794, 11739.280), stdev = 891.907
[info]   CI (99.9%): [7889.380, 14758.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 69.40% complete, ETA 00:10:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571274.477 ops/s
[info] # Warmup Iteration   2: 822649.832 ops/s
[info] # Warmup Iteration   3: 836669.727 ops/s
[info] # Warmup Iteration   4: 841634.206 ops/s
[info] # Warmup Iteration   5: 840608.180 ops/s
[info] Iteration   1: 843639.987 ops/s
[info]                  ·gc.alloc.rate:                   1852.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.905 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3744.666 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 842284.448 ops/s
[info]                  ·gc.alloc.rate:                   1849.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3143.988 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 837454.213 ops/s
[info]                  ·gc.alloc.rate:                   1838.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3811.765 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 836137.029 ops/s
[info]                  ·gc.alloc.rate:                   1835.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3189.829 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 840671.313 ops/s
[info]                  ·gc.alloc.rate:                   1845.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3813.720 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   840037.398 ±(99.9%) 12224.726 ops/s [Average]
[info]   (min, avg, max) = (836137.029, 840037.398, 843639.987), stdev = 3174.723
[info]   CI (99.9%): [827812.672, 852262.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1844.367 ±(99.9%) 26.914 MB/sec [Average]
[info]   (min, avg, max) = (1835.962, 1844.367, 1852.199), stdev = 6.990
[info]   CI (99.9%): [1817.452, 1871.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.195 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (0.116, 0.195, 0.235), stdev = 0.048
[info]   CI (99.9%): [0.010, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1889.691 ±(99.9%) 708.452 MB/sec [Average]
[info]   (min, avg, max) = (1682.541, 1889.691, 2036.755), stdev = 183.983
[info]   CI (99.9%): [1181.240, 2598.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3540.794 ±(99.9%) 1320.088 B/op [Average]
[info]   (min, avg, max) = (3143.988, 3540.794, 3813.720), stdev = 342.823
[info]   CI (99.9%): [2220.706, 4860.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 70.15% complete, ETA 00:10:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 873174.931 ops/s
[info] # Warmup Iteration   2: 1875723.956 ops/s
[info] # Warmup Iteration   3: 1898115.220 ops/s
[info] # Warmup Iteration   4: 1899206.991 ops/s
[info] # Warmup Iteration   5: 1898642.243 ops/s
[info] Iteration   1: 1916038.478 ops/s
[info]                  ·gc.alloc.rate:                   1041.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.355 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 814.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1912788.165 ops/s
[info]                  ·gc.alloc.rate:                   1040.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.411 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 819.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1891503.442 ops/s
[info]                  ·gc.alloc.rate:                   1028.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 833.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1914110.159 ops/s
[info]                  ·gc.alloc.rate:                   1040.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 825.954 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1896131.221 ops/s
[info]                  ·gc.alloc.rate:                   1030.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   1906114.293 ±(99.9%) 43908.426 ops/s [Average]
[info]   (min, avg, max) = (1891503.442, 1906114.293, 1916038.478), stdev = 11402.879
[info]   CI (99.9%): [1862205.867, 1950022.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1036.464 ±(99.9%) 24.018 MB/sec [Average]
[info]   (min, avg, max) = (1028.565, 1036.464, 1041.885), stdev = 6.237
[info]   CI (99.9%): [1012.446, 1060.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.065, 0.120), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1000.020 ±(99.9%) 25.870 MB/sec [Average]
[info]   (min, avg, max) = (991.355, 1000.020, 1008.111), stdev = 6.718
[info]   CI (99.9%): [974.150, 1025.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   825.942 ±(99.9%) 36.148 B/op [Average]
[info]   (min, avg, max) = (814.485, 825.942, 837.095), stdev = 9.388
[info]   CI (99.9%): [789.794, 862.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 70.90% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4236642.091 ops/s
[info] # Warmup Iteration   2: 4702944.316 ops/s
[info] # Warmup Iteration   3: 4763164.535 ops/s
[info] # Warmup Iteration   4: 4786022.648 ops/s
[info] # Warmup Iteration   5: 4768784.044 ops/s
[info] Iteration   1: 4785621.853 ops/s
[info]                  ·gc.alloc.rate:                   364.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 217.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 4813106.666 ops/s
[info]                  ·gc.alloc.rate:                   366.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 4773544.734 ops/s
[info]                  ·gc.alloc.rate:                   363.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.270 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 4690384.793 ops/s
[info]                  ·gc.alloc.rate:                   357.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109.973 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4803277.988 ops/s
[info]                  ·gc.alloc.rate:                   366.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.721 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   4773187.207 ±(99.9%) 187755.977 ops/s [Average]
[info]   (min, avg, max) = (4690384.793, 4773187.207, 4813106.666), stdev = 48759.631
[info]   CI (99.9%): [4585431.230, 4960943.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   363.909 ±(99.9%) 14.156 MB/sec [Average]
[info]   (min, avg, max) = (357.675, 363.909, 366.917), stdev = 3.676
[info]   CI (99.9%): [349.752, 378.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.266), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.219 ±(99.9%) 1.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.219, 1.074), stdev = 0.478
[info]   CI (99.9%): [≈ 0, 2.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   394.428 ±(99.9%) 571.469 MB/sec [Average]
[info]   (min, avg, max) = (327.721, 394.428, 659.909), stdev = 148.409
[info]   CI (99.9%): [≈ 0, 965.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   130.021 ±(99.9%) 187.468 B/op [Average]
[info]   (min, avg, max) = (107.381, 130.021, 217.090), stdev = 48.685
[info]   CI (99.9%): [≈ 0, 317.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 71.64% complete, ETA 00:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 175709.610 ops/s
[info] # Warmup Iteration   2: 509620.668 ops/s
[info] # Warmup Iteration   3: 506429.585 ops/s
[info] # Warmup Iteration   4: 512012.487 ops/s
[info] # Warmup Iteration   5: 513746.804 ops/s
[info] Iteration   1: 510596.192 ops/s
[info]                  ·gc.alloc.rate:                   1740.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5175.043 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 510904.803 ops/s
[info]                  ·gc.alloc.rate:                   1742.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5196.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 511121.168 ops/s
[info]                  ·gc.alloc.rate:                   1743.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5209.612 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 513301.133 ops/s
[info]                  ·gc.alloc.rate:                   1750.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5199.140 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 509603.246 ops/s
[info]                  ·gc.alloc.rate:                   1737.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6294.353 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   511105.308 ±(99.9%) 5229.470 ops/s [Average]
[info]   (min, avg, max) = (509603.246, 511105.308, 513301.133), stdev = 1358.077
[info]   CI (99.9%): [505875.839, 516334.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1742.967 ±(99.9%) 18.469 MB/sec [Average]
[info]   (min, avg, max) = (1737.722, 1742.967, 1750.684), stdev = 4.796
[info]   CI (99.9%): [1724.498, 1761.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.321 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.321, 0.450), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1757.962 ±(99.9%) 602.461 MB/sec [Average]
[info]   (min, avg, max) = (1678.344, 1757.962, 2037.600), stdev = 156.457
[info]   CI (99.9%): [1155.501, 2360.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   5414.838 ±(99.9%) 1893.839 B/op [Average]
[info]   (min, avg, max) = (5175.043, 5414.838, 6294.353), stdev = 491.824
[info]   CI (99.9%): [3520.998, 7308.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 72.39% complete, ETA 00:09:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3065538.116 ops/s
[info] # Warmup Iteration   2: 3450704.972 ops/s
[info] # Warmup Iteration   3: 3545809.187 ops/s
[info] # Warmup Iteration   4: 3561552.799 ops/s
[info] # Warmup Iteration   5: 3593762.116 ops/s
[info] Iteration   1: 3580258.250 ops/s
[info]                  ·gc.alloc.rate:                   1691.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 735.826 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3590135.725 ops/s
[info]                  ·gc.alloc.rate:                   1697.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 737.613 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3574484.963 ops/s
[info]                  ·gc.alloc.rate:                   1689.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.477 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3521527.465 ops/s
[info]                  ·gc.alloc.rate:                   1664.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.745 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3571086.707 ops/s
[info]                  ·gc.alloc.rate:                   1687.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3567498.622 ±(99.9%) 102789.063 ops/s [Average]
[info]   (min, avg, max) = (3521527.465, 3567498.622, 3590135.725), stdev = 26693.993
[info]   CI (99.9%): [3464709.559, 3670287.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1686.133 ±(99.9%) 48.803 MB/sec [Average]
[info]   (min, avg, max) = (1664.404, 1686.133, 1697.285), stdev = 12.674
[info]   CI (99.9%): [1637.330, 1734.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.031, 0.046), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   1686.646 ±(99.9%) 34.732 MB/sec [Average]
[info]   (min, avg, max) = (1673.327, 1686.646, 1696.199), stdev = 9.020
[info]   CI (99.9%): [1651.913, 1721.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   744.273 ±(99.9%) 32.426 B/op [Average]
[info]   (min, avg, max) = (735.826, 744.273, 756.745), stdev = 8.421
[info]   CI (99.9%): [711.847, 776.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 73.13% complete, ETA 00:09:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112928.847 ops/s
[info] # Warmup Iteration   2: 306581.499 ops/s
[info] # Warmup Iteration   3: 310412.463 ops/s
[info] # Warmup Iteration   4: 302973.932 ops/s
[info] # Warmup Iteration   5: 308760.532 ops/s
[info] Iteration   1: 307551.975 ops/s
[info]                  ·gc.alloc.rate:                   1638.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6864.956 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 307457.118 ops/s
[info]                  ·gc.alloc.rate:                   1637.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8623.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 307680.611 ops/s
[info]                  ·gc.alloc.rate:                   1638.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8647.867 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 308100.082 ops/s
[info]                  ·gc.alloc.rate:                   1640.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8656.637 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 305454.127 ops/s
[info]                  ·gc.alloc.rate:                   1626.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8744.826 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   307248.783 ±(99.9%) 3977.225 ops/s [Average]
[info]   (min, avg, max) = (305454.127, 307248.783, 308100.082), stdev = 1032.873
[info]   CI (99.9%): [303271.558, 311226.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1636.412 ±(99.9%) 21.465 MB/sec [Average]
[info]   (min, avg, max) = (1626.677, 1636.412, 1640.870), stdev = 5.574
[info]   CI (99.9%): [1614.947, 1657.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.469 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (0.320, 0.469, 0.745), stdev = 0.161
[info]   CI (99.9%): [≈ 0, 1.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1621.375 ±(99.9%) 602.702 MB/sec [Average]
[info]   (min, avg, max) = (1341.507, 1621.375, 1696.685), stdev = 156.520
[info]   CI (99.9%): [1018.672, 2224.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8307.497 ±(99.9%) 3110.213 B/op [Average]
[info]   (min, avg, max) = (6864.956, 8307.497, 8744.826), stdev = 807.713
[info]   CI (99.9%): [5197.283, 11417.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 73.88% complete, ETA 00:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273811.618 ops/s
[info] # Warmup Iteration   2: 496805.873 ops/s
[info] # Warmup Iteration   3: 504688.035 ops/s
[info] # Warmup Iteration   4: 502838.591 ops/s
[info] # Warmup Iteration   5: 505845.049 ops/s
[info] Iteration   1: 509194.100 ops/s
[info]                  ·gc.alloc.rate:                   1306.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4080.607 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 506633.306 ops/s
[info]                  ·gc.alloc.rate:                   1300.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4128.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 507125.852 ops/s
[info]                  ·gc.alloc.rate:                   1301.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4147.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 508935.026 ops/s
[info]                  ·gc.alloc.rate:                   1306.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4153.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 503271.701 ops/s
[info]                  ·gc.alloc.rate:                   1291.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3160.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   507031.997 ±(99.9%) 9153.644 ops/s [Average]
[info]   (min, avg, max) = (503271.701, 507031.997, 509194.100), stdev = 2377.172
[info]   CI (99.9%): [497878.353, 516185.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1301.290 ±(99.9%) 23.348 MB/sec [Average]
[info]   (min, avg, max) = (1291.597, 1301.290, 1306.650), stdev = 6.063
[info]   CI (99.9%): [1277.942, 1324.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.220 ±(99.9%) 0.517 B/op [Average]
[info]   (min, avg, max) = (0.129, 0.220, 0.453), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1267.597 ±(99.9%) 554.770 MB/sec [Average]
[info]   (min, avg, max) = (1010.327, 1267.597, 1342.712), stdev = 144.072
[info]   CI (99.9%): [712.828, 1822.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3933.975 ±(99.9%) 1669.216 B/op [Average]
[info]   (min, avg, max) = (3160.212, 3933.975, 4153.037), stdev = 433.490
[info]   CI (99.9%): [2264.759, 5603.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 74.63% complete, ETA 00:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2500735.549 ops/s
[info] # Warmup Iteration   2: 2870721.901 ops/s
[info] # Warmup Iteration   3: 2902445.119 ops/s
[info] # Warmup Iteration   4: 2888374.294 ops/s
[info] # Warmup Iteration   5: 2907786.434 ops/s
[info] Iteration   1: 2899297.297 ops/s
[info]                  ·gc.alloc.rate:                   589.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355.828 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2908070.134 ops/s
[info]                  ·gc.alloc.rate:                   591.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.990 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.544 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2892636.536 ops/s
[info]                  ·gc.alloc.rate:                   588.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 357.340 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2890075.265 ops/s
[info]                  ·gc.alloc.rate:                   587.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.989 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2899765.550 ops/s
[info]                  ·gc.alloc.rate:                   589.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.108 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   2897968.956 ±(99.9%) 27076.017 ops/s [Average]
[info]   (min, avg, max) = (2890075.265, 2897968.956, 2908070.134), stdev = 7031.556
[info]   CI (99.9%): [2870892.939, 2925044.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   589.090 ±(99.9%) 5.477 MB/sec [Average]
[info]   (min, avg, max) = (587.516, 589.090, 591.159), stdev = 1.422
[info]   CI (99.9%): [583.612, 594.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.068), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591.508 ±(99.9%) 567.277 MB/sec [Average]
[info]   (min, avg, max) = (327.990, 591.508, 659.629), stdev = 147.320
[info]   CI (99.9%): [24.232, 1158.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   321.441 ±(99.9%) 309.772 B/op [Average]
[info]   (min, avg, max) = (177.544, 321.441, 358.384), stdev = 80.447
[info]   CI (99.9%): [11.669, 631.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 75.37% complete, ETA 00:08:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87341.628 ops/s
[info] # Warmup Iteration   2: 342649.279 ops/s
[info] # Warmup Iteration   3: 345399.596 ops/s
[info] # Warmup Iteration   4: 346144.855 ops/s
[info] # Warmup Iteration   5: 345404.414 ops/s
[info] Iteration   1: 346386.954 ops/s
[info]                  ·gc.alloc.rate:                   1329.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6052.876 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 345728.667 ops/s
[info]                  ·gc.alloc.rate:                   1326.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6096.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 343659.017 ops/s
[info]                  ·gc.alloc.rate:                   1318.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6162.262 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 340466.954 ops/s
[info]                  ·gc.alloc.rate:                   1306.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6238.481 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 345976.903 ops/s
[info]                  ·gc.alloc.rate:                   1327.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6154.173 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   344443.699 ±(99.9%) 9472.961 ops/s [Average]
[info]   (min, avg, max) = (340466.954, 344443.699, 346386.954), stdev = 2460.098
[info]   CI (99.9%): [334970.738, 353916.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1321.706 ±(99.9%) 35.902 MB/sec [Average]
[info]   (min, avg, max) = (1306.747, 1321.706, 1329.348), stdev = 9.324
[info]   CI (99.9%): [1285.804, 1357.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.342 ±(99.9%) 0.328 B/op [Average]
[info]   (min, avg, max) = (0.284, 0.342, 0.474), stdev = 0.085
[info]   CI (99.9%): [0.014, 0.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1343.693 ±(99.9%) 31.608 MB/sec [Average]
[info]   (min, avg, max) = (1332.181, 1343.693, 1352.429), stdev = 8.208
[info]   CI (99.9%): [1312.086, 1375.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   6140.836 ±(99.9%) 271.491 B/op [Average]
[info]   (min, avg, max) = (6052.876, 6140.836, 6238.481), stdev = 70.505
[info]   CI (99.9%): [5869.345, 6412.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 76.12% complete, ETA 00:08:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314108.265 ops/s
[info] # Warmup Iteration   2: 682600.102 ops/s
[info] # Warmup Iteration   3: 683440.313 ops/s
[info] # Warmup Iteration   4: 687897.273 ops/s
[info] # Warmup Iteration   5: 691853.840 ops/s
[info] Iteration   1: 681302.716 ops/s
[info]                  ·gc.alloc.rate:                   2084.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4653.205 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 693100.601 ops/s
[info]                  ·gc.alloc.rate:                   2120.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4600.072 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 682961.513 ops/s
[info]                  ·gc.alloc.rate:                   2089.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4683.480 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 687808.418 ops/s
[info]                  ·gc.alloc.rate:                   2104.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4660.927 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 692100.559 ops/s
[info]                  ·gc.alloc.rate:                   2117.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5409.310 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   687454.761 ±(99.9%) 20341.184 ops/s [Average]
[info]   (min, avg, max) = (681302.716, 687454.761, 693100.601), stdev = 5282.541
[info]   CI (99.9%): [667113.577, 707795.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2103.179 ±(99.9%) 62.888 MB/sec [Average]
[info]   (min, avg, max) = (2084.154, 2103.179, 2120.903), stdev = 16.332
[info]   CI (99.9%): [2040.291, 2166.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4816.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.001, 4816.001, 4816.001), stdev = 0.001
[info]   CI (99.9%): [4816.001, 4816.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.247 ±(99.9%) 0.294 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.247, 0.331), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2097.188 ±(99.9%) 605.499 MB/sec [Average]
[info]   (min, avg, max) = (2013.703, 2097.188, 2378.062), stdev = 157.246
[info]   CI (99.9%): [1491.688, 2702.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4801.399 ±(99.9%) 1313.864 B/op [Average]
[info]   (min, avg, max) = (4600.072, 4801.399, 5409.310), stdev = 341.206
[info]   CI (99.9%): [3487.535, 6115.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 76.87% complete, ETA 00:08:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 487012.961 ops/s
[info] # Warmup Iteration   2: 1459425.916 ops/s
[info] # Warmup Iteration   3: 1482782.935 ops/s
[info] # Warmup Iteration   4: 1471701.010 ops/s
[info] # Warmup Iteration   5: 1468922.983 ops/s
[info] Iteration   1: 1479713.007 ops/s
[info]                  ·gc.alloc.rate:                   1120.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1412.695 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1483190.822 ops/s
[info]                  ·gc.alloc.rate:                   1123.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1062.223 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1482267.127 ops/s
[info]                  ·gc.alloc.rate:                   1122.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1424.071 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1458975.922 ops/s
[info]                  ·gc.alloc.rate:                   1104.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1009.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088.984 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1477553.502 ops/s
[info]                  ·gc.alloc.rate:                   1118.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1011.514 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1077.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1476340.076 ±(99.9%) 38334.005 ops/s [Average]
[info]   (min, avg, max) = (1458975.922, 1476340.076, 1483190.822), stdev = 9955.219
[info]   CI (99.9%): [1438006.071, 1514674.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1117.960 ±(99.9%) 29.413 MB/sec [Average]
[info]   (min, avg, max) = (1104.703, 1117.960, 1123.343), stdev = 7.638
[info]   CI (99.9%): [1088.547, 1147.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.115 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.115, 0.155), stdev = 0.028
[info]   CI (99.9%): [0.006, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   1138.165 ±(99.9%) 690.623 MB/sec [Average]
[info]   (min, avg, max) = (1001.041, 1138.165, 1341.274), stdev = 179.353
[info]   CI (99.9%): [447.542, 1828.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1213.150 ±(99.9%) 722.517 B/op [Average]
[info]   (min, avg, max) = (1062.223, 1213.150, 1424.071), stdev = 187.635
[info]   CI (99.9%): [490.633, 1935.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 77.61% complete, ETA 00:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6377412.095 ops/s
[info] # Warmup Iteration   2: 6664350.605 ops/s
[info] # Warmup Iteration   3: 6794819.108 ops/s
[info] # Warmup Iteration   4: 6796934.576 ops/s
[info] # Warmup Iteration   5: 6780717.151 ops/s
[info] Iteration   1: 6822418.294 ops/s
[info]                  ·gc.alloc.rate:      208.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6836856.738 ops/s
[info]                  ·gc.alloc.rate:                   208.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6772774.489 ops/s
[info]                  ·gc.alloc.rate:                   206.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.438 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6794394.605 ops/s
[info]                  ·gc.alloc.rate:                   207.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.385 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.992 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6820568.005 ops/s
[info]                  ·gc.alloc.rate:      207.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   6809402.426 ±(99.9%) 98448.975 ops/s [Average]
[info]   (min, avg, max) = (6772774.489, 6809402.426, 6836856.738), stdev = 25566.886
[info]   CI (99.9%): [6710953.452, 6907851.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   207.629 ±(99.9%) 2.998 MB/sec [Average]
[info]   (min, avg, max) = (206.488, 207.629, 208.467), stdev = 0.779
[info]   CI (99.9%): [204.631, 210.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.620 ±(99.9%) 5.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.620, 3.084), stdev = 1.378
[info]   CI (99.9%): [≈ 0, 5.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.144 ±(99.9%) 1.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.144, 0.714), stdev = 0.319
[info]   CI (99.9%): [≈ 0, 1.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   168.763 ±(99.9%) 605.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 168.763, 332.385), stdev = 157.207
[info]   CI (99.9%): [≈ 0, 774.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   39.063 ±(99.9%) 140.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.063, 76.992), stdev = 36.395
[info]   CI (99.9%): [≈ 0, 179.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 78.36% complete, ETA 00:07:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41914.078 ops/s
[info] # Warmup Iteration   2: 250696.342 ops/s
[info] # Warmup Iteration   3: 252457.148 ops/s
[info] # Warmup Iteration   4: 251827.715 ops/s
[info] # Warmup Iteration   5: 254407.453 ops/s
[info] Iteration   1: 253550.654 ops/s
[info]                  ·gc.alloc.rate:                   1744.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10415.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 253084.263 ops/s
[info]                  ·gc.alloc.rate:                   1741.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10483.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 255371.635 ops/s
[info]                  ·gc.alloc.rate:                   1757.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10425.575 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 253679.115 ops/s
[info]                  ·gc.alloc.rate:                   1746.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12611.356 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 247272.216 ops/s
[info]                  ·gc.alloc.rate:                   1701.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1697.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10808.991 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   252591.577 ±(99.9%) 11926.065 ops/s [Average]
[info]   (min, avg, max) = (247272.216, 252591.577, 255371.635), stdev = 3097.161
[info]   CI (99.9%): [240665.511, 264517.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1738.233 ±(99.9%) 82.852 MB/sec [Average]
[info]   (min, avg, max) = (1701.267, 1738.233, 1757.513), stdev = 21.516
[info]   CI (99.9%): [1655.381, 1821.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.001, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.570 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.513, 0.570, 0.647), stdev = 0.069
[info]   CI (99.9%): [0.303, 0.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1757.057 ±(99.9%) 594.360 MB/sec [Average]
[info]   (min, avg, max) = (1677.458, 1757.057, 2032.851), stdev = 154.353
[info]   CI (99.9%): [1162.697, 2351.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   10948.958 ±(99.9%) 3631.909 B/op [Average]
[info]   (min, avg, max) = (10415.264, 10948.958, 12611.356), stdev = 943.195
[info]   CI (99.9%): [7317.050, 14580.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 79.10% complete, ETA 00:07:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474878.259 ops/s
[info] # Warmup Iteration   2: 914773.176 ops/s
[info] # Warmup Iteration   3: 937164.036 ops/s
[info] # Warmup Iteration   4: 946308.254 ops/s
[info] # Warmup Iteration   5: 942919.014 ops/s
[info] Iteration   1: 945605.730 ops/s
[info]                  ·gc.alloc.rate:                   1523.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2209.522 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 948977.391 ops/s
[info]                  ·gc.alloc.rate:                   1528.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2769.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 945103.844 ops/s
[info]                  ·gc.alloc.rate:                   1522.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2236.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 941146.972 ops/s
[info]                  ·gc.alloc.rate:                   1516.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.575 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2819.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 945525.125 ops/s
[info]                  ·gc.alloc.rate:                   1523.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2813.458 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   945271.812 ±(99.9%) 10711.004 ops/s [Average]
[info]   (min, avg, max) = (941146.972, 945271.812, 948977.391), stdev = 2781.614
[info]   CI (99.9%): [934560.808, 955982.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1522.859 ±(99.9%) 17.436 MB/sec [Average]
[info]   (min, avg, max) = (1516.145, 1522.859, 1528.869), stdev = 4.528
[info]   CI (99.9%): [1505.423, 1540.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.173 ±(99.9%) 0.212 B/op [Average]
[info]   (min, avg, max) = (0.104, 0.173, 0.243), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1543.010 ±(99.9%) 732.587 MB/sec [Average]
[info]   (min, avg, max) = (1327.131, 1543.010, 1690.282), stdev = 190.250
[info]   CI (99.9%): [810.423, 2275.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2569.596 ±(99.9%) 1221.353 B/op [Average]
[info]   (min, avg, max) = (2209.522, 2569.596, 2819.399), stdev = 317.182
[info]   CI (99.9%): [1348.242, 3790.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 79.85% complete, ETA 00:07:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 859731.785 ops/s
[info] # Warmup Iteration   2: 2545351.050 ops/s
[info] # Warmup Iteration   3: 2578038.849 ops/s
[info] # Warmup Iteration   4: 2582198.959 ops/s
[info] # Warmup Iteration   5: 2576392.964 ops/s
[info] Iteration   1: 2587926.892 ops/s
[info]                  ·gc.alloc.rate:                   1065.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 604.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2573966.387 ops/s
[info]                  ·gc.alloc.rate:                   1059.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 610.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2578557.981 ops/s
[info]                  ·gc.alloc.rate:                   1061.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612.688 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2576572.862 ops/s
[info]                  ·gc.alloc.rate:                   1060.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 820.867 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2518393.146 ops/s
[info]                  ·gc.alloc.rate:                   1036.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1010.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 631.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2567083.454 ±(99.9%) 106751.827 ops/s [Average]
[info]   (min, avg, max) = (2518393.146, 2567083.454, 2587926.892), stdev = 27723.111
[info]   CI (99.9%): [2460331.626, 2673835.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1056.740 ±(99.9%) 43.883 MB/sec [Average]
[info]   (min, avg, max) = (1036.696, 1056.740, 1065.145), stdev = 11.396
[info]   CI (99.9%): [1012.857, 1100.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.066, 0.089), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   1069.988 ±(99.9%) 590.063 MB/sec [Average]
[info]   (min, avg, max) = (993.183, 1069.988, 1343.866), stdev = 153.237
[info]   CI (99.9%): [479.926, 1660.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   656.049 ±(99.9%) 356.966 B/op [Average]
[info]   (min, avg, max) = (604.221, 656.049, 820.867), stdev = 92.703
[info]   CI (99.9%): [299.083, 1013.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 80.60% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4460896.734 ops/s
[info] # Warmup Iteration   2: 5994801.082 ops/s
[info] # Warmup Iteration   3: 6044530.313 ops/s
[info] # Warmup Iteration   4: 6029775.287 ops/s
[info] # Warmup Iteration   5: 6047585.742 ops/s
[info] Iteration   1: 6086494.704 ops/s
[info]                  ·gc.alloc.rate:                   680.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6058949.623 ops/s
[info]                  ·gc.alloc.rate:                   677.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.795 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6077193.021 ops/s
[info]                  ·gc.alloc.rate:                   679.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6068949.731 ops/s
[info]                  ·gc.alloc.rate:                   678.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6084587.980 ops/s
[info]                  ·gc.alloc.rate:                   680.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.261 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   6075235.012 ±(99.9%) 44022.608 ops/s [Average]
[info]   (min, avg, max) = (6058949.623, 6075235.012, 6086494.704), stdev = 11432.531
[info]   CI (99.9%): [6031212.404, 6119257.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   679.264 ±(99.9%) 4.502 MB/sec [Average]
[info]   (min, avg, max) = (677.685, 679.264, 680.449), stdev = 1.169
[info]   CI (99.9%): [674.762, 683.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.017, 0.027), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   659.022 ±(99.9%) 8.173 MB/sec [Average]
[info]   (min, avg, max) = (656.602, 659.022, 661.935), stdev = 2.122
[info]   CI (99.9%): [650.850, 667.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   170.756 ±(99.9%) 2.278 B/op [Average]
[info]   (min, avg, max) = (169.832, 170.756, 171.276), stdev = 0.592
[info]   CI (99.9%): [168.478, 173.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 81.34% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5026158.575 ops/s
[info] # Warmup Iteration   2: 5454963.277 ops/s
[info] # Warmup Iteration   3: 5668148.386 ops/s
[info] # Warmup Iteration   4: 5643035.471 ops/s
[info] # Warmup Iteration   5: 5649406.682 ops/s
[info] Iteration   1: 5659278.315 ops/s
[info]                  ·gc.alloc.rate:                   345.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.787 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5680357.505 ops/s
[info]                  ·gc.alloc.rate:                   346.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5657966.173 ops/s
[info]                  ·gc.alloc.rate:                   345.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 5675139.454 ops/s
[info]                  ·gc.alloc.rate:                   346.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.070 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5657538.525 ops/s
[info]                  ·gc.alloc.rate:                   345.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.331 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.357 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   5666055.994 ±(99.9%) 41783.119 ops/s [Average]
[info]   (min, avg, max) = (5657538.525, 5666055.994, 5680357.505), stdev = 10850.943
[info]   CI (99.9%): [5624272.875, 5707839.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   345.524 ±(99.9%) 2.599 MB/sec [Average]
[info]   (min, avg, max) = (345.017, 345.524, 346.424), stdev = 0.675
[info]   CI (99.9%): [342.925, 348.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.655 ±(99.9%) 5.502 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.655, 3.210), stdev = 1.429
[info]   CI (99.9%): [≈ 0, 6.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 1.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.893), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   328.976 ±(99.9%) 3.505 MB/sec [Average]
[info]   (min, avg, max) = (328.300, 328.976, 330.020), stdev = 0.910
[info]   CI (99.9%): [325.471, 332.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   91.403 ±(99.9%) 0.993 B/op [Average]
[info]   (min, avg, max) = (91.070, 91.403, 91.787), stdev = 0.258
[info]   CI (99.9%): [90.409, 92.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 82.09% complete, ETA 00:06:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48448.988 ops/s
[info] # Warmup Iteration   2: 335749.834 ops/s
[info] # Warmup Iteration   3: 341662.414 ops/s
[info] # Warmup Iteration   4: 344514.302 ops/s
[info] # Warmup Iteration   5: 343074.128 ops/s
[info] Iteration   1: 343322.265 ops/s
[info]                  ·gc.alloc.rate:                   1765.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7691.617 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 342901.192 ops/s
[info]                  ·gc.alloc.rate:                   1763.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7737.948 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 344055.794 ops/s
[info]                  ·gc.alloc.rate:                   1769.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9284.341 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 339724.952 ops/s
[info]                  ·gc.alloc.rate:                   1747.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1695.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7855.571 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 342438.894 ops/s
[info]                  ·gc.alloc.rate:                   1761.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1698.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7805.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   342488.619 ±(99.9%) 6374.399 ops/s [Average]
[info]   (min, avg, max) = (339724.952, 342488.619, 344055.794), stdev = 1655.411
[info]   CI (99.9%): [336114.220, 348863.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1761.447 ±(99.9%) 32.873 MB/sec [Average]
[info]   (min, avg, max) = (1747.124, 1761.447, 1769.447), stdev = 8.537
[info]   CI (99.9%): [1728.574, 1794.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.001), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.166), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.478 ±(99.9%) 0.733 B/op [Average]
[info]   (min, avg, max) = (0.286, 0.478, 0.764), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 1.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   1757.122 ±(99.9%) 586.447 MB/sec [Average]
[info]   (min, avg, max) = (1677.529, 1757.122, 2029.169), stdev = 152.298
[info]   CI (99.9%): [1170.675, 2343.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   8074.932 ±(99.9%) 2614.502 B/op [Average]
[info]   (min, avg, max) = (7691.617, 8074.932, 9284.341), stdev = 678.978
[info]   CI (99.9%): [5460.429, 10689.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 82.84% complete, ETA 00:06:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505047.313 ops/s
[info] # Warmup Iteration   2: 709958.272 ops/s
[info] # Warmup Iteration   3: 724449.408 ops/s
[info] # Warmup Iteration   4: 717267.932 ops/s
[info] # Warmup Iteration   5: 719752.925 ops/s
[info] Iteration   1: 724631.651 ops/s
[info]                  ·gc.alloc.rate:                   1616.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3621.910 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 719477.898 ops/s
[info]                  ·gc.alloc.rate:                   1605.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3669.646 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 723804.026 ops/s
[info]                  ·gc.alloc.rate:                   1614.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2930.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 722682.850 ops/s
[info]                  ·gc.alloc.rate:                   1612.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3680.161 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 724142.135 ops/s
[info]                  ·gc.alloc.rate:                   1615.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3683.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   722947.712 ±(99.9%) 7962.860 ops/s [Average]
[info]   (min, avg, max) = (719477.898, 722947.712, 724631.651), stdev = 2067.929
[info]   CI (99.9%): [714984.852, 730910.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1612.893 ±(99.9%) 16.831 MB/sec [Average]
[info]   (min, avg, max) = (1605.580, 1612.893, 1616.367), stdev = 4.371
[info]   CI (99.9%): [1596.062, 1629.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.000, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.154 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.154, 0.182), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1615.092 ±(99.9%) 578.263 MB/sec [Average]
[info]   (min, avg, max) = (1347.128, 1615.092, 1694.290), stdev = 150.173
[info]   CI (99.9%): [1036.829, 2193.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3516.972 ±(99.9%) 1267.047 B/op [Average]
[info]   (min, avg, max) = (2930.007, 3516.972, 3683.136), stdev = 329.048
[info]   CI (99.9%): [2249.925, 4784.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 83.58% complete, ETA 00:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527023.205 ops/s
[info] # Warmup Iteration   2: 1053887.649 ops/s
[info] # Warmup Iteration   3: 1071403.083 ops/s
[info] # Warmup Iteration   4: 1048562.680 ops/s
[info] # Warmup Iteration   5: 1067592.009 ops/s
[info] Iteration   1: 1069492.821 ops/s
[info]                  ·gc.alloc.rate:                   1402.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2421.682 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1073932.518 ops/s
[info]                  ·gc.alloc.rate:                   1408.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1945.656 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1068739.061 ops/s
[info]                  ·gc.alloc.rate:                   1401.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1966.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1068982.282 ops/s
[info]                  ·gc.alloc.rate:                   1401.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1976.613 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1062986.425 ops/s
[info]                  ·gc.alloc.rate:                   1393.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1995.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1068826.621 ±(99.9%) 14994.511 ops/s [Average]
[info]   (min, avg, max) = (1062986.425, 1068826.621, 1073932.518), stdev = 3894.027
[info]   CI (99.9%): [1053832.110, 1083821.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   1401.366 ±(99.9%) 19.996 MB/sec [Average]
[info]   (min, avg, max) = (1393.561, 1401.366, 1408.167), stdev = 5.193
[info]   CI (99.9%): [1381.370, 1421.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   2064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.000, 2064.000, 2064.000), stdev = 0.001
[info]   CI (99.9%): [2064.000, 2064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.116, 0.183), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1399.516 ±(99.9%) 529.438 MB/sec [Average]
[info]   (min, avg, max) = (1327.427, 1399.516, 1645.102), stdev = 137.493
[info]   CI (99.9%): [870.078, 1928.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2061.279 ±(99.9%) 778.898 B/op [Average]
[info]   (min, avg, max) = (1945.656, 2061.279, 2421.682), stdev = 202.277
[info]   CI (99.9%): [1282.381, 2840.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 84.33% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 702111.082 ops/s
[info] # Warmup Iteration   2: 751145.651 ops/s
[info] # Warmup Iteration   3: 756317.765 ops/s
[info] # Warmup Iteration   4: 758333.721 ops/s
[info] # Warmup Iteration   5: 741067.841 ops/s
[info] Iteration   1: 758697.744 ops/s
[info]                  ·gc.alloc.rate:                   647.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1370.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 755631.789 ops/s
[info]                  ·gc.alloc.rate:                   645.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1376.368 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 756880.479 ops/s
[info]                  ·gc.alloc.rate:                   646.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 687.029 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 757178.572 ops/s
[info]                  ·gc.alloc.rate:                   646.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1376.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 757803.689 ops/s
[info]                  ·gc.alloc.rate:                   646.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1378.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   757238.455 ±(99.9%) 4374.390 ops/s [Average]
[info]   (min, avg, max) = (755631.789, 757238.455, 758697.744), stdev = 1136.015
[info]   CI (99.9%): [752864.065, 761612.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   646.506 ±(99.9%) 3.569 MB/sec [Average]
[info]   (min, avg, max) = (645.181, 646.506, 647.673), stdev = 0.927
[info]   CI (99.9%): [642.937, 650.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.130 ±(99.9%) 0.487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.304), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   595.390 ±(99.9%) 570.671 MB/sec [Average]
[info]   (min, avg, max) = (330.287, 595.390, 663.258), stdev = 148.202
[info]   CI (99.9%): [24.719, 1166.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1237.659 ±(99.9%) 1185.321 B/op [Average]
[info]   (min, avg, max) = (687.029, 1237.659, 1378.005), stdev = 307.824
[info]   CI (99.9%): [52.338, 2422.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 85.07% complete, ETA 00:05:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651845.558 ops/s
[info] # Warmup Iteration   2: 929990.743 ops/s
[info] # Warmup Iteration   3: 936532.054 ops/s
[info] # Warmup Iteration   4: 933855.970 ops/s
[info] # Warmup Iteration   5: 923754.457 ops/s
[info] Iteration   1: 934939.562 ops/s
[info]                  ·gc.alloc.rate:                   1396.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2233.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 936323.948 ops/s
[info]                  ·gc.alloc.rate:                   1399.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2243.952 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 923383.512 ops/s
[info]                  ·gc.alloc.rate:                   1379.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2286.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 922140.595 ops/s
[info]                  ·gc.alloc.rate:                   1377.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2873.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 936971.534 ops/s
[info]                  ·gc.alloc.rate:                   1399.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2270.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   930751.830 ±(99.9%) 28277.717 ops/s [Average]
[info]   (min, avg, max) = (922140.595, 930751.830, 936971.534), stdev = 7343.633
[info]   CI (99.9%): [902474.113, 959029.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   1390.668 ±(99.9%) 42.630 MB/sec [Average]
[info]   (min, avg, max) = (1377.662, 1390.668, 1399.957), stdev = 11.071
[info]   CI (99.9%): [1348.038, 1433.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.106 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.106, 0.210), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1407.400 ±(99.9%) 594.404 MB/sec [Average]
[info]   (min, avg, max) = (1326.416, 1407.400, 1683.062), stdev = 154.365
[info]   CI (99.9%): [812.996, 2001.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2381.519 ±(99.9%) 1061.855 B/op [Average]
[info]   (min, avg, max) = (2233.589, 2381.519, 2873.392), stdev = 275.760
[info]   CI (99.9%): [1319.664, 3443.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 85.82% complete, ETA 00:05:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 615979.172 ops/s
[info] # Warmup Iteration   2: 1260468.259 ops/s
[info] # Warmup Iteration   3: 1271491.838 ops/s
[info] # Warmup Iteration   4: 1290437.883 ops/s
[info] # Warmup Iteration   5: 1282943.769 ops/s
[info] Iteration   1: 1280377.367 ops/s
[info]                  ·gc.alloc.rate:                   897.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1193.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1280325.796 ops/s
[info]                  ·gc.alloc.rate:                   897.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.571 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1282142.681 ops/s
[info]                  ·gc.alloc.rate:                   899.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1206.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1284523.576 ops/s
[info]                  ·gc.alloc.rate:                   900.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 807.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1251774.002 ops/s
[info]                  ·gc.alloc.rate:                   877.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.168 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1275828.684 ±(99.9%) 52197.533 ops/s [Average]
[info]   (min, avg, max) = (1251774.002, 1275828.684, 1284523.576), stdev = 13555.534
[info]   CI (99.9%): [1223631.151, 1328026.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   894.725 ±(99.9%) 36.842 MB/sec [Average]
[info]   (min, avg, max) = (877.765, 894.725, 900.985), stdev = 9.568
[info]   CI (99.9%): [857.883, 931.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.113 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.093, 0.128), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   916.521 ±(99.9%) 555.806 MB/sec [Average]
[info]   (min, avg, max) = (658.731, 916.521, 993.185), stdev = 144.341
[info]   CI (99.9%): [360.715, 1472.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1131.627 ±(99.9%) 703.335 B/op [Average]
[info]   (min, avg, max) = (807.159, 1131.627, 1249.168), stdev = 182.654
[info]   CI (99.9%): [428.292, 1834.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 86.57% complete, ETA 00:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2044003.717 ops/s
[info] # Warmup Iteration   2: 2208548.491 ops/s
[info] # Warmup Iteration   3: 2226528.943 ops/s
[info] # Warmup Iteration   4: 2225261.957 ops/s
[info] # Warmup Iteration   5: 2232227.914 ops/s
[info] Iteration   1: 2198562.047 ops/s
[info]                  ·gc.alloc.rate:                   536.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2237513.973 ops/s
[info]                  ·gc.alloc.rate:                   545.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 232.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2230379.350 ops/s
[info]                  ·gc.alloc.rate:                   544.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 465.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2229148.049 ops/s
[info]                  ·gc.alloc.rate:                   543.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 466.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2233957.601 ops/s
[info]                  ·gc.alloc.rate:                   544.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.226 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2225912.204 ±(99.9%) 60204.010 ops/s [Average]
[info]   (min, avg, max) = (2198562.047, 2225912.204, 2237513.973), stdev = 15634.790
[info]   CI (99.9%): [2165708.194, 2286116.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   543.003 ±(99.9%) 14.492 MB/sec [Average]
[info]   (min, avg, max) = (536.406, 543.003, 545.754), stdev = 3.764
[info]   CI (99.9%): [528.510, 557.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.030 ±(99.9%) 0.144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.088), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   528.548 ±(99.9%) 695.690 MB/sec [Average]
[info]   (min, avg, max) = (330.305, 528.548, 660.777), stdev = 180.669
[info]   CI (99.9%): [≈ 0, 1224.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   374.197 ±(99.9%) 497.092 B/op [Average]
[info]   (min, avg, max) = (232.407, 374.197, 473.035), stdev = 129.093
[info]   CI (99.9%): [≈ 0, 871.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.140
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 87.31% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213668.042 ops/s
[info] # Warmup Iteration   2: 310976.155 ops/s
[info] # Warmup Iteration   3: 307634.537 ops/s
[info] # Warmup Iteration   4: 313676.709 ops/s
[info] # Warmup Iteration   5: 312955.900 ops/s
[info] Iteration   1: 312686.342 ops/s
[info]                  ·gc.alloc.rate:                   1064.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4960.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311868.986 ops/s
[info]                  ·gc.alloc.rate:                   1062.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6669.578 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 312240.164 ops/s
[info]                  ·gc.alloc.rate:                   1063.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.591 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5024.395 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 311886.653 ops/s
[info]                  ·gc.alloc.rate:                   1061.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5052.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 311278.217 ops/s
[info]                  ·gc.alloc.rate:                   1059.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5082.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   311992.072 ±(99.9%) 2000.309 ops/s [Average]
[info]   (min, avg, max) = (311278.217, 311992.072, 312686.342), stdev = 519.474
[info]   CI (99.9%): [309991.763, 313992.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1062.337 ±(99.9%) 6.602 MB/sec [Average]
[info]   (min, avg, max) = (1059.844, 1062.337, 1064.501), stdev = 1.714
[info]   CI (99.9%): [1055.736, 1068.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.378 ±(99.9%) 0.461 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.378, 0.525), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1061.866 ±(99.9%) 560.274 MB/sec [Average]
[info]   (min, avg, max) = (985.129, 1061.866, 1321.811), stdev = 145.501
[info]   CI (99.9%): [501.592, 1622.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5357.699 ±(99.9%) 2829.223 B/op [Average]
[info]   (min, avg, max) = (4960.346, 5357.699, 6669.578), stdev = 734.740
[info]   CI (99.9%): [2528.476, 8186.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 88.06% complete, ETA 00:04:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181076.314 ops/s
[info] # Warmup Iteration   2: 287164.470 ops/s
[info] # Warmup Iteration   3: 300898.354 ops/s
[info] # Warmup Iteration   4: 295652.380 ops/s
[info] # Warmup Iteration   5: 301347.452 ops/s
[info] Iteration   1: 304148.042 ops/s
[info]                  ·gc.alloc.rate:                   321.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1323.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 302426.000 ops/s
[info]                  ·gc.alloc.rate:                   319.690 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1686.521 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 302061.933 ops/s
[info]                  ·gc.alloc.rate:                   319.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1688.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 305421.618 ops/s
[info]                  ·gc.alloc.rate:                   322.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1664.810 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 302019.123 ops/s
[info]                  ·gc.alloc.rate:                   319.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1683.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   303215.343 ±(99.9%) 5814.962 ops/s [Average]
[info]   (min, avg, max) = (302019.123, 303215.343, 305421.618), stdev = 1510.127
[info]   CI (99.9%): [297400.381, 309030.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   320.505 ±(99.9%) 6.085 MB/sec [Average]
[info]   (min, avg, max) = (319.255, 320.505, 322.817), stdev = 1.580
[info]   CI (99.9%): [314.420, 326.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.001), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.791 ±(99.9%) 6.587 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 3.850), stdev = 1.711
[info]   CI (99.9%): [≈ 0, 7.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   4.117 ±(99.9%) 34.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.117, 20.042), stdev = 8.903
[info]   CI (99.9%): [≈ 0, 38.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   309.934 ±(99.9%) 116.712 MB/sec [Average]
[info]   (min, avg, max) = (255.722, 309.934, 324.017), stdev = 30.310
[info]   CI (99.9%): [193.222, 426.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1609.367 ±(99.9%) 616.082 B/op [Average]
[info]   (min, avg, max) = (1323.655, 1609.367, 1688.436), stdev = 159.994
[info]   CI (99.9%): [993.285, 2225.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88.81% complete, ETA 00:03:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 817126.017 ops/s
[info] # Warmup Iteration   2: 1059288.329 ops/s
[info] # Warmup Iteration   3: 1074734.394 ops/s
[info] # Warmup Iteration   4: 1076449.610 ops/s
[info] # Warmup Iteration   5: 1064725.630 ops/s
[info] Iteration   1: 1067031.723 ops/s
[info]                  ·gc.alloc.rate:                   900.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1457.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1066050.027 ops/s
[info]                  ·gc.alloc.rate:                   899.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1463.286 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1060574.643 ops/s
[info]                  ·gc.alloc.rate:                   894.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983.513 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1060732.210 ops/s
[info]                  ·gc.alloc.rate:                   895.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1480.956 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1071970.588 ops/s
[info]                  ·gc.alloc.rate:                   904.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.481 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   1065271.838 ±(99.9%) 18391.399 ops/s [Average]
[info]   (min, avg, max) = (1060574.643, 1065271.838, 1071970.588), stdev = 4776.188
[info]   CI (99.9%): [1046880.440, 1083663.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   898.784 ±(99.9%) 15.027 MB/sec [Average]
[info]   (min, avg, max) = (894.953, 898.784, 904.269), stdev = 3.902
[info]   CI (99.9%): [883.757, 913.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.111 ±(99.9%) 0.136 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.111, 0.154), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   928.191 ±(99.9%) 571.658 MB/sec [Average]
[info]   (min, avg, max) = (662.800, 928.191, 1001.288), stdev = 148.458
[info]   CI (99.9%): [356.533, 1499.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1371.050 ±(99.9%) 834.907 B/op [Average]
[info]   (min, avg, max) = (983.513, 1371.050, 1480.956), stdev = 216.823
[info]   CI (99.9%): [536.143, 2205.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 89.55% complete, ETA 00:03:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 759675.354 ops/s
[info] # Warmup Iteration   2: 924128.430 ops/s
[info] # Warmup Iteration   3: 931719.551 ops/s
[info] # Warmup Iteration   4: 934162.653 ops/s
[info] # Warmup Iteration   5: 933119.247 ops/s
[info] Iteration   1: 933763.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 931609.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 933103.992 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 931976.392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 932751.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   932640.944 ±(99.9%) 3329.539 ops/s [Average]
[info]   (min, avg, max) = (931609.808, 932640.944, 933763.048), stdev = 864.671
[info]   CI (99.9%): [929311.405, 935970.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 90.30% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271782.078 ops/s
[info] # Warmup Iteration   2: 345905.140 ops/s
[info] # Warmup Iteration   3: 333084.698 ops/s
[info] # Warmup Iteration   4: 349958.754 ops/s
[info] # Warmup Iteration   5: 351452.872 ops/s
[info] Iteration   1: 350883.621 ops/s
[info]                  ·gc.alloc.rate:                   374.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.533 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2937.054 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 351933.694 ops/s
[info]                  ·gc.alloc.rate:                   375.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1456.732 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 350362.037 ops/s
[info]                  ·gc.alloc.rate:                   373.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1463.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 349393.734 ops/s
[info]                  ·gc.alloc.rate:                   372.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1467.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 350552.829 ops/s
[info]                  ·gc.alloc.rate:                   374.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1462.428 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   350625.183 ±(99.9%) 3534.389 ops/s [Average]
[info]   (min, avg, max) = (349393.734, 350625.183, 351933.694), stdev = 917.870
[info]   CI (99.9%): [347090.794, 354159.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   374.195 ±(99.9%) 3.888 MB/sec [Average]
[info]   (min, avg, max) = (372.876, 374.195, 375.682), stdev = 1.010
[info]   CI (99.9%): [370.307, 378.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.578 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.836), stdev = 1.708
[info]   CI (99.9%): [≈ 0, 7.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   3.498 ±(99.9%) 29.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.498, 17.211), stdev = 7.666
[info]   CI (99.9%): [≈ 0, 33.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   391.448 ±(99.9%) 566.310 MB/sec [Average]
[info]   (min, avg, max) = (325.641, 391.448, 654.533), stdev = 147.069
[info]   CI (99.9%): [≈ 0, 957.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   1757.313 ±(99.9%) 2539.521 B/op [Average]
[info]   (min, avg, max) = (1456.732, 1757.313, 2937.054), stdev = 659.505
[info]   CI (99.9%): [≈ 0, 4296.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 5.000), stdev = 1.949
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 91.04% complete, ETA 00:03:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1320477.692 ops/s
[info] # Warmup Iteration   2: 1919438.134 ops/s
[info] # Warmup Iteration   3: 1942322.026 ops/s
[info] # Warmup Iteration   4: 1946266.192 ops/s
[info] # Warmup Iteration   5: 1951763.592 ops/s
[info] Iteration   1: 1953418.167 ops/s
[info]                  ·gc.alloc.rate:                   1349.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1065.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1953204.406 ops/s
[info]                  ·gc.alloc.rate:                   1349.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.976 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1956530.620 ops/s
[info]                  ·gc.alloc.rate:                   1352.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1077.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1944945.695 ops/s
[info]                  ·gc.alloc.rate:                   1344.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1087.728 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1956449.173 ops/s
[info]                  ·gc.alloc.rate:                   1352.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1085.645 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   1952909.612 ±(99.9%) 18205.210 ops/s [Average]
[info]   (min, avg, max) = (1944945.695, 1952909.612, 1956530.620), stdev = 4727.835
[info]   CI (99.9%): [1934704.402, 1971114.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   1349.726 ±(99.9%) 12.494 MB/sec [Average]
[info]   (min, avg, max) = (1344.305, 1349.726, 1352.300), stdev = 3.245
[info]   CI (99.9%): [1337.232, 1362.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.146), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.057 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.117), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   1337.139 ±(99.9%) 40.639 MB/sec [Average]
[info]   (min, avg, max) = (1322.568, 1337.139, 1349.373), stdev = 10.554
[info]   CI (99.9%): [1296.501, 1377.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1077.860 ±(99.9%) 34.724 B/op [Average]
[info]   (min, avg, max) = (1065.911, 1077.860, 1087.728), stdev = 9.018
[info]   CI (99.9%): [1043.137, 1112.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91.79% complete, ETA 00:02:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 979256.306 ops/s
[info] # Warmup Iteration   2: 2958590.766 ops/s
[info] # Warmup Iteration   3: 3050468.780 ops/s
[info] # Warmup Iteration   4: 3066230.249 ops/s
[info] # Warmup Iteration   5: 3050653.126 ops/s
[info] Iteration   1: 3039137.776 ops/s
[info]                  ·gc.alloc.rate:                   1111.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 506.216 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3034013.664 ops/s
[info]                  ·gc.alloc.rate:                   1110.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3058167.181 ops/s
[info]                  ·gc.alloc.rate:                   1118.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3063091.687 ops/s
[info]                  ·gc.alloc.rate:                   1120.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 512.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3049089.342 ops/s
[info]                  ·gc.alloc.rate:                   1115.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   3048699.930 ±(99.9%) 47318.459 ops/s [Average]
[info]   (min, avg, max) = (3034013.664, 3048699.930, 3063091.687), stdev = 12288.454
[info]   CI (99.9%): [3001381.471, 3096018.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1115.536 ±(99.9%) 17.069 MB/sec [Average]
[info]   (min, avg, max) = (1110.418, 1115.536, 1120.744), stdev = 4.433
[info]   CI (99.9%): [1098.467, 1132.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.054), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   1122.323 ±(99.9%) 708.751 MB/sec [Average]
[info]   (min, avg, max) = (977.182, 1122.323, 1335.191), stdev = 184.060
[info]   CI (99.9%): [413.572, 1831.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   579.653 ±(99.9%) 370.477 B/op [Average]
[info]   (min, avg, max) = (506.216, 579.653, 689.360), stdev = 96.212
[info]   CI (99.9%): [209.177, 950.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92.54% complete, ETA 00:02:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2571967.690 ops/s
[info] # Warmup Iteration   2: 3369255.654 ops/s
[info] # Warmup Iteration   3: 3420124.455 ops/s
[info] # Warmup Iteration   4: 3297048.762 ops/s
[info] # Warmup Iteration   5: 3372838.371 ops/s
[info] Iteration   1: 3402064.454 ops/s
[info]                  ·gc.alloc.rate:                   674.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.669 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 303.840 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3377160.748 ops/s
[info]                  ·gc.alloc.rate:                   669.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.408 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3337800.975 ops/s
[info]                  ·gc.alloc.rate:                   661.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 310.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3401233.213 ops/s
[info]                  ·gc.alloc.rate:                   674.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 305.619 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3396094.343 ops/s
[info]                  ·gc.alloc.rate:                   673.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3382870.747 ±(99.9%) 104471.213 ops/s [Average]
[info]   (min, avg, max) = (3337800.975, 3382870.747, 3402064.454), stdev = 27130.842
[info]   CI (99.9%): [3278399.533, 3487341.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   670.487 ±(99.9%) 20.630 MB/sec [Average]
[info]   (min, avg, max) = (661.601, 670.487, 674.305), stdev = 5.357
[info]   CI (99.9%): [649.857, 691.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   0.031 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   659.003 ±(99.9%) 8.432 MB/sec [Average]
[info]   (min, avg, max) = (656.669, 659.003, 662.018), stdev = 2.190
[info]   CI (99.9%): [650.571, 667.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   306.671 ±(99.9%) 9.599 B/op [Average]
[info]   (min, avg, max) = (303.840, 306.671, 310.624), stdev = 2.493
[info]   CI (99.9%): [297.072, 316.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 93.28% complete, ETA 00:02:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2786174.817 ops/s
[info] # Warmup Iteration   2: 3466974.935 ops/s
[info] # Warmup Iteration   3: 3539065.142 ops/s
[info] # Warmup Iteration   4: 3539280.610 ops/s
[info] # Warmup Iteration   5: 3538690.214 ops/s
[info] Iteration   1: 3551085.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3539504.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3549241.964 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3535830.491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3504158.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3535964.087 ±(99.9%) 72784.175 ops/s [Average]
[info]   (min, avg, max) = (3504158.303, 3535964.087, 3551085.411), stdev = 18901.819
[info]   CI (99.9%): [3463179.912, 3608748.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 94.03% complete, ETA 00:02:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1990384.512 ops/s
[info] # Warmup Iteration   2: 2755040.509 ops/s
[info] # Warmup Iteration   3: 2814986.003 ops/s
[info] # Warmup Iteration   4: 2792246.403 ops/s
[info] # Warmup Iteration   5: 2766848.676 ops/s
[info] Iteration   1: 2818541.850 ops/s
[info]                  ·gc.alloc.rate:                   1188.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 734.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2794774.303 ops/s
[info]                  ·gc.alloc.rate:                   1179.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2819652.195 ops/s
[info]                  ·gc.alloc.rate:                   1189.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 742.853 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2779774.776 ops/s
[info]                  ·gc.alloc.rate:                   1172.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.993 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2818869.163 ops/s
[info]                  ·gc.alloc.rate:                   1189.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   2806322.457 ±(99.9%) 70018.075 ops/s [Average]
[info]   (min, avg, max) = (2779774.776, 2806322.457, 2819652.195), stdev = 18183.472
[info]   CI (99.9%): [2736304.382, 2876340.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1183.773 ±(99.9%) 29.426 MB/sec [Average]
[info]   (min, avg, max) = (1172.565, 1183.773, 1189.278), stdev = 7.642
[info]   CI (99.9%): [1154.347, 1213.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   0.035 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.035, 0.058), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   1196.787 ±(99.9%) 699.814 MB/sec [Average]
[info]   (min, avg, max) = (993.064, 1196.787, 1342.860), stdev = 181.739
[info]   CI (99.9%): [496.973, 1896.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   670.822 ±(99.9%) 377.553 B/op [Average]
[info]   (min, avg, max) = (559.280, 670.822, 749.755), stdev = 98.049
[info]   CI (99.9%): [293.269, 1048.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94.78% complete, ETA 00:01:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6152.821 ops/s
[info] # Warmup Iteration   2: 9106.361 ops/s
[info] # Warmup Iteration   3: 11128.961 ops/s
[info] # Warmup Iteration   4: 10919.059 ops/s
[info] # Warmup Iteration   5: 11546.502 ops/s
[info] Iteration   1: 12759.027 ops/s
[info]                  ·gc.alloc.rate:                   1865.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              230152.837 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1993.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245979.515 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 12713.995 ops/s
[info]                  ·gc.alloc.rate:                   1859.424 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207249.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12517.483 ops/s
[info]                  ·gc.alloc.rate:                   1830.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 253999.761 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12630.680 ops/s
[info]                  ·gc.alloc.rate:                   1847.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210644.759 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12550.326 ops/s
[info]                  ·gc.alloc.rate:                   1835.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              230196.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255022.905 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12634.302 ±(99.9%) 397.471 ops/s [Average]
[info]   (min, avg, max) = (12517.483, 12634.302, 12759.027), stdev = 103.222
[info]   CI (99.9%): [12236.831, 13031.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1847.511 ±(99.9%) 57.882 MB/sec [Average]
[info]   (min, avg, max) = (1830.267, 1847.511, 1865.318), stdev = 15.032
[info]   CI (99.9%): [1789.629, 1905.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230194.788 ±(99.9%) 92.168 B/op [Average]
[info]   (min, avg, max) = (230152.837, 230194.788, 230208.057), stdev = 23.936
[info]   CI (99.9%): [230102.620, 230286.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.167 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.167, 0.229), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20.777 ±(99.9%) 24.108 B/op [Average]
[info]   (min, avg, max) = (12.968, 20.777, 28.344), stdev = 6.261
[info]   CI (99.9%): [≈ 0, 44.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1882.101 ±(99.9%) 705.548 MB/sec [Average]
[info]   (min, avg, max) = (1673.982, 1882.101, 2033.312), stdev = 183.229
[info]   CI (99.9%): [1176.552, 2587.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234579.222 ±(99.9%) 91221.636 B/op [Average]
[info]   (min, avg, max) = (207249.168, 234579.222, 255022.905), stdev = 23689.969
[info]   CI (99.9%): [143357.586, 325800.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95.52% complete, ETA 00:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5162.642 ops/s
[info] # Warmup Iteration   2: 16177.789 ops/s
[info] # Warmup Iteration   3: 16654.502 ops/s
[info] # Warmup Iteration   4: 16638.754 ops/s
[info] # Warmup Iteration   5: 16639.135 ops/s
[info] Iteration   1: 16674.178 ops/s
[info]                  ·gc.alloc.rate:                   235.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24142.774 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16602.791 ops/s
[info]                  ·gc.alloc.rate:      234.409 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.033 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16576.237 ops/s
[info]                  ·gc.alloc.rate:                   233.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              22214.456 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30609.818 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 16700.270 ops/s
[info]                  ·gc.alloc.rate:                   235.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              22208.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30380.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 16670.892 ops/s
[info]                  ·gc.alloc.rate:      235.182 MB/sec
[info]                  ·gc.alloc.rate.norm: 22208.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   16644.874 ±(99.9%) 202.721 ops/s [Average]
[info]   (min, avg, max) = (16576.237, 16644.874, 16700.270), stdev = 52.646
[info]   CI (99.9%): [16442.152, 16847.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   234.904 ±(99.9%) 2.748 MB/sec [Average]
[info]   (min, avg, max) = (233.923, 234.904, 235.637), stdev = 0.714
[info]   CI (99.9%): [232.156, 237.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   22215.713 ±(99.9%) 30.932 B/op [Average]
[info]   (min, avg, max) = (22208.024, 22215.713, 22224.033), stdev = 8.033
[info]   CI (99.9%): [22184.781, 22246.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.112, 0.562), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   10.672 ±(99.9%) 91.892 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.672, 53.362), stdev = 23.864
[info]   CI (99.9%): [≈ 0, 102.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   180.074 ±(99.9%) 641.599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 180.074, 322.354), stdev = 166.621
[info]   CI (99.9%): [≈ 0, 821.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   17026.673 ±(99.9%) 60679.351 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17026.673, 30609.818), stdev = 15758.235
[info]   CI (99.9%): [≈ 0, 77706.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 0.837
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96.27% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16313.804 ops/s
[info] # Warmup Iteration   2: 25616.410 ops/s
[info] # Warmup Iteration   3: 36290.838 ops/s
[info] # Warmup Iteration   4: 37815.869 ops/s
[info] # Warmup Iteration   5: 37852.511 ops/s
[info] Iteration   1: 37424.112 ops/s
[info]                  ·gc.alloc.rate:                   342.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10756.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 37711.372 ops/s
[info]                  ·gc.alloc.rate:                   345.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13761.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 37603.299 ops/s
[info]                  ·gc.alloc.rate:                   344.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13799.987 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 37857.749 ops/s
[info]                  ·gc.alloc.rate:                   346.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27304.792 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37889.862 ops/s
[info]                  ·gc.alloc.rate:                   346.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13612.121 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   37697.279 ±(99.9%) 736.898 ops/s [Average]
[info]   (min, avg, max) = (37424.112, 37697.279, 37889.862), stdev = 191.370
[info]   CI (99.9%): [36960.381, 38434.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   345.229 ±(99.9%) 6.746 MB/sec [Average]
[info]   (min, avg, max) = (342.724, 345.229, 346.996), stdev = 1.752
[info]   CI (99.9%): [338.483, 351.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   14416.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14416.011, 14416.011, 14416.012), stdev = 0.001
[info]   CI (99.9%): [14416.009, 14416.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.679 ±(99.9%) 5.592 MB/sec [Average]
[info]   (min, avg, max) = (0.013, 0.679, 3.276), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 6.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   28.326 ±(99.9%) 233.360 B/op [Average]
[info]   (min, avg, max) = (0.562, 28.326, 136.732), stdev = 60.603
[info]   CI (99.9%): [≈ 0, 261.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   379.865 ±(99.9%) 608.065 MB/sec [Average]
[info]   (min, avg, max) = (255.720, 379.865, 656.580), stdev = 157.913
[info]   CI (99.9%): [≈ 0, 987.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   15846.964 ±(99.9%) 25156.944 B/op [Average]
[info]   (min, avg, max) = (10756.349, 15846.964, 27304.792), stdev = 6533.178
[info]   CI (99.9%): [≈ 0, 41003.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 97.01% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 845.403 ops/s
[info] # Warmup Iteration   2: 3208.568 ops/s
[info] # Warmup Iteration   3: 3011.158 ops/s
[info] # Warmup Iteration   4: 3275.135 ops/s
[info] # Warmup Iteration   5: 3821.579 ops/s
[info] Iteration   1: 3828.496 ops/s
[info]                  ·gc.alloc.rate:                   1228.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 407520.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3820.347 ops/s
[info]                  ·gc.alloc.rate:                   1225.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 548019.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3827.349 ops/s
[info]                  ·gc.alloc.rate:                   1228.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550303.858 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3850.230 ops/s
[info]                  ·gc.alloc.rate:                   1235.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411726.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3802.369 ops/s
[info]                  ·gc.alloc.rate:                   1219.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558064.114 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3825.758 ±(99.9%) 66.283 ops/s [Average]
[info]   (min, avg, max) = (3802.369, 3825.758, 3850.230), stdev = 17.214
[info]   CI (99.9%): [3759.475, 3892.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1227.536 ±(99.9%) 21.308 MB/sec [Average]
[info]   (min, avg, max) = (1219.923, 1227.536, 1235.348), stdev = 5.534
[info]   CI (99.9%): [1206.228, 1248.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   505032.108 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (505032.106, 505032.108, 505032.115), stdev = 0.004
[info]   CI (99.9%): [505032.094, 505032.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   18.869 ±(99.9%) 36.518 B/op [Average]
[info]   (min, avg, max) = (8.507, 18.869, 34.465), stdev = 9.484
[info]   CI (99.9%): [≈ 0, 55.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   1202.971 ±(99.9%) 717.382 MB/sec [Average]
[info]   (min, avg, max) = (991.080, 1202.971, 1348.024), stdev = 186.302
[info]   CI (99.9%): [485.588, 1920.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   495127.031 ±(99.9%) 300951.960 B/op [Average]
[info]   (min, avg, max) = (407520.986, 495127.031, 558064.114), stdev = 78156.268
[info]   CI (99.9%): [194175.070, 796078.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97.76% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_2059cc9c/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22561.000 ops/s
[info] # Warmup Iteration   2: 55503.715 ops/s
[info] # Warmup Iteration   3: 56295.326 ops/s
[info] # Warmup Iteration   4: 56406.544 ops/s
[info] # Warmup Iteration   5: 54549.345 ops/s
[info] Iteration   1: 56400.925 ops/s
[info]                  ·gc.alloc.rate:                   720.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27313.346 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 56255.363 ops/s
[info]                  ·gc.alloc.rate:                   718.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18357.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 56669.826 ops/s
[info]                  ·gc.alloc.rate:                   723.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18296.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56122.325 ops/s
[info]                  ·gc.alloc.rate:                   716.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18548.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 55213.945 ops/s
[info]                  ·gc.alloc.rate:                   704.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18929.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   56132.477 ±(99.9%) 2126.339 ops/s [Average]
[info]   (min, avg, max) = (55213.945, 56132.477, 56669.826), stdev = 552.203
[info]   CI (99.9%): [54006.138, 58258.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   716.707 ±(99.9%) 27.170 MB/sec [Average]
[info]   (min, avg, max) = (704.979, 716.707, 723.598), stdev = 7.056
[info]   CI (99.9%): [689.538, 743.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20100.010 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (20099.978, 20100.010, 20100.041), stdev = 0.025
[info]   CI (99.9%): [20099.914, 20100.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1.742 ±(99.9%) 5.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.742, 3.469), stdev = 1.419
[info]   CI (99.9%): [≈ 0, 7.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   723.675 ±(99.9%) 548.768 MB/sec [Average]
[info]   (min, avg, max) = (655.985, 723.675, 978.556), stdev = 142.513
[info]   CI (99.9%): [174.907, 1272.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   20288.880 ±(99.9%) 15150.565 B/op [Average]
[info]   (min, avg, max) = (18296.430, 20288.880, 27313.346), stdev = 3934.554
[info]   CI (99.9%): [5138.315, 35439.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98.51% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73111.829 ops/s
[info] # Warmup Iteration   2: 89808.106 ops/s
[info] # Warmup Iteration   3: 89318.627 ops/s
[info] # Warmup Iteration   4: 90033.884 ops/s
[info] # Warmup Iteration   5: 90266.261 ops/s
[info] Iteration   1: 90569.804 ops/s
[info]                  ·gc.alloc.rate:                   591.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5694.882 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 88258.423 ops/s
[info]                  ·gc.alloc.rate:                   576.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11688.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 90133.038 ops/s
[info]                  ·gc.alloc.rate:                   589.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11456.987 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 90227.804 ops/s
[info]                  ·gc.alloc.rate:                   589.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11467.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 90196.302 ops/s
[info]                  ·gc.alloc.rate:                   589.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11501.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   89877.074 ±(99.9%) 3545.073 ops/s [Average]
[info]   (min, avg, max) = (88258.423, 89877.074, 90569.804), stdev = 920.644
[info]   CI (99.9%): [86332.001, 93422.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   587.417 ±(99.9%) 22.859 MB/sec [Average]
[info]   (min, avg, max) = (576.967, 587.417, 591.797), stdev = 5.936
[info]   CI (99.9%): [564.559, 610.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1.025 ±(99.9%) 3.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.025, 1.856), stdev = 0.949
[info]   CI (99.9%): [≈ 0, 4.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   591.094 ±(99.9%) 567.243 MB/sec [Average]
[info]   (min, avg, max) = (327.587, 591.094, 659.012), stdev = 147.311
[info]   CI (99.9%): [23.851, 1158.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   10361.776 ±(99.9%) 10052.297 B/op [Average]
[info]   (min, avg, max) = (5694.882, 10361.776, 11688.063), stdev = 2610.550
[info]   CI (99.9%): [309.479, 20414.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 9.0.1, VM 9.0.1+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99.25% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86004.179 ops/s
[info] # Warmup Iteration   2: 104756.659 ops/s
[info] # Warmup Iteration   3: 104617.668 ops/s
[info] # Warmup Iteration   4: 105203.361 ops/s
[info] # Warmup Iteration   5: 105347.913 ops/s
[info] Iteration   1: 105357.115 ops/s
[info]                  ·gc.alloc.rate:      4.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 105081.318 ops/s
[info]                  ·gc.alloc.rate:      4.807 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104835.937 ops/s
[info]                  ·gc.alloc.rate:      4.796 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 105284.635 ops/s
[info]                  ·gc.alloc.rate:      4.816 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 104874.282 ops/s
[info]                  ·gc.alloc.rate:      4.797 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   105086.657 ±(99.9%) 903.743 ops/s [Average]
[info]   (min, avg, max) = (104835.937, 105086.657, 105357.115), stdev = 234.699
[info]   CI (99.9%): [104182.914, 105990.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   4.807 ±(99.9%) 0.040 MB/sec [Average]
[info]   (min, avg, max) = (4.796, 4.807, 4.818), stdev = 0.010
[info]   CI (99.9%): [4.767, 4.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   72.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.004, 72.004, 72.004), stdev = 0.001
[info]   CI (99.9%): [72.004, 72.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:35:15
[info] Benchmark                                                                               Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    742766.535 ±  20793.579   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      1962.862 ±     55.556  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4160.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.096 ±      0.134  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.203 ±      0.282    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1958.645 ±    561.473  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4151.910 ±   1234.765    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        29.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        26.000                   ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1721007.437 ±  26356.727   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1224.606 ±     18.879  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1120.000 ±      0.001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.092 ±      0.146  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.084 ±      0.133    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1208.273 ±    718.485  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1105.156 ±    659.691    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        18.000               counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        21.000                   ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   4101140.254 ± 124610.086   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       270.950 ±      8.266  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5         0.624 ±      5.240  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.239 ±      2.003    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5       250.159 ±    553.195  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5        95.996 ±    212.663    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4.000               counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         6.000                   ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    184357.462 ±   6646.884   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1544.099 ±     56.093  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13184.002 ±      0.001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5         0.096 ±      0.091  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.818 ±      0.788    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5      1550.084 ±    703.796  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5     13242.331 ±   6267.193    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        23.000               counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        33.000                   ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2116482.899 ±  26590.012   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       817.484 ±     10.297  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       608.000 ±      0.001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.079 ±      0.104  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.059 ±      0.078    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5       861.589 ±    699.466  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5       641.114 ±    526.706    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        13.000               counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        15.000                   ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  13857546.534 ± 304477.661   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       704.279 ±     15.404  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.071 ±      0.193  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.008 ±      0.022    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5       724.451 ±    562.318  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        82.251 ±     62.605    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        11.000               counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5        10.000                   ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    317848.569 ±   8359.254   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1037.066 ±     26.928  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      5136.001 ±      0.001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.092 ±      0.185  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.454 ±      0.915    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      1067.807 ±    587.598  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      5287.601 ±   2880.610    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        16.000               counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        19.000                   ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1601617.085 ±  19742.577   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2515.016 ±     30.768  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2472.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.133 ±      0.072  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.131 ±      0.072    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2510.875 ±    721.073  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2468.288 ±    731.414    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        37.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        35.000                   ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2638326.254 ±  64160.317   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1850.205 ±     45.388  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.154  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.065 ±      0.092    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1895.829 ±    709.534  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      1131.706 ±    444.878    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        28.000               counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        33.000                   ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  10902858.518 ± 462095.959   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1385.228 ±     58.902  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.096 ±      0.146  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.014 ±      0.022    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5      1344.376 ±     28.505  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       194.122 ±      9.534    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        20.000               counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        19.000                   ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    692083.805 ±  11639.553   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1829.172 ±     30.238  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4160.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.092 ±      0.091  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.208 ±      0.206    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1759.077 ±    596.702  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      3999.882 ±   1311.701    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        26.000               counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        30.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   1973131.968 ±  51321.132   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1825.306 ±     47.960  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.108 ±      0.036  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.086 ±      0.029    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1820.343 ±    697.620  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1452.737 ±    589.005    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        27.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        24.000                   ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   6467760.307 ±  23402.122   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1774.860 ±      6.612  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.100 ±      0.105  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.024 ±      0.025    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1757.292 ±    573.321  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       427.706 ±    138.428    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  22963594.342 ± 842572.027   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       700.244 ±     25.570  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±      0.104  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.005 ±      0.007    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       725.179 ±    565.824  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        49.684 ±     37.947    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        11.000               counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        10.000                   ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  23024656.011 ± 441203.696   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1445740.710 ±  22183.962   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2123.631 ±     31.783  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2312.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.125 ±      0.188  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.136 ±      0.205    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      2102.034 ±    577.511  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      2288.455 ±    625.080    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        31.000               counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        36.000                   ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5    945532.144 ±  13497.176   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3051.294 ±     45.450  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5080.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.117 ±      0.122  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.194 ±      0.202    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      2991.767 ±    580.195  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      4980.495 ±    926.899    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        41.000                   ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1712354.609 ± 166844.080   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1610.354 ±    156.421  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.104 ±      0.080  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.096 ±      0.071    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5      1621.941 ±    572.172  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1489.587 ±    456.338    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        24.000               counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        31.000                   ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5   9904196.184 ± 274009.481   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      2466.219 ±     69.080  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       392.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5         0.146 ±      0.160  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.023 ±      0.025    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5      2512.787 ±    708.663  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       399.526 ±    120.142    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        37.000               counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        32.000                   ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    327261.523 ±   2584.773   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      1994.072 ±     15.559  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9592.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5         0.108 ±      0.067  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.521 ±      0.322    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5      2031.774 ±     29.806  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      9773.441 ±    210.948    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        30.000               counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        35.000                   ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1043577.128 ±  16059.752   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2296.608 ±     34.980  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3464.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.092 ±      0.209  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.138 ±      0.317    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2304.493 ±    578.670  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3476.384 ±    903.986    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        34.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        31.000                   ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3990796.917 ±  45640.858   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2210.729 ±     25.137  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       872.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.125 ±      0.204  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.049 ±      0.081    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      2239.153 ±    714.558  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       883.137 ±    277.451    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        33.000               counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        39.000                   ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  19847856.817 ± 186892.929   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       907.820 ±      8.031  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.083 ±      0.188  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.007 ±      0.015    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       926.988 ±    564.729  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        73.503 ±     44.383    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        14.000               counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5        13.000                   ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    492438.381 ±  16869.145   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      1721.764 ±     59.263  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5504.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.083 ±      0.170  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.265 ±      0.535    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1688.795 ±     31.166  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5399.128 ±    281.599    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        25.000               counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        30.000                   ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      8414.110 ±     99.387   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1242.929 ±     14.341  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    232527.997 ±     30.809    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.062 ±      0.113  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        11.681 ±     21.197    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1270.448 ±    576.433  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    237680.525 ± 108011.768    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        19.000               counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        18.000                   ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5     24865.451 ±    362.365   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5       915.307 ±     41.649  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5     58216.017 ±      0.002    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.042 ±      0.150  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         2.636 ±      9.486    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       918.674 ±    569.161  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     58459.179 ±  36739.868    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        16.000               counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        48.000                   ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5     28262.005 ±   2431.828   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       512.999 ±     44.154  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5     28568.015 ±      0.002    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±      0.268  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.215 ±     14.778    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       462.676 ±    696.993  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     25710.265 ±  37934.570    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         7.000               counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         6.000                   ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5     15994.933 ±    267.437   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1533.739 ±     25.816  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5    150944.028 ±      0.460    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±      0.160  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         8.197 ±     15.810    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5      1486.481 ±    715.107  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    146304.020 ±  70753.537    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        22.000               counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        26.000                   ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5     17495.282 ±    443.828   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1585.470 ±     39.113  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5    142648.025 ±      0.010    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.104 ±      0.188  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         9.386 ±     17.268    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5      1619.320 ±    578.141  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    145724.579 ±  53319.006    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        24.000               counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        21.000                   ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5     17540.285 ±    315.492   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1531.588 ±     27.039  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5    137440.025 ±      0.010    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5         0.104 ±      0.098  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5         9.344 ±      8.955    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5      1483.869 ±    713.980  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5    133205.258 ±  65897.046    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        22.000               counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        19.000                   ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2465909.676 ±  30833.087   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1566.558 ±     20.069  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.117 ±      0.072  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.074 ±      0.045    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5      1552.470 ±    695.367  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       991.172 ±    450.177    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        23.000               counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        28.000                   ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5234845.494 ± 224286.765   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       691.754 ±     29.359  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5         0.058 ±      0.104  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.018 ±      0.032    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5       660.052 ±     10.261  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       198.488 ±      9.169    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5         9.000                   ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    369570.958 ±   5837.146   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1733.627 ±     26.915  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7384.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5         0.083 ±      0.160  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.355 ±      0.686    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5      1757.485 ±    574.663  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      7485.836 ±   2457.987    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        26.000               counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        31.000                   ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   2733656.510 ±  38172.744   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1444.761 ±     20.159  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±      0.091  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.053 ±      0.053    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5      1415.170 ±    584.203  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       814.942 ±    335.304    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        21.000               counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        27.000                   ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   6944005.693 ±  72540.765   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5      1058.672 ±     10.923  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±      0.036  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.020 ±      0.008    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5      1065.884 ±    596.010  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       241.686 ±    137.072    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        16.000               counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5        15.000                   ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    725017.251 ±  10863.854   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2100.201 ±     32.122  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4560.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.117 ±      0.185  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.253 ±      0.401    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      2033.835 ±     25.012  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4415.981 ±    104.963    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        30.000               counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        35.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    802492.554 ±  83109.238   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2610.269 ±    269.547  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5120.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.125 ±      0.160  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.245 ±      0.310    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2648.008 ±    589.963  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      5196.538 ±   1245.794    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        39.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        34.000                   ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5    993654.520 ±  20362.152   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1232.192 ±     25.513  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.146  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.151 ±      0.228    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5      1208.518 ±    701.405  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1915.104 ±   1128.530    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        18.000               counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        21.000                   ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   7618067.186 ± 339312.448   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       348.425 ±     15.523  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.638 ±      5.270  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.131 ±      1.084    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       331.117 ±      4.207  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        68.430 ±      2.871    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         5.000               counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                   ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    308941.493 ±   7364.628   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1584.213 ±     37.124  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8072.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±      0.256  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.341 ±      1.315    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1551.363 ±    722.863  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      7908.492 ±   3823.427    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        23.000               counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        27.000                   ms
[info] FloatArrayBenchmark.readCirce                                                          thrpt    5      7314.767 ±    200.599   ops/s
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1384.376 ±     38.333  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    297940.442 ±     26.891    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.029 ±      0.108  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         6.276 ±     23.134    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1406.053 ±    564.711  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    302530.361 ± 117095.806    B/op
[info] FloatArrayBenchmark.readCirce:·gc.count                                                thrpt    5        21.000               counts
[info] FloatArrayBenchmark.readCirce:·gc.time                                                 thrpt    5        19.000                   ms
[info] FloatArrayBenchmark.readJackson                                                        thrpt    5     20239.321 ±    524.390   ops/s
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       880.028 ±     22.725  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     68444.930 ±     42.273    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±      0.207  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         5.178 ±     16.068    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       858.382 ±    690.070  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     66801.073 ±  54485.964    B/op
[info] FloatArrayBenchmark.readJackson:·gc.count                                              thrpt    5        13.000               counts
[info] FloatArrayBenchmark.readJackson:·gc.time                                               thrpt    5        13.000                   ms
[info] FloatArrayBenchmark.readJsoniter                                                       thrpt    5     39360.932 ±    478.932   ops/s
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       103.244 ±      1.231  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5      4128.011 ±      0.002    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.002 ±      0.018  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.084 ±      0.724    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       102.315 ±    539.478  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      4101.107 ±  21624.122    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.count                                             thrpt    5         2.000               counts
[info] FloatArrayBenchmark.readJsoniter:·gc.time                                              thrpt    5         4.000                   ms
[info] FloatArrayBenchmark.readPlay                                                           thrpt    5      6483.690 ±     59.128   ops/s
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1498.338 ±     12.752  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    363712.065 ±      0.011    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.037 ±      0.067  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         9.085 ±     16.191    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1478.103 ±    718.090  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    358831.574 ± 175520.987    B/op
[info] FloatArrayBenchmark.readPlay:·gc.count                                                 thrpt    5        22.000               counts
[info] FloatArrayBenchmark.readPlay:·gc.time                                                  thrpt    5        25.000                   ms
[info] FloatArrayBenchmark.writeCirce                                                         thrpt    5     17031.642 ±   2246.139   ops/s
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       500.842 ±     95.276  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     46391.225 ±  14586.940    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.046 ±      0.174  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         4.253 ±     16.353    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       522.122 ±    689.218  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     48312.902 ±  64343.305    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.count                                               thrpt    5         8.000               counts
[info] FloatArrayBenchmark.writeCirce:·gc.time                                                thrpt    5         8.000                   ms
[info] FloatArrayBenchmark.writeJackson                                                       thrpt    5     21349.185 ±    423.051   ops/s
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       350.871 ±      7.012  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     25872.002 ±      0.361    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.803 ±      6.739  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        59.717 ±    501.010    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       322.856 ±      2.756  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23806.937 ±    636.600    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.count                                             thrpt    5         5.000               counts
[info] FloatArrayBenchmark.writeJackson:·gc.time                                              thrpt    5         8.000                   ms
[info] FloatArrayBenchmark.writeJsoniter                                                      thrpt    5     23053.447 ±    625.529   ops/s
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       297.003 ±      7.983  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     20280.018 ±      0.003    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.662 ±      5.566  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5        45.252 ±    380.454    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       314.477 ±    126.552  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     21486.021 ±   9119.390    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.count                                            thrpt    5         5.000               counts
[info] FloatArrayBenchmark.writeJsoniter:·gc.time                                             thrpt    5         8.000                   ms
[info] FloatArrayBenchmark.writeJsoniterPrealloc                                              thrpt    5     23343.304 ±   1670.926   ops/s
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       220.073 ±     15.815  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5     14840.017 ±      0.001    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0.661 ±      5.597  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        44.467 ±    376.583    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       234.292 ±    524.204  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5     15880.923 ±  35804.852    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         4.000               counts
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         8.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      8039.412 ±    224.911   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1934.650 ±     53.165  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    378808.399 ±     83.252    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±      0.102  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        16.311 ±     20.239    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1890.506 ±    722.034  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    370102.598 ± 138099.756    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        28.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        31.000                   ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     14820.723 ±    104.141   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       375.404 ±      2.750  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     39872.029 ±      0.016    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5         0.012 ±      0.072  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1.324 ±      7.602    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5       390.542 ±    564.276  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     41495.735 ±  60234.527    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         8.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     23809.037 ±    628.878   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       406.790 ±     10.721  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     26896.017 ±      0.003    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5         0.021 ±      0.113  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.384 ±      7.557    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5       393.832 ±    564.191  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     26026.824 ±  37049.710    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         6.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         6.000                   ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2669.650 ±     43.760   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1615.950 ±     26.986  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    952664.155 ±      0.020    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5         0.025 ±      0.088  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5        14.707 ±     51.700    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5      1618.580 ±    569.448  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    953999.010 ± 325317.000    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        31.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      7946.609 ±    263.125   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1648.461 ±     53.733  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    326522.881 ±     99.311    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.151 ±      0.209  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5        29.916 ±     41.324    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1614.283 ±    577.323  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    319848.410 ± 118271.913    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        24.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        23.000                   ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     41462.854 ±    845.169   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       600.759 ±     12.331  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807.860 ±      0.426    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.046 ±      0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.738 ±      5.431    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       591.054 ±    562.126  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     22416.720 ±  21038.430    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5         9.000               counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5        11.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     62528.085 ±   2218.519   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       472.185 ±     16.812  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11888.007 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.025 ±      0.174  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.627 ±      4.362    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       459.081 ±    691.843  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11550.317 ±  17300.733    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         7.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     73709.881 ±   4138.495   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1.124 ±      0.063  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24.006 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      6303.329 ±    108.329   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1853.235 ±     31.590  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    462800.128 ±      1.674    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.037 ±      0.132  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         9.345 ±     32.760    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5      1826.880 ±    718.197  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    456316.350 ± 183921.614    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        27.000               counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        34.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   5410875.585 ± 235202.083   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1622.654 ±     71.099  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±      0.122  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.028 ±      0.036    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5      1617.806 ±    579.403  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       470.379 ±    157.602    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        24.000               counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        22.000                   ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    371842.421 ±   8540.645   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      2063.589 ±     47.346  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8736.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5         0.100 ±      0.088  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.423 ±      0.375    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5      2033.598 ±     25.461  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8609.323 ±    253.903    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        30.000               counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        35.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3542339.368 ±  30351.834   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       576.032 ±      4.946  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       256.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.046 ±      0.154  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.020 ±      0.069    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       525.426 ±    692.381  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       233.531 ±    307.959    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         8.000                   ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    351218.780 ±   8164.503   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1365.468 ±     31.080  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6120.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.096 ±      0.122  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.429 ±      0.539    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1411.318 ±    548.232  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6325.421 ±   2446.938    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        21.000               counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        24.000                   ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     17155.502 ±    442.559   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2133.507 ±     54.635  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    195751.837 ±      1.614    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.071 ±      0.091  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         6.497 ±      8.476    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2099.073 ±    577.435  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    192659.136 ±  57442.271    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000               counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        32.000                   ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     39082.485 ±   2252.967   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       280.645 ±     16.182  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11304.011 ±      0.002    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'               thrpt    5         0.007 ±      0.058  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm          thrpt    5         0.276 ±      2.375    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.826 ±      7.025  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5        33.975 ±    288.966    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5       275.770 ±    282.642  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     11086.456 ±  11123.127    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         6.000               counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5        44.000                   ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     90829.696 ±   5965.875   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       475.471 ±     31.137  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5      8240.005 ±      0.001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5         0.033 ±      0.146  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.584 ±      2.577    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5       459.745 ±    692.205  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7997.144 ±  12403.567    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5         7.000               counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5         6.000                   ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      8758.566 ±    153.750   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3097.554 ±     48.677  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    556704.254 ±   2102.297    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5         0.092 ±      0.072  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5        16.465 ±     13.104    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5      3060.445 ±     13.662  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5    550041.180 ±   7907.356    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        45.000               counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        48.000                   ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     23662.071 ±    288.736   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1275.443 ±     15.518  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     84856.018 ±      0.002    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.092 ±      0.091  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         6.090 ±      6.048    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1336.763 ±     40.761  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     88936.669 ±   3071.667    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        20.000               counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        19.000                   ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    100888.100 ±   4113.223   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       813.449 ±     33.066  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12692.322 ±      0.041    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±      0.166  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.108 ±      2.637    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       783.737 ±    688.265  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     12246.561 ±  11127.639    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        12.000               counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        13.000                   ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    118913.113 ±   2028.005   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       506.422 ±      8.612  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6704.003 ±      0.001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.037 ±      0.164  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.495 ±      2.173    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5       459.806 ±    692.821  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      6085.526 ±   9151.193    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         7.000               counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         6.000                   ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    153626.726 ±    877.156   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴               MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0.003 ±      0.001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0               counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      4215.842 ±     58.700   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1813.590 ±     25.193  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    677212.393 ±      1.084    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.029 ±      0.134  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5        10.879 ±     50.078    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1817.665 ±    723.309  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    678866.454 ± 276200.766    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        27.000               counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        30.000                   ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    713424.406 ±  15021.368   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2570.494 ±     53.900  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5672.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.088  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.239 ±      0.199    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2580.504 ±    733.566  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5695.580 ±   1706.912    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        38.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        34.000                   ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    645899.206 ±  24860.824   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       751.733 ±     29.117  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.050 ±      0.185  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.122 ±      0.448    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5       726.753 ±    561.490  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1770.375 ±   1342.631    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        11.000               counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        13.000                   ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   3927457.293 ±  48273.033   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1636.713 ±     19.946  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       656.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.166  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.045 ±      0.067    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5      1617.570 ±    563.704  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       648.275 ±    223.306    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        24.000               counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        23.000                   ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    247455.592 ±   5233.875   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1725.420 ±     36.625  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10976.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5         0.083 ±      0.127  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.530 ±      0.818    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5      1689.477 ±     31.358  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5     10747.638 ±    318.966    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        25.000               counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        32.000                   ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5    894563.153 ±  10035.391   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2054.717 ±     23.056  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3616.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.080  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.183 ±      0.140    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2028.974 ±     38.020  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3570.754 ±    102.122    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        30.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        28.000                   ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   1860753.758 ±  22224.853   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1257.705 ±     14.688  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.108 ±      0.067  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.092 ±      0.056    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1274.762 ±    588.240  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1078.656 ±    505.204    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        19.000               counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        23.000                   ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   6929052.252 ±  50084.168   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       774.739 ±      5.632  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.067 ±      0.119  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.015 ±      0.027    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       792.019 ±    692.785  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       179.930 ±    157.481    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        12.000               counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5        11.000                   ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    531749.340 ±  10121.234   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      1835.004 ±     34.457  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5432.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.132  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.320 ±      0.391    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1826.818 ±    717.280  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      5408.896 ±   2175.208    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        27.000               counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        31.000                   ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    688544.845 ±  17180.381   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2386.375 ±     59.641  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5456.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.112 ±      0.269  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.258 ±      0.624    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2441.323 ±    552.850  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5580.811 ±   1180.336    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        36.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        44.000                   ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   5580876.512 ± 169441.513   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1389.844 ±     42.418  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5         0.100 ±      0.132  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.028 ±      0.037    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5      1409.036 ±    545.637  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5       397.402 ±    152.552    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        21.000               counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        19.000                   ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    401166.844 ±   2661.414   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      2148.720 ±     14.608  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8432.001 ±      0.001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5         0.104 ±      0.080  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.408 ±      0.314    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5      2170.588 ±    723.154  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      8517.946 ±   2844.516    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        32.000               counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        45.000                   ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    532460.716 ±   6498.959   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1353.042 ±     16.146  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4000.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.067 ±      0.174  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.197 ±      0.516    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1336.806 ±     40.196  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      3952.011 ±    115.629    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        20.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        18.000                   ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3365505.003 ± 179658.362   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       718.427 ±     38.537  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       336.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5         0.096 ±      0.185  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.045 ±      0.085    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5       725.271 ±    573.258  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       339.177 ±    266.203    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5        11.000               counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5        11.000                   ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    373584.759 ±   5399.453   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1348.019 ±     20.271  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5680.001 ±      0.001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5         0.096 ±      0.072  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.403 ±      0.298    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5      1343.638 ±     32.080  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5661.577 ±    134.614    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        20.000               counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        24.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2145321.482 ±  41356.086   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3173.104 ±     60.465  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2328.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.146 ±      0.160  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.107 ±      0.118    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      3196.410 ±    709.602  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      2345.004 ±    510.384    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        47.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        42.000                   ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    284406.693 ±   5819.560   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       502.977 ±     10.454  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      2784.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.017 ±      0.104  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.092 ±      0.578    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5       524.497 ±    690.885  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2904.544 ±   3841.975    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5         8.000               counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5         9.000                   ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    693960.691 ±  18367.490   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       440.854 ±     11.496  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1000.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.012 ±      0.108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.029 ±      0.245    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       395.860 ±    567.042  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       898.941 ±   1305.211    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5         6.000               counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         6.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   2683885.980 ±  25241.791   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5       873.027 ±      8.115  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       512.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5         0.062 ±      0.080  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.037 ±      0.047    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5       864.027 ±    700.879  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5       506.893 ±    414.631    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        13.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        12.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   4030445.148 ±  17557.223   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       348.205 ±      1.516  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       136.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5         0.636 ±      5.294  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5         0.248 ±      2.069    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5       330.987 ±      4.861  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5       129.275 ±      1.897    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5         5.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         6.000                   ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    208180.974 ±  11561.111   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1324.591 ±     73.105  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     10016.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±      0.088  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.754 ±      0.634    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1342.711 ±     34.454  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     10154.294 ±    483.959    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        20.000               counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        22.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    735787.865 ±  11104.172   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      2811.919 ±     42.310  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6016.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.142 ±      0.191  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.303 ±      0.411    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      2786.015 ±    588.992  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5960.290 ±   1229.063    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        41.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        36.000                   ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   3870115.994 ±  45479.166   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2497.885 ±     30.089  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5         0.100 ±      0.067  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.041 ±      0.027    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5      2512.515 ±    706.863  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1021.930 ±    285.761    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        37.000               counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        33.000                   ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    273016.750 ±   2966.090   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      1952.197 ±     21.563  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11256.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5         0.108 ±      0.105  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.624 ±      0.602    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5      1963.826 ±    589.051  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11323.794 ±   3434.415    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        29.000               counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        34.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    840037.398 ±  12224.726   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1844.367 ±     26.914  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3456.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.104 ±      0.098  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.195 ±      0.185    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1889.691 ±    708.452  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3540.794 ±   1320.088    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        26.000                   ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   1906114.293 ±  43908.426   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1036.464 ±     24.018  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       856.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±      0.154  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.065 ±      0.127    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5      1000.020 ±     25.870  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       825.942 ±     36.148    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        15.000               counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        18.000                   ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   4773187.207 ± 187755.977   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       363.909 ±     14.156  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5         0.666 ±      5.598  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.219 ±      1.841    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5       394.428 ±    571.469  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5       130.021 ±    187.468    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         6.000               counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         7.000                   ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    511105.308 ±   5229.470   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1742.967 ±     18.469  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5368.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5         0.104 ±      0.150  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.321 ±      0.464    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5      1757.962 ±    602.461  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5414.838 ±   1893.839    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        26.000               counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        31.000                   ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3567498.622 ± 102789.063   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1686.133 ±     48.803  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±      0.091  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.031 ±      0.040    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5      1686.646 ±     34.732  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       744.273 ±     32.426    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        25.000               counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        23.000                   ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    307248.783 ±   3977.225   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1636.412 ±     21.465  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8384.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±      0.121  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.469 ±      0.621    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1621.375 ±    602.702  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8307.497 ±   3110.213    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        24.000               counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        29.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    507031.997 ±   9153.644   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1301.290 ±     23.348  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.166  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.220 ±      0.517    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1267.597 ±    554.770  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      3933.975 ±   1669.216    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        19.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        19.000                   ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   2897968.956 ±  27076.017   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       589.090 ±      5.477  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       320.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.054 ±      0.193  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.029 ±      0.105    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       591.508 ±    567.277  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       321.441 ±    309.772    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9.000               counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         8.000                   ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    344443.699 ±   9472.961   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1321.706 ±     35.902  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.075 ±      0.072  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.342 ±      0.328    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5      1343.693 ±     31.608  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      6140.836 ±    271.491    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        20.000               counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        23.000                   ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    687454.761 ±  20341.184   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2103.179 ±     62.888  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4816.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.108 ±      0.132  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.247 ±      0.294    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2097.188 ±    605.499  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      4801.399 ±   1313.864    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        31.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        29.000                   ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1476340.076 ±  38334.005   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1117.960 ±     29.413  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.108 ±      0.105  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.115 ±      0.109    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5      1138.165 ±    690.623  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1213.150 ±    722.517    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        17.000               counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   6809402.426 ±  98448.975   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       207.629 ±      2.998  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.620 ±      5.305  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.144 ±      1.229    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       168.763 ±    605.347  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        39.063 ±    140.146    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         3.000               counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         7.000                   ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    252591.577 ±  11926.065   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1738.233 ±     82.852  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10832.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.092 ±      0.044  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.570 ±      0.267    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1757.057 ±    594.360  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     10948.958 ±   3631.909    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        26.000               counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        31.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5    945271.812 ±  10711.004   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1522.859 ±     17.436  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2536.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±      0.127  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.173 ±      0.212    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1543.010 ±    732.587  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      2569.596 ±   1221.353    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2567083.454 ± 106751.827   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1056.740 ±     43.883  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       648.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.108 ±      0.132  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.066 ±      0.080    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1069.988 ±    590.063  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       656.049 ±    356.966    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        16.000               counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        19.000                   ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   6075235.012 ±  44022.608   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       679.264 ±      4.502  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       176.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.067 ±      0.088  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.017 ±      0.023    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       659.022 ±      8.173  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       170.756 ±      2.278    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5        10.000               counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5         9.000                   ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   5666055.994 ±  41783.119   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       345.524 ±      2.599  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        96.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5         0.655 ±      5.502  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.182 ±      1.531    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5       328.976 ±      3.505  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        91.403 ±      0.993    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         5.000               counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         6.000                   ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    342488.619 ±   6374.399   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1761.447 ±     32.873  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8096.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±      0.160  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.478 ±      0.733    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5      1757.122 ±    586.447  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      8074.932 ±   2614.502    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        26.000               counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        30.000                   ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    722947.712 ±   7962.860   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1612.893 ±     16.831  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      3512.001 ±      0.001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.071 ±      0.072  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.154 ±      0.156    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1615.092 ±    578.263  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      3516.972 ±   1267.047    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        24.000               counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        21.000                   ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1068826.621 ±  14994.511   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      1401.366 ±     19.996  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      2064.000 ±      0.001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.119  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.116 ±      0.174    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5      1399.516 ±    529.438  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2061.279 ±    778.898    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        21.000               counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        21.000                   ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5    757238.455 ±   4374.390   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5       646.506 ±      3.569  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      1344.001 ±      0.001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.062 ±      0.234  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.130 ±      0.487    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       595.390 ±    570.671  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1237.659 ±   1185.321    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5         9.000               counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5         9.000                   ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5    930751.830 ±  28277.717   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      1390.668 ±     42.630  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      2352.000 ±      0.001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.062 ±      0.150  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.106 ±      0.252    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1407.400 ±    594.404  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      2381.519 ±   1061.855    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        21.000               counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        19.000                   ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1275828.684 ±  52197.533   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       894.725 ±     36.842  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5      1104.000 ±      0.001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.091  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.093 ±      0.113    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5       916.521 ±    555.806  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1131.627 ±    703.335    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        14.000               counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5        14.000                   ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2225912.204 ±  60204.010   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       543.003 ±     14.492  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       384.000 ±      0.001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5         0.042 ±      0.204  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.030 ±      0.144    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5       528.548 ±    695.690  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       374.197 ±    497.092    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         8.000               counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         7.000                   ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    311992.072 ±   2000.309   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1062.337 ±      6.602  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      5360.001 ±      0.001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.075 ±      0.091  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.378 ±      0.461    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1061.866 ±    560.274  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      5357.699 ±   2829.223    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        16.000               counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        14.000                   ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    303215.343 ±   5814.962   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       320.505 ±      6.085  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1664.001 ±      0.001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5         0.791 ±      6.587  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.117 ±     34.284    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5       309.934 ±    116.712  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1609.367 ±    616.082    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5         5.000               counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5        10.000                   ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5   1065271.838 ±  18391.399   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       898.784 ±     15.027  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328.000 ±      0.001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±      0.091  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.111 ±      0.136    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5       928.191 ±    571.658  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1371.050 ±    834.907    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        14.000               counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5        13.000                   ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5    932640.944 ±   3329.539   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                 B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0               counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5    350625.183 ±   3534.389   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5       374.195 ±      3.888  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680.001 ±      0.001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5         0.780 ±      6.578  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5         3.498 ±     29.519    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5       391.448 ±    566.310  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1757.313 ±   2539.521    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5         6.000               counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5         8.000                   ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   1952909.612 ±  18205.210   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5      1349.726 ±     12.494  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1088.000 ±      0.001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±      0.201  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.057 ±      0.162    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1337.139 ±     40.639  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1077.860 ±     34.724    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        20.000               counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        18.000                   ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   3048699.930 ±  47318.459   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1115.536 ±     17.069  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       576.000 ±      0.001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5         0.071 ±      0.091  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.037 ±      0.048    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5      1122.323 ±    708.751  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       579.653 ±    370.477    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        17.000               counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        17.000                   ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3382870.747 ± 104471.213   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       670.487 ±     20.630  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312.000 ±      0.001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5         0.067 ±      0.174  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.031 ±      0.081    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5       659.003 ±      8.432  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       306.671 ±      9.599    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        10.000               counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         9.000                   ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3535964.087 ±  72784.175   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0               counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   2806322.457 ±  70018.075   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1183.773 ±     29.426  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664.000 ±      0.001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5         0.062 ±      0.150  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.035 ±      0.084    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5      1196.787 ±    699.814  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       670.822 ±    377.553    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        18.000               counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        17.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     12634.302 ±    397.471   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1847.511 ±     57.882  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    230194.788 ±     92.168    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.167 ±      0.194  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        20.777 ±     24.108    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1882.101 ±    705.548  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    234579.222 ±  91221.636    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        28.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        29.000                   ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     16644.874 ±    202.721   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       234.904 ±      2.748  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     22215.713 ±     30.932    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.968  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5        10.672 ±     91.892    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5       180.074 ±    641.599  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     17026.673 ±  60679.351    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         3.000               counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5         4.000                   ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     37697.279 ±    736.898   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       345.229 ±      6.746  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     14416.011 ±      0.002    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5         0.679 ±      5.592  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        28.326 ±    233.360    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5       379.865 ±    608.065  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     15846.964 ±  25156.944    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         6.000               counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         8.000                   ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3825.758 ±     66.283   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1227.536 ±     21.308  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    505032.108 ±      0.014    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5         0.046 ±      0.088  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5        18.869 ±     36.518    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5      1202.971 ±    717.382  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    495127.031 ± 300951.960    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        18.000               counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        29.000                   ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     56132.477 ±   2126.339   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       716.707 ±     27.170  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20100.010 ±      0.096    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±      0.196  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.742 ±      5.463    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5       723.675 ±    548.768  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     20288.880 ±  15150.565    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        11.000               counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        14.000                   ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     89877.074 ±   3545.073   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       587.417 ±     22.859  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10288.005 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±      0.207  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.025 ±      3.654    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5       591.094 ±    567.243  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     10361.776 ±  10052.297    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         9.000               counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         9.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5    105086.657 ±    903.743   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5         4.807 ±      0.040  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        72.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0               counts
[success] Total time: 2152 s, completed Jan 13, 2018, 7:05:46 PM
