[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 13 січ. 2018 15:38:39
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[info] Non-compiled module 'compiler-bridge_2.12' for Scala 2.12.4. Compiling...
[info]   Compilation completed in 4.678s.
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:795:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:336:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:344:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.3.5-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.3.5-SNAPSHOT.jar ...
[info] Compiling 25 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:9:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:10:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:11:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT.jar ...
Processing 286 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 19 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 206 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.3.5-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc .*Benchmark.*
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 00:22:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 540979,156 ops/s
[info] # Warmup Iteration   2: 889528,089 ops/s
[info] # Warmup Iteration   3: 883875,766 ops/s
[info] # Warmup Iteration   4: 875947,206 ops/s
[info] # Warmup Iteration   5: 897351,178 ops/s
[info] Iteration   1: 894993,510 ops/s
[info]                  ·gc.alloc.rate:                   2357,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4164,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 895033,497 ops/s
[info]                  ·gc.alloc.rate:                   2357,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4175,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 887558,388 ops/s
[info]                  ·gc.alloc.rate:                   2337,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4216,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 896588,260 ops/s
[info]                  ·gc.alloc.rate:                   2361,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382,904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4181,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 899066,968 ops/s
[info]                  ·gc.alloc.rate:                   2368,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4171,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   894648,124 ±(99.9%) 16542,367 ops/s [Average]
[info]   (min, avg, max) = (887558,388, 894648,124, 899066,968), stdev = 4296,000
[info]   CI (99.9%): [878105,757, 911190,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2356,494 ±(99.9%) 43,614 MB/sec [Average]
[info]   (min, avg, max) = (2337,844, 2356,494, 2368,232), stdev = 11,326
[info]   CI (99.9%): [2312,880, 2400,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4144,000, 4144,000, 4144,001), stdev = 0,001
[info]   CI (99.9%): [4144,000, 4144,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2378,005 ±(99.9%) 23,278 MB/sec [Average]
[info]   (min, avg, max) = (2368,911, 2378,005, 2383,713), stdev = 6,045
[info]   CI (99.9%): [2354,727, 2401,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4181,896 ±(99.9%) 79,079 B/op [Average]
[info]   (min, avg, max) = (4164,228, 4181,896, 4216,851), stdev = 20,537
[info]   CI (99.9%): [4102,817, 4260,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,125), stdev = 0,021
[info]   CI (99.9%): [0,024, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,183 ±(99.9%) 0,142 B/op [Average]
[info]   (min, avg, max) = (0,146, 0,183, 0,221), stdev = 0,037
[info]   CI (99.9%): [0,041, 0,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson
[info] # Run progress: 0,75% complete, ETA 00:34:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 797736,401 ops/s
[info] # Warmup Iteration   2: 1749231,623 ops/s
[info] # Warmup Iteration   3: 1787820,447 ops/s
[info] # Warmup Iteration   4: 1771888,125 ops/s
[info] # Warmup Iteration   5: 1778777,047 ops/s
[info] Iteration   1: 1773352,885 ops/s
[info]                  ·gc.alloc.rate:                   1424,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1473,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1778047,742 ops/s
[info]                  ·gc.alloc.rate:                   1428,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1183,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,147 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1773529,151 ops/s
[info]                  ·gc.alloc.rate:                   1424,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1191,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1777239,071 ops/s
[info]                  ·gc.alloc.rate:                   1427,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1770456,143 ops/s
[info]                  ·gc.alloc.rate:                   1422,436 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1502,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson":
[info]   1774524,998 ±(99.9%) 11976,842 ops/s [Average]
[info]   (min, avg, max) = (1770456,143, 1774524,998, 1778047,742), stdev = 3110,348
[info]   CI (99.9%): [1762548,156, 1786501,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate":
[info]   1425,677 ±(99.9%) 9,590 MB/sec [Average]
[info]   (min, avg, max) = (1422,436, 1425,677, 1428,506), stdev = 2,490
[info]   CI (99.9%): [1416,087, 1435,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1264,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,000, 1264,000, 1264,000), stdev = 0,001
[info]   CI (99.9%): [1264,000, 1264,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1476,308 ±(99.9%) 703,959 MB/sec [Average]
[info]   (min, avg, max) = (1337,041, 1476,308, 1691,356), stdev = 182,816
[info]   CI (99.9%): [772,348, 2180,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1309,070 ±(99.9%) 631,410 B/op [Average]
[info]   (min, avg, max) = (1183,068, 1309,070, 1502,967), stdev = 163,975
[info]   CI (99.9%): [677,659, 1940,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,217 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,167), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,066 ±(99.9%) 0,192 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,066, 0,147), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJackson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 5,000), stdev = 0,894
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter
[info] # Run progress: 1,49% complete, ETA 00:34:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3965707,470 ops/s
[info] # Warmup Iteration   2: 4294515,266 ops/s
[info] # Warmup Iteration   3: 4310023,085 ops/s
[info] # Warmup Iteration   4: 4318316,547 ops/s
[info] # Warmup Iteration   5: 4305345,326 ops/s
[info] Iteration   1: 4304927,188 ops/s
[info]                  ·gc.alloc.rate:                   284,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255,881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4309576,023 ops/s
[info]                  ·gc.alloc.rate:                   284,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,512 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4319806,379 ops/s
[info]                  ·gc.alloc.rate:                   285,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4215017,629 ops/s
[info]                  ·gc.alloc.rate:                   278,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4335360,246 ops/s
[info]                  ·gc.alloc.rate:      286,573 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter":
[info]   4296937,493 ±(99.9%) 181978,329 ops/s [Average]
[info]   (min, avg, max) = (4215017,629, 4296937,493, 4335360,246), stdev = 47259,194
[info]   CI (99.9%): [4114959,164, 4478915,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate":
[info]   284,035 ±(99.9%) 12,035 MB/sec [Average]
[info]   (min, avg, max) = (278,616, 284,035, 286,573), stdev = 3,126
[info]   CI (99.9%): [271,999, 296,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   252,547 ±(99.9%) 559,649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 252,547, 335,843), stdev = 145,339
[info]   CI (99.9%): [≈ 0, 812,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   92,711 ±(99.9%) 205,715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 92,711, 125,112), stdev = 53,424
[info]   CI (99.9%): [≈ 0, 298,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,316 ±(99.9%) 2,340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,316, 1,402), stdev = 0,608
[info]   CI (99.9%): [≈ 0, 2,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,115 ±(99.9%) 0,854 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,115, 0,512), stdev = 0,222
[info]   CI (99.9%): [≈ 0, 0,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay
[info] # Run progress: 2,24% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63336,338 ops/s
[info] # Warmup Iteration   2: 190720,165 ops/s
[info] # Warmup Iteration   3: 196060,604 ops/s
[info] # Warmup Iteration   4: 195858,655 ops/s
[info] # Warmup Iteration   5: 195907,207 ops/s
[info] Iteration   1: 196150,966 ops/s
[info]                  ·gc.alloc.rate:                   1651,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666,932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13369,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,668 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 197172,603 ops/s
[info]                  ·gc.alloc.rate:                   1660,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13388,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,831 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 196269,891 ops/s
[info]                  ·gc.alloc.rate:                   1652,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13513,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,668 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 197101,295 ops/s
[info]                  ·gc.alloc.rate:                   1659,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10797,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,499 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 196472,883 ops/s
[info]                  ·gc.alloc.rate:                   1654,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              13248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13575,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,667 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay":
[info]   196633,528 ±(99.9%) 1826,838 ops/s [Average]
[info]   (min, avg, max) = (196150,966, 196633,528, 197172,603), stdev = 474,424
[info]   CI (99.9%): [194806,690, 198460,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate":
[info]   1655,734 ±(99.9%) 15,351 MB/sec [Average]
[info]   (min, avg, max) = (1651,727, 1655,734, 1660,339), stdev = 3,987
[info]   CI (99.9%): [1640,383, 1671,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13248,002, 13248,002, 13248,002), stdev = 0,001
[info]   CI (99.9%): [13248,002, 13248,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1615,733 ±(99.9%) 567,688 MB/sec [Average]
[info]   (min, avg, max) = (1352,663, 1615,733, 1695,224), stdev = 147,427
[info]   CI (99.9%): [1048,045, 2183,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   12929,218 ±(99.9%) 4599,812 B/op [Average]
[info]   (min, avg, max) = (10797,833, 12929,218, 13575,388), stdev = 1194,557
[info]   CI (99.9%): [8329,405, 17529,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,015
[info]   CI (99.9%): [0,027, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,666 ±(99.9%) 0,452 B/op [Average]
[info]   (min, avg, max) = (0,499, 0,666, 0,831), stdev = 0,117
[info]   CI (99.9%): [0,214, 1,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlay:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson
[info] # Run progress: 2,99% complete, ETA 00:33:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1011714,170 ops/s
[info] # Warmup Iteration   2: 2304959,213 ops/s
[info] # Warmup Iteration   3: 2317688,831 ops/s
[info] # Warmup Iteration   4: 2208373,950 ops/s
[info] # Warmup Iteration   5: 2289582,178 ops/s
[info] Iteration   1: 2306516,761 ops/s
[info]                  ·gc.alloc.rate:                   891,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              608,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     670,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2315039,135 ops/s
[info]                  ·gc.alloc.rate:                   894,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              608,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2316542,557 ops/s
[info]                  ·gc.alloc.rate:                   895,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              608,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2316476,472 ops/s
[info]                  ·gc.alloc.rate:                   895,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              608,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,906 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2281584,234 ops/s
[info]                  ·gc.alloc.rate:                   881,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              608,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson":
[info]   2307231,832 ±(99.9%) 57483,600 ops/s [Average]
[info]   (min, avg, max) = (2281584,234, 2307231,832, 2316542,557), stdev = 14928,308
[info]   CI (99.9%): [2249748,231, 2364715,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate":
[info]   891,650 ±(99.9%) 22,140 MB/sec [Average]
[info]   (min, avg, max) = (881,778, 891,650, 895,239), stdev = 5,750
[info]   CI (99.9%): [869,510, 913,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   608,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (608,000, 608,000, 608,000), stdev = 0,001
[info]   CI (99.9%): [608,000, 608,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   926,206 ±(99.9%) 577,070 MB/sec [Average]
[info]   (min, avg, max) = (658,373, 926,206, 1001,315), stdev = 149,863
[info]   CI (99.9%): [349,136, 1503,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   631,750 ±(99.9%) 397,813 B/op [Average]
[info]   (min, avg, max) = (447,433, 631,750, 690,423), stdev = 103,311
[info]   CI (99.9%): [233,937, 1029,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (0,028, 0,037, 0,042), stdev = 0,008
[info]   CI (99.9%): [0,008, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJackson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter
[info] # Run progress: 3,73% complete, ETA 00:33:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13276735,953 ops/s
[info] # Warmup Iteration   2: 17724033,016 ops/s
[info] # Warmup Iteration   3: 18214389,423 ops/s
[info] # Warmup Iteration   4: 18338622,781 ops/s
[info] # Warmup Iteration   5: 18187752,303 ops/s
[info] Iteration   1: 18287845,741 ops/s
[info]                  ·gc.alloc.rate:                   929,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18353873,971 ops/s
[info]                  ·gc.alloc.rate:                   933,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18097536,163 ops/s
[info]                  ·gc.alloc.rate:                   920,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18152120,235 ops/s
[info]                  ·gc.alloc.rate:                   923,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 17548574,153 ops/s
[info]                  ·gc.alloc.rate:                   892,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter":
[info]   18087990,052 ±(99.9%) 1226491,862 ops/s [Average]
[info]   (min, avg, max) = (17548574,153, 18087990,052, 18353873,971), stdev = 318516,042
[info]   CI (99.9%): [16861498,190, 19314481,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   919,750 ±(99.9%) 62,320 MB/sec [Average]
[info]   (min, avg, max) = (892,338, 919,750, 933,234), stdev = 16,184
[info]   CI (99.9%): [857,429, 982,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   939,041 ±(99.9%) 578,539 MB/sec [Average]
[info]   (min, avg, max) = (670,349, 939,041, 1010,866), stdev = 150,245
[info]   CI (99.9%): [360,502, 1517,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   81,707 ±(99.9%) 50,932 B/op [Average]
[info]   (min, avg, max) = (58,277, 81,707, 90,626), stdev = 13,227
[info]   CI (99.9%): [30,775, 132,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,006, 0,009), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay
[info] # Run progress: 4,48% complete, ETA 00:33:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132690,412 ops/s
[info] # Warmup Iteration   2: 361298,650 ops/s
[info] # Warmup Iteration   3: 365367,424 ops/s
[info] # Warmup Iteration   4: 366889,250 ops/s
[info] # Warmup Iteration   5: 362127,300 ops/s
[info] Iteration   1: 367729,159 ops/s
[info]                  ·gc.alloc.rate:                   1138,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5636,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 365056,850 ops/s
[info]                  ·gc.alloc.rate:                   1130,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4283,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,359 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 367754,902 ops/s
[info]                  ·gc.alloc.rate:                   1138,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4271,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 363497,747 ops/s
[info]                  ·gc.alloc.rate:                   1125,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5791,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 368191,802 ops/s
[info]                  ·gc.alloc.rate:                   1140,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              4872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4308,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay":
[info]   366446,092 ±(99.9%) 7945,185 ops/s [Average]
[info]   (min, avg, max) = (363497,747, 366446,092, 368191,802), stdev = 2063,339
[info]   CI (99.9%): [358500,908, 374391,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate":
[info]   1134,770 ±(99.9%) 24,556 MB/sec [Average]
[info]   (min, avg, max) = (1125,707, 1134,770, 1140,195), stdev = 6,377
[info]   CI (99.9%): [1110,215, 1159,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4872,001, 4872,001, 4872,001), stdev = 0,001
[info]   CI (99.9%): [4872,001, 4872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1131,231 ±(99.9%) 691,738 MB/sec [Average]
[info]   (min, avg, max) = (993,832, 1131,231, 1338,144), stdev = 179,642
[info]   CI (99.9%): [439,493, 1822,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   4858,258 ±(99.9%) 3015,766 B/op [Average]
[info]   (min, avg, max) = (4271,798, 4858,258, 5791,421), stdev = 783,185
[info]   CI (99.9%): [1842,491, 7874,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,012, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,340 ±(99.9%) 0,289 B/op [Average]
[info]   (min, avg, max) = (0,267, 0,340, 0,445), stdev = 0,075
[info]   CI (99.9%): [0,051, 0,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlay:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 6,000), stdev = 1,643
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 5,22% complete, ETA 00:32:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224778,006 ops/s
[info] # Warmup Iteration   2: 1861509,374 ops/s
[info] # Warmup Iteration   3: 1862342,123 ops/s
[info] # Warmup Iteration   4: 1868396,795 ops/s
[info] # Warmup Iteration   5: 1855418,914 ops/s
[info] Iteration   1: 1859052,563 ops/s
[info]                  ·gc.alloc.rate:                   2873,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3056,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2586,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 1867588,009 ops/s
[info]                  ·gc.alloc.rate:                   2886,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2292,679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1859505,575 ops/s
[info]                  ·gc.alloc.rate:                   2874,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2593,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1862605,169 ops/s
[info]                  ·gc.alloc.rate:                   2879,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2301,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1865400,080 ops/s
[info]                  ·gc.alloc.rate:                   2883,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2297,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1862830,279 ±(99.9%) 14228,552 ops/s [Average]
[info]   (min, avg, max) = (1859052,563, 1862830,279, 1867588,009), stdev = 3695,110
[info]   CI (99.9%): [1848601,728, 1877058,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2879,506 ±(99.9%) 22,026 MB/sec [Average]
[info]   (min, avg, max) = (2873,750, 2879,506, 2886,851), stdev = 5,720
[info]   CI (99.9%): [2857,480, 2901,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2858,164 ±(99.9%) 711,602 MB/sec [Average]
[info]   (min, avg, max) = (2721,473, 2858,164, 3064,574), stdev = 184,801
[info]   CI (99.9%): [2146,562, 3569,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2414,200 ±(99.9%) 617,648 B/op [Average]
[info]   (min, avg, max) = (2292,679, 2414,200, 2593,005), stdev = 160,401
[info]   CI (99.9%): [1796,552, 3031,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,117, 0,187), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (0,053, 0,099, 0,159), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   42,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,400, 9,000), stdev = 0,548
[info]   CI (99.9%): [42,000, 42,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 6,000), stdev = 0,707
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson
[info] # Run progress: 5,97% complete, ETA 00:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1379708,296 ops/s
[info] # Warmup Iteration   2: 2873804,657 ops/s
[info] # Warmup Iteration   3: 2884370,594 ops/s
[info] # Warmup Iteration   4: 2865921,176 ops/s
[info] # Warmup Iteration   5: 2874842,404 ops/s
[info] Iteration   1: 2789073,306 ops/s
[info]                  ·gc.alloc.rate:                   1957,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1137,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 2904659,466 ops/s
[info]                  ·gc.alloc.rate:                   2038,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1097,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2911969,178 ops/s
[info]                  ·gc.alloc.rate:                   2043,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1098,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2882323,364 ops/s
[info]                  ·gc.alloc.rate:                   2022,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1112,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2879931,802 ops/s
[info]                  ·gc.alloc.rate:                   2020,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson":
[info]   2873591,423 ±(99.9%) 189601,058 ops/s [Average]
[info]   (min, avg, max) = (2789073,306, 2873591,423, 2911969,178), stdev = 49238,793
[info]   CI (99.9%): [2683990,366, 3063192,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate":
[info]   2016,413 ±(99.9%) 132,948 MB/sec [Average]
[info]   (min, avg, max) = (1957,153, 2016,413, 2043,327), stdev = 34,526
[info]   CI (99.9%): [1883,464, 2149,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1104,000, 1104,000, 1104,000), stdev = 0,001
[info]   CI (99.9%): [1104,000, 1104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   2030,413 ±(99.9%) 36,688 MB/sec [Average]
[info]   (min, avg, max) = (2015,839, 2030,413, 2039,088), stdev = 9,528
[info]   CI (99.9%): [1993,725, 2067,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1111,879 ±(99.9%) 61,627 B/op [Average]
[info]   (min, avg, max) = (1097,612, 1111,879, 1137,104), stdev = 16,004
[info]   CI (99.9%): [1050,252, 1173,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,187), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,057 ±(99.9%) 0,101 B/op [Average]
[info]   (min, avg, max) = (0,034, 0,057, 0,102), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJackson:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 6,000), stdev = 0,894
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter
[info] # Run progress: 6,72% complete, ETA 00:32:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10939250,537 ops/s
[info] # Warmup Iteration   2: 11653207,173 ops/s
[info] # Warmup Iteration   3: 11855944,408 ops/s
[info] # Warmup Iteration   4: 11942950,312 ops/s
[info] # Warmup Iteration   5: 11931403,542 ops/s
[info] Iteration   1: 11973975,580 ops/s
[info]                  ·gc.alloc.rate:                   1522,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     221,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11990850,532 ops/s
[info]                  ·gc.alloc.rate:                   1524,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 11976722,533 ops/s
[info]                  ·gc.alloc.rate:                   1522,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11852723,285 ops/s
[info]                  ·gc.alloc.rate:                   1506,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11946982,409 ops/s
[info]                  ·gc.alloc.rate:                   1518,680 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter":
[info]   11948250,868 ±(99.9%) 214517,987 ops/s [Average]
[info]   (min, avg, max) = (11852723,285, 11948250,868, 11990850,532), stdev = 55709,640
[info]   CI (99.9%): [11733732,881, 12162768,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1518,865 ±(99.9%) 27,250 MB/sec [Average]
[info]   (min, avg, max) = (1506,732, 1518,865, 1524,251), stdev = 7,077
[info]   CI (99.9%): [1491,614, 1546,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1558,037 ±(99.9%) 713,826 MB/sec [Average]
[info]   (min, avg, max) = (1352,708, 1558,037, 1699,236), stdev = 185,378
[info]   CI (99.9%): [844,211, 2271,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   205,123 ±(99.9%) 92,535 B/op [Average]
[info]   (min, avg, max) = (177,492, 205,123, 223,778), stdev = 24,031
[info]   CI (99.9%): [112,587, 297,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,010, 0,014), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniter:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay
[info] # Run progress: 7,46% complete, ETA 00:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258686,502 ops/s
[info] # Warmup Iteration   2: 704898,647 ops/s
[info] # Warmup Iteration   3: 716900,261 ops/s
[info] # Warmup Iteration   4: 718629,353 ops/s
[info] # Warmup Iteration   5: 722165,856 ops/s
[info] Iteration   1: 722468,359 ops/s
[info]                  ·gc.alloc.rate:                   1880,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3645,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 710670,346 ops/s
[info]                  ·gc.alloc.rate:                   1850,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4473,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 721384,318 ops/s
[info]                  ·gc.alloc.rate:                   1878,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3686,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 707745,927 ops/s
[info]                  ·gc.alloc.rate:                   1842,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4522,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 718418,478 ops/s
[info]                  ·gc.alloc.rate:                   1870,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3719,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,182 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay":
[info]   716137,485 ±(99.9%) 25332,438 ops/s [Average]
[info]   (min, avg, max) = (707745,927, 716137,485, 722468,359), stdev = 6578,754
[info]   CI (99.9%): [690805,047, 741469,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate":
[info]   1864,410 ±(99.9%) 65,962 MB/sec [Average]
[info]   (min, avg, max) = (1842,552, 1864,410, 1880,903), stdev = 17,130
[info]   CI (99.9%): [1798,448, 1930,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1823,625 ±(99.9%) 718,191 MB/sec [Average]
[info]   (min, avg, max) = (1673,919, 1823,625, 2034,467), stdev = 186,512
[info]   CI (99.9%): [1105,434, 2541,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   4009,611 ±(99.9%) 1721,715 B/op [Average]
[info]   (min, avg, max) = (3645,257, 4009,611, 4522,629), stdev = 447,124
[info]   CI (99.9%): [2287,896, 5731,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,146), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,165 ±(99.9%) 0,369 B/op [Average]
[info]   (min, avg, max) = (0,091, 0,165, 0,323), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlay:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 8,21% complete, ETA 00:31:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1304818,843 ops/s
[info] # Warmup Iteration   2: 2058792,062 ops/s
[info] # Warmup Iteration   3: 2079807,876 ops/s
[info] # Warmup Iteration   4: 2090008,062 ops/s
[info] # Warmup Iteration   5: 2099408,105 ops/s
[info] Iteration   1: 2096296,221 ops/s
[info]                  ·gc.alloc.rate:                   2110,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1520,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2074098,700 ops/s
[info]                  ·gc.alloc.rate:                   2088,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1799,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 2089932,725 ops/s
[info]                  ·gc.alloc.rate:                   2104,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1534,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2097431,907 ops/s
[info]                  ·gc.alloc.rate:                   2111,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1529,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 2098218,986 ops/s
[info]                  ·gc.alloc.rate:                   2112,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1531,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2091195,708 ±(99.9%) 38896,014 ops/s [Average]
[info]   (min, avg, max) = (2074098,700, 2091195,708, 2098218,986), stdev = 10101,171
[info]   CI (99.9%): [2052299,694, 2130091,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2105,407 ±(99.9%) 39,044 MB/sec [Average]
[info]   (min, avg, max) = (2088,265, 2105,407, 2112,470), stdev = 10,140
[info]   CI (99.9%): [2066,362, 2144,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1584,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1584,000, 1584,000, 1584,000), stdev = 0,001
[info]   CI (99.9%): [1584,000, 1584,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2103,876 ±(99.9%) 578,613 MB/sec [Average]
[info]   (min, avg, max) = (2026,413, 2103,876, 2372,449), stdev = 150,264
[info]   CI (99.9%): [1525,263, 2682,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1583,291 ±(99.9%) 465,950 B/op [Average]
[info]   (min, avg, max) = (1520,886, 1583,291, 1799,560), stdev = 121,006
[info]   CI (99.9%): [1117,341, 2049,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,250 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,100, 0,167), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,075 ±(99.9%) 0,189 B/op [Average]
[info]   (min, avg, max) = (0,016, 0,075, 0,126), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 6,000), stdev = 1,225
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson
[info] # Run progress: 8,96% complete, ETA 00:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3275998,227 ops/s
[info] # Warmup Iteration   2: 6517396,058 ops/s
[info] # Warmup Iteration   3: 6573890,769 ops/s
[info] # Warmup Iteration   4: 6590235,973 ops/s
[info] # Warmup Iteration   5: 6323674,756 ops/s
[info] Iteration   1: 6599434,379 ops/s
[info]                  ·gc.alloc.rate:                   1812,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 6619012,426 ops/s
[info]                  ·gc.alloc.rate:                   1817,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400,114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 6611329,977 ops/s
[info]                  ·gc.alloc.rate:                   1815,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 6602223,431 ops/s
[info]                  ·gc.alloc.rate:                   1812,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6600920,558 ops/s
[info]                  ·gc.alloc.rate:                   1812,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     404,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson":
[info]   6606584,154 ±(99.9%) 32170,528 ops/s [Average]
[info]   (min, avg, max) = (6599434,379, 6606584,154, 6619012,426), stdev = 8354,584
[info]   CI (99.9%): [6574413,627, 6638754,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1814,120 ±(99.9%) 8,782 MB/sec [Average]
[info]   (min, avg, max) = (1812,148, 1814,120, 1817,532), stdev = 2,281
[info]   CI (99.9%): [1805,338, 1822,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1755,853 ±(99.9%) 586,670 MB/sec [Average]
[info]   (min, avg, max) = (1674,006, 1755,853, 2027,829), stdev = 152,356
[info]   CI (99.9%): [1169,183, 2342,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   418,115 ±(99.9%) 139,044 B/op [Average]
[info]   (min, avg, max) = (399,068, 418,115, 482,558), stdev = 36,109
[info]   CI (99.9%): [279,071, 557,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,019, 0,030), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter
[info] # Run progress: 9,70% complete, ETA 00:31:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16688159,682 ops/s
[info] # Warmup Iteration   2: 22445735,078 ops/s
[info] # Warmup Iteration   3: 24062697,887 ops/s
[info] # Warmup Iteration   4: 24110656,197 ops/s
[info] # Warmup Iteration   5: 24050412,837 ops/s
[info] Iteration   1: 23973234,480 ops/s
[info]                  ·gc.alloc.rate:                   731,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43,732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24183719,569 ops/s
[info]                  ·gc.alloc.rate:                   737,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 23940153,386 ops/s
[info]                  ·gc.alloc.rate:                   730,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23788583,887 ops/s
[info]                  ·gc.alloc.rate:                   725,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23774636,854 ops/s
[info]                  ·gc.alloc.rate:                   725,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter":
[info]   23932065,635 ±(99.9%) 639893,205 ops/s [Average]
[info]   (min, avg, max) = (23774636,854, 23932065,635, 24183719,569), stdev = 166178,233
[info]   CI (99.9%): [23292172,430, 24571958,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   730,155 ±(99.9%) 19,534 MB/sec [Average]
[info]   (min, avg, max) = (725,370, 730,155, 737,844), stdev = 5,073
[info]   CI (99.9%): [710,621, 749,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   735,285 ±(99.9%) 571,878 MB/sec [Average]
[info]   (min, avg, max) = (666,381, 735,285, 1000,938), stdev = 148,515
[info]   CI (99.9%): [163,407, 1307,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   48,294 ±(99.9%) 36,225 B/op [Average]
[info]   (min, avg, max) = (43,732, 48,294, 65,115), stdev = 9,408
[info]   CI (99.9%): [12,069, 84,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,146), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,006, 0,010), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc
[info] # Run progress: 10,45% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25427576,212 ops/s
[info] # Warmup Iteration   2: 30713033,049 ops/s
[info] # Warmup Iteration   3: 31495967,580 ops/s
[info] # Warmup Iteration   4: 31495837,912 ops/s
[info] # Warmup Iteration   5: 31504160,676 ops/s
[info] Iteration   1: 31487805,960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 31537115,981 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 31528790,730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 31427524,794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31279690,749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc":
[info]   31452185,643 ±(99.9%) 407117,760 ops/s [Average]
[info]   (min, avg, max) = (31279690,749, 31452185,643, 31537115,981), stdev = 105727,189
[info]   CI (99.9%): [31045067,883, 31859303,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay
[info] # Run progress: 11,19% complete, ETA 00:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548128,963 ops/s
[info] # Warmup Iteration   2: 1264926,298 ops/s
[info] # Warmup Iteration   3: 1265957,802 ops/s
[info] # Warmup Iteration   4: 1266033,536 ops/s
[info] # Warmup Iteration   5: 1263587,097 ops/s
[info] Iteration   1: 1270466,185 ops/s
[info]                  ·gc.alloc.rate:                   1905,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2075,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 1267811,017 ops/s
[info]                  ·gc.alloc.rate:                   1901,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2510,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,181 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1271978,405 ops/s
[info]                  ·gc.alloc.rate:                   1907,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1269104,962 ops/s
[info]                  ·gc.alloc.rate:                   1903,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2103,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,103 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1259333,234 ops/s
[info]                  ·gc.alloc.rate:                   1889,035 MB/sec
[info]                  ·gc.alloc.rate.norm:              2360,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2547,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay":
[info]   1267738,761 ±(99.9%) 19053,688 ops/s [Average]
[info]   (min, avg, max) = (1259333,234, 1267738,761, 1271978,405), stdev = 4948,182
[info]   CI (99.9%): [1248685,073, 1286792,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate":
[info]   1901,639 ±(99.9%) 28,561 MB/sec [Average]
[info]   (min, avg, max) = (1889,035, 1901,639, 1907,932), stdev = 7,417
[info]   CI (99.9%): [1873,078, 1930,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   2360,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2360,000, 2360,000, 2360,000), stdev = 0,001
[info]   CI (99.9%): [2360,000, 2360,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1893,248 ±(99.9%) 727,667 MB/sec [Average]
[info]   (min, avg, max) = (1676,359, 1893,248, 2039,175), stdev = 188,973
[info]   CI (99.9%): [1165,581, 2620,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   2349,914 ±(99.9%) 917,690 B/op [Average]
[info]   (min, avg, max) = (2075,889, 2349,914, 2547,573), stdev = 238,321
[info]   CI (99.9%): [1432,224, 3267,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,158 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,129, 0,181), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlay:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 11,94% complete, ETA 00:30:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 755275,113 ops/s
[info] # Warmup Iteration   2: 1007509,458 ops/s
[info] # Warmup Iteration   3: 1011117,168 ops/s
[info] # Warmup Iteration   4: 1018175,970 ops/s
[info] # Warmup Iteration   5: 1007508,372 ops/s
[info] Iteration   1: 1000203,202 ops/s
[info]                  ·gc.alloc.rate:                   3270,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4814,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Iteration   2: 1015267,064 ops/s
[info]                  ·gc.alloc.rate:                   3319,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5276,958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,226 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 1016830,584 ops/s
[info]                  ·gc.alloc.rate:                   3324,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5267,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,290 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 1023460,466 ops/s
[info]                  ·gc.alloc.rate:                   3346,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5234,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 1016898,294 ops/s
[info]                  ·gc.alloc.rate:                   3324,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5268,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   1014531,922 ±(99.9%) 33149,946 ops/s [Average]
[info]   (min, avg, max) = (1000203,202, 1014531,922, 1023460,466), stdev = 8608,936
[info]   CI (99.9%): [981381,976, 1047681,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3317,201 ±(99.9%) 107,861 MB/sec [Average]
[info]   (min, avg, max) = (3270,563, 3317,201, 3346,221), stdev = 28,011
[info]   CI (99.9%): [3209,340, 3425,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,000, 5144,000, 5144,000), stdev = 0,001
[info]   CI (99.9%): [5144,000, 5144,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3336,366 ±(99.9%) 592,470 MB/sec [Average]
[info]   (min, avg, max) = (3061,129, 3336,366, 3405,432), stdev = 153,863
[info]   CI (99.9%): [2743,896, 3928,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5172,502 ±(99.9%) 772,941 B/op [Average]
[info]   (min, avg, max) = (4814,598, 5172,502, 5276,958), stdev = 200,730
[info]   CI (99.9%): [4399,561, 5945,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,137 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,137, 0,187), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,213 ±(99.9%) 0,227 B/op [Average]
[info]   (min, avg, max) = (0,129, 0,213, 0,290), stdev = 0,059
[info]   CI (99.9%): [≈ 0, 0,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   49,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,800, 10,000), stdev = 0,447
[info]   CI (99.9%): [49,000, 49,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   37,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 7,400, 11,000), stdev = 2,074
[info]   CI (99.9%): [37,000, 37,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson
[info] # Run progress: 12,69% complete, ETA 00:30:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1062277,587 ops/s
[info] # Warmup Iteration   2: 1842755,036 ops/s
[info] # Warmup Iteration   3: 1844248,475 ops/s
[info] # Warmup Iteration   4: 1850323,287 ops/s
[info] # Warmup Iteration   5: 1854065,997 ops/s
[info] Iteration   1: 1868429,367 ops/s
[info]                  ·gc.alloc.rate:                   1757,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1859754,938 ops/s
[info]                  ·gc.alloc.rate:                   1749,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1708,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,088 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1862445,193 ops/s
[info]                  ·gc.alloc.rate:                   1752,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1428,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1860236,863 ops/s
[info]                  ·gc.alloc.rate:                   1750,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1866713,727 ops/s
[info]                  ·gc.alloc.rate:                   1756,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1431,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson":
[info]   1863516,018 ±(99.9%) 14964,544 ops/s [Average]
[info]   (min, avg, max) = (1859754,938, 1863516,018, 1868429,367), stdev = 3886,245
[info]   CI (99.9%): [1848551,473, 1878480,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate":
[info]   1753,026 ±(99.9%) 13,911 MB/sec [Average]
[info]   (min, avg, max) = (1749,504, 1753,026, 1757,528), stdev = 3,613
[info]   CI (99.9%): [1739,115, 1766,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1480,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1480,000, 1480,000, 1480,000), stdev = 0,001
[info]   CI (99.9%): [1480,000, 1480,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1755,023 ±(99.9%) 569,633 MB/sec [Average]
[info]   (min, avg, max) = (1672,806, 1755,023, 2019,079), stdev = 147,932
[info]   CI (99.9%): [1185,390, 2324,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1481,809 ±(99.9%) 488,441 B/op [Average]
[info]   (min, avg, max) = (1408,657, 1481,809, 1708,048), stdev = 126,847
[info]   CI (99.9%): [993,368, 1970,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,015
[info]   CI (99.9%): [0,027, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,070 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (0,053, 0,070, 0,088), stdev = 0,012
[info]   CI (99.9%): [0,022, 0,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJackson:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter
[info] # Run progress: 13,43% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9030962,334 ops/s
[info] # Warmup Iteration   2: 10093030,079 ops/s
[info] # Warmup Iteration   3: 10336068,904 ops/s
[info] # Warmup Iteration   4: 10330722,637 ops/s
[info] # Warmup Iteration   5: 10336288,013 ops/s
[info] Iteration   1: 10275845,912 ops/s
[info]                  ·gc.alloc.rate:                   3082,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3061,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     468,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 10239524,144 ops/s
[info]                  ·gc.alloc.rate:                   3071,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 10312156,030 ops/s
[info]                  ·gc.alloc.rate:                   3093,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 10245202,870 ops/s
[info]                  ·gc.alloc.rate:                   3073,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     470,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 10346013,672 ops/s
[info]                  ·gc.alloc.rate:                   3103,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     466,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter":
[info]   10283748,526 ±(99.9%) 174217,166 ops/s [Average]
[info]   (min, avg, max) = (10239524,144, 10283748,526, 10346013,672), stdev = 45243,645
[info]   CI (99.9%): [10109531,359, 10457965,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate":
[info]   3085,178 ±(99.9%) 51,690 MB/sec [Average]
[info]   (min, avg, max) = (3071,985, 3085,178, 3103,607), stdev = 13,424
[info]   CI (99.9%): [3033,488, 3136,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (472,000, 472,000, 472,000), stdev = 0,001
[info]   CI (99.9%): [472,000, 472,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   3064,064 ±(99.9%) 4,705 MB/sec [Average]
[info]   (min, avg, max) = (3061,885, 3064,064, 3064,693), stdev = 1,222
[info]   CI (99.9%): [3059,359, 3068,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   468,777 ±(99.9%) 7,863 B/op [Average]
[info]   (min, avg, max) = (466,046, 468,777, 470,880), stdev = 2,042
[info]   CI (99.9%): [460,914, 476,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,133 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,133, 0,208), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,020, 0,032), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.count":
[info]   45,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,000, 9,000), stdev = 0,001
[info]   CI (99.9%): [45,000, 45,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniter:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay
[info] # Run progress: 14,18% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144023,590 ops/s
[info] # Warmup Iteration   2: 360597,295 ops/s
[info] # Warmup Iteration   3: 369233,171 ops/s
[info] # Warmup Iteration   4: 371522,135 ops/s
[info] # Warmup Iteration   5: 369507,439 ops/s
[info] Iteration   1: 370704,948 ops/s
[info]                  ·gc.alloc.rate:                   2263,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10008,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,265 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 368686,675 ops/s
[info]                  ·gc.alloc.rate:                   2251,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8664,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,711 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 369151,074 ops/s
[info]                  ·gc.alloc.rate:                   2254,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10124,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 370038,816 ops/s
[info]                  ·gc.alloc.rate:                   2259,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378,900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10114,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 371955,290 ops/s
[info]                  ·gc.alloc.rate:                   2271,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              9608,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2043,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8642,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,352 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay":
[info]   370107,361 ±(99.9%) 4987,098 ops/s [Average]
[info]   (min, avg, max) = (368686,675, 370107,361, 371955,290), stdev = 1295,134
[info]   CI (99.9%): [365120,262, 375094,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate":
[info]   2260,230 ±(99.9%) 30,333 MB/sec [Average]
[info]   (min, avg, max) = (2251,636, 2260,230, 2271,469), stdev = 7,877
[info]   CI (99.9%): [2229,896, 2290,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   9608,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9608,001, 9608,001, 9608,001), stdev = 0,001
[info]   CI (99.9%): [9608,001, 9608,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2237,293 ±(99.9%) 705,733 MB/sec [Average]
[info]   (min, avg, max) = (2030,434, 2237,293, 2378,900), stdev = 183,277
[info]   CI (99.9%): [1531,560, 2943,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   9510,901 ±(99.9%) 3020,639 B/op [Average]
[info]   (min, avg, max) = (8642,017, 9510,901, 10124,789), stdev = 784,450
[info]   CI (99.9%): [6490,263, 12531,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,108, 0,167), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,461 ±(99.9%) 0,745 B/op [Average]
[info]   (min, avg, max) = (0,265, 0,461, 0,711), stdev = 0,193
[info]   CI (99.9%): [≈ 0, 1,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 14,93% complete, ETA 00:29:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 788462,859 ops/s
[info] # Warmup Iteration   2: 1168121,555 ops/s
[info] # Warmup Iteration   3: 1172256,723 ops/s
[info] # Warmup Iteration   4: 1166167,783 ops/s
[info] # Warmup Iteration   5: 1169434,505 ops/s
[info] Iteration   1: 1145734,462 ops/s
[info]                  ·gc.alloc.rate:                   2621,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3261,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 1172195,689 ops/s
[info]                  ·gc.alloc.rate:                   2682,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3649,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1161336,708 ops/s
[info]                  ·gc.alloc.rate:                   2657,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3689,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 1169172,832 ops/s
[info]                  ·gc.alloc.rate:                   2675,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3665,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1173564,007 ops/s
[info]                  ·gc.alloc.rate:                   2685,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              3600,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3651,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1164400,740 ±(99.9%) 44128,017 ops/s [Average]
[info]   (min, avg, max) = (1145734,462, 1164400,740, 1173564,007), stdev = 11459,906
[info]   CI (99.9%): [1120272,723, 1208528,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2664,383 ±(99.9%) 100,983 MB/sec [Average]
[info]   (min, avg, max) = (2621,674, 2664,383, 2685,354), stdev = 26,225
[info]   CI (99.9%): [2563,400, 2765,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3600,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3600,000, 3600,000, 3600,000), stdev = 0,001
[info]   CI (99.9%): [3600,000, 3600,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2653,132 ±(99.9%) 598,161 MB/sec [Average]
[info]   (min, avg, max) = (2375,279, 2653,132, 2724,106), stdev = 155,341
[info]   CI (99.9%): [2054,971, 3251,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3583,560 ±(99.9%) 695,661 B/op [Average]
[info]   (min, avg, max) = (3261,659, 3583,560, 3689,597), stdev = 180,661
[info]   CI (99.9%): [2887,899, 4279,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,208 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,100, 0,187), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,135 ±(99.9%) 0,278 B/op [Average]
[info]   (min, avg, max) = (0,056, 0,135, 0,252), stdev = 0,072
[info]   CI (99.9%): [≈ 0, 0,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   39,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,800, 8,000), stdev = 0,447
[info]   CI (99.9%): [39,000, 39,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,600, 9,000), stdev = 1,949
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson
[info] # Run progress: 15,67% complete, ETA 00:29:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1991653,906 ops/s
[info] # Warmup Iteration   2: 3831592,659 ops/s
[info] # Warmup Iteration   3: 3854538,523 ops/s
[info] # Warmup Iteration   4: 3853608,918 ops/s
[info] # Warmup Iteration   5: 3845433,409 ops/s
[info] Iteration   1: 3861811,345 ops/s
[info]                  ·gc.alloc.rate:                   2238,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 3842247,386 ops/s
[info]                  ·gc.alloc.rate:                   2227,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     970,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3853520,880 ops/s
[info]                  ·gc.alloc.rate:                   2233,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     831,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 3836460,965 ops/s
[info]                  ·gc.alloc.rate:                   2223,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     975,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   5: 3848450,141 ops/s
[info]                  ·gc.alloc.rate:                   2230,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              912,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2043,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson":
[info]   3848498,144 ±(99.9%) 37847,989 ops/s [Average]
[info]   (min, avg, max) = (3836460,965, 3848498,144, 3861811,345), stdev = 9829,003
[info]   CI (99.9%): [3810650,154, 3886346,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate":
[info]   2230,966 ±(99.9%) 21,954 MB/sec [Average]
[info]   (min, avg, max) = (2223,983, 2230,966, 2238,702), stdev = 5,701
[info]   CI (99.9%): [2209,012, 2252,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   912,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (912,000, 912,000, 912,000), stdev = 0,001
[info]   CI (99.9%): [912,000, 912,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   2170,679 ±(99.9%) 718,188 MB/sec [Average]
[info]   (min, avg, max) = (2023,284, 2170,679, 2379,132), stdev = 186,511
[info]   CI (99.9%): [1452,491, 2888,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   887,496 ±(99.9%) 301,430 B/op [Average]
[info]   (min, avg, max) = (824,244, 887,496, 975,623), stdev = 78,280
[info]   CI (99.9%): [586,066, 1188,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 0,217 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,117, 0,208), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,089 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,048, 0,085), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJackson:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,600, 10,000), stdev = 2,510
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter
[info] # Run progress: 16,42% complete, ETA 00:29:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16384000,611 ops/s
[info] # Warmup Iteration   2: 17806218,447 ops/s
[info] # Warmup Iteration   3: 18684871,191 ops/s
[info] # Warmup Iteration   4: 18724575,824 ops/s
[info] # Warmup Iteration   5: 18726158,961 ops/s
[info] Iteration   1: 18684559,159 ops/s
[info]                  ·gc.alloc.rate:                   855,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18754378,769 ops/s
[info]                  ·gc.alloc.rate:                   858,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18654895,838 ops/s
[info]                  ·gc.alloc.rate:                   853,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18741908,326 ops/s
[info]                  ·gc.alloc.rate:                   857,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84,549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18716498,960 ops/s
[info]                  ·gc.alloc.rate:                   856,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter":
[info]   18710448,210 ±(99.9%) 157741,964 ops/s [Average]
[info]   (min, avg, max) = (18654895,838, 18710448,210, 18754378,769), stdev = 40965,087
[info]   CI (99.9%): [18552706,246, 18868190,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   856,284 ±(99.9%) 7,309 MB/sec [Average]
[info]   (min, avg, max) = (853,714, 856,284, 858,343), stdev = 1,898
[info]   CI (99.9%): [848,975, 863,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   870,976 ±(99.9%) 700,448 MB/sec [Average]
[info]   (min, avg, max) = (670,377, 870,976, 1007,213), stdev = 181,904
[info]   CI (99.9%): [170,528, 1571,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   73,221 ±(99.9%) 58,576 B/op [Average]
[info]   (min, avg, max) = (56,538, 73,221, 84,549), stdev = 15,212
[info]   CI (99.9%): [14,645, 131,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,005, 0,009), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay
[info] # Run progress: 17,16% complete, ETA 00:28:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201581,822 ops/s
[info] # Warmup Iteration   2: 521936,751 ops/s
[info] # Warmup Iteration   3: 524557,100 ops/s
[info] # Warmup Iteration   4: 530927,270 ops/s
[info] # Warmup Iteration   5: 523791,091 ops/s
[info] Iteration   1: 527437,204 ops/s
[info]                  ·gc.alloc.rate:                   1861,266 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4993,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 526991,272 ops/s
[info]                  ·gc.alloc.rate:                   1859,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6032,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,435 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 529102,782 ops/s
[info]                  ·gc.alloc.rate:                   1867,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5028,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 529899,825 ops/s
[info]                  ·gc.alloc.rate:                   1870,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6040,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,309 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 529649,822 ops/s
[info]                  ·gc.alloc.rate:                   1869,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5045,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay":
[info]   528616,181 ±(99.9%) 5087,825 ops/s [Average]
[info]   (min, avg, max) = (526991,272, 528616,181, 529899,825), stdev = 1321,292
[info]   CI (99.9%): [523528,356, 533704,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate":
[info]   1865,422 ±(99.9%) 18,059 MB/sec [Average]
[info]   (min, avg, max) = (1859,657, 1865,422, 1870,002), stdev = 4,690
[info]   CI (99.9%): [1847,364, 1883,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5552,001, 5552,001, 5552,001), stdev = 0,001
[info]   CI (99.9%): [5552,001, 5552,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1823,727 ±(99.9%) 717,754 MB/sec [Average]
[info]   (min, avg, max) = (1673,920, 1823,727, 2034,475), stdev = 186,398
[info]   CI (99.9%): [1105,974, 2541,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5428,008 ±(99.9%) 2140,651 B/op [Average]
[info]   (min, avg, max) = (4993,162, 5428,008, 6040,319), stdev = 555,920
[info]   CI (99.9%): [3287,357, 7568,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,146), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 0,576 B/op [Average]
[info]   (min, avg, max) = (0,062, 0,223, 0,435), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 0,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlay:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce
[info] # Run progress: 17,91% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6596,737 ops/s
[info] # Warmup Iteration   2: 7935,518 ops/s
[info] # Warmup Iteration   3: 7927,910 ops/s
[info] # Warmup Iteration   4: 7962,410 ops/s
[info] # Warmup Iteration   5: 7974,448 ops/s
[info] Iteration   1: 7899,740 ops/s
[info]                  ·gc.alloc.rate:                   1340,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266987,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,147 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 7653,917 ops/s
[info]                  ·gc.alloc.rate:                   1298,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     276593,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,680 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 7911,586 ops/s
[info]                  ·gc.alloc.rate:                   1342,485 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872,055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     268001,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,547 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7966,639 ops/s
[info]                  ·gc.alloc.rate:                   1351,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872,159 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     266943,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,109 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 7980,818 ops/s
[info]                  ·gc.alloc.rate:                   1353,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              266872,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1016,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     200310,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,314 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce":
[info]   7882,540 ±(99.9%) 509,899 ops/s [Average]
[info]   (min, avg, max) = (7653,917, 7882,540, 7980,818), stdev = 132,419
[info]   CI (99.9%): [7372,641, 8392,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1337,249 ±(99.9%) 86,718 MB/sec [Average]
[info]   (min, avg, max) = (1298,339, 1337,249, 1353,717), stdev = 22,520
[info]   CI (99.9%): [1250,531, 1423,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   266872,076 ±(99.9%) 0,177 B/op [Average]
[info]   (min, avg, max) = (266872,054, 266872,076, 266872,159), stdev = 0,046
[info]   CI (99.9%): [266871,900, 266872,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1280,506 ±(99.9%) 569,419 MB/sec [Average]
[info]   (min, avg, max) = (1016,081, 1280,506, 1352,046), stdev = 147,876
[info]   CI (99.9%): [711,087, 1849,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   255767,370 ±(99.9%) 120385,373 B/op [Average]
[info]   (min, avg, max) = (200310,460, 255767,370, 276593,421), stdev = 31263,699
[info]   CI (99.9%): [135381,997, 376152,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12,560 ±(99.9%) 34,991 B/op [Average]
[info]   (min, avg, max) = (4,109, 12,560, 25,680), stdev = 9,087
[info]   CI (99.9%): [≈ 0, 47,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson
[info] # Run progress: 18,66% complete, ETA 00:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21548,720 ops/s
[info] # Warmup Iteration   2: 27837,306 ops/s
[info] # Warmup Iteration   3: 28177,010 ops/s
[info] # Warmup Iteration   4: 28052,884 ops/s
[info] # Warmup Iteration   5: 28123,608 ops/s
[info] Iteration   1: 28243,700 ops/s
[info]                  ·gc.alloc.rate:                   1214,140 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55474,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,160 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 28124,917 ops/s
[info]                  ·gc.alloc.rate:                   1208,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74663,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,824 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 28138,267 ops/s
[info]                  ·gc.alloc.rate:                   1209,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56223,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,822 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27870,696 ops/s
[info]                  ·gc.alloc.rate:                   1198,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75983,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,526 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 28064,951 ops/s
[info]                  ·gc.alloc.rate:                   1206,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75677,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,502 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson":
[info]   28088,506 ±(99.9%) 530,366 ops/s [Average]
[info]   (min, avg, max) = (27870,696, 28088,506, 28243,700), stdev = 137,734
[info]   CI (99.9%): [27558,140, 28618,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   1207,473 ±(99.9%) 22,740 MB/sec [Average]
[info]   (min, avg, max) = (1198,129, 1207,473, 1214,140), stdev = 5,906
[info]   CI (99.9%): [1184,733, 1230,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   67632,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (67632,015, 67632,016, 67632,016), stdev = 0,001
[info]   CI (99.9%): [67632,014, 67632,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1206,451 ±(99.9%) 723,613 MB/sec [Average]
[info]   (min, avg, max) = (995,885, 1206,451, 1350,033), stdev = 187,920
[info]   CI (99.9%): [482,837, 1930,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   67604,629 ±(99.9%) 41377,985 B/op [Average]
[info]   (min, avg, max) = (55474,418, 67604,629, 75983,768), stdev = 10745,731
[info]   CI (99.9%): [26226,644, 108982,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,967 ±(99.9%) 7,501 B/op [Average]
[info]   (min, avg, max) = (1,160, 3,967, 5,824), stdev = 1,948
[info]   CI (99.9%): [≈ 0, 11,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter
[info] # Run progress: 19,40% complete, ETA 00:28:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30497,877 ops/s
[info] # Warmup Iteration   2: 31763,623 ops/s
[info] # Warmup Iteration   3: 31867,983 ops/s
[info] # Warmup Iteration   4: 31807,662 ops/s
[info] # Warmup Iteration   5: 31896,114 ops/s
[info] Iteration   1: 31999,754 ops/s
[info]                  ·gc.alloc.rate:                   581,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16381,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31986,730 ops/s
[info]                  ·gc.alloc.rate:               580,846 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32775,170 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 31924,379 ops/s
[info]                  ·gc.alloc.rate:                   579,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32855,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 31987,231 ops/s
[info]                  ·gc.alloc.rate:               580,839 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32838,667 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 32010,728 ops/s
[info]                  ·gc.alloc.rate:                   581,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          334,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16423,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter":
[info]   31981,765 ±(99.9%) 129,300 ops/s [Average]
[info]   (min, avg, max) = (31924,379, 31981,765, 32010,728), stdev = 33,579
[info]   CI (99.9%): [31852,464, 32111,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   580,745 ±(99.9%) 2,387 MB/sec [Average]
[info]   (min, avg, max) = (579,683, 580,745, 581,260), stdev = 0,620
[info]   CI (99.9%): [578,358, 583,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   28568,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (28568,013, 28568,014, 28568,015), stdev = 0,001
[info]   CI (99.9%): [28568,012, 28568,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   533,625 ±(99.9%) 702,780 MB/sec [Average]
[info]   (min, avg, max) = (333,222, 533,625, 667,669), stdev = 182,510
[info]   CI (99.9%): [≈ 0, 1236,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   26254,986 ±(99.9%) 34631,593 B/op [Average]
[info]   (min, avg, max) = (16381,952, 26254,986, 32855,228), stdev = 8993,715
[info]   CI (99.9%): [≈ 0, 60886,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,615 ±(99.9%) 2,161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,615, 1,026), stdev = 0,561
[info]   CI (99.9%): [≈ 0, 2,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.readJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson
[info] # Run progress: 20,15% complete, ETA 00:27:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10133,457 ops/s
[info] # Warmup Iteration   2: 14542,941 ops/s
[info] # Warmup Iteration   3: 14622,798 ops/s
[info] # Warmup Iteration   4: 14616,431 ops/s
[info] # Warmup Iteration   5: 14619,149 ops/s
[info] Iteration   1: 14631,783 ops/s
[info]                  ·gc.alloc.rate:                   1607,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              172904,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179814,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,957 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 14570,533 ops/s
[info]                  ·gc.alloc.rate:                   1601,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              172904,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145191,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,994 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 14633,370 ops/s
[info]                  ·gc.alloc.rate:                   1608,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              172904,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181353,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,716 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 14609,259 ops/s
[info]                  ·gc.alloc.rate:               1605,611 MB/sec
[info]                  ·gc.alloc.rate.norm:          172904,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1692,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182261,209 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 14685,299 ops/s
[info]                  ·gc.alloc.rate:                   1613,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              172903,897 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     181746,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,692 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson":
[info]   14626,049 ±(99.9%) 160,635 ops/s [Average]
[info]   (min, avg, max) = (14570,533, 14626,049, 14685,299), stdev = 41,716
[info]   CI (99.9%): [14465,414, 14786,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   1607,385 ±(99.9%) 17,494 MB/sec [Average]
[info]   (min, avg, max) = (1601,342, 1607,385, 1613,864), stdev = 4,543
[info]   CI (99.9%): [1589,891, 1624,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   172904,006 ±(99.9%) 0,235 B/op [Average]
[info]   (min, avg, max) = (172903,897, 172904,006, 172904,040), stdev = 0,061
[info]   CI (99.9%): [172903,770, 172904,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1618,509 ±(99.9%) 590,484 MB/sec [Average]
[info]   (min, avg, max) = (1344,687, 1618,509, 1696,400), stdev = 153,347
[info]   CI (99.9%): [1028,026, 2208,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   174073,451 ±(99.9%) 62269,073 B/op [Average]
[info]   (min, avg, max) = (145191,874, 174073,451, 182261,209), stdev = 16171,080
[info]   CI (99.9%): [111804,378, 236342,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,272 ±(99.9%) 14,191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,272, 8,994), stdev = 3,685
[info]   CI (99.9%): [≈ 0, 20,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter
[info] # Run progress: 20,90% complete, ETA 00:27:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15284,739 ops/s
[info] # Warmup Iteration   2: 16179,482 ops/s
[info] # Warmup Iteration   3: 16178,591 ops/s
[info] # Warmup Iteration   4: 16079,534 ops/s
[info] # Warmup Iteration   5: 16078,947 ops/s
[info] Iteration   1: 16119,226 ops/s
[info]                  ·gc.alloc.rate:                   1614,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685,265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164486,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,098 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 15926,895 ops/s
[info]                  ·gc.alloc.rate:                   1595,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133631,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,286 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 16156,242 ops/s
[info]                  ·gc.alloc.rate:                   1618,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165007,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,139 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 16075,415 ops/s
[info]                  ·gc.alloc.rate:                   1610,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166100,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,190 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 16163,830 ops/s
[info]                  ·gc.alloc.rate:                   1619,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              157576,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165390,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,081 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter":
[info]   16088,322 ±(99.9%) 372,811 ops/s [Average]
[info]   (min, avg, max) = (15926,895, 16088,322, 16163,830), stdev = 96,818
[info]   CI (99.9%): [15715,511, 16461,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   1611,417 ±(99.9%) 37,129 MB/sec [Average]
[info]   (min, avg, max) = (1595,345, 1611,417, 1619,006), stdev = 9,642
[info]   CI (99.9%): [1574,287, 1648,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   157576,029 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (157576,027, 157576,029, 157576,037), stdev = 0,005
[info]   CI (99.9%): [157576,012, 157576,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   1625,833 ±(99.9%) 587,830 MB/sec [Average]
[info]   (min, avg, max) = (1352,920, 1625,833, 1699,296), stdev = 152,658
[info]   CI (99.9%): [1038,003, 2213,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   158923,196 ±(99.9%) 54490,312 B/op [Average]
[info]   (min, avg, max) = (133631,068, 158923,196, 166100,073), stdev = 14150,961
[info]   CI (99.9%): [104432,885, 213413,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   8,558 ±(99.9%) 8,683 B/op [Average]
[info]   (min, avg, max) = (6,081, 8,558, 10,286), stdev = 2,255
[info]   CI (99.9%): [≈ 0, 17,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniter:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,200, 4,000), stdev = 0,837
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 21,64% complete, ETA 00:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15769,084 ops/s
[info] # Warmup Iteration   2: 16309,613 ops/s
[info] # Warmup Iteration   3: 16412,893 ops/s
[info] # Warmup Iteration   4: 16093,180 ops/s
[info] # Warmup Iteration   5: 16501,045 ops/s
[info] Iteration   1: 16631,024 ops/s
[info]                  ·gc.alloc.rate:                   1556,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127463,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,880 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 16633,562 ops/s
[info]                  ·gc.alloc.rate:                   1556,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689,255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159772,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,757 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 16644,628 ops/s
[info]                  ·gc.alloc.rate:                   1557,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160045,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,873 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 16663,954 ops/s
[info]                  ·gc.alloc.rate:                   1559,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128083,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,898 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 16479,303 ops/s
[info]                  ·gc.alloc.rate:                   1542,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162219,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,928 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc":
[info]   16610,494 ±(99.9%) 286,787 ops/s [Average]
[info]   (min, avg, max) = (16479,303, 16610,494, 16663,954), stdev = 74,478
[info]   CI (99.9%): [16323,707, 16897,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1554,664 ±(99.9%) 26,815 MB/sec [Average]
[info]   (min, avg, max) = (1542,397, 1554,664, 1559,643), stdev = 6,964
[info]   CI (99.9%): [1527,848, 1581,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   147248,028 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (147248,026, 147248,028, 147248,036), stdev = 0,004
[info]   CI (99.9%): [147248,011, 147248,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   1557,166 ±(99.9%) 721,327 MB/sec [Average]
[info]   (min, avg, max) = (1347,401, 1557,166, 1699,224), stdev = 187,326
[info]   CI (99.9%): [835,840, 2278,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   147516,922 ±(99.9%) 69502,278 B/op [Average]
[info]   (min, avg, max) = (127463,068, 147516,922, 162219,790), stdev = 18049,521
[info]   CI (99.9%): [78014,643, 217019,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,167), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   9,867 ±(99.9%) 15,235 B/op [Average]
[info]   (min, avg, max) = (5,898, 9,867, 15,757), stdev = 3,956
[info]   CI (99.9%): [≈ 0, 25,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson
[info] # Run progress: 22,39% complete, ETA 00:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1537930,501 ops/s
[info] # Warmup Iteration   2: 2324937,972 ops/s
[info] # Warmup Iteration   3: 2350157,246 ops/s
[info] # Warmup Iteration   4: 2339071,103 ops/s
[info] # Warmup Iteration   5: 2331352,039 ops/s
[info] Iteration   1: 2364159,796 ops/s
[info]                  ·gc.alloc.rate:                   1502,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1107,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 2365526,071 ops/s
[info]                  ·gc.alloc.rate:                   1503,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     891,082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2372376,769 ops/s
[info]                  ·gc.alloc.rate:                   1507,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2360398,248 ops/s
[info]                  ·gc.alloc.rate:                   1500,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     900,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2352981,104 ops/s
[info]                  ·gc.alloc.rate:                   1495,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     905,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson":
[info]   2363088,398 ±(99.9%) 27415,278 ops/s [Average]
[info]   (min, avg, max) = (2352981,104, 2363088,398, 2372376,769), stdev = 7119,661
[info]   CI (99.9%): [2335673,120, 2390503,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate":
[info]   1501,981 ±(99.9%) 17,483 MB/sec [Average]
[info]   (min, avg, max) = (1495,529, 1501,981, 1507,897), stdev = 4,540
[info]   CI (99.9%): [1484,498, 1519,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1478,667 ±(99.9%) 687,629 MB/sec [Average]
[info]   (min, avg, max) = (1339,781, 1478,667, 1683,277), stdev = 178,575
[info]   CI (99.9%): [791,038, 2166,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   984,295 ±(99.9%) 449,926 B/op [Average]
[info]   (min, avg, max) = (891,082, 984,295, 1116,308), stdev = 116,844
[info]   CI (99.9%): [534,369, 1434,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,050 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,050, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJackson:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter
[info] # Run progress: 23,13% complete, ETA 00:26:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5845336,845 ops/s
[info] # Warmup Iteration   2: 5582024,876 ops/s
[info] # Warmup Iteration   3: 5686319,209 ops/s
[info] # Warmup Iteration   4: 5692189,228 ops/s
[info] # Warmup Iteration   5: 5683946,419 ops/s
[info] Iteration   1: 5662611,390 ops/s
[info]                  ·gc.alloc.rate:                   748,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     277,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5650117,036 ops/s
[info]                  ·gc.alloc.rate:                   746,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5703300,277 ops/s
[info]                  ·gc.alloc.rate:                   753,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5695402,164 ops/s
[info]                  ·gc.alloc.rate:                   752,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5686143,234 ops/s
[info]                  ·gc.alloc.rate:                   751,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              208,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter":
[info]   5679514,820 ±(99.9%) 86361,952 ops/s [Average]
[info]   (min, avg, max) = (5650117,036, 5679514,820, 5703300,277), stdev = 22427,925
[info]   CI (99.9%): [5593152,869, 5765876,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   750,861 ±(99.9%) 11,365 MB/sec [Average]
[info]   (min, avg, max) = (746,984, 750,861, 753,997), stdev = 2,951
[info]   CI (99.9%): [739,496, 762,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   208,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (208,000, 208,000, 208,000), stdev = 0,001
[info]   CI (99.9%): [208,000, 208,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   802,567 ±(99.9%) 705,950 MB/sec [Average]
[info]   (min, avg, max) = (667,708, 802,567, 1006,870), stdev = 183,333
[info]   CI (99.9%): [96,617, 1508,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   222,358 ±(99.9%) 196,305 B/op [Average]
[info]   (min, avg, max) = (184,467, 222,358, 278,597), stdev = 50,980
[info]   CI (99.9%): [26,053, 418,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,125), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,015, 0,034), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay
[info] # Run progress: 23,88% complete, ETA 00:26:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206126,493 ops/s
[info] # Warmup Iteration   2: 443540,755 ops/s
[info] # Warmup Iteration   3: 450453,332 ops/s
[info] # Warmup Iteration   4: 451708,274 ops/s
[info] # Warmup Iteration   5: 447524,544 ops/s
[info] Iteration   1: 451262,215 ops/s
[info]                  ·gc.alloc.rate:                   2118,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7039,528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 447910,124 ops/s
[info]                  ·gc.alloc.rate:                   2102,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7122,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,293 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 451811,061 ops/s
[info]                  ·gc.alloc.rate:                   2120,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7084,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,435 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 451006,868 ops/s
[info]                  ·gc.alloc.rate:                   2116,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8296,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 448423,105 ops/s
[info]                  ·gc.alloc.rate:                   2104,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7156,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,438 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay":
[info]   450082,674 ±(99.9%) 6863,149 ops/s [Average]
[info]   (min, avg, max) = (447910,124, 450082,674, 451811,061), stdev = 1782,338
[info]   CI (99.9%): [443219,526, 456945,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate":
[info]   2112,462 ±(99.9%) 32,193 MB/sec [Average]
[info]   (min, avg, max) = (2102,413, 2112,462, 2120,551), stdev = 8,360
[info]   CI (99.9%): [2080,269, 2144,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   7384,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7384,001, 7384,001, 7384,001), stdev = 0,001
[info]   CI (99.9%): [7384,001, 7384,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2099,945 ±(99.9%) 599,712 MB/sec [Average]
[info]   (min, avg, max) = (2019,360, 2099,945, 2378,216), stdev = 155,743
[info]   CI (99.9%): [1500,233, 2699,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   7339,882 ±(99.9%) 2066,020 B/op [Average]
[info]   (min, avg, max) = (7039,528, 7339,882, 8296,498), stdev = 536,539
[info]   CI (99.9%): [5273,862, 9405,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,125), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,349 ±(99.9%) 0,365 B/op [Average]
[info]   (min, avg, max) = (0,218, 0,349, 0,438), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlay:·gc.time":
[info]   27,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,400, 7,000), stdev = 1,140
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson
[info] # Run progress: 24,63% complete, ETA 00:26:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1972995,255 ops/s
[info] # Warmup Iteration   2: 2984485,522 ops/s
[info] # Warmup Iteration   3: 2987993,466 ops/s
[info] # Warmup Iteration   4: 2997985,971 ops/s
[info] # Warmup Iteration   5: 3004442,278 ops/s
[info] Iteration   1: 3009103,853 ops/s
[info]                  ·gc.alloc.rate:                   1591,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     871,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3011305,229 ops/s
[info]                  ·gc.alloc.rate:                   1592,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     876,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 3008355,515 ops/s
[info]                  ·gc.alloc.rate:                   1590,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     881,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 2986890,774 ops/s
[info]                  ·gc.alloc.rate:                   1579,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2996201,914 ops/s
[info]                  ·gc.alloc.rate:                   1584,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     890,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson":
[info]   3002371,457 ±(99.9%) 40324,406 ops/s [Average]
[info]   (min, avg, max) = (2986890,774, 3002371,457, 3011305,229), stdev = 10472,120
[info]   CI (99.9%): [2962047,052, 3042695,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate":
[info]   1587,724 ±(99.9%) 21,329 MB/sec [Average]
[info]   (min, avg, max) = (1579,547, 1587,724, 1592,414), stdev = 5,539
[info]   CI (99.9%): [1566,395, 1609,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   832,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,000, 832,000, 832,000), stdev = 0,001
[info]   CI (99.9%): [832,000, 832,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1615,713 ±(99.9%) 567,595 MB/sec [Average]
[info]   (min, avg, max) = (1352,692, 1615,713, 1695,241), stdev = 147,403
[info]   CI (99.9%): [1048,119, 2183,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   846,504 ±(99.9%) 289,655 B/op [Average]
[info]   (min, avg, max) = (712,508, 846,504, 890,186), stdev = 75,222
[info]   CI (99.9%): [556,850, 1136,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,020, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,046 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,033, 0,046, 0,055), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJackson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter
[info] # Run progress: 25,37% complete, ETA 00:26:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6077113,765 ops/s
[info] # Warmup Iteration   2: 6413055,719 ops/s
[info] # Warmup Iteration   3: 6515715,552 ops/s
[info] # Warmup Iteration   4: 6524010,959 ops/s
[info] # Warmup Iteration   5: 6480236,553 ops/s
[info] Iteration   1: 6543590,780 ops/s
[info]                  ·gc.alloc.rate:                   998,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240,961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6497355,672 ops/s
[info]                  ·gc.alloc.rate:                   991,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6521411,106 ops/s
[info]                  ·gc.alloc.rate:                   994,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6505329,585 ops/s
[info]                  ·gc.alloc.rate:                   992,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6483894,312 ops/s
[info]                  ·gc.alloc.rate:                   989,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter":
[info]   6510316,291 ±(99.9%) 88674,662 ops/s [Average]
[info]   (min, avg, max) = (6483894,312, 6510316,291, 6543590,780), stdev = 23028,528
[info]   CI (99.9%): [6421641,629, 6598990,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   993,117 ±(99.9%) 13,523 MB/sec [Average]
[info]   (min, avg, max) = (989,096, 993,117, 998,206), stdev = 3,512
[info]   CI (99.9%): [979,594, 1006,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (240,000, 240,000, 240,000), stdev = 0,001
[info]   CI (99.9%): [240,000, 240,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   939,970 ±(99.9%) 571,819 MB/sec [Average]
[info]   (min, avg, max) = (674,382, 939,970, 1010,182), stdev = 148,500
[info]   CI (99.9%): [368,151, 1511,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   227,094 ±(99.9%) 136,681 B/op [Average]
[info]   (min, avg, max) = (163,636, 227,094, 244,320), stdev = 35,496
[info]   CI (99.9%): [90,413, 363,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,018, 0,025), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay
[info] # Run progress: 26,12% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361564,249 ops/s
[info] # Warmup Iteration   2: 733802,257 ops/s
[info] # Warmup Iteration   3: 730002,209 ops/s
[info] # Warmup Iteration   4: 732128,944 ops/s
[info] # Warmup Iteration   5: 731525,392 ops/s
[info] Iteration   1: 730476,103 ops/s
[info]                  ·gc.alloc.rate:                   2154,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4352,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 731666,929 ops/s
[info]                  ·gc.alloc.rate:                   2157,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4363,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 731586,865 ops/s
[info]                  ·gc.alloc.rate:                   2157,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5106,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,269 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 731833,866 ops/s
[info]                  ·gc.alloc.rate:                   2158,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4383,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 731255,442 ops/s
[info]                  ·gc.alloc.rate:                   2156,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4392,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay":
[info]   731363,841 ±(99.9%) 2075,739 ops/s [Average]
[info]   (min, avg, max) = (730476,103, 731363,841, 731833,866), stdev = 539,063
[info]   CI (99.9%): [729288,102, 733439,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate":
[info]   2156,933 ±(99.9%) 6,043 MB/sec [Average]
[info]   (min, avg, max) = (2154,344, 2156,933, 2158,280), stdev = 1,569
[info]   CI (99.9%): [2150,890, 2162,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   4640,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4640,001, 4640,001, 4640,001), stdev = 0,001
[info]   CI (99.9%): [4640,001, 4640,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   2101,014 ±(99.9%) 589,673 MB/sec [Average]
[info]   (min, avg, max) = (2020,731, 2101,014, 2374,547), stdev = 153,136
[info]   CI (99.9%): [1511,340, 2690,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   4519,660 ±(99.9%) 1265,123 B/op [Average]
[info]   (min, avg, max) = (4352,227, 4519,660, 5106,683), stdev = 328,548
[info]   CI (99.9%): [3254,537, 5784,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,161 ±(99.9%) 0,261 B/op [Average]
[info]   (min, avg, max) = (0,090, 0,161, 0,269), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlay:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 26,87% complete, ETA 00:25:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581423,014 ops/s
[info] # Warmup Iteration   2: 923506,303 ops/s
[info] # Warmup Iteration   3: 925881,719 ops/s
[info] # Warmup Iteration   4: 931133,395 ops/s
[info] # Warmup Iteration   5: 925365,401 ops/s
[info] Iteration   1: 928102,391 ops/s
[info]                  ·gc.alloc.rate:                   3081,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5184,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 902894,122 ops/s
[info]                  ·gc.alloc.rate:                   2998,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4745,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,290 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 898146,451 ops/s
[info]                  ·gc.alloc.rate:                   2982,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5368,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 924560,213 ops/s
[info]                  ·gc.alloc.rate:                   3069,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 929619,346 ops/s
[info]                  ·gc.alloc.rate:                   3086,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5186,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   916664,504 ±(99.9%) 57551,899 ops/s [Average]
[info]   (min, avg, max) = (898146,451, 916664,504, 929619,346), stdev = 14946,045
[info]   CI (99.9%): [859112,605, 974216,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   3043,721 ±(99.9%) 190,961 MB/sec [Average]
[info]   (min, avg, max) = (2982,226, 3043,721, 3086,692), stdev = 49,592
[info]   CI (99.9%): [2852,759, 3234,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5224,000, 5224,000, 5224,000), stdev = 0,001
[info]   CI (99.9%): [5224,000, 5224,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2995,201 ±(99.9%) 584,966 MB/sec [Average]
[info]   (min, avg, max) = (2723,489, 2995,201, 3064,655), stdev = 151,914
[info]   CI (99.9%): [2410,235, 3580,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5140,091 ±(99.9%) 898,058 B/op [Average]
[info]   (min, avg, max) = (4745,539, 5140,091, 5368,393), stdev = 233,223
[info]   CI (99.9%): [4242,033, 6038,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,121, 0,167), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,208 ±(99.9%) 0,312 B/op [Average]
[info]   (min, avg, max) = (0,106, 0,208, 0,292), stdev = 0,081
[info]   CI (99.9%): [≈ 0, 0,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   44,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,800, 9,000), stdev = 0,447
[info]   CI (99.9%): [44,000, 44,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   30,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,000, 8,000), stdev = 1,225
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson
[info] # Run progress: 27,61% complete, ETA 00:25:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 474630,784 ops/s
[info] # Warmup Iteration   2: 1086442,518 ops/s
[info] # Warmup Iteration   3: 1092669,659 ops/s
[info] # Warmup Iteration   4: 1103831,691 ops/s
[info] # Warmup Iteration   5: 1097399,513 ops/s
[info] Iteration   1: 1097202,909 ops/s
[info]                  ·gc.alloc.rate:                   1361,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2379,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1100190,548 ops/s
[info]                  ·gc.alloc.rate:                   1365,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1910,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1099576,172 ops/s
[info]                  ·gc.alloc.rate:                   1364,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1102335,960 ops/s
[info]                  ·gc.alloc.rate:                   1367,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1923,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1101232,802 ops/s
[info]                  ·gc.alloc.rate:                   1366,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1931,609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson":
[info]   1100107,678 ±(99.9%) 7446,342 ops/s [Average]
[info]   (min, avg, max) = (1097202,909, 1100107,678, 1102335,960), stdev = 1933,791
[info]   CI (99.9%): [1092661,336, 1107554,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate":
[info]   1364,894 ±(99.9%) 9,288 MB/sec [Average]
[info]   (min, avg, max) = (1361,259, 1364,894, 1367,675), stdev = 2,412
[info]   CI (99.9%): [1355,607, 1374,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1952,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,000, 1952,000, 1952,000), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1407,463 ±(99.9%) 542,359 MB/sec [Average]
[info]   (min, avg, max) = (1336,061, 1407,463, 1659,201), stdev = 140,849
[info]   CI (99.9%): [865,104, 1949,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   2013,121 ±(99.9%) 788,621 B/op [Average]
[info]   (min, avg, max) = (1910,565, 2013,121, 2379,238), stdev = 204,802
[info]   CI (99.9%): [1224,500, 2801,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,131 B/op [Average]
[info]   (min, avg, max) = (0,060, 0,107, 0,149), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJackson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter
[info] # Run progress: 28,36% complete, ETA 00:24:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8219581,782 ops/s
[info] # Warmup Iteration   2: 8676945,226 ops/s
[info] # Warmup Iteration   3: 8864710,511 ops/s
[info] # Warmup Iteration   4: 8859839,052 ops/s
[info] # Warmup Iteration   5: 8906961,048 ops/s
[info] Iteration   1: 8889929,590 ops/s
[info]                  ·gc.alloc.rate:                   406,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59,435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8885096,196 ops/s
[info]                  ·gc.alloc.rate:               406,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59,350 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8872192,300 ops/s
[info]                  ·gc.alloc.rate:                   406,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8855313,828 ops/s
[info]                  ·gc.alloc.rate:               405,243 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59,552 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8454978,845 ops/s
[info]                  ·gc.alloc.rate:               386,926 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62,370 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter":
[info]   8791502,152 ±(99.9%) 726228,209 ops/s [Average]
[info]   (min, avg, max) = (8454978,845, 8791502,152, 8889929,590), stdev = 188599,160
[info]   CI (99.9%): [8065273,943, 9517730,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   402,329 ±(99.9%) 33,242 MB/sec [Average]
[info]   (min, avg, max) = (386,926, 402,329, 406,840), stdev = 8,633
[info]   CI (99.9%): [369,088, 435,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   402,344 ±(99.9%) 576,915 MB/sec [Average]
[info]   (min, avg, max) = (335,170, 402,344, 670,355), stdev = 149,823
[info]   CI (99.9%): [≈ 0, 979,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   71,916 ±(99.9%) 101,195 B/op [Average]
[info]   (min, avg, max) = (59,350, 71,916, 118,872), stdev = 26,280
[info]   CI (99.9%): [≈ 0, 173,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay
[info] # Run progress: 29,10% complete, ETA 00:24:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88644,212 ops/s
[info] # Warmup Iteration   2: 299688,764 ops/s
[info] # Warmup Iteration   3: 303512,299 ops/s
[info] # Warmup Iteration   4: 304202,328 ops/s
[info] # Warmup Iteration   5: 303468,086 ops/s
[info] Iteration   1: 303746,354 ops/s
[info]                  ·gc.alloc.rate:                   1558,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8606,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 302695,479 ops/s
[info]                  ·gc.alloc.rate:                   1553,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8700,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,541 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 302957,530 ops/s
[info]                  ·gc.alloc.rate:                   1554,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6990,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 303199,052 ops/s
[info]                  ·gc.alloc.rate:                   1555,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8758,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,540 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 303349,399 ops/s
[info]                  ·gc.alloc.rate:                   1556,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              8072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8781,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,540 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay":
[info]   303189,563 ±(99.9%) 1532,551 ops/s [Average]
[info]   (min, avg, max) = (302695,479, 303189,563, 303746,354), stdev = 397,999
[info]   CI (99.9%): [301657,012, 304722,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate":
[info]   1555,568 ±(99.9%) 7,771 MB/sec [Average]
[info]   (min, avg, max) = (1553,075, 1555,568, 1558,386), stdev = 2,018
[info]   CI (99.9%): [1547,798, 1563,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8072,001, 8072,001, 8072,002), stdev = 0,001
[info]   CI (99.9%): [8072,001, 8072,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1612,540 ±(99.9%) 575,544 MB/sec [Average]
[info]   (min, avg, max) = (1346,082, 1612,540, 1693,264), stdev = 149,467
[info]   CI (99.9%): [1036,996, 2188,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8367,395 ±(99.9%) 2975,728 B/op [Average]
[info]   (min, avg, max) = (6990,299, 8367,395, 8781,737), stdev = 772,787
[info]   CI (99.9%): [5391,667, 11343,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,079, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,411 ±(99.9%) 0,745 B/op [Average]
[info]   (min, avg, max) = (0,108, 0,411, 0,541), stdev = 0,193
[info]   CI (99.9%): [≈ 0, 1,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlay:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 5,000), stdev = 0,707
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce
[info] # Run progress: 29,85% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6300,393 ops/s
[info] # Warmup Iteration   2: 7336,540 ops/s
[info] # Warmup Iteration   3: 7366,172 ops/s
[info] # Warmup Iteration   4: 7391,467 ops/s
[info] # Warmup Iteration   5: 7370,428 ops/s
[info] Iteration   1: 7378,199 ops/s
[info]                  ·gc.alloc.rate:                   1478,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286369,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,201 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 7353,368 ops/s
[info]                  ·gc.alloc.rate:                   1473,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288198,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31,186 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 7297,733 ops/s
[info]                  ·gc.alloc.rate:                   1462,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              315280,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364178,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,936 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 7425,446 ops/s
[info]                  ·gc.alloc.rate:               1488,104 MB/sec
[info]                  ·gc.alloc.rate.norm:          315288,264 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 286989,096 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 7449,960 ops/s
[info]                  ·gc.alloc.rate:                   1493,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              315296,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358179,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26,383 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce":
[info]   7380,941 ±(99.9%) 231,326 ops/s [Average]
[info]   (min, avg, max) = (7297,733, 7380,941, 7449,960), stdev = 60,075
[info]   CI (99.9%): [7149,616, 7612,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   1479,135 ±(99.9%) 46,613 MB/sec [Average]
[info]   (min, avg, max) = (1462,353, 1479,135, 1493,030), stdev = 12,105
[info]   CI (99.9%): [1432,522, 1525,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   315284,901 ±(99.9%) 27,639 B/op [Average]
[info]   (min, avg, max) = (315280,059, 315284,901, 315296,058), stdev = 7,178
[info]   CI (99.9%): [315257,261, 315312,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1485,963 ±(99.9%) 726,688 MB/sec [Average]
[info]   (min, avg, max) = (1343,010, 1485,963, 1696,095), stdev = 188,719
[info]   CI (99.9%): [759,274, 2212,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   316782,811 ±(99.9%) 156292,483 B/op [Average]
[info]   (min, avg, max) = (286369,231, 316782,811, 364178,677), stdev = 40588,662
[info]   CI (99.9%): [160490,328, 473075,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,146), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   21,341 ±(99.9%) 47,546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21,341, 31,186), stdev = 12,347
[info]   CI (99.9%): [≈ 0, 68,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson
[info] # Run progress: 30,60% complete, ETA 00:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16598,733 ops/s
[info] # Warmup Iteration   2: 22194,154 ops/s
[info] # Warmup Iteration   3: 22216,127 ops/s
[info] # Warmup Iteration   4: 22281,724 ops/s
[info] # Warmup Iteration   5: 22340,156 ops/s
[info] Iteration   1: 22293,417 ops/s
[info]                  ·gc.alloc.rate:                   1038,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              73256,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69977,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,939 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22326,818 ops/s
[info]                  ·gc.alloc.rate:                   1039,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70149,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,869 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 22341,504 ops/s
[info]                  ·gc.alloc.rate:                   1040,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70457,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,399 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 22217,736 ops/s
[info]                  ·gc.alloc.rate:                   1034,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71083,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,949 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 22287,606 ops/s
[info]                  ·gc.alloc.rate:                   1037,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              73248,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94871,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,940 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson":
[info]   22293,416 ±(99.9%) 184,564 ops/s [Average]
[info]   (min, avg, max) = (22217,736, 22293,416, 22341,504), stdev = 47,931
[info]   CI (99.9%): [22108,852, 22477,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   1037,924 ±(99.9%) 8,617 MB/sec [Average]
[info]   (min, avg, max) = (1034,358, 1037,924, 1040,119), stdev = 2,238
[info]   CI (99.9%): [1029,307, 1046,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   73249,812 ±(99.9%) 15,431 B/op [Average]
[info]   (min, avg, max) = (73248,019, 73249,812, 73256,980), stdev = 4,007
[info]   CI (99.9%): [73234,381, 73265,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1067,059 ±(99.9%) 596,359 MB/sec [Average]
[info]   (min, avg, max) = (991,540, 1067,059, 1343,978), stdev = 154,873
[info]   CI (99.9%): [470,700, 1663,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   75307,710 ±(99.9%) 42144,508 B/op [Average]
[info]   (min, avg, max) = (69977,176, 75307,710, 94871,834), stdev = 10944,795
[info]   CI (99.9%): [33163,202, 117452,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,819 ±(99.9%) 5,037 B/op [Average]
[info]   (min, avg, max) = (2,939, 3,819, 5,869), stdev = 1,308
[info]   CI (99.9%): [≈ 0, 8,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter
[info] # Run progress: 31,34% complete, ETA 00:23:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44661,157 ops/s
[info] # Warmup Iteration   2: 45213,420 ops/s
[info] # Warmup Iteration   3: 45354,324 ops/s
[info] # Warmup Iteration   4: 45342,881 ops/s
[info] # Warmup Iteration   5: 44965,597 ops/s
[info] Iteration   1: 45302,533 ops/s
[info]                  ·gc.alloc.rate:      118,856 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 45150,157 ops/s
[info]                  ·gc.alloc.rate:                   118,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8916,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,725 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45255,503 ops/s
[info]                  ·gc.alloc.rate:      118,741 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45059,026 ops/s
[info]                  ·gc.alloc.rate:               118,230 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8933,951 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 44511,656 ops/s
[info]                  ·gc.alloc.rate:      116,785 MB/sec
[info]                  ·gc.alloc.rate.norm: 4128,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter":
[info]   45055,775 ±(99.9%) 1226,424 ops/s [Average]
[info]   (min, avg, max) = (44511,656, 45055,775, 45302,533), stdev = 318,498
[info]   CI (99.9%): [43829,351, 46282,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   118,215 ±(99.9%) 3,218 MB/sec [Average]
[info]   (min, avg, max) = (116,785, 118,215, 118,856), stdev = 0,836
[info]   CI (99.9%): [114,997, 121,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   4128,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4128,010, 4128,010, 4128,010), stdev = 0,001
[info]   CI (99.9%): [4128,009, 4128,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   102,351 ±(99.9%) 539,668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,351, 255,880), stdev = 140,150
[info]   CI (99.9%): [≈ 0, 642,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   3570,059 ±(99.9%) 18823,906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3570,059, 8933,951), stdev = 4888,509
[info]   CI (99.9%): [≈ 0, 22393,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,145 ±(99.9%) 1,248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,145, 0,725), stdev = 0,324
[info]   CI (99.9%): [≈ 0, 1,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readJsoniter:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay
[info] # Run progress: 32,09% complete, ETA 00:23:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4638,319 ops/s
[info] # Warmup Iteration   2: 6877,178 ops/s
[info] # Warmup Iteration   3: 7135,243 ops/s
[info] # Warmup Iteration   4: 7146,923 ops/s
[info] # Warmup Iteration   5: 7112,576 ops/s
[info] Iteration   1: 7103,154 ops/s
[info]                  ·gc.alloc.rate:                   1659,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370654,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,448 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 7108,424 ops/s
[info]                  ·gc.alloc.rate:                   1660,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682,275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     372310,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,826 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 7153,580 ops/s
[info]                  ·gc.alloc.rate:                   1671,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504,065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371508,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,058 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 7096,027 ops/s
[info]                  ·gc.alloc.rate:                   1657,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375377,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,466 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 7090,552 ops/s
[info]                  ·gc.alloc.rate:                   1656,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              367504,243 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     376434,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,482 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay":
[info]   7110,347 ±(99.9%) 96,679 ops/s [Average]
[info]   (min, avg, max) = (7090,552, 7110,347, 7153,580), stdev = 25,107
[info]   CI (99.9%): [7013,669, 7207,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   1660,961 ±(99.9%) 22,537 MB/sec [Average]
[info]   (min, avg, max) = (1656,302, 1660,961, 1671,017), stdev = 5,853
[info]   CI (99.9%): [1638,423, 1683,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   367504,098 ±(99.9%) 0,311 B/op [Average]
[info]   (min, avg, max) = (367504,061, 367504,098, 367504,243), stdev = 0,081
[info]   CI (99.9%): [367503,787, 367504,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1686,943 ±(99.9%) 35,287 MB/sec [Average]
[info]   (min, avg, max) = (1673,572, 1686,943, 1696,551), stdev = 9,164
[info]   CI (99.9%): [1651,655, 1722,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   373257,124 ±(99.9%) 9688,673 B/op [Average]
[info]   (min, avg, max) = (370654,275, 373257,124, 376434,644), stdev = 2516,118
[info]   CI (99.9%): [363568,452, 382945,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,092, 0,146), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   20,256 ±(99.9%) 26,557 B/op [Average]
[info]   (min, avg, max) = (13,826, 20,256, 32,058), stdev = 6,897
[info]   CI (99.9%): [≈ 0, 46,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.readPlay:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce
[info] # Run progress: 32,84% complete, ETA 00:23:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16162,975 ops/s
[info] # Warmup Iteration   2: 18244,754 ops/s
[info] # Warmup Iteration   3: 18312,546 ops/s
[info] # Warmup Iteration   4: 19415,457 ops/s
[info] # Warmup Iteration   5: 20096,949 ops/s
[info] Iteration   1: 19774,244 ops/s
[info]                  ·gc.alloc.rate:                   663,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              52818,592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52699,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18368,030 ops/s
[info]                  ·gc.alloc.rate:               699,781 MB/sec
[info]                  ·gc.alloc.rate.norm:          59936,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56789,305 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 18437,197 ops/s
[info]                  ·gc.alloc.rate:                   702,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              59936,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56690,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,777 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18537,986 ops/s
[info]                  ·gc.alloc.rate:                   706,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              59936,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56522,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,302 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18449,513 ops/s
[info]                  ·gc.alloc.rate:                   702,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              59936,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85430,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,327 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce":
[info]   18713,394 ±(99.9%) 2295,388 ops/s [Average]
[info]   (min, avg, max) = (18368,030, 18713,394, 19774,244), stdev = 596,105
[info]   CI (99.9%): [16418,006, 21008,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   695,033 ±(99.9%) 67,667 MB/sec [Average]
[info]   (min, avg, max) = (663,864, 695,033, 706,202), stdev = 17,573
[info]   CI (99.9%): [627,366, 762,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58512,537 ±(99.9%) 12256,647 B/op [Average]
[info]   (min, avg, max) = (52818,592, 58512,537, 59936,025), stdev = 3183,012
[info]   CI (99.9%): [46255,890, 70769,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   731,529 ±(99.9%) 581,908 MB/sec [Average]
[info]   (min, avg, max) = (662,363, 731,529, 1001,849), stdev = 151,120
[info]   CI (99.9%): [149,621, 1313,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   61626,449 ±(99.9%) 51666,716 B/op [Average]
[info]   (min, avg, max) = (52699,188, 61626,449, 85430,477), stdev = 13417,682
[info]   CI (99.9%): [9959,733, 113293,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,475 ±(99.9%) 9,425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,475, 5,327), stdev = 2,448
[info]   CI (99.9%): [≈ 0, 12,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson
[info] # Run progress: 33,58% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17661,315 ops/s
[info] # Warmup Iteration   2: 21862,837 ops/s
[info] # Warmup Iteration   3: 22327,046 ops/s
[info] # Warmup Iteration   4: 22198,075 ops/s
[info] # Warmup Iteration   5: 22373,145 ops/s
[info] Iteration   1: 22412,589 ops/s
[info]                  ·gc.alloc.rate:                   437,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              30679,944 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45955,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 22357,917 ops/s
[info]                  ·gc.alloc.rate:               436,006 MB/sec
[info]                  ·gc.alloc.rate.norm:          30680,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23023,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 22368,529 ops/s
[info]                  ·gc.alloc.rate:                   436,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              30680,107 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23059,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,929 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22377,879 ops/s
[info]                  ·gc.alloc.rate:                   436,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              30680,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46144,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,392 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 22083,094 ops/s
[info]                  ·gc.alloc.rate:               430,625 MB/sec
[info]                  ·gc.alloc.rate.norm:          30680,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23404,019 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson":
[info]   22320,002 ±(99.9%) 516,042 ops/s [Average]
[info]   (min, avg, max) = (22083,094, 22320,002, 22412,589), stdev = 134,015
[info]   CI (99.9%): [21803,959, 22836,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   435,253 ±(99.9%) 10,075 MB/sec [Average]
[info]   (min, avg, max) = (430,625, 435,253, 437,045), stdev = 2,617
[info]   CI (99.9%): [425,178, 445,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   30680,020 ±(99.9%) 0,223 B/op [Average]
[info]   (min, avg, max) = (30679,944, 30680,020, 30680,107), stdev = 0,058
[info]   CI (99.9%): [30679,797, 30680,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   458,908 ±(99.9%) 691,056 MB/sec [Average]
[info]   (min, avg, max) = (327,196, 458,908, 656,354), stdev = 179,465
[info]   CI (99.9%): [≈ 0, 1149,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   32317,217 ±(99.9%) 48276,005 B/op [Average]
[info]   (min, avg, max) = (23023,469, 32317,217, 46144,277), stdev = 12537,125
[info]   CI (99.9%): [≈ 0, 80593,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,926 ±(99.9%) 11,943 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,926, 7,308), stdev = 3,102
[info]   CI (99.9%): [≈ 0, 14,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJackson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter
[info] # Run progress: 34,33% complete, ETA 00:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25563,709 ops/s
[info] # Warmup Iteration   2: 26186,602 ops/s
[info] # Warmup Iteration   3: 25911,226 ops/s
[info] # Warmup Iteration   4: 26025,614 ops/s
[info] # Warmup Iteration   5: 26271,346 ops/s
[info] Iteration   1: 26340,232 ops/s
[info]                  ·gc.alloc.rate:                   420,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39801,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 26264,741 ops/s
[info]                  ·gc.alloc.rate:               418,838 MB/sec
[info]                  ·gc.alloc.rate.norm:          25088,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19957,670 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 26214,159 ops/s
[info]                  ·gc.alloc.rate:                   418,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19977,257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,250 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26359,556 ops/s
[info]                  ·gc.alloc.rate:               420,332 MB/sec
[info]                  ·gc.alloc.rate.norm:          25088,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19865,118 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 25926,863 ops/s
[info]                  ·gc.alloc.rate:                   413,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              25088,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40434,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter":
[info]   26221,110 ±(99.9%) 672,185 ops/s [Average]
[info]   (min, avg, max) = (25926,863, 26221,110, 26359,556), stdev = 174,564
[info]   CI (99.9%): [25548,925, 26893,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   418,132 ±(99.9%) 10,736 MB/sec [Average]
[info]   (min, avg, max) = (413,427, 418,132, 420,332), stdev = 2,788
[info]   CI (99.9%): [407,395, 428,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   25088,017 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25088,016, 25088,017, 25088,018), stdev = 0,001
[info]   CI (99.9%): [25088,015, 25088,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   466,315 ±(99.9%) 703,131 MB/sec [Average]
[info]   (min, avg, max) = (332,826, 466,315, 666,374), stdev = 182,601
[info]   CI (99.9%): [≈ 0, 1169,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   28007,159 ±(99.9%) 42579,888 B/op [Average]
[info]   (min, avg, max) = (19865,118, 28007,159, 40434,042), stdev = 11057,862
[info]   CI (99.9%): [≈ 0, 70587,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,125), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   2,753 ±(99.9%) 12,900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,753, 7,463), stdev = 3,350
[info]   CI (99.9%): [≈ 0, 15,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 35,07% complete, ETA 00:22:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26028,333 ops/s
[info] # Warmup Iteration   2: 26781,004 ops/s
[info] # Warmup Iteration   3: 26940,900 ops/s
[info] # Warmup Iteration   4: 26771,155 ops/s
[info] # Warmup Iteration   5: 26893,474 ops/s
[info] Iteration   1: 27106,195 ops/s
[info]                  ·gc.alloc.rate:                   338,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19357,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91,969 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 27083,400 ops/s
[info]                  ·gc.alloc.rate:                   338,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19373,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,419 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 26973,654 ops/s
[info]                  ·gc.alloc.rate:                   336,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19433,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,215 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 27013,330 ops/s
[info]                  ·gc.alloc.rate:               337,354 MB/sec
[info]                  ·gc.alloc.rate.norm:          19648,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19404,419 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 26665,270 ops/s
[info]                  ·gc.alloc.rate:                   332,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              19648,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19657,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,457 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc":
[info]   26968,370 ±(99.9%) 683,820 ops/s [Average]
[info]   (min, avg, max) = (26665,270, 26968,370, 27106,195), stdev = 177,586
[info]   CI (99.9%): [26284,550, 27652,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   336,795 ±(99.9%) 8,586 MB/sec [Average]
[info]   (min, avg, max) = (332,992, 336,795, 338,546), stdev = 2,230
[info]   CI (99.9%): [328,209, 345,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   19648,016 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19648,016, 19648,016, 19648,016), stdev = 0,001
[info]   CI (99.9%): [19648,016, 19648,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   333,312 ±(99.9%) 0,744 MB/sec [Average]
[info]   (min, avg, max) = (333,154, 333,312, 333,547), stdev = 0,193
[info]   CI (99.9%): [332,568, 334,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   19445,495 ±(99.9%) 470,220 B/op [Average]
[info]   (min, avg, max) = (19357,910, 19445,495, 19657,606), stdev = 122,115
[info]   CI (99.9%): [18975,275, 19915,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,338 ±(99.9%) 2,685 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,338, 1,585), stdev = 0,697
[info]   CI (99.9%): [≈ 0, 3,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   19,612 ±(99.9%) 155,802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19,612, 91,969), stdev = 40,461
[info]   CI (99.9%): [≈ 0, 175,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 35,82% complete, ETA 00:22:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6640,670 ops/s
[info] # Warmup Iteration   2: 8989,251 ops/s
[info] # Warmup Iteration   3: 9135,603 ops/s
[info] # Warmup Iteration   4: 9078,004 ops/s
[info] # Warmup Iteration   5: 9061,648 ops/s
[info] Iteration   1: 9129,194 ops/s
[info]                  ·gc.alloc.rate:                   2350,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2367,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408073,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,522 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 9105,291 ops/s
[info]                  ·gc.alloc.rate:                   2343,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     410254,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,929 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 8962,577 ops/s
[info]                  ·gc.alloc.rate:                   2307,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              405038,838 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     417558,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43,062 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   4: 9092,882 ops/s
[info]                  ·gc.alloc.rate:                   2340,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              405040,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411705,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,226 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9116,555 ops/s
[info]                  ·gc.alloc.rate:                   2347,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              405040,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411312,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,967 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   9081,300 ±(99.9%) 260,749 ops/s [Average]
[info]   (min, avg, max) = (8962,577, 9081,300, 9129,194), stdev = 67,716
[info]   CI (99.9%): [8820,551, 9342,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2337,891 ±(99.9%) 66,850 MB/sec [Average]
[info]   (min, avg, max) = (2307,430, 2337,891, 2350,001), stdev = 17,361
[info]   CI (99.9%): [2271,041, 2404,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405023,806 ±(99.9%) 83,535 B/op [Average]
[info]   (min, avg, max) = (405000,047, 405023,806, 405040,047), stdev = 21,694
[info]   CI (99.9%): [404940,271, 405107,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2376,779 ±(99.9%) 22,871 MB/sec [Average]
[info]   (min, avg, max) = (2367,832, 2376,779, 2383,431), stdev = 5,940
[info]   CI (99.9%): [2353,908, 2399,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   411780,983 ±(99.9%) 13571,663 B/op [Average]
[info]   (min, avg, max) = (408073,028, 411780,983, 417558,987), stdev = 3524,518
[info]   CI (99.9%): [398209,319, 425352,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,156 ±(99.9%) 0,339 MB/sec [Average]
[info]   (min, avg, max) = (0,075, 0,156, 0,258), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27,141 ±(99.9%) 59,029 B/op [Average]
[info]   (min, avg, max) = (12,929, 27,141, 44,522), stdev = 15,330
[info]   CI (99.9%): [≈ 0, 86,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,600, 9,000), stdev = 1,949
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson
[info] # Run progress: 36,57% complete, ETA 00:22:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9649,676 ops/s
[info] # Warmup Iteration   2: 15058,819 ops/s
[info] # Warmup Iteration   3: 15071,623 ops/s
[info] # Warmup Iteration   4: 15229,852 ops/s
[info] # Warmup Iteration   5: 15195,292 ops/s
[info] Iteration   1: 15298,783 ops/s
[info]                  ·gc.alloc.rate:                   412,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33371,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,141 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15219,431 ops/s
[info]                  ·gc.alloc.rate:               410,540 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      324,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33545,064 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15251,881 ops/s
[info]                  ·gc.alloc.rate:                   411,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          649,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66983,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,148 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15295,381 ops/s
[info]                  ·gc.alloc.rate:                   412,609 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          324,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33412,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,142 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15126,322 ops/s
[info]                  ·gc.alloc.rate:               408,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33855,213 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson":
[info]   15238,360 ±(99.9%) 272,254 ops/s [Average]
[info]   (min, avg, max) = (15126,322, 15238,360, 15298,783), stdev = 70,703
[info]   CI (99.9%): [14966,106, 15510,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   411,057 ±(99.9%) 7,363 MB/sec [Average]
[info]   (min, avg, max) = (408,027, 411,057, 412,677), stdev = 1,912
[info]   CI (99.9%): [403,695, 418,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   42440,031 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (42440,028, 42440,031, 42440,039), stdev = 0,005
[info]   CI (99.9%): [42440,013, 42440,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   389,740 ±(99.9%) 558,879 MB/sec [Average]
[info]   (min, avg, max) = (324,495, 389,740, 649,372), stdev = 145,139
[info]   CI (99.9%): [≈ 0, 948,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   40233,723 ±(99.9%) 57586,104 B/op [Average]
[info]   (min, avg, max) = (33371,880, 40233,723, 66983,763), stdev = 14954,928
[info]   CI (99.9%): [≈ 0, 97819,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,286 ±(99.9%) 4,521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,286, 2,148), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJackson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter
[info] # Run progress: 37,31% complete, ETA 00:21:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23652,197 ops/s
[info] # Warmup Iteration   2: 26838,045 ops/s
[info] # Warmup Iteration   3: 26578,698 ops/s
[info] # Warmup Iteration   4: 26862,133 ops/s
[info] # Warmup Iteration   5: 26860,448 ops/s
[info] Iteration   1: 26879,074 ops/s
[info]                  ·gc.alloc.rate:                   503,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38924,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,875 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26889,142 ops/s
[info]                  ·gc.alloc.rate:               503,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19454,896 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 26713,351 ops/s
[info]                  ·gc.alloc.rate:                   499,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39187,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,453 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 26961,295 ops/s
[info]                  ·gc.alloc.rate:                   504,658 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19422,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,430 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26673,920 ops/s
[info]                  ·gc.alloc.rate:               499,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39304,895 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter":
[info]   26823,357 ±(99.9%) 475,098 ops/s [Average]
[info]   (min, avg, max) = (26673,920, 26823,357, 26961,295), stdev = 123,381
[info]   CI (99.9%): [26348,258, 27298,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   502,061 ±(99.9%) 8,953 MB/sec [Average]
[info]   (min, avg, max) = (499,247, 502,061, 504,658), stdev = 2,325
[info]   CI (99.9%): [493,108, 511,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   29448,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (29448,016, 29448,016, 29448,017), stdev = 0,001
[info]   CI (99.9%): [29448,014, 29448,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   532,412 ±(99.9%) 702,094 MB/sec [Average]
[info]   (min, avg, max) = (332,511, 532,412, 666,355), stdev = 182,332
[info]   CI (99.9%): [≈ 0, 1234,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   31258,726 ±(99.9%) 41552,663 B/op [Average]
[info]   (min, avg, max) = (19422,394, 31258,726, 39304,895), stdev = 10791,095
[info]   CI (99.9%): [≈ 0, 72811,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   1,952 ±(99.9%) 7,855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,952, 4,875), stdev = 2,040
[info]   CI (99.9%): [≈ 0, 9,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay
[info] # Run progress: 38,06% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1415,230 ops/s
[info] # Warmup Iteration   2: 2824,605 ops/s
[info] # Warmup Iteration   3: 2857,044 ops/s
[info] # Warmup Iteration   4: 2877,676 ops/s
[info] # Warmup Iteration   5: 2878,937 ops/s
[info] Iteration   1: 2881,893 ops/s
[info]                  ·gc.alloc.rate:                   1749,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     910911,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,098 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 2874,018 ops/s
[info]                  ·gc.alloc.rate:                   1744,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216,161 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     919646,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68,385 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 2875,434 ops/s
[info]                  ·gc.alloc.rate:                   1745,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108005,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,787 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 2869,756 ops/s
[info]                  ·gc.alloc.rate:               1742,561 MB/sec
[info]                  ·gc.alloc.rate.norm:          955216,162 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1692,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927867,408 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   5: 2882,364 ops/s
[info]                  ·gc.alloc.rate:                   1750,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              955216,150 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925502,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,362 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay":
[info]   2876,693 ±(99.9%) 20,741 ops/s [Average]
[info]   (min, avg, max) = (2869,756, 2876,693, 2882,364), stdev = 5,386
[info]   CI (99.9%): [2855,951, 2897,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1746,679 ±(99.9%) 12,558 MB/sec [Average]
[info]   (min, avg, max) = (1742,561, 1746,679, 1750,152), stdev = 3,261
[info]   CI (99.9%): [1734,120, 1759,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   955216,155 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (955216,150, 955216,155, 955216,162), stdev = 0,006
[info]   CI (99.9%): [955216,130, 955216,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1752,435 ±(99.9%) 588,378 MB/sec [Average]
[info]   (min, avg, max) = (1668,680, 1752,435, 2025,094), stdev = 152,800
[info]   CI (99.9%): [1164,056, 2340,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   958386,756 ±(99.9%) 323047,420 B/op [Average]
[info]   (min, avg, max) = (910911,756, 958386,756, 1108005,029), stdev = 83894,389
[info]   CI (99.9%): [635339,336, 1281434,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,125), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   27,326 ±(99.9%) 101,036 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27,326, 68,385), stdev = 26,239
[info]   CI (99.9%): [≈ 0, 128,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlay:·gc.time":
[info]   25,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,000, 7,000), stdev = 1,225
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 38,81% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7546,336 ops/s
[info] # Warmup Iteration   2: 9425,987 ops/s
[info] # Warmup Iteration   3: 9605,655 ops/s
[info] # Warmup Iteration   4: 9671,329 ops/s
[info] # Warmup Iteration   5: 9624,432 ops/s
[info] Iteration   1: 9694,124 ops/s
[info]                  ·gc.alloc.rate:                   2232,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     329106,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,998 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 9615,513 ops/s
[info]                  ·gc.alloc.rate:                   2214,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              362298,241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     388337,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,646 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 9580,392 ops/s
[info]                  ·gc.alloc.rate:                   2206,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     334826,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,816 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 9572,162 ops/s
[info]                  ·gc.alloc.rate:                   2204,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     391052,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,494 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 9585,743 ops/s
[info]                  ·gc.alloc.rate:                   2207,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              362320,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     335253,413 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,341 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   9609,587 ±(99.9%) 192,563 ops/s [Average]
[info]   (min, avg, max) = (9572,162, 9609,587, 9694,124), stdev = 50,008
[info]   CI (99.9%): [9417,024, 9802,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   2213,000 ±(99.9%) 43,837 MB/sec [Average]
[info]   (min, avg, max) = (2204,509, 2213,000, 2232,269), stdev = 11,384
[info]   CI (99.9%): [2169,162, 2256,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362306,085 ±(99.9%) 81,793 B/op [Average]
[info]   (min, avg, max) = (362272,048, 362306,085, 362320,048), stdev = 21,241
[info]   CI (99.9%): [362224,292, 362387,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2172,453 ±(99.9%) 717,174 MB/sec [Average]
[info]   (min, avg, max) = (2027,905, 2172,453, 2379,332), stdev = 186,248
[info]   CI (99.9%): [1455,278, 2889,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   355715,225 ±(99.9%) 119866,140 B/op [Average]
[info]   (min, avg, max) = (329106,018, 355715,225, 391052,915), stdev = 31128,856
[info]   CI (99.9%): [235849,085, 475581,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,192 ±(99.9%) 0,337 MB/sec [Average]
[info]   (min, avg, max) = (0,102, 0,192, 0,297), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31,459 ±(99.9%) 55,402 B/op [Average]
[info]   (min, avg, max) = (16,816, 31,459, 48,646), stdev = 14,388
[info]   CI (99.9%): [≈ 0, 86,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson
[info] # Run progress: 39,55% complete, ETA 00:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33812,342 ops/s
[info] # Warmup Iteration   2: 49387,998 ops/s
[info] # Warmup Iteration   3: 48780,935 ops/s
[info] # Warmup Iteration   4: 49375,964 ops/s
[info] # Warmup Iteration   5: 49265,395 ops/s
[info] Iteration   1: 48775,727 ops/s
[info]                  ·gc.alloc.rate:               707,097 MB/sec
[info]                  ·gc.alloc.rate.norm:          22807,884 B/op
[info]                  ·gc.churn.PS_Eden_Space:      651,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20999,892 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 49416,885 ops/s
[info]                  ·gc.alloc.rate:                   716,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,818 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31184,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,978 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 49636,756 ops/s
[info]                  ·gc.alloc.rate:                   719,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,929 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20804,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,960 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 49665,159 ops/s
[info]                  ·gc.alloc.rate:                   719,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,741 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20876,531 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,660 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 49467,173 ops/s
[info]                  ·gc.alloc.rate:                   717,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807,874 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21002,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,987 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson":
[info]   49392,340 ±(99.9%) 1389,148 ops/s [Average]
[info]   (min, avg, max) = (48775,727, 49392,340, 49665,159), stdev = 360,757
[info]   CI (99.9%): [48003,192, 50781,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   716,022 ±(99.9%) 20,103 MB/sec [Average]
[info]   (min, avg, max) = (707,097, 716,022, 719,966), stdev = 5,221
[info]   CI (99.9%): [695,920, 736,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   22807,849 ±(99.9%) 0,278 B/op [Average]
[info]   (min, avg, max) = (22807,741, 22807,849, 22807,929), stdev = 0,072
[info]   CI (99.9%): [22807,571, 22808,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   721,249 ±(99.9%) 556,108 MB/sec [Average]
[info]   (min, avg, max) = (651,045, 721,249, 979,516), stdev = 144,420
[info]   CI (99.9%): [165,140, 1277,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   22973,602 ±(99.9%) 17678,383 B/op [Average]
[info]   (min, avg, max) = (20804,660, 22973,602, 31184,890), stdev = 4591,020
[info]   CI (99.9%): [5295,219, 40651,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,125), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,117 ±(99.9%) 7,069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,117, 3,978), stdev = 1,836
[info]   CI (99.9%): [≈ 0, 9,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJackson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter
[info] # Run progress: 40,30% complete, ETA 00:20:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72417,592 ops/s
[info] # Warmup Iteration   2: 76780,664 ops/s
[info] # Warmup Iteration   3: 76818,495 ops/s
[info] # Warmup Iteration   4: 77098,554 ops/s
[info] # Warmup Iteration   5: 77111,640 ops/s
[info] Iteration   1: 77202,290 ops/s
[info]                  ·gc.alloc.rate:               581,765 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6776,221 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 77327,329 ops/s
[info]                  ·gc.alloc.rate:                   582,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13530,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 76547,331 ops/s
[info]                  ·gc.alloc.rate:                   576,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13675,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,284 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 77168,594 ops/s
[info]                  ·gc.alloc.rate:                   581,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13585,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 76911,714 ops/s
[info]                  ·gc.alloc.rate:               579,586 MB/sec
[info]                  ·gc.alloc.rate.norm:          11856,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6822,212 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter":
[info]   77031,452 ±(99.9%) 1193,462 ops/s [Average]
[info]   (min, avg, max) = (76547,331, 77031,452, 77327,329), stdev = 309,938
[info]   CI (99.9%): [75837,989, 78224,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   580,493 ±(99.9%) 8,998 MB/sec [Average]
[info]   (min, avg, max) = (576,850, 580,493, 582,746), stdev = 2,337
[info]   CI (99.9%): [571,495, 589,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   11856,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11856,006, 11856,006, 11856,006), stdev = 0,001
[info]   CI (99.9%): [11856,006, 11856,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   532,552 ±(99.9%) 701,440 MB/sec [Average]
[info]   (min, avg, max) = (332,504, 532,552, 666,361), stdev = 182,162
[info]   CI (99.9%): [≈ 0, 1233,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   10877,886 ±(99.9%) 14338,618 B/op [Average]
[info]   (min, avg, max) = (6776,221, 10877,886, 13675,054), stdev = 3723,694
[info]   CI (99.9%): [≈ 0, 25216,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,765 ±(99.9%) 3,543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,765, 2,118), stdev = 0,920
[info]   CI (99.9%): [≈ 0, 4,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 41,04% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85758,732 ops/s
[info] # Warmup Iteration   2: 86361,348 ops/s
[info] # Warmup Iteration   3: 86539,354 ops/s
[info] # Warmup Iteration   4: 86385,771 ops/s
[info] # Warmup Iteration   5: 86539,921 ops/s
[info] Iteration   1: 86523,928 ops/s
[info]                  ·gc.alloc.rate:      1,320 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 86401,960 ops/s
[info]                  ·gc.alloc.rate:      1,318 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85896,374 ops/s
[info]                  ·gc.alloc.rate:      1,311 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 86517,110 ops/s
[info]                  ·gc.alloc.rate:      1,320 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 86382,261 ops/s
[info]                  ·gc.alloc.rate:      1,318 MB/sec
[info]                  ·gc.alloc.rate.norm: 24,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc":
[info]   86344,327 ±(99.9%) 995,844 ops/s [Average]
[info]   (min, avg, max) = (85896,374, 86344,327, 86523,928), stdev = 258,618
[info]   CI (99.9%): [85348,482, 87340,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   1,317 ±(99.9%) 0,015 MB/sec [Average]
[info]   (min, avg, max) = (1,311, 1,317, 1,320), stdev = 0,004
[info]   CI (99.9%): [1,302, 1,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   24,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24,005, 24,005, 24,005), stdev = 0,001
[info]   CI (99.9%): [24,004, 24,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay
[info] # Run progress: 41,79% complete, ETA 00:20:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3805,451 ops/s
[info] # Warmup Iteration   2: 6677,299 ops/s
[info] # Warmup Iteration   3: 6693,584 ops/s
[info] # Warmup Iteration   4: 6598,614 ops/s
[info] # Warmup Iteration   5: 6641,718 ops/s
[info] Iteration   1: 6692,550 ops/s
[info]                  ·gc.alloc.rate:                   2000,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335,797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     473691,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,476 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 6693,621 ops/s
[info]                  ·gc.alloc.rate:                   2001,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476134,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,362 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 6616,032 ops/s
[info]                  ·gc.alloc.rate:                   1977,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335,758 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     402762,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,903 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 6550,441 ops/s
[info]                  ·gc.alloc.rate:                   1958,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              470336,391 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     489079,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,001 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 6671,477 ops/s
[info]                  ·gc.alloc.rate:                   1994,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              470335,495 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480839,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29,463 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay":
[info]   6644,824 ±(99.9%) 236,637 ops/s [Average]
[info]   (min, avg, max) = (6550,441, 6644,824, 6693,621), stdev = 61,454
[info]   CI (99.9%): [6408,187, 6881,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate":
[info]   1986,496 ±(99.9%) 70,598 MB/sec [Average]
[info]   (min, avg, max) = (1958,351, 1986,496, 2001,104), stdev = 18,334
[info]   CI (99.9%): [1915,899, 2057,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   470335,895 ±(99.9%) 1,296 B/op [Average]
[info]   (min, avg, max) = (470335,495, 470335,895, 470336,391), stdev = 0,337
[info]   CI (99.9%): [470334,599, 470337,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1961,969 ±(99.9%) 578,555 MB/sec [Average]
[info]   (min, avg, max) = (1693,731, 1961,969, 2038,938), stdev = 150,249
[info]   CI (99.9%): [1383,414, 2540,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   464501,486 ±(99.9%) 134807,393 B/op [Average]
[info]   (min, avg, max) = (402762,193, 464501,486, 489079,404), stdev = 35009,052
[info]   CI (99.9%): [329694,093, 599308,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,188 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,083, 0,125), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   19,641 ±(99.9%) 44,052 B/op [Average]
[info]   (min, avg, max) = (5,001, 19,641, 29,463), stdev = 11,440
[info]   CI (99.9%): [≈ 0, 63,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter
[info] # Run progress: 42,54% complete, ETA 00:20:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5580023,064 ops/s
[info] # Warmup Iteration   2: 6076510,471 ops/s
[info] # Warmup Iteration   3: 6111945,380 ops/s
[info] # Warmup Iteration   4: 6132385,310 ops/s
[info] # Warmup Iteration   5: 6111988,759 ops/s
[info] Iteration   1: 6123356,679 ops/s
[info]                  ·gc.alloc.rate:                   1837,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6140388,133 ops/s
[info]                  ·gc.alloc.rate:                   1842,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 6120502,581 ops/s
[info]                  ·gc.alloc.rate:                   1836,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6120623,766 ops/s
[info]                  ·gc.alloc.rate:                   1836,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 6122509,151 ops/s
[info]                  ·gc.alloc.rate:                   1836,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              472,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1701,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter":
[info]   6125476,062 ±(99.9%) 32442,932 ops/s [Average]
[info]   (min, avg, max) = (6120502,581, 6125476,062, 6140388,133), stdev = 8425,326
[info]   CI (99.9%): [6093033,130, 6157918,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1837,773 ±(99.9%) 9,733 MB/sec [Average]
[info]   (min, avg, max) = (1836,272, 1837,773, 1842,243), stdev = 2,528
[info]   CI (99.9%): [1828,040, 1847,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   472,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (472,000, 472,000, 472,000), stdev = 0,001
[info]   CI (99.9%): [472,000, 472,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1831,650 ±(99.9%) 717,684 MB/sec [Average]
[info]   (min, avg, max) = (1688,253, 1831,650, 2039,187), stdev = 186,380
[info]   CI (99.9%): [1113,966, 2549,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   470,401 ±(99.9%) 182,994 B/op [Average]
[info]   (min, avg, max) = (433,757, 470,401, 524,158), stdev = 47,523
[info]   CI (99.9%): [287,407, 653,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,018, 0,027), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniter:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay
[info] # Run progress: 43,28% complete, ETA 00:19:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194016,498 ops/s
[info] # Warmup Iteration   2: 399042,213 ops/s
[info] # Warmup Iteration   3: 403246,624 ops/s
[info] # Warmup Iteration   4: 404790,387 ops/s
[info] # Warmup Iteration   5: 405822,686 ops/s
[info] Iteration   1: 404768,404 ops/s
[info]                  ·gc.alloc.rate:                   2175,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7854,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 405843,625 ops/s
[info]                  ·gc.alloc.rate:                   2181,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7866,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,484 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 407569,319 ops/s
[info]                  ·gc.alloc.rate:                   2190,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9166,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,563 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 405071,704 ops/s
[info]                  ·gc.alloc.rate:                   2177,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7919,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 404866,501 ops/s
[info]                  ·gc.alloc.rate:                   2176,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9257,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay":
[info]   405623,911 ±(99.9%) 4491,979 ops/s [Average]
[info]   (min, avg, max) = (404768,404, 405623,911, 407569,319), stdev = 1166,553
[info]   CI (99.9%): [401131,932, 410115,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2180,085 ±(99.9%) 24,243 MB/sec [Average]
[info]   (min, avg, max) = (2175,453, 2180,085, 2190,571), stdev = 6,296
[info]   CI (99.9%): [2155,842, 2204,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8456,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8456,001, 8456,001, 8456,001), stdev = 0,001
[info]   CI (99.9%): [8456,001, 8456,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2169,163 ±(99.9%) 736,349 MB/sec [Average]
[info]   (min, avg, max) = (2020,746, 2169,163, 2382,349), stdev = 191,228
[info]   CI (99.9%): [1432,814, 2905,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8412,915 ±(99.9%) 2813,841 B/op [Average]
[info]   (min, avg, max) = (7854,652, 8412,915, 9257,754), stdev = 730,746
[info]   CI (99.9%): [5599,074, 11226,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,146), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,355 ±(99.9%) 0,641 B/op [Average]
[info]   (min, avg, max) = (0,162, 0,355, 0,563), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 0,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter
[info] # Run progress: 44,03% complete, ETA 00:19:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3448423,199 ops/s
[info] # Warmup Iteration   2: 3672511,273 ops/s
[info] # Warmup Iteration   3: 3735855,066 ops/s
[info] # Warmup Iteration   4: 3694670,433 ops/s
[info] # Warmup Iteration   5: 3739000,605 ops/s
[info] Iteration   1: 3747336,590 ops/s
[info]                  ·gc.alloc.rate:                   552,616 MB/sec
[info]                  ·gc.alloc.rate.norm:              232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3748927,751 ops/s
[info]                  ·gc.alloc.rate:               552,830 MB/sec
[info]                  ·gc.alloc.rate.norm:          232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 139,543 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 3725499,752 ops/s
[info]                  ·gc.alloc.rate:                   549,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3696291,375 ops/s
[info]                  ·gc.alloc.rate:                   545,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3727214,979 ops/s
[info]                  ·gc.alloc.rate:               549,602 MB/sec
[info]                  ·gc.alloc.rate.norm:          232,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140,922 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter":
[info]   3729054,089 ±(99.9%) 82105,972 ops/s [Average]
[info]   (min, avg, max) = (3696291,375, 3729054,089, 3748927,751), stdev = 21322,660
[info]   CI (99.9%): [3646948,117, 3811160,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   549,899 ±(99.9%) 12,121 MB/sec [Average]
[info]   (min, avg, max) = (545,072, 549,899, 552,830), stdev = 3,148
[info]   CI (99.9%): [537,777, 562,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   232,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (232,000, 232,000, 232,000), stdev = 0,001
[info]   CI (99.9%): [232,000, 232,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533,106 ±(99.9%) 702,784 MB/sec [Average]
[info]   (min, avg, max) = (332,514, 533,106, 667,040), stdev = 182,511
[info]   CI (99.9%): [≈ 0, 1235,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   225,058 ±(99.9%) 298,241 B/op [Average]
[info]   (min, avg, max) = (139,543, 225,058, 283,913), stdev = 77,452
[info]   CI (99.9%): [≈ 0, 523,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,026), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay
[info] # Run progress: 44,78% complete, ETA 00:19:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152827,868 ops/s
[info] # Warmup Iteration   2: 384997,594 ops/s
[info] # Warmup Iteration   3: 390773,192 ops/s
[info] # Warmup Iteration   4: 389517,144 ops/s
[info] # Warmup Iteration   5: 390912,598 ops/s
[info] Iteration   1: 389031,509 ops/s
[info]                  ·gc.alloc.rate:                   1525,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5381,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,421 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 390209,181 ops/s
[info]                  ·gc.alloc.rate:                   1529,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6749,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 387683,243 ops/s
[info]                  ·gc.alloc.rate:                   1519,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5462,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 389305,908 ops/s
[info]                  ·gc.alloc.rate:                   1526,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6821,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,337 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 388763,078 ops/s
[info]                  ·gc.alloc.rate:                   1524,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5479,930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay":
[info]   388998,584 ±(99.9%) 3522,163 ops/s [Average]
[info]   (min, avg, max) = (387683,243, 388998,584, 390209,181), stdev = 914,694
[info]   CI (99.9%): [385476,421, 392520,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1525,075 ±(99.9%) 13,824 MB/sec [Average]
[info]   (min, avg, max) = (1519,904, 1525,075, 1529,806), stdev = 3,590
[info]   CI (99.9%): [1511,251, 1538,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6168,001, 6168,001, 6168,001), stdev = 0,001
[info]   CI (99.9%): [6168,001, 6168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1478,596 ±(99.9%) 712,459 MB/sec [Average]
[info]   (min, avg, max) = (1330,754, 1478,596, 1688,073), stdev = 185,023
[info]   CI (99.9%): [766,137, 2191,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5979,003 ±(99.9%) 2839,727 B/op [Average]
[info]   (min, avg, max) = (5381,666, 5979,003, 6821,649), stdev = 737,468
[info]   CI (99.9%): [3139,276, 8818,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,303 ±(99.9%) 0,492 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,303, 0,421), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlay:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,000, 6,000), stdev = 1,225
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce
[info] # Run progress: 45,52% complete, ETA 00:19:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14790,814 ops/s
[info] # Warmup Iteration   2: 17719,612 ops/s
[info] # Warmup Iteration   3: 17682,364 ops/s
[info] # Warmup Iteration   4: 17604,102 ops/s
[info] # Warmup Iteration   5: 17636,579 ops/s
[info] Iteration   1: 17604,537 ops/s
[info]                  ·gc.alloc.rate:                   2320,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2371,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211900,602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,609 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 17694,489 ops/s
[info]                  ·gc.alloc.rate:                   2333,337 MB/sec
[info]                  ·gc.alloc.rate.norm:              207383,129 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211111,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,947 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 17802,775 ops/s
[info]                  ·gc.alloc.rate:                   2346,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180200,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,882 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 17838,245 ops/s
[info]                  ·gc.alloc.rate:                   2351,372 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210103,083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,510 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 17843,634 ops/s
[info]                  ·gc.alloc.rate:                   2351,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              207384,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210161,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,541 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce":
[info]   17756,736 ±(99.9%) 400,883 ops/s [Average]
[info]   (min, avg, max) = (17604,537, 17756,736, 17843,634), stdev = 104,108
[info]   CI (99.9%): [17355,854, 18157,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate":
[info]   2340,717 ±(99.9%) 52,107 MB/sec [Average]
[info]   (min, avg, max) = (2320,494, 2340,717, 2351,631), stdev = 13,532
[info]   CI (99.9%): [2288,610, 2392,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   207383,847 ±(99.9%) 1,547 B/op [Average]
[info]   (min, avg, max) = (207383,129, 207383,847, 207384,035), stdev = 0,402
[info]   CI (99.9%): [207382,300, 207385,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2310,158 ±(99.9%) 583,709 MB/sec [Average]
[info]   (min, avg, max) = (2039,138, 2310,158, 2383,129), stdev = 151,587
[info]   CI (99.9%): [1726,449, 2893,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   204695,481 ±(99.9%) 52805,491 B/op [Average]
[info]   (min, avg, max) = (180200,076, 204695,481, 211900,602), stdev = 13713,418
[info]   CI (99.9%): [151889,990, 257500,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,175 ±(99.9%) 0,357 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,175, 0,312), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15,498 ±(99.9%) 31,509 B/op [Average]
[info]   (min, avg, max) = (5,510, 15,498, 27,541), stdev = 8,183
[info]   CI (99.9%): [≈ 0, 47,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson
[info] # Run progress: 46,27% complete, ETA 00:18:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34892,150 ops/s
[info] # Warmup Iteration   2: 45761,023 ops/s
[info] # Warmup Iteration   3: 45542,958 ops/s
[info] # Warmup Iteration   4: 45276,655 ops/s
[info] # Warmup Iteration   5: 45661,039 ops/s
[info] Iteration   1: 45881,517 ops/s
[info]                  ·gc.alloc.rate:                   329,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11230,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,074 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 46238,615 ops/s
[info]                  ·gc.alloc.rate:                   332,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11143,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,709 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45994,021 ops/s
[info]                  ·gc.alloc.rate:                   330,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11191,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,425 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45623,924 ops/s
[info]                  ·gc.alloc.rate:               327,802 MB/sec
[info]                  ·gc.alloc.rate.norm:          11304,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11281,929 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 46014,063 ops/s
[info]                  ·gc.alloc.rate:                   330,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11198,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,712 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson":
[info]   45950,428 ±(99.9%) 861,793 ops/s [Average]
[info]   (min, avg, max) = (45623,924, 45950,428, 46238,615), stdev = 223,805
[info]   CI (99.9%): [45088,634, 46812,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate":
[info]   330,149 ±(99.9%) 6,193 MB/sec [Average]
[info]   (min, avg, max) = (327,802, 330,149, 332,222), stdev = 1,608
[info]   CI (99.9%): [323,957, 336,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   11304,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (11304,009, 11304,010, 11304,010), stdev = 0,001
[info]   CI (99.9%): [11304,008, 11304,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   327,374 ±(99.9%) 0,739 MB/sec [Average]
[info]   (min, avg, max) = (327,162, 327,374, 327,522), stdev = 0,192
[info]   CI (99.9%): [326,635, 328,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   11209,193 ±(99.9%) 197,282 B/op [Average]
[info]   (min, avg, max) = (11143,486, 11209,193, 11281,929), stdev = 51,233
[info]   CI (99.9%): [11011,911, 11406,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,431 ±(99.9%) 3,536 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,431, 2,074), stdev = 0,918
[info]   CI (99.9%): [≈ 0, 3,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   14,792 ±(99.9%) 121,254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,792, 71,114), stdev = 31,489
[info]   CI (99.9%): [≈ 0, 136,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJackson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter
[info] # Run progress: 47,01% complete, ETA 00:18:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90198,790 ops/s
[info] # Warmup Iteration   2: 92385,024 ops/s
[info] # Warmup Iteration   3: 92945,291 ops/s
[info] # Warmup Iteration   4: 92598,243 ops/s
[info] # Warmup Iteration   5: 92815,016 ops/s
[info] Iteration   1: 92839,914 ops/s
[info]                  ·gc.alloc.rate:                   486,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11292,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 91943,171 ops/s
[info]                  ·gc.alloc.rate:               481,561 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5701,075 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 92598,354 ops/s
[info]                  ·gc.alloc.rate:                   484,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11322,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,415 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 92902,250 ops/s
[info]                  ·gc.alloc.rate:               486,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          8240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5642,602 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 92932,806 ops/s
[info]                  ·gc.alloc.rate:                   486,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11292,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter":
[info]   92643,299 ±(99.9%) 1589,676 ops/s [Average]
[info]   (min, avg, max) = (91943,171, 92643,299, 92932,806), stdev = 412,834
[info]   CI (99.9%): [91053,623, 94232,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate":
[info]   485,222 ±(99.9%) 8,305 MB/sec [Average]
[info]   (min, avg, max) = (481,561, 485,222, 486,720), stdev = 2,157
[info]   CI (99.9%): [476,917, 493,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   8240,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8240,005, 8240,005, 8240,005), stdev = 0,001
[info]   CI (99.9%): [8240,004, 8240,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   533,233 ±(99.9%) 703,162 MB/sec [Average]
[info]   (min, avg, max) = (333,182, 533,233, 667,023), stdev = 182,609
[info]   CI (99.9%): [≈ 0, 1236,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   9050,083 ±(99.9%) 11875,364 B/op [Average]
[info]   (min, avg, max) = (5642,602, 9050,083, 11322,248), stdev = 3083,994
[info]   CI (99.9%): [≈ 0, 20925,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,636 ±(99.9%) 2,435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,636, 1,415), stdev = 0,632
[info]   CI (99.9%): [≈ 0, 3,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay
[info] # Run progress: 47,76% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6284,217 ops/s
[info] # Warmup Iteration   2: 9320,040 ops/s
[info] # Warmup Iteration   3: 9513,219 ops/s
[info] # Warmup Iteration   4: 9527,854 ops/s
[info] # Warmup Iteration   5: 9499,767 ops/s
[info] Iteration   1: 9501,838 ops/s
[info]                  ·gc.alloc.rate:                   3360,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562682,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,791 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   2: 9406,179 ops/s
[info]                  ·gc.alloc.rate:                   3327,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              556459,306 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     569255,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,861 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 9484,517 ops/s
[info]                  ·gc.alloc.rate:                   3361,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              557585,476 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508316,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,632 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   4: 9434,827 ops/s
[info]                  ·gc.alloc.rate:                   3337,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567788,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20,834 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   5: 9499,271 ops/s
[info]                  ·gc.alloc.rate:                   3359,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     563904,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,346 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay":
[info]   9465,327 ±(99.9%) 164,299 ops/s [Average]
[info]   (min, avg, max) = (9406,179, 9465,327, 9501,838), stdev = 42,668
[info]   CI (99.9%): [9301,027, 9629,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate":
[info]   3349,100 ±(99.9%) 61,527 MB/sec [Average]
[info]   (min, avg, max) = (3327,033, 3349,100, 3361,493), stdev = 15,978
[info]   CI (99.9%): [3287,573, 3410,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   556682,584 ±(99.9%) 1943,549 B/op [Average]
[info]   (min, avg, max) = (556456,045, 556682,584, 557585,476), stdev = 504,734
[info]   CI (99.9%): [554739,035, 558626,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   3335,104 ±(99.9%) 582,653 MB/sec [Average]
[info]   (min, avg, max) = (3064,468, 3335,104, 3405,048), stdev = 151,313
[info]   CI (99.9%): [2752,451, 3917,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   554389,770 ±(99.9%) 99719,086 B/op [Average]
[info]   (min, avg, max) = (508316,752, 554389,770, 569255,628), stdev = 25896,730
[info]   CI (99.9%): [454670,683, 654108,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,121, 0,167), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   20,093 ±(99.9%) 30,591 B/op [Average]
[info]   (min, avg, max) = (10,346, 20,093, 27,861), stdev = 7,944
[info]   CI (99.9%): [≈ 0, 50,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.count":
[info]   49,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,800, 10,000), stdev = 0,447
[info]   CI (99.9%): [49,000, 49,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.readPlay:·gc.time":
[info]   38,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (7,000, 7,600, 9,000), stdev = 0,894
[info]   CI (99.9%): [38,000, 38,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce
[info] # Run progress: 48,51% complete, ETA 00:17:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21093,244 ops/s
[info] # Warmup Iteration   2: 23712,140 ops/s
[info] # Warmup Iteration   3: 25478,331 ops/s
[info] # Warmup Iteration   4: 29228,784 ops/s
[info] # Warmup Iteration   5: 26560,697 ops/s
[info] Iteration   1: 24268,955 ops/s
[info]                  ·gc.alloc.rate:                   1516,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87176,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,700 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 24203,204 ops/s
[info]                  ·gc.alloc.rate:                   1512,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109652,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,475 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 24292,677 ops/s
[info]                  ·gc.alloc.rate:                   1517,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87651,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,743 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 24049,706 ops/s
[info]                  ·gc.alloc.rate:                   1502,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110899,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,087 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 24243,313 ops/s
[info]                  ·gc.alloc.rate:                   1514,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              98288,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88170,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,459 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce":
[info]   24211,571 ±(99.9%) 371,088 ops/s [Average]
[info]   (min, avg, max) = (24049,706, 24211,571, 24292,677), stdev = 96,370
[info]   CI (99.9%): [23840,483, 24582,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate":
[info]   1512,586 ±(99.9%) 23,167 MB/sec [Average]
[info]   (min, avg, max) = (1502,484, 1512,586, 1517,683), stdev = 6,016
[info]   CI (99.9%): [1489,420, 1535,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98288,018 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (98288,018, 98288,018, 98288,019), stdev = 0,001
[info]   CI (99.9%): [98288,016, 98288,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1487,800 ±(99.9%) 714,973 MB/sec [Average]
[info]   (min, avg, max) = (1344,762, 1487,800, 1695,271), stdev = 185,676
[info]   CI (99.9%): [772,826, 2202,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   96709,966 ±(99.9%) 47736,170 B/op [Average]
[info]   (min, avg, max) = (87176,137, 96709,966, 110899,532), stdev = 12396,932
[info]   CI (99.9%): [48973,796, 144446,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,100, 0,146), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6,493 ±(99.9%) 11,858 B/op [Average]
[info]   (min, avg, max) = (2,700, 6,493, 9,475), stdev = 3,079
[info]   CI (99.9%): [≈ 0, 18,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson
[info] # Run progress: 49,25% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86259,683 ops/s
[info] # Warmup Iteration   2: 108322,853 ops/s
[info] # Warmup Iteration   3: 110172,975 ops/s
[info] # Warmup Iteration   4: 109879,563 ops/s
[info] # Warmup Iteration   5: 109636,557 ops/s
[info] Iteration   1: 109709,659 ops/s
[info]                  ·gc.alloc.rate:                   885,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14175,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,896 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 109611,725 ops/s
[info]                  ·gc.alloc.rate:                   884,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,321 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9492,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 109918,973 ops/s
[info]                  ·gc.alloc.rate:                   886,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14250,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 109732,277 ops/s
[info]                  ·gc.alloc.rate:                   885,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692,327 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14345,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,597 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 109754,233 ops/s
[info]                  ·gc.alloc.rate:               885,418 MB/sec
[info]                  ·gc.alloc.rate.norm:          12692,316 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9590,605 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson":
[info]   109745,373 ±(99.9%) 428,463 ops/s [Average]
[info]   (min, avg, max) = (109611,725, 109745,373, 109918,973), stdev = 111,270
[info]   CI (99.9%): [109316,910, 110173,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate":
[info]   885,372 ±(99.9%) 3,428 MB/sec [Average]
[info]   (min, avg, max) = (884,295, 885,372, 886,760), stdev = 0,890
[info]   CI (99.9%): [881,944, 888,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   12692,323 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (12692,316, 12692,323, 12692,329), stdev = 0,005
[info]   CI (99.9%): [12692,303, 12692,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   863,035 ±(99.9%) 695,679 MB/sec [Average]
[info]   (min, avg, max) = (661,365, 863,035, 1000,616), stdev = 180,666
[info]   CI (99.9%): [167,356, 1558,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   12371,001 ±(99.9%) 9949,334 B/op [Average]
[info]   (min, avg, max) = (9492,600, 12371,001, 14345,797), stdev = 2583,811
[info]   CI (99.9%): [2421,667, 22320,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,125), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,896 ±(99.9%) 2,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,896, 1,793), stdev = 0,668
[info]   CI (99.9%): [≈ 0, 3,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJackson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 1,000
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter
[info] # Run progress: 50,00% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122215,781 ops/s
[info] # Warmup Iteration   2: 125146,857 ops/s
[info] # Warmup Iteration   3: 123949,643 ops/s
[info] # Warmup Iteration   4: 125662,388 ops/s
[info] # Warmup Iteration   5: 125910,217 ops/s
[info] Iteration   1: 125900,806 ops/s
[info]                  ·gc.alloc.rate:                   536,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8326,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 125466,986 ops/s
[info]                  ·gc.alloc.rate:               534,621 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4178,093 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 124009,128 ops/s
[info]                  ·gc.alloc.rate:                   528,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8453,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 125776,493 ops/s
[info]                  ·gc.alloc.rate:               535,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4171,699 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 125459,808 ops/s
[info]                  ·gc.alloc.rate:               534,617 MB/sec
[info]                  ·gc.alloc.rate.norm:          6704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8372,498 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter":
[info]   125322,644 ±(99.9%) 2923,209 ops/s [Average]
[info]   (min, avg, max) = (124009,128, 125322,644, 125900,806), stdev = 759,148
[info]   CI (99.9%): [122399,435, 128245,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   534,028 ±(99.9%) 12,432 MB/sec [Average]
[info]   (min, avg, max) = (528,445, 534,028, 536,492), stdev = 3,229
[info]   CI (99.9%): [521,596, 546,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   6704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6704,003, 6704,003, 6704,004), stdev = 0,001
[info]   CI (99.9%): [6704,003, 6704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   533,415 ±(99.9%) 703,254 MB/sec [Average]
[info]   (min, avg, max) = (333,188, 533,415, 667,673), stdev = 182,633
[info]   CI (99.9%): [≈ 0, 1236,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   6700,496 ±(99.9%) 8879,571 B/op [Average]
[info]   (min, avg, max) = (4171,699, 6700,496, 8453,599), stdev = 2305,996
[info]   CI (99.9%): [≈ 0, 15580,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,211 ±(99.9%) 1,326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,211, 0,793), stdev = 0,344
[info]   CI (99.9%): [≈ 0, 1,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc
[info] # Run progress: 50,75% complete, ETA 00:17:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150218,532 ops/s
[info] # Warmup Iteration   2: 153574,545 ops/s
[info] # Warmup Iteration   3: 151025,785 ops/s
[info] # Warmup Iteration   4: 154021,940 ops/s
[info] # Warmup Iteration   5: 153657,354 ops/s
[info] Iteration   1: 154275,269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 153952,974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 153002,558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 152262,395 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 152420,421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc":
[info]   153182,724 ±(99.9%) 3469,594 ops/s [Average]
[info]   (min, avg, max) = (152262,395, 153182,724, 154275,269), stdev = 901,043
[info]   CI (99.9%): [149713,129, 156652,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   0,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,003, 0,003), stdev = 0,001
[info]   CI (99.9%): [0,003, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay
[info] # Run progress: 51,49% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3136,960 ops/s
[info] # Warmup Iteration   2: 3967,943 ops/s
[info] # Warmup Iteration   3: 3988,833 ops/s
[info] # Warmup Iteration   4: 4066,446 ops/s
[info] # Warmup Iteration   5: 4000,213 ops/s
[info] Iteration   1: 4051,807 ops/s
[info]                  ·gc.alloc.rate:                   1777,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              690067,918 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     782357,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,255 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 4063,693 ops/s
[info]                  ·gc.alloc.rate:                   1782,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              690068,448 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653135,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,244 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4060,871 ops/s
[info]                  ·gc.alloc.rate:                   1781,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              690068,372 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655424,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,201 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 4043,849 ops/s
[info]                  ·gc.alloc.rate:               1773,751 MB/sec
[info]                  ·gc.alloc.rate.norm:          690068,685 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2034,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 791681,361 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 4052,181 ops/s
[info]                  ·gc.alloc.rate:                   1777,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              690068,337 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659725,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,424 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay":
[info]   4054,480 ±(99.9%) 30,512 ops/s [Average]
[info]   (min, avg, max) = (4043,849, 4054,480, 4063,693), stdev = 7,924
[info]   CI (99.9%): [4023,968, 4084,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate":
[info]   1778,423 ±(99.9%) 13,527 MB/sec [Average]
[info]   (min, avg, max) = (1773,751, 1778,423, 1782,577), stdev = 3,513
[info]   CI (99.9%): [1764,896, 1791,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   690068,352 ±(99.9%) 1,071 B/op [Average]
[info]   (min, avg, max) = (690067,918, 690068,352, 690068,685), stdev = 0,278
[info]   CI (99.9%): [690067,281, 690069,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1825,602 ±(99.9%) 701,438 MB/sec [Average]
[info]   (min, avg, max) = (1687,171, 1825,602, 2034,936), stdev = 182,161
[info]   CI (99.9%): [1124,164, 2527,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   708464,823 ±(99.9%) 276571,757 B/op [Average]
[info]   (min, avg, max) = (653135,162, 708464,823, 791681,361), stdev = 71824,807
[info]   CI (99.9%): [431893,066, 985036,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,104), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   24,225 ±(99.9%) 58,194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24,225, 40,424), stdev = 15,113
[info]   CI (99.9%): [≈ 0, 82,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntArrayBenchmark.writePlay:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 52,24% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593894,227 ops/s
[info] # Warmup Iteration   2: 779419,528 ops/s
[info] # Warmup Iteration   3: 780870,996 ops/s
[info] # Warmup Iteration   4: 785886,327 ops/s
[info] # Warmup Iteration   5: 782532,638 ops/s
[info] Iteration   1: 785887,295 ops/s
[info]                  ·gc.alloc.rate:                   2865,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5440,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 785886,780 ops/s
[info]                  ·gc.alloc.rate:                   2865,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5446,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 782716,853 ops/s
[info]                  ·gc.alloc.rate:                   2853,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6159,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   4: 784471,747 ops/s
[info]                  ·gc.alloc.rate:                   2860,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5463,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 786177,472 ops/s
[info]                  ·gc.alloc.rate:                   2866,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6132,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   785028,029 ±(99.9%) 5596,032 ops/s [Average]
[info]   (min, avg, max) = (782716,853, 785028,029, 786177,472), stdev = 1453,272
[info]   CI (99.9%): [779431,998, 790624,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2862,117 ±(99.9%) 20,478 MB/sec [Average]
[info]   (min, avg, max) = (2853,645, 2862,117, 2866,275), stdev = 5,318
[info]   CI (99.9%): [2841,639, 2882,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5736,001, 5736,001, 5736,001), stdev = 0,001
[info]   CI (99.9%): [5736,000, 5736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2858,343 ±(99.9%) 724,952 MB/sec [Average]
[info]   (min, avg, max) = (2717,582, 2858,343, 3064,655), stdev = 188,268
[info]   CI (99.9%): [2133,391, 3583,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5728,664 ±(99.9%) 1469,170 B/op [Average]
[info]   (min, avg, max) = (5440,287, 5728,664, 6159,782), stdev = 381,539
[info]   CI (99.9%): [4259,494, 7197,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,129 ±(99.9%) 0,208 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,129, 0,187), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,259 ±(99.9%) 0,416 B/op [Average]
[info]   (min, avg, max) = (0,125, 0,259, 0,375), stdev = 0,108
[info]   CI (99.9%): [≈ 0, 0,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   42,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,400, 9,000), stdev = 0,548
[info]   CI (99.9%): [42,000, 42,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   31,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 6,200, 10,000), stdev = 2,168
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson
[info] # Run progress: 52,99% complete, ETA 00:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383482,628 ops/s
[info] # Warmup Iteration   2: 693158,866 ops/s
[info] # Warmup Iteration   3: 708399,539 ops/s
[info] # Warmup Iteration   4: 699093,241 ops/s
[info] # Warmup Iteration   5: 717183,208 ops/s
[info] Iteration   1: 699920,525 ops/s
[info]                  ·gc.alloc.rate:                   815,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2196,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 715869,338 ops/s
[info]                  ·gc.alloc.rate:                   833,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2156,530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,137 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 716848,789 ops/s
[info]                  ·gc.alloc.rate:                   834,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,137 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 716425,870 ops/s
[info]                  ·gc.alloc.rate:                   834,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2178,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 714771,247 ops/s
[info]                  ·gc.alloc.rate:                   832,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1461,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson":
[info]   712767,154 ±(99.9%) 27815,522 ops/s [Average]
[info]   (min, avg, max) = (699920,525, 712767,154, 716848,789), stdev = 7223,603
[info]   CI (99.9%): [684951,632, 740582,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate":
[info]   829,998 ±(99.9%) 32,287 MB/sec [Average]
[info]   (min, avg, max) = (815,089, 829,998, 834,728), stdev = 8,385
[info]   CI (99.9%): [797,712, 862,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1832,001, 1832,001, 1832,001), stdev = 0,001
[info]   CI (99.9%): [1832,001, 1832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   854,448 ±(99.9%) 680,852 MB/sec [Average]
[info]   (min, avg, max) = (657,692, 854,448, 991,845), stdev = 176,815
[info]   CI (99.9%): [173,597, 1535,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1887,287 ±(99.9%) 1529,376 B/op [Average]
[info]   (min, avg, max) = (1443,455, 1887,287, 2196,789), stdev = 397,174
[info]   CI (99.9%): [357,911, 3416,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,119 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (0,091, 0,119, 0,138), stdev = 0,025
[info]   CI (99.9%): [0,025, 0,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJackson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter
[info] # Run progress: 53,73% complete, ETA 00:16:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4659527,346 ops/s
[info] # Warmup Iteration   2: 5044707,297 ops/s
[info] # Warmup Iteration   3: 5081061,077 ops/s
[info] # Warmup Iteration   4: 5068436,759 ops/s
[info] # Warmup Iteration   5: 5060810,199 ops/s
[info] Iteration   1: 5091715,263 ops/s
[info]                  ·gc.alloc.rate:                   2019,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 5083179,219 ops/s
[info]                  ·gc.alloc.rate:                   2016,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5016341,938 ops/s
[info]                  ·gc.alloc.rate:                   1989,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     639,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 4972703,392 ops/s
[info]                  ·gc.alloc.rate:                   1972,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     645,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   5: 5035210,878 ops/s
[info]                  ·gc.alloc.rate:                   1996,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              624,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2042,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     638,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter":
[info]   5039830,138 ±(99.9%) 189135,247 ops/s [Average]
[info]   (min, avg, max) = (4972703,392, 5039830,138, 5091715,263), stdev = 49117,823
[info]   CI (99.9%): [4850694,891, 5228965,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1998,929 ±(99.9%) 74,765 MB/sec [Average]
[info]   (min, avg, max) = (1972,465, 1998,929, 2019,511), stdev = 19,416
[info]   CI (99.9%): [1924,164, 2073,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   624,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (624,000, 624,000, 624,000), stdev = 0,001
[info]   CI (99.9%): [624,000, 624,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1969,671 ±(99.9%) 590,423 MB/sec [Average]
[info]   (min, avg, max) = (1695,523, 1969,671, 2042,920), stdev = 153,331
[info]   CI (99.9%): [1379,248, 2560,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   615,105 ±(99.9%) 196,087 B/op [Average]
[info]   (min, avg, max) = (524,781, 615,105, 645,579), stdev = 50,923
[info]   CI (99.9%): [419,018, 811,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,108, 0,146), stdev = 0,023
[info]   CI (99.9%): [0,020, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,026, 0,034, 0,046), stdev = 0,007
[info]   CI (99.9%): [0,006, 0,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniter:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 4,400, 8,000), stdev = 2,074
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay
[info] # Run progress: 54,48% complete, ETA 00:15:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106382,207 ops/s
[info] # Warmup Iteration   2: 273837,097 ops/s
[info] # Warmup Iteration   3: 277898,907 ops/s
[info] # Warmup Iteration   4: 275727,373 ops/s
[info] # Warmup Iteration   5: 277682,408 ops/s
[info] Iteration   1: 277497,065 ops/s
[info]                  ·gc.alloc.rate:                   1931,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9500,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 273817,417 ops/s
[info]                  ·gc.alloc.rate:                   1906,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11620,087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,957 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 276898,389 ops/s
[info]                  ·gc.alloc.rate:                   1927,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11532,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,592 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   4: 276106,460 ops/s
[info]                  ·gc.alloc.rate:                   1921,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9665,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,356 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 275011,347 ops/s
[info]                  ·gc.alloc.rate:                   1914,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11663,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay":
[info]   275866,136 ±(99.9%) 5682,520 ops/s [Average]
[info]   (min, avg, max) = (273817,417, 275866,136, 277497,065), stdev = 1475,732
[info]   CI (99.9%): [270183,616, 281548,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   1920,324 ±(99.9%) 39,325 MB/sec [Average]
[info]   (min, avg, max) = (1906,151, 1920,324, 1931,644), stdev = 10,213
[info]   CI (99.9%): [1880,999, 1959,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10952,002, 10952,002, 10952,002), stdev = 0,001
[info]   CI (99.9%): [10952,002, 10952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1892,517 ±(99.9%) 727,305 MB/sec [Average]
[info]   (min, avg, max) = (1675,552, 1892,517, 2038,740), stdev = 188,879
[info]   CI (99.9%): [1165,212, 2619,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   10796,333 ±(99.9%) 4275,629 B/op [Average]
[info]   (min, avg, max) = (9500,017, 10796,333, 11663,128), stdev = 1110,367
[info]   CI (99.9%): [6520,704, 15071,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,499 ±(99.9%) 1,103 B/op [Average]
[info]   (min, avg, max) = (0,238, 0,499, 0,957), stdev = 0,286
[info]   CI (99.9%): [≈ 0, 1,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlay:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 55,22% complete, ETA 00:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 765425,457 ops/s
[info] # Warmup Iteration   2: 1007788,528 ops/s
[info] # Warmup Iteration   3: 1029371,444 ops/s
[info] # Warmup Iteration   4: 1032407,290 ops/s
[info] # Warmup Iteration   5: 1027190,779 ops/s
[info] Iteration   1: 1029692,125 ops/s
[info]                  ·gc.alloc.rate:                   2482,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4140,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,191 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1032043,375 ops/s
[info]                  ·gc.alloc.rate:                   2487,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3626,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,286 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1021180,076 ops/s
[info]                  ·gc.alloc.rate:                   2461,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3668,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1021766,681 ops/s
[info]                  ·gc.alloc.rate:                   2462,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3670,246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1023465,828 ops/s
[info]                  ·gc.alloc.rate:                   2466,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4187,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   1025629,617 ±(99.9%) 18966,418 ops/s [Average]
[info]   (min, avg, max) = (1021180,076, 1025629,617, 1032043,375), stdev = 4925,519
[info]   CI (99.9%): [1006663,199, 1044596,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2472,158 ±(99.9%) 46,225 MB/sec [Average]
[info]   (min, avg, max) = (2461,296, 2472,158, 2487,498), stdev = 12,004
[info]   CI (99.9%): [2425,933, 2518,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3792,000, 3792,000, 3792,000), stdev = 0,001
[info]   CI (99.9%): [3792,000, 3792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2515,638 ±(99.9%) 709,208 MB/sec [Average]
[info]   (min, avg, max) = (2379,005, 2515,638, 2724,210), stdev = 184,179
[info]   CI (99.9%): [1806,429, 3224,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3858,579 ±(99.9%) 1077,505 B/op [Average]
[info]   (min, avg, max) = (3626,610, 3858,579, 4187,691), stdev = 279,825
[info]   CI (99.9%): [2781,073, 4936,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,133 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,104, 0,133, 0,187), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,204 ±(99.9%) 0,203 B/op [Average]
[info]   (min, avg, max) = (0,160, 0,204, 0,286), stdev = 0,053
[info]   CI (99.9%): [0,001, 0,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   37,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,400, 8,000), stdev = 0,548
[info]   CI (99.9%): [37,000, 37,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   23,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson
[info] # Run progress: 55,97% complete, ETA 00:15:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1176680,116 ops/s
[info] # Warmup Iteration   2: 2042543,086 ops/s
[info] # Warmup Iteration   3: 2074419,829 ops/s
[info] # Warmup Iteration   4: 2079162,329 ops/s
[info] # Warmup Iteration   5: 2077545,402 ops/s
[info] Iteration   1: 2087805,046 ops/s
[info]                  ·gc.alloc.rate:                   1411,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2082130,566 ops/s
[info]                  ·gc.alloc.rate:                   1408,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1008,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2087241,039 ops/s
[info]                  ·gc.alloc.rate:                   1411,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1011,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2084143,215 ops/s
[info]                  ·gc.alloc.rate:                   1409,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1016,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2083555,047 ops/s
[info]                  ·gc.alloc.rate:                   1409,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1276,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson":
[info]   2084974,983 ±(99.9%) 9420,911 ops/s [Average]
[info]   (min, avg, max) = (2082130,566, 2084974,983, 2087805,046), stdev = 2446,581
[info]   CI (99.9%): [2075554,071, 2094395,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1410,071 ±(99.9%) 6,236 MB/sec [Average]
[info]   (min, avg, max) = (1408,151, 1410,071, 1411,947), stdev = 1,620
[info]   CI (99.9%): [1403,835, 1416,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   1064,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1064,000, 1064,000, 1064,000), stdev = 0,001
[info]   CI (99.9%): [1064,000, 1064,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1407,857 ±(99.9%) 608,109 MB/sec [Average]
[info]   (min, avg, max) = (1326,093, 1407,857, 1690,006), stdev = 157,924
[info]   CI (99.9%): [799,747, 2015,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1062,366 ±(99.9%) 460,611 B/op [Average]
[info]   (min, avg, max) = (999,303, 1062,366, 1276,044), stdev = 119,619
[info]   CI (99.9%): [601,755, 1522,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,057 ±(99.9%) 0,069 B/op [Average]
[info]   (min, avg, max) = (0,031, 0,057, 0,079), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJackson:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 5,000), stdev = 0,894
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter
[info] # Run progress: 56,72% complete, ETA 00:15:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6766923,599 ops/s
[info] # Warmup Iteration   2: 7342261,437 ops/s
[info] # Warmup Iteration   3: 7368361,397 ops/s
[info] # Warmup Iteration   4: 7374224,797 ops/s
[info] # Warmup Iteration   5: 7346899,357 ops/s
[info] Iteration   1: 7469405,666 ops/s
[info]                  ·gc.alloc.rate:                   835,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7507900,315 ops/s
[info]                  ·gc.alloc.rate:                   839,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7493171,193 ops/s
[info]                  ·gc.alloc.rate:                   838,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7455379,634 ops/s
[info]                  ·gc.alloc.rate:                   834,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7502435,647 ops/s
[info]                  ·gc.alloc.rate:                   839,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter":
[info]   7485658,491 ±(99.9%) 86394,753 ops/s [Average]
[info]   (min, avg, max) = (7455379,634, 7485658,491, 7507900,315), stdev = 22436,443
[info]   CI (99.9%): [7399263,738, 7572053,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   837,433 ±(99.9%) 9,575 MB/sec [Average]
[info]   (min, avg, max) = (834,092, 837,433, 839,885), stdev = 2,487
[info]   CI (99.9%): [827,858, 847,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   870,449 ±(99.9%) 706,751 MB/sec [Average]
[info]   (min, avg, max) = (667,715, 870,449, 1008,818), stdev = 183,541
[info]   CI (99.9%): [163,698, 1577,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   182,925 ±(99.9%) 148,213 B/op [Average]
[info]   (min, avg, max) = (139,921, 182,925, 211,547), stdev = 38,490
[info]   CI (99.9%): [34,712, 331,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,018, 0,035), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniter:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay
[info] # Run progress: 57,46% complete, ETA 00:14:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268690,657 ops/s
[info] # Warmup Iteration   2: 547874,316 ops/s
[info] # Warmup Iteration   3: 543600,153 ops/s
[info] # Warmup Iteration   4: 548959,502 ops/s
[info] # Warmup Iteration   5: 551195,430 ops/s
[info] Iteration   1: 550001,182 ops/s
[info]                  ·gc.alloc.rate:                   1926,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5755,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,298 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 549655,033 ops/s
[info]                  ·gc.alloc.rate:                   1925,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5792,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,477 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 547595,519 ops/s
[info]                  ·gc.alloc.rate:                   1918,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4862,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,538 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 550420,963 ops/s
[info]                  ·gc.alloc.rate:                   1928,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5819,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 545481,225 ops/s
[info]                  ·gc.alloc.rate:                   1911,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              5512,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5881,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay":
[info]   548630,784 ±(99.9%) 7967,044 ops/s [Average]
[info]   (min, avg, max) = (545481,225, 548630,784, 550420,963), stdev = 2069,016
[info]   CI (99.9%): [540663,740, 556597,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1922,110 ±(99.9%) 27,900 MB/sec [Average]
[info]   (min, avg, max) = (1911,076, 1922,110, 1928,300), stdev = 7,246
[info]   CI (99.9%): [1894,210, 1950,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5512,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5512,001, 5512,001, 5512,001), stdev = 0,001
[info]   CI (99.9%): [5512,001, 5512,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1960,669 ±(99.9%) 578,546 MB/sec [Average]
[info]   (min, avg, max) = (1692,570, 1960,669, 2039,112), stdev = 150,247
[info]   CI (99.9%): [1382,123, 2539,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5622,328 ±(99.9%) 1644,083 B/op [Average]
[info]   (min, avg, max) = (4862,957, 5622,328, 5881,288), stdev = 426,963
[info]   CI (99.9%): [3978,246, 7266,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,129 ±(99.9%) 0,223 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,129, 0,187), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,370 ±(99.9%) 0,637 B/op [Average]
[info]   (min, avg, max) = (0,120, 0,370, 0,538), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 1,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlay:·gc.time":
[info]   24,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 6,000), stdev = 0,837
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 58,21% complete, ETA 00:14:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542329,450 ops/s
[info] # Warmup Iteration   2: 764484,068 ops/s
[info] # Warmup Iteration   3: 760026,233 ops/s
[info] # Warmup Iteration   4: 767186,422 ops/s
[info] # Warmup Iteration   5: 766397,439 ops/s
[info] Iteration   1: 766803,932 ops/s
[info]                  ·gc.alloc.rate:                   2725,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5570,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 762304,536 ops/s
[info]                  ·gc.alloc.rate:                   2709,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5612,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 767227,067 ops/s
[info]                  ·gc.alloc.rate:                   2726,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5585,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,299 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 766983,257 ops/s
[info]                  ·gc.alloc.rate:                   2726,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5588,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 765623,183 ops/s
[info]                  ·gc.alloc.rate:                   2721,234 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2724,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5597,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   765788,395 ±(99.9%) 7866,386 ops/s [Average]
[info]   (min, avg, max) = (762304,536, 765788,395, 767227,067), stdev = 2042,875
[info]   CI (99.9%): [757922,009, 773654,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2721,832 ±(99.9%) 27,798 MB/sec [Average]
[info]   (min, avg, max) = (2709,527, 2721,832, 2726,948), stdev = 7,219
[info]   CI (99.9%): [2694,034, 2749,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5592,001, 5592,001, 5592,001), stdev = 0,001
[info]   CI (99.9%): [5592,000, 5592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2721,269 ±(99.9%) 15,678 MB/sec [Average]
[info]   (min, avg, max) = (2715,009, 2721,269, 2724,157), stdev = 4,072
[info]   CI (99.9%): [2705,591, 2736,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5590,872 ±(99.9%) 59,065 B/op [Average]
[info]   (min, avg, max) = (5570,660, 5590,872, 5612,040), stdev = 15,339
[info]   CI (99.9%): [5531,807, 5649,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,121 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,121, 0,187), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,248 ±(99.9%) 0,360 B/op [Average]
[info]   (min, avg, max) = (0,171, 0,248, 0,387), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   40,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (8,000, 8,000, 8,000), stdev = 0,001
[info]   CI (99.9%): [40,000, 40,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter
[info] # Run progress: 58,96% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5367233,461 ops/s
[info] # Warmup Iteration   2: 4903602,253 ops/s
[info] # Warmup Iteration   3: 4941690,135 ops/s
[info] # Warmup Iteration   4: 4934252,186 ops/s
[info] # Warmup Iteration   5: 4967712,820 ops/s
[info] Iteration   1: 4931432,274 ops/s
[info]                  ·gc.alloc.rate:                   1228,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4947907,423 ops/s
[info]                  ·gc.alloc.rate:                   1232,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4942085,393 ops/s
[info]                  ·gc.alloc.rate:                   1231,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4967364,369 ops/s
[info]                  ·gc.alloc.rate:                   1237,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1014,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4952270,800 ops/s
[info]                  ·gc.alloc.rate:                   1233,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              392,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     430,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter":
[info]   4948212,052 ±(99.9%) 51029,182 ops/s [Average]
[info]   (min, avg, max) = (4931432,274, 4948212,052, 4967364,369), stdev = 13252,116
[info]   CI (99.9%): [4897182,870, 4999241,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1232,892 ±(99.9%) 12,700 MB/sec [Average]
[info]   (min, avg, max) = (1228,728, 1232,892, 1237,668), stdev = 3,298
[info]   CI (99.9%): [1220,192, 1245,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   392,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (392,000, 392,000, 392,000), stdev = 0,001
[info]   CI (99.9%): [392,000, 392,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1214,269 ±(99.9%) 717,429 MB/sec [Average]
[info]   (min, avg, max) = (1006,260, 1214,269, 1354,723), stdev = 186,314
[info]   CI (99.9%): [496,840, 1931,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   386,089 ±(99.9%) 228,395 B/op [Average]
[info]   (min, avg, max) = (321,026, 386,089, 430,391), stdev = 59,313
[info]   CI (99.9%): [157,695, 614,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,016 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,016, 0,033), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniter:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay
[info] # Run progress: 59,70% complete, ETA 00:14:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199676,878 ops/s
[info] # Warmup Iteration   2: 411274,259 ops/s
[info] # Warmup Iteration   3: 418077,029 ops/s
[info] # Warmup Iteration   4: 411790,383 ops/s
[info] # Warmup Iteration   5: 414953,466 ops/s
[info] Iteration   1: 414864,702 ops/s
[info]                  ·gc.alloc.rate:                   2158,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8937,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 415020,901 ops/s
[info]                  ·gc.alloc.rate:                   2158,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7694,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,553 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 415668,154 ops/s
[info]                  ·gc.alloc.rate:                   2162,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8990,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,552 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 409051,535 ops/s
[info]                  ·gc.alloc.rate:                   2127,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7842,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         12,000 ms
[info] Iteration   5: 412423,402 ops/s
[info]                  ·gc.alloc.rate:                   2145,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              8184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7788,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay":
[info]   413405,739 ±(99.9%) 10506,671 ops/s [Average]
[info]   (min, avg, max) = (409051,535, 413405,739, 415668,154), stdev = 2728,549
[info]   CI (99.9%): [402899,068, 423912,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate":
[info]   2150,505 ±(99.9%) 54,987 MB/sec [Average]
[info]   (min, avg, max) = (2127,708, 2150,505, 2162,270), stdev = 14,280
[info]   CI (99.9%): [2095,518, 2205,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8184,001, 8184,001, 8184,001), stdev = 0,001
[info]   CI (99.9%): [8184,001, 8184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2168,564 ±(99.9%) 695,137 MB/sec [Average]
[info]   (min, avg, max) = (2029,766, 2168,564, 2375,331), stdev = 180,525
[info]   CI (99.9%): [1473,427, 2863,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8250,771 ±(99.9%) 2516,046 B/op [Average]
[info]   (min, avg, max) = (7694,385, 8250,771, 8990,417), stdev = 653,409
[info]   CI (99.9%): [5734,724, 10766,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,108, 0,146), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,411 ±(99.9%) 0,538 B/op [Average]
[info]   (min, avg, max) = (0,240, 0,411, 0,553), stdev = 0,140
[info]   CI (99.9%): [≈ 0, 0,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlay:·gc.time":
[info]   35,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 7,000, 12,000), stdev = 2,828
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 60,45% complete, ETA 00:13:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 374898,673 ops/s
[info] # Warmup Iteration   2: 603663,381 ops/s
[info] # Warmup Iteration   3: 613147,356 ops/s
[info] # Warmup Iteration   4: 611359,623 ops/s
[info] # Warmup Iteration   5: 609816,858 ops/s
[info] Iteration   1: 612937,311 ops/s
[info]                  ·gc.alloc.rate:                   1658,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4312,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 612562,530 ops/s
[info]                  ·gc.alloc.rate:                   1657,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4332,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 612368,968 ops/s
[info]                  ·gc.alloc.rate:                   1656,561 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4347,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 608001,895 ops/s
[info]                  ·gc.alloc.rate:                   1644,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4387,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,269 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 613735,051 ops/s
[info]                  ·gc.alloc.rate:                   1660,237 MB/sec
[info]                  ·gc.alloc.rate.norm:              4256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3482,972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   611921,151 ±(99.9%) 8673,632 ops/s [Average]
[info]   (min, avg, max) = (608001,895, 611921,151, 613735,051), stdev = 2252,515
[info]   CI (99.9%): [603247,519, 620594,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1655,343 ±(99.9%) 23,343 MB/sec [Average]
[info]   (min, avg, max) = (1644,797, 1655,343, 1660,237), stdev = 6,062
[info]   CI (99.9%): [1632,001, 1678,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4256,001, 4256,001, 4256,001), stdev = 0,001
[info]   CI (99.9%): [4256,001, 4256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1622,732 ±(99.9%) 568,825 MB/sec [Average]
[info]   (min, avg, max) = (1358,683, 1622,732, 1695,595), stdev = 147,722
[info]   CI (99.9%): [1053,907, 2191,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4172,732 ±(99.9%) 1488,492 B/op [Average]
[info]   (min, avg, max) = (3482,972, 4172,732, 4387,445), stdev = 386,557
[info]   CI (99.9%): [2684,240, 5661,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,182 ±(99.9%) 0,238 B/op [Average]
[info]   (min, avg, max) = (0,107, 0,182, 0,269), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter
[info] # Run progress: 61,19% complete, ETA 00:13:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3421372,818 ops/s
[info] # Warmup Iteration   2: 3673060,998 ops/s
[info] # Warmup Iteration   3: 3641362,792 ops/s
[info] # Warmup Iteration   4: 3700547,072 ops/s
[info] # Warmup Iteration   5: 3702624,247 ops/s
[info] Iteration   1: 3720140,095 ops/s
[info]                  ·gc.alloc.rate:                   453,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3700626,211 ops/s
[info]                  ·gc.alloc.rate:               451,613 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141,363 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 3688335,745 ops/s
[info]                  ·gc.alloc.rate:                   450,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3706083,859 ops/s
[info]                  ·gc.alloc.rate:               452,281 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 3697351,286 ops/s
[info]                  ·gc.alloc.rate:               451,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 141,779 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter":
[info]   3702507,439 ±(99.9%) 45343,814 ops/s [Average]
[info]   (min, avg, max) = (3688335,745, 3702507,439, 3720140,095), stdev = 11775,644
[info]   CI (99.9%): [3657163,625, 3747851,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   451,838 ±(99.9%) 5,540 MB/sec [Average]
[info]   (min, avg, max) = (450,107, 451,838, 453,990), stdev = 1,439
[info]   CI (99.9%): [446,298, 457,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   399,281 ±(99.9%) 572,028 MB/sec [Average]
[info]   (min, avg, max) = (332,508, 399,281, 665,021), stdev = 148,554
[info]   CI (99.9%): [≈ 0, 971,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   169,777 ±(99.9%) 245,180 B/op [Average]
[info]   (min, avg, max) = (140,627, 169,777, 283,675), stdev = 63,672
[info]   CI (99.9%): [≈ 0, 414,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,044), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay
[info] # Run progress: 61,94% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168923,129 ops/s
[info] # Warmup Iteration   2: 393980,510 ops/s
[info] # Warmup Iteration   3: 399294,926 ops/s
[info] # Warmup Iteration   4: 399343,431 ops/s
[info] # Warmup Iteration   5: 397439,711 ops/s
[info] Iteration   1: 400685,898 ops/s
[info]                  ·gc.alloc.rate:                   1477,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5216,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,245 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 398359,011 ops/s
[info]                  ·gc.alloc.rate:                   1468,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6600,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,576 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 398531,325 ops/s
[info]                  ·gc.alloc.rate:                   1469,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5308,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 399629,110 ops/s
[info]                  ·gc.alloc.rate:                   1473,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5312,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,410 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 397785,540 ops/s
[info]                  ·gc.alloc.rate:                   1466,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6689,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,329 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay":
[info]   398998,177 ±(99.9%) 4450,557 ops/s [Average]
[info]   (min, avg, max) = (397785,540, 398998,177, 400685,898), stdev = 1155,795
[info]   CI (99.9%): [394547,620, 403448,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1470,987 ±(99.9%) 16,514 MB/sec [Average]
[info]   (min, avg, max) = (1466,573, 1470,987, 1477,284), stdev = 4,289
[info]   CI (99.9%): [1454,472, 1487,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5800,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5800,001, 5800,001, 5800,001), stdev = 0,001
[info]   CI (99.9%): [5800,001, 5800,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1477,113 ±(99.9%) 718,999 MB/sec [Average]
[info]   (min, avg, max) = (1328,632, 1477,113, 1691,431), stdev = 186,722
[info]   CI (99.9%): [758,114, 2196,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5825,487 ±(99.9%) 2886,391 B/op [Average]
[info]   (min, avg, max) = (5216,373, 5825,487, 6689,270), stdev = 749,586
[info]   CI (99.9%): [2939,096, 8711,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,146), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,345 ±(99.9%) 0,610 B/op [Average]
[info]   (min, avg, max) = (0,164, 0,345, 0,576), stdev = 0,158
[info]   CI (99.9%): [≈ 0, 0,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlay:·gc.time":
[info]   17,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 62,69% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1288009,927 ops/s
[info] # Warmup Iteration   2: 2148443,524 ops/s
[info] # Warmup Iteration   3: 2182169,145 ops/s
[info] # Warmup Iteration   4: 2176620,300 ops/s
[info] # Warmup Iteration   5: 2179185,597 ops/s
[info] Iteration   1: 2178740,813 ops/s
[info]                  ·gc.alloc.rate:                   3523,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3742,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2702,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        11,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 2194047,564 ops/s
[info]                  ·gc.alloc.rate:                   3548,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2441,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   3: 2205020,831 ops/s
[info]                  ·gc.alloc.rate:                   3565,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2429,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 2151086,357 ops/s
[info]                  ·gc.alloc.rate:                   3478,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3745,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2739,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        11,000 counts
[info]                  ·gc.time:                         15,000 ms
[info] Iteration   5: 2175638,257 ops/s
[info]                  ·gc.alloc.rate:                   3517,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              2544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2462,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2180906,764 ±(99.9%) 78817,753 ops/s [Average]
[info]   (min, avg, max) = (2151086,357, 2180906,764, 2205020,831), stdev = 20468,720
[info]   CI (99.9%): [2102089,011, 2259724,518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3526,599 ±(99.9%) 128,011 MB/sec [Average]
[info]   (min, avg, max) = (3478,230, 3526,599, 3565,723), stdev = 33,244
[info]   CI (99.9%): [3398,588, 3654,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2544,000, 2544,000, 2544,000), stdev = 0,001
[info]   CI (99.9%): [2544,000, 2544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3540,876 ±(99.9%) 714,502 MB/sec [Average]
[info]   (min, avg, max) = (3404,957, 3540,876, 3745,750), stdev = 185,554
[info]   CI (99.9%): [2826,373, 4255,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2555,205 ±(99.9%) 586,923 B/op [Average]
[info]   (min, avg, max) = (2429,765, 2555,205, 2739,666), stdev = 152,422
[info]   CI (99.9%): [1968,282, 3142,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,125), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,072 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (0,046, 0,072, 0,090), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   52,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (10,000, 10,400, 11,000), stdev = 0,548
[info]   CI (99.9%): [52,000, 52,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   42,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (6,000, 8,400, 15,000), stdev = 3,715
[info]   CI (99.9%): [42,000, 42,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson
[info] # Run progress: 63,43% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111126,028 ops/s
[info] # Warmup Iteration   2: 325873,641 ops/s
[info] # Warmup Iteration   3: 333736,853 ops/s
[info] # Warmup Iteration   4: 338449,109 ops/s
[info] # Warmup Iteration   5: 329937,493 ops/s
[info] Iteration   1: 315070,232 ops/s
[info]                  ·gc.alloc.rate:                   765,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              3824,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3271,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 325921,002 ops/s
[info]                  ·gc.alloc.rate:                   792,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              3824,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4759,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,302 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 330247,889 ops/s
[info]                  ·gc.alloc.rate:               802,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          3824,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3143,080 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 331363,063 ops/s
[info]                  ·gc.alloc.rate:                   805,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              3824,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3141,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 330637,025 ops/s
[info]                  ·gc.alloc.rate:                   803,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              3824,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4741,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson":
[info]   326647,842 ±(99.9%) 26235,051 ops/s [Average]
[info]   (min, avg, max) = (315070,232, 326647,842, 331363,063), stdev = 6813,160
[info]   CI (99.9%): [300412,791, 352882,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate":
[info]   793,991 ±(99.9%) 63,847 MB/sec [Average]
[info]   (min, avg, max) = (765,805, 793,991, 805,502), stdev = 16,581
[info]   CI (99.9%): [730,144, 857,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   3824,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3824,001, 3824,001, 3824,001), stdev = 0,001
[info]   CI (99.9%): [3824,001, 3824,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   791,840 ±(99.9%) 701,139 MB/sec [Average]
[info]   (min, avg, max) = (655,065, 791,840, 996,505), stdev = 182,084
[info]   CI (99.9%): [90,700, 1492,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3811,382 ±(99.9%) 3307,268 B/op [Average]
[info]   (min, avg, max) = (3141,874, 3811,382, 4759,017), stdev = 858,887
[info]   CI (99.9%): [504,115, 7118,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,121 ±(99.9%) 0,424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,121, 0,302), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJackson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter
[info] # Run progress: 64,18% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 665893,868 ops/s
[info] # Warmup Iteration   2: 785578,478 ops/s
[info] # Warmup Iteration   3: 779266,811 ops/s
[info] # Warmup Iteration   4: 787826,330 ops/s
[info] # Warmup Iteration   5: 777556,873 ops/s
[info] Iteration   1: 776936,743 ops/s
[info]                  ·gc.alloc.rate:                   715,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2036,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 758833,704 ops/s
[info]                  ·gc.alloc.rate:                   698,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1389,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 772389,323 ops/s
[info]                  ·gc.alloc.rate:                   710,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1366,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 753948,883 ops/s
[info]                  ·gc.alloc.rate:                   693,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1401,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 754628,319 ops/s
[info]                  ·gc.alloc.rate:                   694,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              1448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1403,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter":
[info]   763347,395 ±(99.9%) 40894,607 ops/s [Average]
[info]   (min, avg, max) = (753948,883, 763347,395, 776936,743), stdev = 10620,199
[info]   CI (99.9%): [722452,788, 804242,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate":
[info]   702,571 ±(99.9%) 37,672 MB/sec [Average]
[info]   (min, avg, max) = (693,920, 702,571, 715,103), stdev = 9,783
[info]   CI (99.9%): [664,899, 740,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1448,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1448,001, 1448,001, 1448,001), stdev = 0,001
[info]   CI (99.9%): [1448,001, 1448,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   738,344 ±(99.9%) 575,298 MB/sec [Average]
[info]   (min, avg, max) = (670,371, 738,344, 1005,598), stdev = 149,403
[info]   CI (99.9%): [163,046, 1313,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1519,537 ±(99.9%) 1113,604 B/op [Average]
[info]   (min, avg, max) = (1366,836, 1519,537, 2036,219), stdev = 289,199
[info]   CI (99.9%): [405,933, 2633,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,094 ±(99.9%) 0,137 B/op [Average]
[info]   (min, avg, max) = (0,043, 0,094, 0,130), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 64,93% complete, ETA 00:12:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3880757,125 ops/s
[info] # Warmup Iteration   2: 4076571,119 ops/s
[info] # Warmup Iteration   3: 4142331,820 ops/s
[info] # Warmup Iteration   4: 4139264,917 ops/s
[info] # Warmup Iteration   5: 4145721,917 ops/s
[info] Iteration   1: 4146617,847 ops/s
[info]                  ·gc.alloc.rate:                   2466,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              936,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     902,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 4140582,406 ops/s
[info]                  ·gc.alloc.rate:                   2463,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              936,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1033,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 4152446,656 ops/s
[info]                  ·gc.alloc.rate:                   2470,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              936,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     903,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 4133523,473 ops/s
[info]                  ·gc.alloc.rate:                   2459,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              936,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     907,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 4170457,966 ops/s
[info]                  ·gc.alloc.rate:                   2481,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              936,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     899,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4148725,669 ±(99.9%) 54046,394 ops/s [Average]
[info]   (min, avg, max) = (4133523,473, 4148725,669, 4170457,966), stdev = 14035,677
[info]   CI (99.9%): [4094679,275, 4202772,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2468,231 ±(99.9%) 32,172 MB/sec [Average]
[info]   (min, avg, max) = (2459,184, 2468,231, 2481,188), stdev = 8,355
[info]   CI (99.9%): [2436,059, 2500,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (936,000, 936,000, 936,000), stdev = 0,001
[info]   CI (99.9%): [936,000, 936,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2449,742 ±(99.9%) 582,090 MB/sec [Average]
[info]   (min, avg, max) = (2377,671, 2449,742, 2720,118), stdev = 151,167
[info]   CI (99.9%): [1867,651, 3031,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   929,046 ±(99.9%) 225,184 B/op [Average]
[info]   (min, avg, max) = (899,219, 929,046, 1033,532), stdev = 58,479
[info]   CI (99.9%): [703,863, 1154,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,146), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,054 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,038, 0,055), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   36,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,200, 8,000), stdev = 0,447
[info]   CI (99.9%): [36,000, 36,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   20,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 65,67% complete, ETA 00:11:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7139779,191 ops/s
[info] # Warmup Iteration   2: 7409066,077 ops/s
[info] # Warmup Iteration   3: 7429690,473 ops/s
[info] # Warmup Iteration   4: 6654381,624 ops/s
[info] # Warmup Iteration   5: 7336677,938 ops/s
[info] Iteration   1: 7383599,704 ops/s
[info]                  ·gc.alloc.rate:               863,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 142,840 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 7273475,992 ops/s
[info]                  ·gc.alloc.rate:                   850,667 MB/sec
[info]                  ·gc.alloc.rate.norm:              184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 7415651,240 ops/s
[info]                  ·gc.alloc.rate:                   867,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 7373613,659 ops/s
[info]                  ·gc.alloc.rate:                   862,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     215,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 7336326,417 ops/s
[info]                  ·gc.alloc.rate:                   858,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     144,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7356533,402 ±(99.9%) 209374,620 ops/s [Average]
[info]   (min, avg, max) = (7273475,992, 7356533,402, 7415651,240), stdev = 54373,924
[info]   CI (99.9%): [7147158,783, 7565908,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   860,371 ±(99.9%) 24,462 MB/sec [Average]
[info]   (min, avg, max) = (850,667, 860,371, 867,270), stdev = 6,353
[info]   CI (99.9%): [835,908, 884,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (184,000, 184,000, 184,000), stdev = 0,001
[info]   CI (99.9%): [184,000, 184,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   806,847 ±(99.9%) 709,035 MB/sec [Average]
[info]   (min, avg, max) = (670,372, 806,847, 1010,198), stdev = 184,134
[info]   CI (99.9%): [97,812, 1515,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   172,690 ±(99.9%) 154,643 B/op [Average]
[info]   (min, avg, max) = (142,652, 172,690, 217,792), stdev = 40,160
[info]   CI (99.9%): [18,047, 327,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,018), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay
[info] # Run progress: 66,42% complete, ETA 00:11:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38966,730 ops/s
[info] # Warmup Iteration   2: 207461,181 ops/s
[info] # Warmup Iteration   3: 209837,283 ops/s
[info] # Warmup Iteration   4: 212887,804 ops/s
[info] # Warmup Iteration   5: 212673,123 ops/s
[info] Iteration   1: 211474,638 ops/s
[info]                  ·gc.alloc.rate:                   1764,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12416,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 210469,266 ops/s
[info]                  ·gc.alloc.rate:                   1756,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12550,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,623 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 211312,396 ops/s
[info]                  ·gc.alloc.rate:                   1763,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12557,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,465 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 211263,935 ops/s
[info]                  ·gc.alloc.rate:                   1762,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12605,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 211179,282 ops/s
[info]                  ·gc.alloc.rate:                   1762,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15166,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay":
[info]   211139,904 ±(99.9%) 1501,862 ops/s [Average]
[info]   (min, avg, max) = (210469,266, 211139,904, 211474,638), stdev = 390,029
[info]   CI (99.9%): [209638,042, 212641,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate":
[info]   1761,800 ±(99.9%) 12,481 MB/sec [Average]
[info]   (min, avg, max) = (1756,230, 1761,800, 1764,597), stdev = 3,241
[info]   CI (99.9%): [1749,319, 1774,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   13128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13128,002, 13128,002, 13128,002), stdev = 0,001
[info]   CI (99.9%): [13128,002, 13128,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1752,568 ±(99.9%) 610,648 MB/sec [Average]
[info]   (min, avg, max) = (1668,926, 1752,568, 2035,808), stdev = 158,583
[info]   CI (99.9%): [1141,920, 2363,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   13059,138 ±(99.9%) 4544,995 B/op [Average]
[info]   (min, avg, max) = (12416,238, 13059,138, 15166,822), stdev = 1180,321
[info]   CI (99.9%): [8514,143, 17604,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,497 ±(99.9%) 0,780 B/op [Average]
[info]   (min, avg, max) = (0,155, 0,497, 0,623), stdev = 0,202
[info]   CI (99.9%): [≈ 0, 1,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlay:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 6,000), stdev = 0,894
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 67,16% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616487,240 ops/s
[info] # Warmup Iteration   2: 838502,692 ops/s
[info] # Warmup Iteration   3: 837157,299 ops/s
[info] # Warmup Iteration   4: 845377,550 ops/s
[info] # Warmup Iteration   5: 838701,838 ops/s
[info] Iteration   1: 840994,024 ops/s
[info]                  ·gc.alloc.rate:                   3241,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3059,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5724,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 837091,186 ops/s
[info]                  ·gc.alloc.rate:                   3226,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6400,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,352 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 841951,931 ops/s
[info]                  ·gc.alloc.rate:                   3245,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5726,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 827261,498 ops/s
[info]                  ·gc.alloc.rate:                   3188,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6475,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,436 B/op
[info]                  ·gc.count:                        10,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 844199,903 ops/s
[info]                  ·gc.alloc.rate:                   3253,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5711,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,272 B/op
[info]                  ·gc.count:                        9,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   838299,709 ±(99.9%) 25738,392 ops/s [Average]
[info]   (min, avg, max) = (827261,498, 838299,709, 844199,903), stdev = 6684,179
[info]   CI (99.9%): [812561,317, 864038,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   3231,125 ±(99.9%) 98,972 MB/sec [Average]
[info]   (min, avg, max) = (3188,678, 3231,125, 3253,777), stdev = 25,703
[info]   CI (99.9%): [3132,153, 3330,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6064,001, 6064,001, 6064,001), stdev = 0,001
[info]   CI (99.9%): [6064,000, 6064,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3199,936 ±(99.9%) 721,726 MB/sec [Average]
[info]   (min, avg, max) = (3059,957, 3199,936, 3405,302), stdev = 187,430
[info]   CI (99.9%): [2478,210, 3921,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6007,652 ±(99.9%) 1516,162 B/op [Average]
[info]   (min, avg, max) = (5711,505, 6007,652, 6475,742), stdev = 393,743
[info]   CI (99.9%): [4491,490, 7523,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,162 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (0,125, 0,162, 0,229), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,305 ±(99.9%) 0,337 B/op [Average]
[info]   (min, avg, max) = (0,233, 0,305, 0,436), stdev = 0,087
[info]   CI (99.9%): [≈ 0, 0,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   47,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (9,000, 9,400, 10,000), stdev = 0,548
[info]   CI (99.9%): [47,000, 47,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   28,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter
[info] # Run progress: 67,91% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3441715,290 ops/s
[info] # Warmup Iteration   2: 3832039,275 ops/s
[info] # Warmup Iteration   3: 3927430,615 ops/s
[info] # Warmup Iteration   4: 3925843,330 ops/s
[info] # Warmup Iteration   5: 3902715,858 ops/s
[info] Iteration   1: 3911852,979 ops/s
[info]                  ·gc.alloc.rate:                   2526,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     955,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 3918661,308 ops/s
[info]                  ·gc.alloc.rate:                   2530,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1091,814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 3929785,668 ops/s
[info]                  ·gc.alloc.rate:                   2537,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 3919627,893 ops/s
[info]                  ·gc.alloc.rate:                   2531,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     956,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 3923194,027 ops/s
[info]                  ·gc.alloc.rate:                   2533,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter":
[info]   3920624,375 ±(99.9%) 25273,574 ops/s [Average]
[info]   (min, avg, max) = (3911852,979, 3920624,375, 3929785,668), stdev = 6563,467
[info]   CI (99.9%): [3895350,801, 3945897,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   2531,829 ±(99.9%) 15,969 MB/sec [Average]
[info]   (min, avg, max) = (2526,299, 2531,829, 2537,673), stdev = 4,147
[info]   CI (99.9%): [2515,860, 2547,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   1016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1016,000, 1016,000, 1016,000), stdev = 0,001
[info]   CI (99.9%): [1016,000, 1016,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   2517,400 ±(99.9%) 718,218 MB/sec [Average]
[info]   (min, avg, max) = (2376,403, 2517,400, 2723,897), stdev = 186,519
[info]   CI (99.9%): [1799,182, 3235,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1010,207 ±(99.9%) 287,958 B/op [Average]
[info]   (min, avg, max) = (954,300, 1010,207, 1092,427), stdev = 74,782
[info]   CI (99.9%): [722,249, 1298,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,037 B/op [Average]
[info]   (min, avg, max) = (0,017, 0,030, 0,042), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.count":
[info]   37,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,400, 8,000), stdev = 0,548
[info]   CI (99.9%): [37,000, 37,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniter:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay
[info] # Run progress: 68,66% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113087,051 ops/s
[info] # Warmup Iteration   2: 290547,647 ops/s
[info] # Warmup Iteration   3: 296726,756 ops/s
[info] # Warmup Iteration   4: 297297,637 ops/s
[info] # Warmup Iteration   5: 297870,079 ops/s
[info] Iteration   1: 296174,457 ops/s
[info]                  ·gc.alloc.rate:                   2118,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2352,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12497,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,664 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 297987,439 ops/s
[info]                  ·gc.alloc.rate:                   2131,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10705,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,550 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 297240,368 ops/s
[info]                  ·gc.alloc.rate:                   2126,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10764,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,331 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 298046,383 ops/s
[info]                  ·gc.alloc.rate:                   2132,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10760,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,550 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   5: 292558,722 ops/s
[info]                  ·gc.alloc.rate:                   2093,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              11256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12796,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,560 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay":
[info]   296401,474 ±(99.9%) 8768,786 ops/s [Average]
[info]   (min, avg, max) = (292558,722, 296401,474, 298046,383), stdev = 2277,226
[info]   CI (99.9%): [287632,688, 305170,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate":
[info]   2120,571 ±(99.9%) 62,765 MB/sec [Average]
[info]   (min, avg, max) = (2093,079, 2120,571, 2132,280), stdev = 16,300
[info]   CI (99.9%): [2057,806, 2183,336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   11256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11256,001, 11256,001, 11256,002), stdev = 0,001
[info]   CI (99.9%): [11256,001, 11256,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   2166,430 ±(99.9%) 702,951 MB/sec [Average]
[info]   (min, avg, max) = (2027,796, 2166,430, 2379,606), stdev = 182,554
[info]   CI (99.9%): [1463,479, 2869,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   11505,033 ±(99.9%) 4036,300 B/op [Average]
[info]   (min, avg, max) = (10705,894, 11505,033, 12796,864), stdev = 1048,214
[info]   CI (99.9%): [7468,733, 15541,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,125), stdev = 0,023
[info]   CI (99.9%): [0,012, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,531 ±(99.9%) 0,469 B/op [Average]
[info]   (min, avg, max) = (0,331, 0,531, 0,664), stdev = 0,122
[info]   CI (99.9%): [0,062, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlay:·gc.time":
[info]   32,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 6,400, 11,000), stdev = 2,702
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 69,40% complete, ETA 00:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 727286,636 ops/s
[info] # Warmup Iteration   2: 977327,976 ops/s
[info] # Warmup Iteration   3: 981456,318 ops/s
[info] # Warmup Iteration   4: 983487,147 ops/s
[info] # Warmup Iteration   5: 981383,925 ops/s
[info] Iteration   1: 977632,604 ops/s
[info]                  ·gc.alloc.rate:                   2256,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3812,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,235 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 978702,896 ops/s
[info]                  ·gc.alloc.rate:                   2259,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3818,808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,201 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 985497,908 ops/s
[info]                  ·gc.alloc.rate:                   2275,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3255,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 976173,707 ops/s
[info]                  ·gc.alloc.rate:                   2253,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3840,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 984326,221 ops/s
[info]                  ·gc.alloc.rate:                   2272,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3809,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   980466,667 ±(99.9%) 16083,279 ops/s [Average]
[info]   (min, avg, max) = (976173,707, 980466,667, 985497,908), stdev = 4176,776
[info]   CI (99.9%): [964383,388, 996549,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2263,439 ±(99.9%) 37,052 MB/sec [Average]
[info]   (min, avg, max) = (2253,570, 2263,439, 2275,062), stdev = 9,622
[info]   CI (99.9%): [2226,387, 2300,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3632,000, 3632,000, 3632,000), stdev = 0,001
[info]   CI (99.9%): [3632,000, 3632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2310,014 ±(99.9%) 583,643 MB/sec [Average]
[info]   (min, avg, max) = (2039,087, 2310,014, 2383,558), stdev = 151,570
[info]   CI (99.9%): [1726,370, 2893,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3707,337 ±(99.9%) 974,193 B/op [Average]
[info]   (min, avg, max) = (3255,281, 3707,337, 3840,454), stdev = 252,995
[info]   CI (99.9%): [2733,144, 4681,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,104, 0,146), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,167 ±(99.9%) 0,184 B/op [Average]
[info]   (min, avg, max) = (0,133, 0,167, 0,235), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson
[info] # Run progress: 70,15% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1186152,093 ops/s
[info] # Warmup Iteration   2: 2017726,279 ops/s
[info] # Warmup Iteration   3: 2040971,918 ops/s
[info] # Warmup Iteration   4: 2040224,649 ops/s
[info] # Warmup Iteration   5: 2054817,159 ops/s
[info] Iteration   1: 2030102,219 ops/s
[info]                  ·gc.alloc.rate:                   1166,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1019,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 2023922,616 ops/s
[info]                  ·gc.alloc.rate:                   1162,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2059438,918 ops/s
[info]                  ·gc.alloc.rate:                   1183,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2051194,441 ops/s
[info]                  ·gc.alloc.rate:                   1178,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1027,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 2057353,843 ops/s
[info]                  ·gc.alloc.rate:                   1182,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009,310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson":
[info]   2044402,407 ±(99.9%) 62798,717 ops/s [Average]
[info]   (min, avg, max) = (2023922,616, 2044402,407, 2059438,918), stdev = 16308,627
[info]   CI (99.9%): [1981603,690, 2107201,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1174,734 ±(99.9%) 36,173 MB/sec [Average]
[info]   (min, avg, max) = (1162,946, 1174,734, 1183,390), stdev = 9,394
[info]   CI (99.9%): [1138,561, 1210,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1197,944 ±(99.9%) 680,978 MB/sec [Average]
[info]   (min, avg, max) = (999,648, 1197,944, 1339,536), stdev = 176,848
[info]   CI (99.9%): [516,966, 1878,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   922,569 ±(99.9%) 544,653 B/op [Average]
[info]   (min, avg, max) = (763,638, 922,569, 1030,554), stdev = 141,445
[info]   CI (99.9%): [377,917, 1467,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,125), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,061 ±(99.9%) 0,093 B/op [Average]
[info]   (min, avg, max) = (0,032, 0,061, 0,097), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJackson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 0,707
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter
[info] # Run progress: 70,90% complete, ETA 00:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6623956,050 ops/s
[info] # Warmup Iteration   2: 6889119,266 ops/s
[info] # Warmup Iteration   3: 6942856,005 ops/s
[info] # Warmup Iteration   4: 7081878,571 ops/s
[info] # Warmup Iteration   5: 7139212,032 ops/s
[info] Iteration   1: 7131825,817 ops/s
[info]                  ·gc.alloc.rate:                   362,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,347 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7130836,596 ops/s
[info]                  ·gc.alloc.rate:                   362,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7127902,620 ops/s
[info]                  ·gc.alloc.rate:               362,456 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73,392 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 7151371,745 ops/s
[info]                  ·gc.alloc.rate:                   363,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 7055011,014 ops/s
[info]                  ·gc.alloc.rate:               358,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 74,157 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter":
[info]   7119389,558 ±(99.9%) 143117,934 ops/s [Average]
[info]   (min, avg, max) = (7055011,014, 7119389,558, 7151371,745), stdev = 37167,273
[info]   CI (99.9%): [6976271,624, 7262507,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   362,019 ±(99.9%) 7,273 MB/sec [Average]
[info]   (min, avg, max) = (358,749, 362,019, 363,651), stdev = 1,889
[info]   CI (99.9%): [354,746, 369,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   399,293 ±(99.9%) 573,448 MB/sec [Average]
[info]   (min, avg, max) = (332,516, 399,293, 665,694), stdev = 148,923
[info]   CI (99.9%): [≈ 0, 972,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   88,215 ±(99.9%) 126,269 B/op [Average]
[info]   (min, avg, max) = (73,153, 88,215, 146,871), stdev = 32,792
[info]   CI (99.9%): [≈ 0, 214,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,340 ±(99.9%) 2,660 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,340, 1,574), stdev = 0,691
[info]   CI (99.9%): [≈ 0, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,075 ±(99.9%) 0,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,347), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay
[info] # Run progress: 71,64% complete, ETA 00:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268380,268 ops/s
[info] # Warmup Iteration   2: 538480,505 ops/s
[info] # Warmup Iteration   3: 531122,586 ops/s
[info] # Warmup Iteration   4: 543855,616 ops/s
[info] # Warmup Iteration   5: 545558,768 ops/s
[info] Iteration   1: 548008,533 ops/s
[info]                  ·gc.alloc.rate:                   1897,719 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4810,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 546003,368 ops/s
[info]                  ·gc.alloc.rate:                   1890,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5827,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 548237,714 ops/s
[info]                  ·gc.alloc.rate:                   1898,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5826,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 545978,318 ops/s
[info]                  ·gc.alloc.rate:                   1890,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4888,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 537336,468 ops/s
[info]                  ·gc.alloc.rate:                   1860,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5970,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         11,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay":
[info]   545112,880 ±(99.9%) 17238,238 ops/s [Average]
[info]   (min, avg, max) = (537336,468, 545112,880, 548237,714), stdev = 4476,716
[info]   CI (99.9%): [527874,643, 562351,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate":
[info]   1887,605 ±(99.9%) 59,883 MB/sec [Average]
[info]   (min, avg, max) = (1860,587, 1887,605, 1898,394), stdev = 15,551
[info]   CI (99.9%): [1827,721, 1947,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   5448,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5448,001, 5448,001, 5448,001), stdev = 0,001
[info]   CI (99.9%): [5448,001, 5448,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1892,841 ±(99.9%) 727,626 MB/sec [Average]
[info]   (min, avg, max) = (1675,660, 1892,841, 2039,029), stdev = 188,962
[info]   CI (99.9%): [1165,215, 2620,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5464,908 ±(99.9%) 2176,821 B/op [Average]
[info]   (min, avg, max) = (4810,508, 5464,908, 5970,501), stdev = 565,313
[info]   CI (99.9%): [3288,087, 7641,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,193 ±(99.9%) 0,308 B/op [Average]
[info]   (min, avg, max) = (0,120, 0,193, 0,305), stdev = 0,080
[info]   CI (99.9%): [≈ 0, 0,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlay:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,800, 11,000), stdev = 2,950
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter
[info] # Run progress: 72,39% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3091018,942 ops/s
[info] # Warmup Iteration   2: 3655983,336 ops/s
[info] # Warmup Iteration   3: 3690640,425 ops/s
[info] # Warmup Iteration   4: 3657569,108 ops/s
[info] # Warmup Iteration   5: 3651140,539 ops/s
[info] Iteration   1: 3729560,516 ops/s
[info]                  ·gc.alloc.rate:                   1763,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3702795,538 ops/s
[info]                  ·gc.alloc.rate:                   1751,066 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     863,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3713715,891 ops/s
[info]                  ·gc.alloc.rate:                   1756,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 3697171,970 ops/s
[info]                  ·gc.alloc.rate:                   1748,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     723,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3710929,575 ops/s
[info]                  ·gc.alloc.rate:                   1754,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter":
[info]   3710834,698 ±(99.9%) 47562,264 ops/s [Average]
[info]   (min, avg, max) = (3697171,970, 3710834,698, 3729560,516), stdev = 12351,769
[info]   CI (99.9%): [3663272,434, 3758396,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate":
[info]   1754,864 ±(99.9%) 22,748 MB/sec [Average]
[info]   (min, avg, max) = (1748,385, 1754,864, 1763,894), stdev = 5,907
[info]   CI (99.9%): [1732,117, 1777,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   1762,638 ±(99.9%) 578,380 MB/sec [Average]
[info]   (min, avg, max) = (1687,622, 1762,638, 2031,196), stdev = 150,204
[info]   CI (99.9%): [1184,258, 2341,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   747,369 ±(99.9%) 249,470 B/op [Average]
[info]   (min, avg, max) = (711,829, 747,369, 863,023), stdev = 64,787
[info]   CI (99.9%): [497,899, 996,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,039 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,030, 0,044), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniter:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay
[info] # Run progress: 73,13% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160605,549 ops/s
[info] # Warmup Iteration   2: 337006,928 ops/s
[info] # Warmup Iteration   3: 337226,335 ops/s
[info] # Warmup Iteration   4: 339590,540 ops/s
[info] # Warmup Iteration   5: 339854,430 ops/s
[info] Iteration   1: 334341,347 ops/s
[info]                  ·gc.alloc.rate:                   1771,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              8336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2007,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9445,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,490 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 340937,915 ops/s
[info]                  ·gc.alloc.rate:                   1806,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              8336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7767,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,577 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 340191,240 ops/s
[info]                  ·gc.alloc.rate:                   1802,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              8336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7812,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,578 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 336065,655 ops/s
[info]                  ·gc.alloc.rate:                   1780,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              8336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9517,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 337818,352 ops/s
[info]                  ·gc.alloc.rate:                   1789,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              8336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7907,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay":
[info]   337870,902 ±(99.9%) 10634,677 ops/s [Average]
[info]   (min, avg, max) = (334341,347, 337870,902, 340937,915), stdev = 2761,792
[info]   CI (99.9%): [327236,225, 348505,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate":
[info]   1790,237 ±(99.9%) 56,153 MB/sec [Average]
[info]   (min, avg, max) = (1771,674, 1790,237, 1806,492), stdev = 14,583
[info]   CI (99.9%): [1734,084, 1846,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   8336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8336,001, 8336,001, 8336,001), stdev = 0,001
[info]   CI (99.9%): [8336,001, 8336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1822,223 ±(99.9%) 697,282 MB/sec [Average]
[info]   (min, avg, max) = (1683,377, 1822,223, 2033,034), stdev = 181,082
[info]   CI (99.9%): [1124,941, 2519,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   8490,244 ±(99.9%) 3491,580 B/op [Average]
[info]   (min, avg, max) = (7767,890, 8490,244, 9517,677), stdev = 906,752
[info]   CI (99.9%): [4998,664, 11981,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,096 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,096, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,446 ±(99.9%) 0,558 B/op [Average]
[info]   (min, avg, max) = (0,291, 0,446, 0,578), stdev = 0,145
[info]   CI (99.9%): [≈ 0, 1,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlay:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 73,88% complete, ETA 00:09:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354339,613 ops/s
[info] # Warmup Iteration   2: 558863,916 ops/s
[info] # Warmup Iteration   3: 554553,182 ops/s
[info] # Warmup Iteration   4: 556156,744 ops/s
[info] # Warmup Iteration   5: 555316,530 ops/s
[info] Iteration   1: 557546,488 ops/s
[info]                  ·gc.alloc.rate:                   1505,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4731,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 555872,588 ops/s
[info]                  ·gc.alloc.rate:                   1500,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3812,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 529361,087 ops/s
[info]                  ·gc.alloc.rate:                   1429,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4015,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 557545,623 ops/s
[info]                  ·gc.alloc.rate:                   1505,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4777,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 555924,142 ops/s
[info]                  ·gc.alloc.rate:                   1501,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              4248,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3839,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   551249,986 ±(99.9%) 47224,230 ops/s [Average]
[info]   (min, avg, max) = (529361,087, 551249,986, 557546,488), stdev = 12263,983
[info]   CI (99.9%): [504025,755, 598474,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1488,440 ±(99.9%) 127,565 MB/sec [Average]
[info]   (min, avg, max) = (1429,311, 1488,440, 1505,448), stdev = 33,128
[info]   CI (99.9%): [1360,875, 1616,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4248,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4248,001, 4248,001, 4248,001), stdev = 0,001
[info]   CI (99.9%): [4248,001, 4248,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1484,986 ±(99.9%) 703,357 MB/sec [Average]
[info]   (min, avg, max) = (1347,080, 1484,986, 1692,952), stdev = 182,660
[info]   CI (99.9%): [781,629, 2188,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4235,407 ±(99.9%) 1850,366 B/op [Average]
[info]   (min, avg, max) = (3812,575, 4235,407, 4777,092), stdev = 480,534
[info]   CI (99.9%): [2385,041, 6085,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,202 ±(99.9%) 0,342 B/op [Average]
[info]   (min, avg, max) = (0,118, 0,202, 0,295), stdev = 0,089
[info]   CI (99.9%): [≈ 0, 0,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter
[info] # Run progress: 74,63% complete, ETA 00:08:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2956211,864 ops/s
[info] # Warmup Iteration   2: 3264899,519 ops/s
[info] # Warmup Iteration   3: 3302071,532 ops/s
[info] # Warmup Iteration   4: 3299914,781 ops/s
[info] # Warmup Iteration   5: 3280238,826 ops/s
[info] Iteration   1: 3304868,556 ops/s
[info]                  ·gc.alloc.rate:                   621,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3298750,358 ops/s
[info]                  ·gc.alloc.rate:                   620,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3301093,031 ops/s
[info]                  ·gc.alloc.rate:                   621,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     317,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3278554,564 ops/s
[info]                  ·gc.alloc.rate:                   616,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     320,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3294889,514 ops/s
[info]                  ·gc.alloc.rate:               619,876 MB/sec
[info]                  ·gc.alloc.rate.norm:          296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159,735 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter":
[info]   3295631,205 ±(99.9%) 39318,595 ops/s [Average]
[info]   (min, avg, max) = (3278554,564, 3295631,205, 3304868,556), stdev = 10210,914
[info]   CI (99.9%): [3256312,610, 3334949,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   620,042 ±(99.9%) 7,394 MB/sec [Average]
[info]   (min, avg, max) = (616,839, 620,042, 621,788), stdev = 1,920
[info]   CI (99.9%): [612,648, 627,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (296,000, 296,000, 296,000), stdev = 0,001
[info]   CI (99.9%): [296,000, 296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   599,860 ±(99.9%) 571,192 MB/sec [Average]
[info]   (min, avg, max) = (334,513, 599,860, 667,696), stdev = 148,337
[info]   CI (99.9%): [28,668, 1171,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   286,361 ±(99.9%) 272,627 B/op [Average]
[info]   (min, avg, max) = (159,735, 286,361, 320,405), stdev = 70,800
[info]   CI (99.9%): [13,733, 558,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,030), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay
[info] # Run progress: 75,37% complete, ETA 00:08:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163463,864 ops/s
[info] # Warmup Iteration   2: 381184,817 ops/s
[info] # Warmup Iteration   3: 396318,778 ops/s
[info] # Warmup Iteration   4: 396244,696 ops/s
[info] # Warmup Iteration   5: 395978,945 ops/s
[info] Iteration   1: 396666,495 ops/s
[info]                  ·gc.alloc.rate:                   1534,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5278,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 395290,482 ops/s
[info]                  ·gc.alloc.rate:                   1529,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6662,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,580 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 393294,570 ops/s
[info]                  ·gc.alloc.rate:                   1521,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5384,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 396382,198 ops/s
[info]                  ·gc.alloc.rate:                   1533,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6699,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,413 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 396630,340 ops/s
[info]                  ·gc.alloc.rate:                   1534,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              6088,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5371,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay":
[info]   395652,817 ±(99.9%) 5515,874 ops/s [Average]
[info]   (min, avg, max) = (393294,570, 395652,817, 396666,495), stdev = 1432,455
[info]   CI (99.9%): [390136,943, 401168,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate":
[info]   1531,027 ±(99.9%) 21,364 MB/sec [Average]
[info]   (min, avg, max) = (1521,884, 1531,027, 1534,932), stdev = 5,548
[info]   CI (99.9%): [1509,663, 1552,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   6088,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6088,001, 6088,001, 6088,001), stdev = 0,001
[info]   CI (99.9%): [6088,001, 6088,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1478,529 ±(99.9%) 712,464 MB/sec [Average]
[info]   (min, avg, max) = (1330,713, 1478,529, 1687,936), stdev = 185,025
[info]   CI (99.9%): [766,065, 2190,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   5879,048 ±(99.9%) 2823,238 B/op [Average]
[info]   (min, avg, max) = (5278,005, 5879,048, 6699,363), stdev = 733,186
[info]   CI (99.9%): [3055,810, 8702,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,079, 0,146), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,315 ±(99.9%) 0,762 B/op [Average]
[info]   (min, avg, max) = (0,083, 0,315, 0,580), stdev = 0,198
[info]   CI (99.9%): [≈ 0, 1,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlay:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 76,12% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346201,207 ops/s
[info] # Warmup Iteration   2: 799144,657 ops/s
[info] # Warmup Iteration   3: 788587,217 ops/s
[info] # Warmup Iteration   4: 776955,422 ops/s
[info] # Warmup Iteration   5: 788516,227 ops/s
[info] Iteration   1: 801074,232 ops/s
[info]                  ·gc.alloc.rate:                   2382,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4652,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 795317,593 ops/s
[info]                  ·gc.alloc.rate:                   2365,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4699,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,288 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 803083,960 ops/s
[info]                  ·gc.alloc.rate:                   2388,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4660,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,245 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 798549,451 ops/s
[info]                  ·gc.alloc.rate:                   2375,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2382,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4694,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 798912,303 ops/s
[info]                  ·gc.alloc.rate:                   2376,475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4694,155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   799387,508 ±(99.9%) 11226,651 ops/s [Average]
[info]   (min, avg, max) = (795317,593, 799387,508, 803083,960), stdev = 2915,526
[info]   CI (99.9%): [788160,857, 810614,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2377,845 ±(99.9%) 33,346 MB/sec [Average]
[info]   (min, avg, max) = (2365,734, 2377,845, 2388,780), stdev = 8,660
[info]   CI (99.9%): [2344,499, 2411,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4680,001, 4680,001, 4680,001), stdev = 0,001
[info]   CI (99.9%): [4680,000, 4680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2377,972 ±(99.9%) 23,286 MB/sec [Average]
[info]   (min, avg, max) = (2368,854, 2377,972, 2383,662), stdev = 6,047
[info]   CI (99.9%): [2354,686, 2401,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4680,304 ±(99.9%) 84,780 B/op [Average]
[info]   (min, avg, max) = (4652,410, 4680,304, 4699,474), stdev = 22,017
[info]   CI (99.9%): [4595,524, 4765,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,146), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,180 ±(99.9%) 0,328 B/op [Average]
[info]   (min, avg, max) = (0,082, 0,180, 0,288), stdev = 0,085
[info]   CI (99.9%): [≈ 0, 0,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   21,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson
[info] # Run progress: 76,87% complete, ETA 00:08:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739347,666 ops/s
[info] # Warmup Iteration   2: 1630079,429 ops/s
[info] # Warmup Iteration   3: 1661140,820 ops/s
[info] # Warmup Iteration   4: 1665009,167 ops/s
[info] # Warmup Iteration   5: 1660309,087 ops/s
[info] Iteration   1: 1651162,663 ops/s
[info]                  ·gc.alloc.rate:                   1250,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1260,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1661804,697 ops/s
[info]                  ·gc.alloc.rate:                   1259,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1261,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1663976,621 ops/s
[info]                  ·gc.alloc.rate:                   1260,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949,512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 1650504,673 ops/s
[info]                  ·gc.alloc.rate:                   1250,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1281,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1666522,737 ops/s
[info]                  ·gc.alloc.rate:                   1262,628 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1273,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson":
[info]   1658794,278 ±(99.9%) 28725,873 ops/s [Average]
[info]   (min, avg, max) = (1650504,673, 1658794,278, 1666522,737), stdev = 7460,018
[info]   CI (99.9%): [1630068,405, 1687520,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate":
[info]   1256,772 ±(99.9%) 21,744 MB/sec [Average]
[info]   (min, avg, max) = (1250,501, 1256,772, 1262,628), stdev = 5,647
[info]   CI (99.9%): [1235,028, 1278,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   1192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1192,000, 1192,000, 1192,000), stdev = 0,001
[info]   CI (99.9%): [1192,000, 1192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   1270,473 ±(99.9%) 574,412 MB/sec [Average]
[info]   (min, avg, max) = (1004,218, 1270,473, 1348,687), stdev = 149,173
[info]   CI (99.9%): [696,061, 1844,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1205,197 ±(99.9%) 551,365 B/op [Average]
[info]   (min, avg, max) = (949,512, 1205,197, 1281,146), stdev = 143,188
[info]   CI (99.9%): [653,832, 1756,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,055 ±(99.9%) 0,063 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,055, 0,079), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJackson:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter
[info] # Run progress: 77,61% complete, ETA 00:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5733206,642 ops/s
[info] # Warmup Iteration   2: 6167719,446 ops/s
[info] # Warmup Iteration   3: 6262717,274 ops/s
[info] # Warmup Iteration   4: 6252005,099 ops/s
[info] # Warmup Iteration   5: 6292851,261 ops/s
[info] Iteration   1: 6261750,755 ops/s
[info]                  ·gc.alloc.rate:                   191,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6261152,264 ops/s
[info]                  ·gc.alloc.rate:               191,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64,296 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6245245,596 ops/s
[info]                  ·gc.alloc.rate:                   190,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6226105,683 ops/s
[info]                  ·gc.alloc.rate:      189,955 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6217475,983 ops/s
[info]                  ·gc.alloc.rate:                   189,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,364 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter":
[info]   6242346,056 ±(99.9%) 77514,079 ops/s [Average]
[info]   (min, avg, max) = (6217475,983, 6242346,056, 6261750,755), stdev = 20130,160
[info]   CI (99.9%): [6164831,978, 6319860,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate":
[info]   190,450 ±(99.9%) 2,375 MB/sec [Average]
[info]   (min, avg, max) = (189,685, 190,450, 191,045), stdev = 0,617
[info]   CI (99.9%): [188,074, 192,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   220,698 ±(99.9%) 493,414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220,698, 335,828), stdev = 128,138
[info]   CI (99.9%): [≈ 0, 714,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   55,607 ±(99.9%) 124,543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55,607, 84,982), stdev = 32,343
[info]   CI (99.9%): [≈ 0, 180,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,297 ±(99.9%) 2,458 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,297, 1,439), stdev = 0,638
[info]   CI (99.9%): [≈ 0, 2,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,075 ±(99.9%) 0,622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,364), stdev = 0,162
[info]   CI (99.9%): [≈ 0, 0,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay
[info] # Run progress: 78,36% complete, ETA 00:07:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75449,550 ops/s
[info] # Warmup Iteration   2: 260767,736 ops/s
[info] # Warmup Iteration   3: 265881,652 ops/s
[info] # Warmup Iteration   4: 264795,249 ops/s
[info] # Warmup Iteration   5: 263537,519 ops/s
[info] Iteration   1: 266232,592 ops/s
[info]                  ·gc.alloc.rate:                   1832,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9875,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,615 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 263263,733 ops/s
[info]                  ·gc.alloc.rate:                   1812,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12066,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,747 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 265755,474 ops/s
[info]                  ·gc.alloc.rate:                   1829,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689,255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10000,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,616 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 266209,291 ops/s
[info]                  ·gc.alloc.rate:                   1832,613 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10014,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,492 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 263343,179 ops/s
[info]                  ·gc.alloc.rate:                   1813,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12174,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,249 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay":
[info]   264960,854 ±(99.9%) 5872,840 ops/s [Average]
[info]   (min, avg, max) = (263263,733, 264960,854, 266232,592), stdev = 1525,158
[info]   CI (99.9%): [259088,014, 270833,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate":
[info]   1824,199 ±(99.9%) 40,280 MB/sec [Average]
[info]   (min, avg, max) = (1812,577, 1824,199, 1832,989), stdev = 10,461
[info]   CI (99.9%): [1783,920, 1864,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   10832,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10832,002, 10832,002, 10832,002), stdev = 0,001
[info]   CI (99.9%): [10832,001, 10832,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1822,328 ±(99.9%) 725,596 MB/sec [Average]
[info]   (min, avg, max) = (1671,194, 1822,328, 2037,712), stdev = 188,435
[info]   CI (99.9%): [1096,733, 2547,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   10826,281 ±(99.9%) 4555,222 B/op [Average]
[info]   (min, avg, max) = (9875,881, 10826,281, 12174,089), stdev = 1182,977
[info]   CI (99.9%): [6271,059, 15381,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,544 ±(99.9%) 0,723 B/op [Average]
[info]   (min, avg, max) = (0,249, 0,544, 0,747), stdev = 0,188
[info]   CI (99.9%): [≈ 0, 1,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 9,000), stdev = 2,168
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 79,10% complete, ETA 00:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 615243,891 ops/s
[info] # Warmup Iteration   2: 1011024,963 ops/s
[info] # Warmup Iteration   3: 1043668,068 ops/s
[info] # Warmup Iteration   4: 1043813,048 ops/s
[info] # Warmup Iteration   5: 1045379,250 ops/s
[info] Iteration   1: 1044032,614 ops/s
[info]                  ·gc.alloc.rate:                   1836,863 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3044,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1037288,363 ops/s
[info]                  ·gc.alloc.rate:                   1825,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2564,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1046891,211 ops/s
[info]                  ·gc.alloc.rate:                   1841,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3056,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,188 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1045125,519 ops/s
[info]                  ·gc.alloc.rate:                   1838,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2556,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 1049025,471 ops/s
[info]                  ·gc.alloc.rate:                   1845,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              2768,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1699,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2548,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1044472,636 ±(99.9%) 17092,203 ops/s [Average]
[info]   (min, avg, max) = (1037288,363, 1044472,636, 1049025,471), stdev = 4438,791
[info]   CI (99.9%): [1027380,432, 1061564,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1837,657 ±(99.9%) 30,052 MB/sec [Average]
[info]   (min, avg, max) = (1825,054, 1837,657, 1845,735), stdev = 7,804
[info]   CI (99.9%): [1807,605, 1867,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2768,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2768,000, 2768,000, 2768,000), stdev = 0,001
[info]   CI (99.9%): [2768,000, 2768,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1828,567 ±(99.9%) 698,074 MB/sec [Average]
[info]   (min, avg, max) = (1690,756, 1828,567, 2033,715), stdev = 181,288
[info]   CI (99.9%): [1130,493, 2526,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2754,140 ±(99.9%) 1041,909 B/op [Average]
[info]   (min, avg, max) = (2548,534, 2754,140, 3056,323), stdev = 270,580
[info]   CI (99.9%): [1712,231, 3796,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,125), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,201 B/op [Average]
[info]   (min, avg, max) = (0,063, 0,138, 0,188), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson
[info] # Run progress: 79,85% complete, ETA 00:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1293773,114 ops/s
[info] # Warmup Iteration   2: 2716997,187 ops/s
[info] # Warmup Iteration   3: 2740633,009 ops/s
[info] # Warmup Iteration   4: 2741857,735 ops/s
[info] # Warmup Iteration   5: 2737082,920 ops/s
[info] Iteration   1: 2748859,382 ops/s
[info]                  ·gc.alloc.rate:                   1216,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     568,074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 2731824,300 ops/s
[info]                  ·gc.alloc.rate:                   1208,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 2757092,770 ops/s
[info]                  ·gc.alloc.rate:                   1219,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     763,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2754080,715 ops/s
[info]                  ·gc.alloc.rate:                   1218,380 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     575,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2752552,368 ops/s
[info]                  ·gc.alloc.rate:                   1217,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson":
[info]   2748881,907 ±(99.9%) 38452,523 ops/s [Average]
[info]   (min, avg, max) = (2731824,300, 2748881,907, 2757092,770), stdev = 9985,998
[info]   CI (99.9%): [2710429,384, 2787334,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate":
[info]   1216,077 ±(99.9%) 17,044 MB/sec [Average]
[info]   (min, avg, max) = (1208,513, 1216,077, 1219,676), stdev = 4,426
[info]   CI (99.9%): [1199,033, 1233,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   696,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (696,000, 696,000, 696,000), stdev = 0,001
[info]   CI (99.9%): [696,000, 696,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   1203,205 ±(99.9%) 714,830 MB/sec [Average]
[info]   (min, avg, max) = (992,529, 1203,205, 1347,511), stdev = 185,639
[info]   CI (99.9%): [488,375, 1918,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   688,705 ±(99.9%) 411,111 B/op [Average]
[info]   (min, avg, max) = (568,074, 688,705, 770,148), stdev = 106,764
[info]   CI (99.9%): [277,594, 1099,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,039 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,038, 0,048), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJackson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter
[info] # Run progress: 80,60% complete, ETA 00:06:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5364323,296 ops/s
[info] # Warmup Iteration   2: 6978701,851 ops/s
[info] # Warmup Iteration   3: 7174708,364 ops/s
[info] # Warmup Iteration   4: 7207586,158 ops/s
[info] # Warmup Iteration   5: 7219576,176 ops/s
[info] Iteration   1: 7223874,616 ops/s
[info]                  ·gc.alloc.rate:                   587,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7201034,349 ops/s
[info]                  ·gc.alloc.rate:                   585,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7189040,924 ops/s
[info]                  ·gc.alloc.rate:                   584,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 7206289,127 ops/s
[info]                  ·gc.alloc.rate:               586,282 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72,888 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 7219392,088 ops/s
[info]                  ·gc.alloc.rate:                   587,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter":
[info]   7207926,221 ±(99.9%) 54205,587 ops/s [Average]
[info]   (min, avg, max) = (7189040,924, 7207926,221, 7223874,616), stdev = 14077,019
[info]   CI (99.9%): [7153720,634, 7262131,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   586,417 ±(99.9%) 4,346 MB/sec [Average]
[info]   (min, avg, max) = (584,901, 586,417, 587,688), stdev = 1,129
[info]   CI (99.9%): [582,071, 590,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   600,396 ±(99.9%) 573,768 MB/sec [Average]
[info]   (min, avg, max) = (333,851, 600,396, 668,366), stdev = 149,006
[info]   CI (99.9%): [26,628, 1174,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   131,048 ±(99.9%) 125,200 B/op [Average]
[info]   (min, avg, max) = (72,888, 131,048, 145,977), stdev = 32,514
[info]   CI (99.9%): [5,848, 256,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,023), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc
[info] # Run progress: 81,34% complete, ETA 00:06:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5906930,227 ops/s
[info] # Warmup Iteration   2: 7817165,120 ops/s
[info] # Warmup Iteration   3: 7977761,227 ops/s
[info] # Warmup Iteration   4: 7950126,385 ops/s
[info] # Warmup Iteration   5: 7928874,909 ops/s
[info] Iteration   1: 7907908,032 ops/s
[info]                  ·gc.alloc.rate:                   241,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 7926273,986 ops/s
[info]                  ·gc.alloc.rate:               241,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255,883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50,791 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 7911916,823 ops/s
[info]                  ·gc.alloc.rate:                   241,398 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1,527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,304 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7893988,947 ops/s
[info]                  ·gc.alloc.rate:      240,833 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7894859,550 ops/s
[info]                  ·gc.alloc.rate:                   240,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc":
[info]   7906989,468 ±(99.9%) 51415,963 ops/s [Average]
[info]   (min, avg, max) = (7893988,947, 7906989,468, 7926273,986), stdev = 13352,562
[info]   CI (99.9%): [7855573,504, 7958405,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   241,234 ±(99.9%) 1,586 MB/sec [Average]
[info]   (min, avg, max) = (240,833, 241,234, 241,824), stdev = 0,412
[info]   CI (99.9%): [239,648, 242,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space":
[info]   235,761 ±(99.9%) 529,050 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 235,761, 333,531), stdev = 137,393
[info]   CI (99.9%): [≈ 0, 764,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   46,897 ±(99.9%) 105,291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46,897, 66,465), stdev = 27,344
[info]   CI (99.9%): [≈ 0, 152,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,327 ±(99.9%) 2,585 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,327, 1,527), stdev = 0,671
[info]   CI (99.9%): [≈ 0, 2,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,065 ±(99.9%) 0,514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,065, 0,304), stdev = 0,133
[info]   CI (99.9%): [≈ 0, 0,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay
[info] # Run progress: 82,09% complete, ETA 00:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99948,349 ops/s
[info] # Warmup Iteration   2: 347337,637 ops/s
[info] # Warmup Iteration   3: 347279,607 ops/s
[info] # Warmup Iteration   4: 345899,546 ops/s
[info] # Warmup Iteration   5: 347342,756 ops/s
[info] Iteration   1: 343849,960 ops/s
[info]                  ·gc.alloc.rate:                   1769,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9174,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,381 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         10,000 ms
[info] Iteration   2: 345449,416 ops/s
[info]                  ·gc.alloc.rate:                   1777,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7659,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,854 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 345227,066 ops/s
[info]                  ·gc.alloc.rate:                   1776,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7695,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,380 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 346907,027 ops/s
[info]                  ·gc.alloc.rate:                   1785,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9220,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 345412,933 ops/s
[info]                  ·gc.alloc.rate:                   1777,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7730,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,190 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay":
[info]   345369,280 ±(99.9%) 4174,687 ops/s [Average]
[info]   (min, avg, max) = (343849,960, 345369,280, 346907,027), stdev = 1084,153
[info]   CI (99.9%): [341194,594, 349543,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate":
[info]   1777,244 ±(99.9%) 21,460 MB/sec [Average]
[info]   (min, avg, max) = (1769,416, 1777,244, 1785,127), stdev = 5,573
[info]   CI (99.9%): [1755,784, 1798,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm":
[info]   8096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8096,001, 8096,001, 8096,001), stdev = 0,001
[info]   CI (99.9%): [8096,001, 8096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space":
[info]   1821,187 ±(99.9%) 697,141 MB/sec [Average]
[info]   (min, avg, max) = (1681,895, 1821,187, 2033,088), stdev = 181,045
[info]   CI (99.9%): [1124,046, 2518,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm":
[info]   8296,132 ±(99.9%) 3170,961 B/op [Average]
[info]   (min, avg, max) = (7659,798, 8296,132, 9220,569), stdev = 823,488
[info]   CI (99.9%): [5125,171, 11467,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,230 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,187), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,399 ±(99.9%) 1,046 B/op [Average]
[info]   (min, avg, max) = (0,189, 0,399, 0,854), stdev = 0,272
[info]   CI (99.9%): [≈ 0, 1,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlay:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 10,000), stdev = 2,683
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce
[info] # Run progress: 82,84% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356703,202 ops/s
[info] # Warmup Iteration   2: 468997,585 ops/s
[info] # Warmup Iteration   3: 469271,219 ops/s
[info] # Warmup Iteration   4: 467317,000 ops/s
[info] # Warmup Iteration   5: 462852,749 ops/s
[info] Iteration   1: 469985,165 ops/s
[info]                  ·gc.alloc.rate:                   1832,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6774,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,279 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 468600,596 ops/s
[info]                  ·gc.alloc.rate:                   1827,626 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5680,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,350 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 468693,480 ops/s
[info]                  ·gc.alloc.rate:                   1827,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5693,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,280 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 468547,248 ops/s
[info]                  ·gc.alloc.rate:                   1827,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6845,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,280 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 463543,942 ops/s
[info]                  ·gc.alloc.rate:                   1807,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              6136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1700,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5771,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce":
[info]   467874,086 ±(99.9%) 9599,457 ops/s [Average]
[info]   (min, avg, max) = (463543,942, 467874,086, 469985,165), stdev = 2492,949
[info]   CI (99.9%): [458274,629, 477473,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate":
[info]   1824,726 ±(99.9%) 37,309 MB/sec [Average]
[info]   (min, avg, max) = (1807,895, 1824,726, 1832,927), stdev = 9,689
[info]   CI (99.9%): [1787,417, 1862,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm":
[info]   6136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6136,001, 6136,001, 6136,001), stdev = 0,001
[info]   CI (99.9%): [6136,001, 6136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1830,220 ±(99.9%) 706,897 MB/sec [Average]
[info]   (min, avg, max) = (1691,894, 1830,220, 2038,666), stdev = 183,579
[info]   CI (99.9%): [1123,324, 2537,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6153,328 ±(99.9%) 2315,230 B/op [Average]
[info]   (min, avg, max) = (5680,301, 6153,328, 6845,753), stdev = 601,258
[info]   CI (99.9%): [3838,098, 8468,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,266 ±(99.9%) 0,292 B/op [Average]
[info]   (min, avg, max) = (0,141, 0,266, 0,350), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 5,000), stdev = 0,837
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson
[info] # Run progress: 83,58% complete, ETA 00:05:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 585693,805 ops/s
[info] # Warmup Iteration   2: 1085074,257 ops/s
[info] # Warmup Iteration   3: 1059061,204 ops/s
[info] # Warmup Iteration   4: 1060854,347 ops/s
[info] # Warmup Iteration   5: 1088393,119 ops/s
[info] Iteration   1: 1063784,244 ops/s
[info]                  ·gc.alloc.rate:                   2228,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3494,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1056340,232 ops/s
[info]                  ·gc.alloc.rate:                   2213,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3029,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1082036,490 ops/s
[info]                  ·gc.alloc.rate:                   2266,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3457,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1073073,143 ops/s
[info]                  ·gc.alloc.rate:                   2248,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2990,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1086012,359 ops/s
[info]                  ·gc.alloc.rate:                   2275,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              3296,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3453,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson":
[info]   1072249,294 ±(99.9%) 47577,087 ops/s [Average]
[info]   (min, avg, max) = (1056340,232, 1072249,294, 1086012,359), stdev = 12355,618
[info]   CI (99.9%): [1024672,207, 1119826,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate":
[info]   2246,379 ±(99.9%) 99,449 MB/sec [Average]
[info]   (min, avg, max) = (2213,038, 2246,379, 2275,174), stdev = 25,827
[info]   CI (99.9%): [2146,930, 2345,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm":
[info]   3296,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3296,000, 3296,000, 3296,000), stdev = 0,001
[info]   CI (99.9%): [3296,000, 3296,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   2239,577 ±(99.9%) 713,528 MB/sec [Average]
[info]   (min, avg, max) = (2033,824, 2239,577, 2383,588), stdev = 185,301
[info]   CI (99.9%): [1526,049, 2953,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   3284,887 ±(99.9%) 970,368 B/op [Average]
[info]   (min, avg, max) = (2990,541, 3284,887, 3494,727), stdev = 252,001
[info]   CI (99.9%): [2314,520, 4255,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0,096 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,096, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,141 ±(99.9%) 0,181 B/op [Average]
[info]   (min, avg, max) = (0,060, 0,141, 0,185), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.count":
[info]   33,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,600, 7,000), stdev = 0,548
[info]   CI (99.9%): [33,000, 33,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJackson:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter
[info] # Run progress: 84,33% complete, ETA 00:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1255859,579 ops/s
[info] # Warmup Iteration   2: 1278298,857 ops/s
[info] # Warmup Iteration   3: 1319438,260 ops/s
[info] # Warmup Iteration   4: 1315820,832 ops/s
[info] # Warmup Iteration   5: 1284905,524 ops/s
[info] Iteration   1: 1262259,734 ops/s
[info]                  ·gc.alloc.rate:                   2124,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2959,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1252714,824 ops/s
[info]                  ·gc.alloc.rate:                   2108,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2561,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,235 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1261979,200 ops/s
[info]                  ·gc.alloc.rate:                   2124,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2543,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 1290666,610 ops/s
[info]                  ·gc.alloc.rate:                   2172,514 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2043,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2490,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   5: 1306296,094 ops/s
[info]                  ·gc.alloc.rate:                   2198,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              2648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2383,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2870,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter":
[info]   1274783,292 ±(99.9%) 87239,353 ops/s [Average]
[info]   (min, avg, max) = (1252714,824, 1274783,292, 1306296,094), stdev = 22655,783
[info]   CI (99.9%): [1187543,939, 1362022,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate":
[info]   2145,763 ±(99.9%) 146,158 MB/sec [Average]
[info]   (min, avg, max) = (2108,740, 2145,763, 2198,457), stdev = 37,957
[info]   CI (99.9%): [1999,605, 2291,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm":
[info]   2648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2648,000, 2648,000, 2648,000), stdev = 0,001
[info]   CI (99.9%): [2648,000, 2648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   2176,276 ±(99.9%) 713,382 MB/sec [Average]
[info]   (min, avg, max) = (2039,463, 2176,276, 2383,576), stdev = 185,263
[info]   CI (99.9%): [1462,894, 2889,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   2685,052 ±(99.9%) 824,231 B/op [Average]
[info]   (min, avg, max) = (2490,618, 2685,052, 2959,569), stdev = 214,050
[info]   CI (99.9%): [1860,822, 3509,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,108, 0,187), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,134 ±(99.9%) 0,245 B/op [Average]
[info]   (min, avg, max) = (0,075, 0,134, 0,235), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readAsciiJsoniter:·gc.time":
[info]   26,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 5,200, 6,000), stdev = 0,837
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce
[info] # Run progress: 85,07% complete, ETA 00:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1223691,727 ops/s
[info] # Warmup Iteration   2: 1658353,022 ops/s
[info] # Warmup Iteration   3: 1669929,252 ops/s
[info] # Warmup Iteration   4: 1653878,292 ops/s
[info] # Warmup Iteration   5: 1595519,301 ops/s
[info] Iteration   1: 1666857,963 ops/s
[info]                  ·gc.alloc.rate:                   2042,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1913,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 1665000,797 ops/s
[info]                  ·gc.alloc.rate:                   2040,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 1633351,232 ops/s
[info]                  ·gc.alloc.rate:                   2001,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1963,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 1631205,089 ops/s
[info]                  ·gc.alloc.rate:                   1999,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1967,392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   5: 1634559,865 ops/s
[info]                  ·gc.alloc.rate:                   2003,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              1928,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1702,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1638,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce":
[info]   1646194,989 ±(99.9%) 69569,217 ops/s [Average]
[info]   (min, avg, max) = (1631205,089, 1646194,989, 1666857,963), stdev = 18066,905
[info]   CI (99.9%): [1576625,772, 1715764,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate":
[info]   2017,402 ±(99.9%) 84,993 MB/sec [Average]
[info]   (min, avg, max) = (1999,014, 2017,402, 2042,608), stdev = 22,072
[info]   CI (99.9%): [1932,409, 2102,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1928,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1928,000, 1928,000, 1928,000), stdev = 0,001
[info]   CI (99.9%): [1928,000, 1928,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1968,513 ±(99.9%) 572,677 MB/sec [Average]
[info]   (min, avg, max) = (1702,606, 1968,513, 2039,856), stdev = 148,722
[info]   CI (99.9%): [1395,836, 2541,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1881,050 ±(99.9%) 530,011 B/op [Average]
[info]   (min, avg, max) = (1638,603, 1881,050, 1967,392), stdev = 137,642
[info]   CI (99.9%): [1351,039, 2411,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,104, 0,146), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,120 B/op [Average]
[info]   (min, avg, max) = (0,059, 0,100, 0,138), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson
[info] # Run progress: 85,82% complete, ETA 00:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 765130,164 ops/s
[info] # Warmup Iteration   2: 1370120,332 ops/s
[info] # Warmup Iteration   3: 1380674,769 ops/s
[info] # Warmup Iteration   4: 1385599,425 ops/s
[info] # Warmup Iteration   5: 1377976,689 ops/s
[info] Iteration   1: 1382644,432 ops/s
[info]                  ·gc.alloc.rate:                   857,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     748,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1376867,422 ops/s
[info]                  ·gc.alloc.rate:                   854,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1131,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,143 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1383005,024 ops/s
[info]                  ·gc.alloc.rate:                   857,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1132,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1377254,187 ops/s
[info]                  ·gc.alloc.rate:                   854,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     760,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1376531,667 ops/s
[info]                  ·gc.alloc.rate:                   853,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1145,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson":
[info]   1379260,546 ±(99.9%) 12576,803 ops/s [Average]
[info]   (min, avg, max) = (1376531,667, 1379260,546, 1383005,024), stdev = 3266,156
[info]   CI (99.9%): [1366683,744, 1391837,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate":
[info]   855,611 ±(99.9%) 7,825 MB/sec [Average]
[info]   (min, avg, max) = (853,920, 855,611, 857,937), stdev = 2,032
[info]   CI (99.9%): [847,786, 863,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   862,145 ±(99.9%) 704,260 MB/sec [Average]
[info]   (min, avg, max) = (658,054, 862,145, 1001,872), stdev = 182,894
[info]   CI (99.9%): [157,885, 1566,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   983,538 ±(99.9%) 805,051 B/op [Average]
[info]   (min, avg, max) = (748,799, 983,538, 1145,104), stdev = 209,069
[info]   CI (99.9%): [178,487, 1788,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,125), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,159 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,071, 0,143), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJackson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter
[info] # Run progress: 86,57% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2310620,185 ops/s
[info] # Warmup Iteration   2: 2366903,208 ops/s
[info] # Warmup Iteration   3: 2416965,675 ops/s
[info] # Warmup Iteration   4: 2405665,993 ops/s
[info] # Warmup Iteration   5: 2419261,865 ops/s
[info] Iteration   1: 2395621,619 ops/s
[info]                  ·gc.alloc.rate:                   389,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2421895,683 ops/s
[info]                  ·gc.alloc.rate:                   394,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335,235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2408318,187 ops/s
[info]                  ·gc.alloc.rate:               391,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218,957 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2419752,304 ops/s
[info]                  ·gc.alloc.rate:                   393,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2413995,000 ops/s
[info]                  ·gc.alloc.rate:               392,795 MB/sec
[info]                  ·gc.alloc.rate.norm:          256,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 218,442 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter":
[info]   2411916,559 ±(99.9%) 40558,775 ops/s [Average]
[info]   (min, avg, max) = (2395621,619, 2411916,559, 2421895,683), stdev = 10532,985
[info]   CI (99.9%): [2371357,784, 2452475,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate":
[info]   392,476 ±(99.9%) 6,584 MB/sec [Average]
[info]   (min, avg, max) = (389,842, 392,476, 394,118), stdev = 1,710
[info]   CI (99.9%): [385,892, 399,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   256,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (256,000, 256,000, 256,000), stdev = 0,001
[info]   CI (99.9%): [256,000, 256,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   402,363 ±(99.9%) 576,903 MB/sec [Average]
[info]   (min, avg, max) = (335,168, 402,363, 670,368), stdev = 149,820
[info]   CI (99.9%): [≈ 0, 979,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   262,312 ±(99.9%) 373,583 B/op [Average]
[info]   (min, avg, max) = (217,752, 262,312, 435,854), stdev = 97,018
[info]   CI (99.9%): [≈ 0, 635,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,068), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.readNonAsciiJsoniter:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce
[info] # Run progress: 87,31% complete, ETA 00:04:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218433,568 ops/s
[info] # Warmup Iteration   2: 303122,214 ops/s
[info] # Warmup Iteration   3: 301204,209 ops/s
[info] # Warmup Iteration   4: 304825,464 ops/s
[info] # Warmup Iteration   5: 305393,532 ops/s
[info] Iteration   1: 304368,749 ops/s
[info]                  ·gc.alloc.rate:                   1553,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8674,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 305029,335 ops/s
[info]                  ·gc.alloc.rate:                   1557,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6952,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,430 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 305392,731 ops/s
[info]                  ·gc.alloc.rate:                   1558,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8709,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 304917,220 ops/s
[info]                  ·gc.alloc.rate:                   1556,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8743,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,322 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 304733,609 ops/s
[info]                  ·gc.alloc.rate:                   1555,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              8032,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7011,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce":
[info]   304888,329 ±(99.9%) 1452,364 ops/s [Average]
[info]   (min, avg, max) = (304368,749, 304888,329, 305392,731), stdev = 377,174
[info]   CI (99.9%): [303435,965, 306340,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate":
[info]   1556,496 ±(99.9%) 7,365 MB/sec [Average]
[info]   (min, avg, max) = (1553,822, 1556,496, 1558,988), stdev = 1,913
[info]   CI (99.9%): [1549,131, 1563,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm":
[info]   8032,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8032,001, 8032,001, 8032,002), stdev = 0,001
[info]   CI (99.9%): [8032,001, 8032,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1553,857 ±(99.9%) 706,431 MB/sec [Average]
[info]   (min, avg, max) = (1348,074, 1553,857, 1694,574), stdev = 183,458
[info]   CI (99.9%): [847,427, 2260,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8018,391 ±(99.9%) 3645,120 B/op [Average]
[info]   (min, avg, max) = (6952,861, 8018,391, 8743,749), stdev = 946,626
[info]   CI (99.9%): [4373,270, 11663,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,344 ±(99.9%) 0,612 B/op [Average]
[info]   (min, avg, max) = (0,108, 0,344, 0,536), stdev = 0,159
[info]   CI (99.9%): [≈ 0, 0,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiCirce:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,000, 4,000), stdev = 1,000
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson
[info] # Run progress: 88,06% complete, ETA 00:04:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527086,853 ops/s
[info] # Warmup Iteration   2: 848569,529 ops/s
[info] # Warmup Iteration   3: 846087,719 ops/s
[info] # Warmup Iteration   4: 848621,823 ops/s
[info] # Warmup Iteration   5: 847317,758 ops/s
[info] Iteration   1: 821268,968 ops/s
[info]                  ·gc.alloc.rate:                   831,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1892,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 840853,068 ops/s
[info]                  ·gc.alloc.rate:                   850,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1236,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 842432,049 ops/s
[info]                  ·gc.alloc.rate:                   852,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1859,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 848721,816 ops/s
[info]                  ·gc.alloc.rate:                   858,813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1234,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 852937,669 ops/s
[info]                  ·gc.alloc.rate:                   863,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1848,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson":
[info]   841242,714 ±(99.9%) 46893,579 ops/s [Average]
[info]   (min, avg, max) = (821268,968, 841242,714, 852937,669), stdev = 12178,114
[info]   CI (99.9%): [794349,135, 888136,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate":
[info]   851,237 ±(99.9%) 47,460 MB/sec [Average]
[info]   (min, avg, max) = (831,006, 851,237, 863,043), stdev = 12,325
[info]   CI (99.9%): [803,777, 898,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,000, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   862,465 ±(99.9%) 699,516 MB/sec [Average]
[info]   (min, avg, max) = (661,037, 862,465, 1001,845), stdev = 181,662
[info]   CI (99.9%): [162,949, 1561,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   1614,249 ±(99.9%) 1331,998 B/op [Average]
[info]   (min, avg, max) = (1234,687, 1614,249, 1892,506), stdev = 345,916
[info]   CI (99.9%): [282,251, 2946,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,141 ±(99.9%) 0,274 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,141, 0,234), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJackson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter
[info] # Run progress: 88,81% complete, ETA 00:03:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 895818,468 ops/s
[info] # Warmup Iteration   2: 1082023,130 ops/s
[info] # Warmup Iteration   3: 1005492,140 ops/s
[info] # Warmup Iteration   4: 1007472,430 ops/s
[info] # Warmup Iteration   5: 999640,204 ops/s
[info] Iteration   1: 1003185,573 ops/s
[info]                  ·gc.alloc.rate:                   846,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 994845,689 ops/s
[info]                  ·gc.alloc.rate:                   839,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1586,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1008794,546 ops/s
[info]                  ·gc.alloc.rate:                   851,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1045,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1008531,929 ops/s
[info]                  ·gc.alloc.rate:                   851,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1571,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1002151,994 ops/s
[info]                  ·gc.alloc.rate:                   845,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1056,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter":
[info]   1003501,946 ±(99.9%) 21966,025 ops/s [Average]
[info]   (min, avg, max) = (994845,689, 1003501,946, 1008794,546), stdev = 5704,507
[info]   CI (99.9%): [981535,921, 1025467,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate":
[info]   847,034 ±(99.9%) 18,500 MB/sec [Average]
[info]   (min, avg, max) = (839,732, 847,034, 851,496), stdev = 4,804
[info]   CI (99.9%): [828,535, 865,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm":
[info]   1328,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1328,000, 1328,000, 1328,000), stdev = 0,001
[info]   CI (99.9%): [1328,000, 1328,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   804,277 ±(99.9%) 706,264 MB/sec [Average]
[info]   (min, avg, max) = (667,672, 804,277, 1007,173), stdev = 183,415
[info]   CI (99.9%): [98,013, 1510,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   1261,377 ±(99.9%) 1116,356 B/op [Average]
[info]   (min, avg, max) = (1045,455, 1261,377, 1586,502), stdev = 289,914
[info]   CI (99.9%): [145,021, 2377,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,105 ±(99.9%) 0,140 B/op [Average]
[info]   (min, avg, max) = (0,065, 0,105, 0,165), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniter:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc
[info] # Run progress: 89,55% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 901495,964 ops/s
[info] # Warmup Iteration   2: 1119369,332 ops/s
[info] # Warmup Iteration   3: 1241681,484 ops/s
[info] # Warmup Iteration   4: 1239811,352 ops/s
[info] # Warmup Iteration   5: 1241873,180 ops/s
[info] Iteration   1: 1231517,815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1240018,915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1238398,306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1234872,683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1239951,832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc":
[info]   1236951,910 ±(99.9%) 14194,035 ops/s [Average]
[info]   (min, avg, max) = (1231517,815, 1236951,910, 1240018,915), stdev = 3686,146
[info]   CI (99.9%): [1222757,875, 1251145,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay
[info] # Run progress: 90,30% complete, ETA 00:03:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 799727,435 ops/s
[info] # Warmup Iteration   2: 992393,144 ops/s
[info] # Warmup Iteration   3: 1008167,173 ops/s
[info] # Warmup Iteration   4: 987546,038 ops/s
[info] # Warmup Iteration   5: 1008540,270 ops/s
[info] Iteration   1: 1004875,622 ops/s
[info]                  ·gc.alloc.rate:                   1072,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2084,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1009367,227 ops/s
[info]                  ·gc.alloc.rate:                   1077,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,130 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 1012541,243 ops/s
[info]                  ·gc.alloc.rate:                   1081,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1562,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1011221,417 ops/s
[info]                  ·gc.alloc.rate:                   1079,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1569,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1010826,664 ops/s
[info]                  ·gc.alloc.rate:                   1079,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2099,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay":
[info]   1009766,434 ±(99.9%) 11393,619 ops/s [Average]
[info]   (min, avg, max) = (1004875,622, 1009766,434, 1012541,243), stdev = 2958,887
[info]   CI (99.9%): [998372,816, 1021160,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate":
[info]   1078,241 ±(99.9%) 12,194 MB/sec [Average]
[info]   (min, avg, max) = (1072,990, 1078,241, 1081,191), stdev = 3,167
[info]   CI (99.9%): [1066,047, 1090,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm":
[info]   1680,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1680,000, 1680,000, 1680,000), stdev = 0,001
[info]   CI (99.9%): [1680,000, 1680,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1139,494 ±(99.9%) 705,544 MB/sec [Average]
[info]   (min, avg, max) = (1002,564, 1139,494, 1348,788), stdev = 183,228
[info]   CI (99.9%): [433,949, 1845,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   1775,830 ±(99.9%) 1111,383 B/op [Average]
[info]   (min, avg, max) = (1562,647, 1775,830, 2099,309), stdev = 288,623
[info]   CI (99.9%): [664,447, 2887,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,097 ±(99.9%) 0,199 B/op [Average]
[info]   (min, avg, max) = (0,032, 0,097, 0,163), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeAsciiPlay:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce
[info] # Run progress: 91,04% complete, ETA 00:03:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1141725,568 ops/s
[info] # Warmup Iteration   2: 1587744,292 ops/s
[info] # Warmup Iteration   3: 1610372,933 ops/s
[info] # Warmup Iteration   4: 1604838,618 ops/s
[info] # Warmup Iteration   5: 1596577,808 ops/s
[info] Iteration   1: 1500746,979 ops/s
[info]                  ·gc.alloc.rate:                   976,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1047,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 1540667,580 ops/s
[info]                  ·gc.alloc.rate:                   1002,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1615123,588 ops/s
[info]                  ·gc.alloc.rate:                   1051,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     979,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1573188,135 ops/s
[info]                  ·gc.alloc.rate:                   1023,931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1008,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1612679,803 ops/s
[info]                  ·gc.alloc.rate:                   1049,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,081 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce":
[info]   1568481,217 ±(99.9%) 187782,626 ops/s [Average]
[info]   (min, avg, max) = (1500746,979, 1568481,217, 1615123,588), stdev = 48766,552
[info]   CI (99.9%): [1380698,591, 1756263,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate":
[info]   1020,871 ±(99.9%) 122,166 MB/sec [Average]
[info]   (min, avg, max) = (976,806, 1020,871, 1051,210), stdev = 31,726
[info]   CI (99.9%): [898,704, 1143,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm":
[info]   1024,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,000, 1024,000, 1024,000), stdev = 0,001
[info]   CI (99.9%): [1024,000, 1024,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space":
[info]   1005,134 ±(99.9%) 18,088 MB/sec [Average]
[info]   (min, avg, max) = (999,223, 1005,134, 1010,888), stdev = 4,697
[info]   CI (99.9%): [987,046, 1023,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1008,902 ±(99.9%) 106,699 B/op [Average]
[info]   (min, avg, max) = (979,488, 1008,902, 1047,500), stdev = 27,709
[info]   CI (99.9%): [902,203, 1115,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,104), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,104 B/op [Average]
[info]   (min, avg, max) = (0,042, 0,084, 0,109), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson
[info] # Run progress: 91,79% complete, ETA 00:02:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1937583,864 ops/s
[info] # Warmup Iteration   2: 3299439,644 ops/s
[info] # Warmup Iteration   3: 3338908,589 ops/s
[info] # Warmup Iteration   4: 3311532,203 ops/s
[info] # Warmup Iteration   5: 3340093,705 ops/s
[info] Iteration   1: 3343591,790 ops/s
[info]                  ·gc.alloc.rate:                   1377,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     626,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 3339259,195 ops/s
[info]                  ·gc.alloc.rate:                   1375,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     630,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 3340500,643 ops/s
[info]                  ·gc.alloc.rate:                   1375,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     633,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 3354434,077 ops/s
[info]                  ·gc.alloc.rate:                   1381,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     632,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 3335934,163 ops/s
[info]                  ·gc.alloc.rate:                   1373,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     637,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson":
[info]   3342743,973 ±(99.9%) 27291,195 ops/s [Average]
[info]   (min, avg, max) = (3335934,163, 3342743,973, 3354434,077), stdev = 7087,437
[info]   CI (99.9%): [3315452,778, 3370035,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate":
[info]   1376,791 ±(99.9%) 11,210 MB/sec [Average]
[info]   (min, avg, max) = (1373,996, 1376,791, 1381,590), stdev = 2,911
[info]   CI (99.9%): [1365,582, 1388,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space":
[info]   1343,515 ±(99.9%) 31,904 MB/sec [Average]
[info]   (min, avg, max) = (1332,061, 1343,515, 1352,740), stdev = 8,285
[info]   CI (99.9%): [1311,611, 1375,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm":
[info]   632,340 ±(99.9%) 15,701 B/op [Average]
[info]   (min, avg, max) = (626,779, 632,340, 637,975), stdev = 4,078
[info]   CI (99.9%): [616,639, 648,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,083, 0,100, 0,125), stdev = 0,017
[info]   CI (99.9%): [0,033, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,047 ±(99.9%) 0,032 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,047, 0,059), stdev = 0,008
[info]   CI (99.9%): [0,015, 0,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJackson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter
[info] # Run progress: 92,54% complete, ETA 00:02:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2904170,849 ops/s
[info] # Warmup Iteration   2: 3584519,844 ops/s
[info] # Warmup Iteration   3: 3643838,929 ops/s
[info] # Warmup Iteration   4: 3647268,250 ops/s
[info] # Warmup Iteration   5: 3650401,687 ops/s
[info] Iteration   1: 3590111,937 ops/s
[info]                  ·gc.alloc.rate:                   711,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3620939,190 ops/s
[info]                  ·gc.alloc.rate:                   718,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3638220,173 ops/s
[info]                  ·gc.alloc.rate:                   721,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3648509,285 ops/s
[info]                  ·gc.alloc.rate:                   723,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3629085,699 ops/s
[info]                  ·gc.alloc.rate:                   719,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     290,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter":
[info]   3625373,257 ±(99.9%) 85609,153 ops/s [Average]
[info]   (min, avg, max) = (3590111,937, 3625373,257, 3648509,285), stdev = 22232,425
[info]   CI (99.9%): [3539764,104, 3710982,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate":
[info]   718,967 ±(99.9%) 17,016 MB/sec [Average]
[info]   (min, avg, max) = (711,978, 718,967, 723,590), stdev = 4,419
[info]   CI (99.9%): [701,951, 735,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space":
[info]   735,150 ±(99.9%) 569,185 MB/sec [Average]
[info]   (min, avg, max) = (667,689, 735,150, 999,564), stdev = 147,815
[info]   CI (99.9%): [165,965, 1304,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   319,313 ±(99.9%) 255,552 B/op [Average]
[info]   (min, avg, max) = (288,796, 319,313, 438,024), stdev = 66,366
[info]   CI (99.9%): [63,761, 574,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,083, 0,125), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,066 B/op [Average]
[info]   (min, avg, max) = (0,018, 0,036, 0,055), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniter:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc
[info] # Run progress: 93,28% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3153439,292 ops/s
[info] # Warmup Iteration   2: 3846449,059 ops/s
[info] # Warmup Iteration   3: 3855800,110 ops/s
[info] # Warmup Iteration   4: 3805763,818 ops/s
[info] # Warmup Iteration   5: 3839031,994 ops/s
[info] Iteration   1: 3867595,216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3861626,970 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3862758,613 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3871271,050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3869321,171 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc":
[info]   3866514,604 ±(99.9%) 16069,779 ops/s [Average]
[info]   (min, avg, max) = (3861626,970, 3866514,604, 3871271,050), stdev = 4173,271
[info]   CI (99.9%): [3850444,824, 3882584,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay
[info] # Run progress: 94,03% complete, ETA 00:02:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2558897,196 ops/s
[info] # Warmup Iteration   2: 3267204,652 ops/s
[info] # Warmup Iteration   3: 3241828,783 ops/s
[info] # Warmup Iteration   4: 3249467,802 ops/s
[info] # Warmup Iteration   5: 3249479,900 ops/s
[info] Iteration   1: 3260861,148 ops/s
[info]                  ·gc.alloc.rate:                   1376,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 3244825,622 ops/s
[info]                  ·gc.alloc.rate:                   1369,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 3270289,586 ops/s
[info]                  ·gc.alloc.rate:                   1380,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 3274361,998 ops/s
[info]                  ·gc.alloc.rate:                   1381,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 3265290,395 ops/s
[info]                  ·gc.alloc.rate:                   1378,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay":
[info]   3263125,750 ±(99.9%) 44000,352 ops/s [Average]
[info]   (min, avg, max) = (3244825,622, 3263125,750, 3274361,998), stdev = 11426,752
[info]   CI (99.9%): [3219125,398, 3307126,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate":
[info]   1377,262 ±(99.9%) 18,358 MB/sec [Average]
[info]   (min, avg, max) = (1369,634, 1377,262, 1381,981), stdev = 4,768
[info]   CI (99.9%): [1358,904, 1395,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space":
[info]   1348,181 ±(99.9%) 24,859 MB/sec [Average]
[info]   (min, avg, max) = (1339,211, 1348,181, 1355,445), stdev = 6,456
[info]   CI (99.9%): [1323,322, 1373,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm":
[info]   649,981 ±(99.9%) 10,464 B/op [Average]
[info]   (min, avg, max) = (646,096, 649,981, 653,063), stdev = 2,717
[info]   CI (99.9%): [639,517, 660,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,017
[info]   CI (99.9%): [0,012, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,032 B/op [Average]
[info]   (min, avg, max) = (0,030, 0,038, 0,050), stdev = 0,008
[info]   CI (99.9%): [0,006, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringBenchmark.writeNonAsciiPlay:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 94,78% complete, ETA 00:01:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6777,527 ops/s
[info] # Warmup Iteration   2: 10802,209 ops/s
[info] # Warmup Iteration   3: 12312,013 ops/s
[info] # Warmup Iteration   4: 12285,988 ops/s
[info] # Warmup Iteration   5: 12246,089 ops/s
[info] Iteration   1: 12283,737 ops/s
[info]                  ·gc.alloc.rate:                   1741,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              223073,345 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257983,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,334 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   2: 12221,414 ops/s
[info]                  ·gc.alloc.rate:                   1733,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217091,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,124 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 12251,819 ops/s
[info]                  ·gc.alloc.rate:                   1737,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217244,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,882 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 12295,466 ops/s
[info]                  ·gc.alloc.rate:                   1743,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              223096,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216979,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,993 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 12309,214 ops/s
[info]                  ·gc.alloc.rate:                   1745,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              223082,546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1698,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217073,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,323 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12272,330 ±(99.9%) 136,670 ops/s [Average]
[info]   (min, avg, max) = (12221,414, 12272,330, 12309,214), stdev = 35,493
[info]   CI (99.9%): [12135,660, 12409,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1740,220 ±(99.9%) 19,123 MB/sec [Average]
[info]   (min, avg, max) = (1733,114, 1740,220, 1745,359), stdev = 4,966
[info]   CI (99.9%): [1721,097, 1759,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   223088,802 ±(99.9%) 40,166 B/op [Average]
[info]   (min, avg, max) = (223073,345, 223088,802, 223096,048), stdev = 10,431
[info]   CI (99.9%): [223048,636, 223128,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1757,329 ±(99.9%) 553,464 MB/sec [Average]
[info]   (min, avg, max) = (1686,470, 1757,329, 2014,321), stdev = 143,733
[info]   CI (99.9%): [1203,865, 2310,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   225274,446 ±(99.9%) 70410,009 B/op [Average]
[info]   (min, avg, max) = (216979,097, 225274,446, 257983,661), stdev = 18285,256
[info]   CI (99.9%): [154864,437, 295684,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,096 ±(99.9%) 0,216 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,096, 0,187), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12,331 ±(99.9%) 27,908 B/op [Average]
[info]   (min, avg, max) = (5,323, 12,331, 24,124), stdev = 7,248
[info]   CI (99.9%): [≈ 0, 40,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson
[info] # Run progress: 95,52% complete, ETA 00:01:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9099,038 ops/s
[info] # Warmup Iteration   2: 18074,201 ops/s
[info] # Warmup Iteration   3: 18180,489 ops/s
[info] # Warmup Iteration   4: 18349,966 ops/s
[info] # Warmup Iteration   5: 18266,108 ops/s
[info] Iteration   1: 18242,669 ops/s
[info]                  ·gc.alloc.rate:               288,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          24896,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22068,025 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 18212,100 ops/s
[info]                  ·gc.alloc.rate:                   288,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              24881,801 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27947,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 18295,384 ops/s
[info]                  ·gc.alloc.rate:                   289,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              24864,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27821,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,372 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18262,835 ops/s
[info]                  ·gc.alloc.rate:               288,640 MB/sec
[info]                  ·gc.alloc.rate.norm:          24864,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27841,857 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18280,996 ops/s
[info]                  ·gc.alloc.rate:      288,920 MB/sec
[info]                  ·gc.alloc.rate.norm: 24864,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson":
[info]   18258,797 ±(99.9%) 126,082 ops/s [Average]
[info]   (min, avg, max) = (18212,100, 18258,797, 18295,384), stdev = 32,743
[info]   CI (99.9%): [18132,715, 18384,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate":
[info]   288,686 ±(99.9%) 1,615 MB/sec [Average]
[info]   (min, avg, max) = (288,030, 288,686, 289,152), stdev = 0,419
[info]   CI (99.9%): [287,070, 290,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm":
[info]   24873,979 ±(99.9%) 55,952 B/op [Average]
[info]   (min, avg, max) = (24864,024, 24873,979, 24896,025), stdev = 14,531
[info]   CI (99.9%): [24818,027, 24929,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space":
[info]   245,233 ±(99.9%) 539,758 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 245,233, 323,549), stdev = 140,173
[info]   CI (99.9%): [≈ 0, 784,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm":
[info]   21135,752 ±(99.9%) 46513,898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21135,752, 27947,060), stdev = 12079,512
[info]   CI (99.9%): [≈ 0, 67649,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space":
[info]   0,573 ±(99.9%) 4,802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,573, 2,804), stdev = 1,247
[info]   CI (99.9%): [≈ 0, 5,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   49,513 ±(99.9%) 414,851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,513, 242,191), stdev = 107,736
[info]   CI (99.9%): [≈ 0, 464,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJackson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 3,000), stdev = 1,342
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter
[info] # Run progress: 96,27% complete, ETA 00:01:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22188,311 ops/s
[info] # Warmup Iteration   2: 29340,910 ops/s
[info] # Warmup Iteration   3: 41827,190 ops/s
[info] # Warmup Iteration   4: 41214,540 ops/s
[info] # Warmup Iteration   5: 42460,910 ops/s
[info] Iteration   1: 41354,619 ops/s
[info]                  ·gc.alloc.rate:               459,698 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12676,209 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 36864,452 ops/s
[info]                  ·gc.alloc.rate:                   409,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28382,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,666 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 43017,729 ops/s
[info]                  ·gc.alloc.rate:               478,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12161,571 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 43286,572 ops/s
[info]                  ·gc.alloc.rate:               481,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          17488,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12085,447 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 42776,119 ops/s
[info]                  ·gc.alloc.rate:                   475,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24484,093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,532 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter":
[info]   41459,898 ±(99.9%) 10300,962 ops/s [Average]
[info]   (min, avg, max) = (36864,452, 41459,898, 43286,572), stdev = 2675,127
[info]   CI (99.9%): [31158,937, 51760,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate":
[info]   460,846 ±(99.9%) 114,445 MB/sec [Average]
[info]   (min, avg, max) = (409,784, 460,846, 481,121), stdev = 29,721
[info]   CI (99.9%): [346,401, 575,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm":
[info]   17488,011 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (17488,010, 17488,011, 17488,013), stdev = 0,001
[info]   CI (99.9%): [17488,006, 17488,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space":
[info]   465,795 ±(99.9%) 701,544 MB/sec [Average]
[info]   (min, avg, max) = (332,489, 465,795, 665,668), stdev = 182,189
[info]   CI (99.9%): [≈ 0, 1167,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   17958,051 ±(99.9%) 30274,239 B/op [Average]
[info]   (min, avg, max) = (12085,447, 17958,051, 28382,936), stdev = 7862,124
[info]   CI (99.9%): [≈ 0, 48232,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,840 ±(99.9%) 4,689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,840, 2,666), stdev = 1,218
[info]   CI (99.9%): [≈ 0, 5,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniter:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay
[info] # Run progress: 97,01% complete, ETA 00:01:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1409,489 ops/s
[info] # Warmup Iteration   2: 3541,780 ops/s
[info] # Warmup Iteration   3: 3561,682 ops/s
[info] # Warmup Iteration   4: 3948,472 ops/s
[info] # Warmup Iteration   5: 3984,483 ops/s
[info] Iteration   1: 3987,500 ops/s
[info]                  ·gc.alloc.rate:                   1270,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              501096,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     524945,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,215 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   2: 4001,570 ops/s
[info]                  ·gc.alloc.rate:                   1274,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              501096,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     394492,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,186 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 3985,406 ops/s
[info]                  ·gc.alloc.rate:               1269,385 MB/sec
[info]                  ·gc.alloc.rate.norm:          501096,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 530338,489 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     5,000 ms
[info] Iteration   4: 3872,402 ops/s
[info]                  ·gc.alloc.rate:               1233,329 MB/sec
[info]                  ·gc.alloc.rate.norm:          501096,112 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 547977,750 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Iteration   5: 3993,856 ops/s
[info]                  ·gc.alloc.rate:               1272,118 MB/sec
[info]                  ·gc.alloc.rate.norm:          501096,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 532818,343 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     4,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay":
[info]   3968,147 ±(99.9%) 207,520 ops/s [Average]
[info]   (min, avg, max) = (3872,402, 3968,147, 4001,570), stdev = 53,892
[info]   CI (99.9%): [3760,627, 4175,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate":
[info]   1263,904 ±(99.9%) 66,271 MB/sec [Average]
[info]   (min, avg, max) = (1233,329, 1263,904, 1274,578), stdev = 17,210
[info]   CI (99.9%): [1197,634, 1330,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm":
[info]   501096,110 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (501096,108, 501096,110, 501096,116), stdev = 0,004
[info]   CI (99.9%): [501096,097, 501096,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space":
[info]   1275,763 ±(99.9%) 587,108 MB/sec [Average]
[info]   (min, avg, max) = (1003,424, 1275,763, 1352,650), stdev = 152,470
[info]   CI (99.9%): [688,655, 1862,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm":
[info]   506114,549 ±(99.9%) 242517,082 B/op [Average]
[info]   (min, avg, max) = (394492,994, 506114,549, 547977,750), stdev = 62980,916
[info]   CI (99.9%): [263597,467, 748631,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm":
[info]   3,280 ±(99.9%) 17,295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,280, 8,215), stdev = 4,491
[info]   CI (99.9%): [≈ 0, 20,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlay:·gc.time":
[info]   22,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson
[info] # Run progress: 97,76% complete, ETA 00:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37079,302 ops/s
[info] # Warmup Iteration   2: 65582,891 ops/s
[info] # Warmup Iteration   3: 66208,040 ops/s
[info] # Warmup Iteration   4: 66592,777 ops/s
[info] # Warmup Iteration   5: 63802,546 ops/s
[info] Iteration   1: 66349,923 ops/s
[info]                  ·gc.alloc.rate:               847,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,970 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15429,530 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 66505,649 ops/s
[info]                  ·gc.alloc.rate:                   849,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          979,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23172,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,956 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 66619,180 ops/s
[info]                  ·gc.alloc.rate:                   851,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23282,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,984 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 66471,678 ops/s
[info]                  ·gc.alloc.rate:                   849,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,947 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15629,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,986 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 66616,182 ops/s
[info]                  ·gc.alloc.rate:                   851,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23504,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,475 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson":
[info]   66512,522 ±(99.9%) 431,699 ops/s [Average]
[info]   (min, avg, max) = (66349,923, 66512,522, 66619,180), stdev = 112,111
[info]   CI (99.9%): [66080,823, 66944,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate":
[info]   849,738 ±(99.9%) 5,476 MB/sec [Average]
[info]   (min, avg, max) = (847,676, 849,738, 851,109), stdev = 1,422
[info]   CI (99.9%): [844,262, 855,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm":
[info]   20100,003 ±(99.9%) 0,254 B/op [Average]
[info]   (min, avg, max) = (20099,947, 20100,003, 20100,113), stdev = 0,066
[info]   CI (99.9%): [20099,749, 20100,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space":
[info]   854,319 ±(99.9%) 699,247 MB/sec [Average]
[info]   (min, avg, max) = (650,709, 854,319, 995,172), stdev = 181,592
[info]   CI (99.9%): [155,072, 1553,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm":
[info]   20203,537 ±(99.9%) 16438,669 B/op [Average]
[info]   (min, avg, max) = (15429,530, 20203,537, 23504,356), stdev = 4269,070
[info]   CI (99.9%): [3764,868, 36642,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,125), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,280 ±(99.9%) 4,156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,280, 2,956), stdev = 1,079
[info]   CI (99.9%): [≈ 0, 5,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJackson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter
[info] # Run progress: 98,51% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75826,549 ops/s
[info] # Warmup Iteration   2: 92703,007 ops/s
[info] # Warmup Iteration   3: 92340,225 ops/s
[info] # Warmup Iteration   4: 92558,444 ops/s
[info] # Warmup Iteration   5: 92525,296 ops/s
[info] Iteration   1: 92498,327 ops/s
[info]                  ·gc.alloc.rate:                   606,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11311,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 92709,180 ops/s
[info]                  ·gc.alloc.rate:                   608,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11282,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,766 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 92502,635 ops/s
[info]                  ·gc.alloc.rate:               606,775 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5666,692 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 92697,506 ops/s
[info]                  ·gc.alloc.rate:                   608,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11320,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 92368,216 ops/s
[info]                  ·gc.alloc.rate:                   605,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11378,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,064 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter":
[info]   92555,173 ±(99.9%) 561,064 ops/s [Average]
[info]   (min, avg, max) = (92368,216, 92555,173, 92709,180), stdev = 145,707
[info]   CI (99.9%): [91994,109, 93116,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate":
[info]   607,135 ±(99.9%) 3,788 MB/sec [Average]
[info]   (min, avg, max) = (605,859, 607,135, 608,208), stdev = 0,984
[info]   CI (99.9%): [603,346, 610,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm":
[info]   10320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10320,005, 10320,005, 10320,005), stdev = 0,001
[info]   CI (99.9%): [10320,004, 10320,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space":
[info]   599,635 ±(99.9%) 573,589 MB/sec [Average]
[info]   (min, avg, max) = (333,179, 599,635, 667,990), stdev = 148,959
[info]   CI (99.9%): [26,046, 1173,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm":
[info]   10191,900 ±(99.9%) 9741,777 B/op [Average]
[info]   (min, avg, max) = (5666,692, 10191,900, 11378,320), stdev = 2529,909
[info]   CI (99.9%): [450,123, 19933,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm":
[info]   0,991 ±(99.9%) 2,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,991, 1,766), stdev = 0,632
[info]   CI (99.9%): [≈ 0, 3,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniter:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.19
[info] # VM version: JDK 1.8.0_151, VM 25.151-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc
[info] # Run progress: 99,25% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83237,933 ops/s
[info] # Warmup Iteration   2: 102785,157 ops/s
[info] # Warmup Iteration   3: 98729,469 ops/s
[info] # Warmup Iteration   4: 102130,485 ops/s
[info] # Warmup Iteration   5: 101411,107 ops/s
[info] Iteration   1: 103036,571 ops/s
[info]                  ·gc.alloc.rate:      12,575 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 102609,478 ops/s
[info]                  ·gc.alloc.rate:      12,522 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 102717,617 ops/s
[info]                  ·gc.alloc.rate:      12,536 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 102520,643 ops/s
[info]                  ·gc.alloc.rate:      12,512 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 101092,093 ops/s
[info]                  ·gc.alloc.rate:      12,338 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc":
[info]   102395,280 ±(99.9%) 2904,014 ops/s [Average]
[info]   (min, avg, max) = (101092,093, 102395,280, 103036,571), stdev = 754,163
[info]   CI (99.9%): [99491,266, 105299,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate":
[info]   12,497 ±(99.9%) 0,353 MB/sec [Average]
[info]   (min, avg, max) = (12,338, 12,497, 12,575), stdev = 0,092
[info]   CI (99.9%): [12,143, 12,850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm":
[info]   192,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,004, 192,004, 192,004), stdev = 0,001
[info]   CI (99.9%): [192,004, 192,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:34:53
[info] Benchmark                                                                               Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                 thrpt    5    894648,124 ±   16542,367   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      2356,494 ±      43,614  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      4144,000 ±       0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      2378,005 ±      23,278  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4181,896 ±      79,079    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0,104 ±       0,080  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0,183 ±       0,142    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                       thrpt    5        35,000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                        thrpt    5        22,000                    ms
[info] AdtBenchmark.readJackson                                                               thrpt    5   1774524,998 ±   11976,842   ops/s
[info] AdtBenchmark.readJackson:·gc.alloc.rate                                                thrpt    5      1425,677 ±       9,590  MB/sec
[info] AdtBenchmark.readJackson:·gc.alloc.rate.norm                                           thrpt    5      1264,000 ±       0,001    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space                                       thrpt    5      1476,308 ±     703,959  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      1309,070 ±     631,410    B/op
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0,075 ±       0,217  MB/sec
[info] AdtBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0,066 ±       0,192    B/op
[info] AdtBenchmark.readJackson:·gc.count                                                     thrpt    5        22,000                counts
[info] AdtBenchmark.readJackson:·gc.time                                                      thrpt    5        18,000                    ms
[info] AdtBenchmark.readJsoniter                                                              thrpt    5   4296937,493 ±  181978,329   ops/s
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate                                               thrpt    5       284,035 ±      12,035  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.alloc.rate.norm                                          thrpt    5       104,000 ±       0,001    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                      thrpt    5       252,547 ±     559,649  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                 thrpt    5        92,711 ±     205,715    B/op
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,316 ±       2,340  MB/sec
[info] AdtBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,115 ±       0,854    B/op
[info] AdtBenchmark.readJsoniter:·gc.count                                                    thrpt    5         4,000                counts
[info] AdtBenchmark.readJsoniter:·gc.time                                                     thrpt    5         4,000                    ms
[info] AdtBenchmark.readPlay                                                                  thrpt    5    196633,528 ±    1826,838   ops/s
[info] AdtBenchmark.readPlay:·gc.alloc.rate                                                   thrpt    5      1655,734 ±      15,351  MB/sec
[info] AdtBenchmark.readPlay:·gc.alloc.rate.norm                                              thrpt    5     13248,002 ±       0,001    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space                                          thrpt    5      1615,733 ±     567,688  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                     thrpt    5     12929,218 ±    4599,812    B/op
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                      thrpt    5         0,083 ±       0,057  MB/sec
[info] AdtBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0,666 ±       0,452    B/op
[info] AdtBenchmark.readPlay:·gc.count                                                        thrpt    5        24,000                counts
[info] AdtBenchmark.readPlay:·gc.time                                                         thrpt    5        19,000                    ms
[info] AdtBenchmark.writeJackson                                                              thrpt    5   2307231,832 ±   57483,600   ops/s
[info] AdtBenchmark.writeJackson:·gc.alloc.rate                                               thrpt    5       891,650 ±      22,140  MB/sec
[info] AdtBenchmark.writeJackson:·gc.alloc.rate.norm                                          thrpt    5       608,000 ±       0,001    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                      thrpt    5       926,206 ±     577,070  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5       631,750 ±     397,813    B/op
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,054 ±       0,044  MB/sec
[info] AdtBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,037 ±       0,029    B/op
[info] AdtBenchmark.writeJackson:·gc.count                                                    thrpt    5        14,000                counts
[info] AdtBenchmark.writeJackson:·gc.time                                                     thrpt    5        11,000                    ms
[info] AdtBenchmark.writeJsoniter                                                             thrpt    5  18087990,052 ± 1226491,862   ops/s
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate                                              thrpt    5       919,750 ±      62,320  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.alloc.rate.norm                                         thrpt    5        80,000 ±       0,001    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5       939,041 ±     578,539  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5        81,707 ±      50,932    B/op
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,067 ±       0,105  MB/sec
[info] AdtBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,006 ±       0,009    B/op
[info] AdtBenchmark.writeJsoniter:·gc.count                                                   thrpt    5        14,000                counts
[info] AdtBenchmark.writeJsoniter:·gc.time                                                    thrpt    5         9,000                    ms
[info] AdtBenchmark.writePlay                                                                 thrpt    5    366446,092 ±    7945,185   ops/s
[info] AdtBenchmark.writePlay:·gc.alloc.rate                                                  thrpt    5      1134,770 ±      24,556  MB/sec
[info] AdtBenchmark.writePlay:·gc.alloc.rate.norm                                             thrpt    5      4872,001 ±       0,001    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space                                         thrpt    5      1131,231 ±     691,738  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4858,258 ±    3015,766    B/op
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0,079 ±       0,067  MB/sec
[info] AdtBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0,340 ±       0,289    B/op
[info] AdtBenchmark.writePlay:·gc.count                                                       thrpt    5        17,000                counts
[info] AdtBenchmark.writePlay:·gc.time                                                        thrpt    5        16,000                    ms
[info] AnyRefsBenchmark.readCirce                                                             thrpt    5   1862830,279 ±   14228,552   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2879,506 ±      22,026  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      2432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2858,164 ±     711,602  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2414,200 ±     617,648    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,117 ±       0,193  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,099 ±       0,163    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                   thrpt    5        42,000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                    thrpt    5        25,000                    ms
[info] AnyRefsBenchmark.readJackson                                                           thrpt    5   2873591,423 ±  189601,058   ops/s
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      2016,413 ±     132,948  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1104,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      2030,413 ±      36,688  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      1111,879 ±      61,627    B/op
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0,104 ±       0,188  MB/sec
[info] AnyRefsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,057 ±       0,101    B/op
[info] AnyRefsBenchmark.readJackson:·gc.count                                                 thrpt    5        30,000                counts
[info] AnyRefsBenchmark.readJackson:·gc.time                                                  thrpt    5        23,000                    ms
[info] AnyRefsBenchmark.readJsoniter                                                          thrpt    5  11948250,868 ±  214517,987   ops/s
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5      1518,865 ±      27,250  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       200,000 ±       0,001    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5      1558,037 ±     713,826  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       205,123 ±      92,535    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0,075 ±       0,091  MB/sec
[info] AnyRefsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,010 ±       0,012    B/op
[info] AnyRefsBenchmark.readJsoniter:·gc.count                                                thrpt    5        23,000                counts
[info] AnyRefsBenchmark.readJsoniter:·gc.time                                                 thrpt    5        13,000                    ms
[info] AnyRefsBenchmark.readPlay                                                              thrpt    5    716137,485 ±   25332,438   ops/s
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      1864,410 ±      65,962  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      4096,001 ±       0,001    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1823,625 ±     718,191  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      4009,611 ±    1721,715    B/op
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,075 ±       0,166  MB/sec
[info] AnyRefsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,165 ±       0,369    B/op
[info] AnyRefsBenchmark.readPlay:·gc.count                                                    thrpt    5        27,000                counts
[info] AnyRefsBenchmark.readPlay:·gc.time                                                     thrpt    5        21,000                    ms
[info] AnyRefsBenchmark.writeCirce                                                            thrpt    5   2091195,708 ±   38896,014   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2105,407 ±      39,044  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      1584,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2103,876 ±     578,613  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1583,291 ±     465,950    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0,100 ±       0,250  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0,075 ±       0,189    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                  thrpt    5        31,000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                   thrpt    5        20,000                    ms
[info] AnyRefsBenchmark.writeJackson                                                          thrpt    5   6606584,154 ±   32170,528   ops/s
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1814,120 ±       8,782  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       432,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1755,853 ±     586,670  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       418,115 ±     139,044    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0,079 ±       0,132  MB/sec
[info] AnyRefsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,019 ±       0,031    B/op
[info] AnyRefsBenchmark.writeJackson:·gc.count                                                thrpt    5        26,000                counts
[info] AnyRefsBenchmark.writeJackson:·gc.time                                                 thrpt    5        19,000                    ms
[info] AnyRefsBenchmark.writeJsoniter                                                         thrpt    5  23932065,635 ±  639893,205   ops/s
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       730,155 ±      19,534  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5        48,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       735,285 ±     571,878  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5        48,294 ±      36,225    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0,087 ±       0,132  MB/sec
[info] AnyRefsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,006 ±       0,009    B/op
[info] AnyRefsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        11,000                counts
[info] AnyRefsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         6,000                    ms
[info] AnyRefsBenchmark.writeJsoniterPrealloc                                                 thrpt    5  31452185,643 ±  407117,760   ops/s
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                             thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterPrealloc:·gc.count                                       thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlay                                                             thrpt    5   1267738,761 ±   19053,688   ops/s
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      1901,639 ±      28,561  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      2360,000 ±       0,001    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      1893,248 ±     727,667  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      2349,914 ±     917,690    B/op
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,104 ±       0,127  MB/sec
[info] AnyRefsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,129 ±       0,158    B/op
[info] AnyRefsBenchmark.writePlay:·gc.count                                                   thrpt    5        28,000                counts
[info] AnyRefsBenchmark.writePlay:·gc.time                                                    thrpt    5        23,000                    ms
[info] ArraysBenchmark.readCirce                                                              thrpt    5   1014531,922 ±   33149,946   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      3317,201 ±     107,861  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5144,000 ±       0,001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      3336,366 ±     592,470  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5172,502 ±     772,941    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,137 ±       0,146  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,213 ±       0,227    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                    thrpt    5        49,000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                     thrpt    5        37,000                    ms
[info] ArraysBenchmark.readJackson                                                            thrpt    5   1863516,018 ±   14964,544   ops/s
[info] ArraysBenchmark.readJackson:·gc.alloc.rate                                             thrpt    5      1753,026 ±      13,911  MB/sec
[info] ArraysBenchmark.readJackson:·gc.alloc.rate.norm                                        thrpt    5      1480,000 ±       0,001    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space                                    thrpt    5      1755,023 ±     569,633  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1481,809 ±     488,441    B/op
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space                                thrpt    5         0,083 ±       0,057  MB/sec
[info] ArraysBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0,070 ±       0,048    B/op
[info] ArraysBenchmark.readJackson:·gc.count                                                  thrpt    5        26,000                counts
[info] ArraysBenchmark.readJackson:·gc.time                                                   thrpt    5        21,000                    ms
[info] ArraysBenchmark.readJsoniter                                                           thrpt    5  10283748,526 ±  174217,166   ops/s
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate                                            thrpt    5      3085,178 ±      51,690  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.alloc.rate.norm                                       thrpt    5       472,000 ±       0,001    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                   thrpt    5      3064,064 ±       4,705  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                              thrpt    5       468,777 ±       7,863    B/op
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                               thrpt    5         0,133 ±       0,185  MB/sec
[info] ArraysBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,020 ±       0,029    B/op
[info] ArraysBenchmark.readJsoniter:·gc.count                                                 thrpt    5        45,000                counts
[info] ArraysBenchmark.readJsoniter:·gc.time                                                  thrpt    5        26,000                    ms
[info] ArraysBenchmark.readPlay                                                               thrpt    5    370107,361 ±    4987,098   ops/s
[info] ArraysBenchmark.readPlay:·gc.alloc.rate                                                thrpt    5      2260,230 ±      30,333  MB/sec
[info] ArraysBenchmark.readPlay:·gc.alloc.rate.norm                                           thrpt    5      9608,001 ±       0,001    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space                                       thrpt    5      2237,293 ±     705,733  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      9510,901 ±    3020,639    B/op
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                   thrpt    5         0,108 ±       0,174  MB/sec
[info] ArraysBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0,461 ±       0,745    B/op
[info] ArraysBenchmark.readPlay:·gc.count                                                     thrpt    5        33,000                counts
[info] ArraysBenchmark.readPlay:·gc.time                                                      thrpt    5        27,000                    ms
[info] ArraysBenchmark.writeCirce                                                             thrpt    5   1164400,740 ±   44128,017   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      2664,383 ±     100,983  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3600,000 ±       0,001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2653,132 ±     598,161  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      3583,560 ±     695,661    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,100 ±       0,208  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,135 ±       0,278    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                   thrpt    5        39,000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                    thrpt    5        28,000                    ms
[info] ArraysBenchmark.writeJackson                                                           thrpt    5   3848498,144 ±   37847,989   ops/s
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate                                            thrpt    5      2230,966 ±      21,954  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.alloc.rate.norm                                       thrpt    5       912,000 ±       0,001    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      2170,679 ±     718,188  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5       887,496 ±     301,430    B/op
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0,117 ±       0,217  MB/sec
[info] ArraysBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,048 ±       0,089    B/op
[info] ArraysBenchmark.writeJackson:·gc.count                                                 thrpt    5        32,000                counts
[info] ArraysBenchmark.writeJackson:·gc.time                                                  thrpt    5        28,000                    ms
[info] ArraysBenchmark.writeJsoniter                                                          thrpt    5  18710448,210 ±  157741,964   ops/s
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate                                           thrpt    5       856,284 ±       7,309  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.alloc.rate.norm                                      thrpt    5        72,000 ±       0,001    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       870,976 ±     700,448  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5        73,221 ±      58,576    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0,054 ±       0,122  MB/sec
[info] ArraysBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,005 ±       0,010    B/op
[info] ArraysBenchmark.writeJsoniter:·gc.count                                                thrpt    5        13,000                counts
[info] ArraysBenchmark.writeJsoniter:·gc.time                                                 thrpt    5         9,000                    ms
[info] ArraysBenchmark.writePlay                                                              thrpt    5    528616,181 ±    5087,825   ops/s
[info] ArraysBenchmark.writePlay:·gc.alloc.rate                                               thrpt    5      1865,422 ±      18,059  MB/sec
[info] ArraysBenchmark.writePlay:·gc.alloc.rate.norm                                          thrpt    5      5552,001 ±       0,001    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space                                      thrpt    5      1823,727 ±     717,754  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5428,008 ±    2140,651    B/op
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,075 ±       0,193  MB/sec
[info] ArraysBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,223 ±       0,576    B/op
[info] ArraysBenchmark.writePlay:·gc.count                                                    thrpt    5        27,000                counts
[info] ArraysBenchmark.writePlay:·gc.time                                                     thrpt    5        22,000                    ms
[info] BigIntArrayBenchmark.readCirce                                                         thrpt    5      7882,540 ±     509,899   ops/s
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1337,249 ±      86,718  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    266872,076 ±       0,177    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1280,506 ±     569,419  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    255767,370 ±  120385,373    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0,062 ±       0,170  MB/sec
[info] BigIntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        12,560 ±      34,991    B/op
[info] BigIntArrayBenchmark.readCirce:·gc.count                                               thrpt    5        19,000                counts
[info] BigIntArrayBenchmark.readCirce:·gc.time                                                thrpt    5        14,000                    ms
[info] BigIntArrayBenchmark.readJackson                                                       thrpt    5     28088,506 ±     530,366   ops/s
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate                                        thrpt    5      1207,473 ±      22,740  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                   thrpt    5     67632,016 ±       0,002    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1206,451 ±     723,613  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     67604,629 ±   41377,985    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0,071 ±       0,134  MB/sec
[info] BigIntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3,967 ±       7,501    B/op
[info] BigIntArrayBenchmark.readJackson:·gc.count                                             thrpt    5        18,000                counts
[info] BigIntArrayBenchmark.readJackson:·gc.time                                              thrpt    5        12,000                    ms
[info] BigIntArrayBenchmark.readJsoniter                                                      thrpt    5     31981,765 ±     129,300   ops/s
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5       580,745 ±       2,387  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5     28568,014 ±       0,002    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       533,625 ±     702,780  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     26254,986 ±   34631,593    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,012 ±       0,044  MB/sec
[info] BigIntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,615 ±       2,161    B/op
[info] BigIntArrayBenchmark.readJsoniter:·gc.count                                            thrpt    5         8,000                counts
[info] BigIntArrayBenchmark.readJsoniter:·gc.time                                             thrpt    5         5,000                    ms
[info] BigIntArrayBenchmark.writeJackson                                                      thrpt    5     14626,049 ±     160,635   ops/s
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate                                       thrpt    5      1607,385 ±      17,494  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                  thrpt    5    172904,006 ±       0,235    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                              thrpt    5      1618,509 ±     590,484  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    174073,451 ±   62269,073    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0,058 ±       0,132  MB/sec
[info] BigIntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         6,272 ±      14,191    B/op
[info] BigIntArrayBenchmark.writeJackson:·gc.count                                            thrpt    5        24,000                counts
[info] BigIntArrayBenchmark.writeJackson:·gc.time                                             thrpt    5        19,000                    ms
[info] BigIntArrayBenchmark.writeJsoniter                                                     thrpt    5     16088,322 ±     372,811   ops/s
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5      1611,417 ±      37,129  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5    157576,029 ±       0,017    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5      1625,833 ±     587,830  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5    158923,196 ±   54490,312    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0,087 ±       0,088  MB/sec
[info] BigIntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         8,558 ±       8,683    B/op
[info] BigIntArrayBenchmark.writeJsoniter:·gc.count                                           thrpt    5        24,000                counts
[info] BigIntArrayBenchmark.writeJsoniter:·gc.time                                            thrpt    5        16,000                    ms
[info] BigIntArrayBenchmark.writeJsoniterPrealloc                                             thrpt    5     16610,494 ±     286,787   ops/s
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                              thrpt    5      1554,664 ±      26,815  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5    147248,028 ±       0,016    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                     thrpt    5      1557,166 ±     721,327  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                thrpt    5    147516,922 ±   69502,278    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                 thrpt    5         0,104 ±       0,160  MB/sec
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm            thrpt    5         9,867 ±      15,235    B/op
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                   thrpt    5        23,000                counts
[info] BigIntArrayBenchmark.writeJsoniterPrealloc:·gc.time                                    thrpt    5        14,000                    ms
[info] BitSetsBenchmark.readJackson                                                           thrpt    5   2363088,398 ±   27415,278   ops/s
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate                                            thrpt    5      1501,981 ±      17,483  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.alloc.rate.norm                                       thrpt    5      1000,000 ±       0,001    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space                                   thrpt    5      1478,667 ±     687,629  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                              thrpt    5       984,295 ±     449,926    B/op
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                               thrpt    5         0,075 ±       0,146  MB/sec
[info] BitSetsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,050 ±       0,097    B/op
[info] BitSetsBenchmark.readJackson:·gc.count                                                 thrpt    5        22,000                counts
[info] BitSetsBenchmark.readJackson:·gc.time                                                  thrpt    5        18,000                    ms
[info] BitSetsBenchmark.readJsoniter                                                          thrpt    5   5679514,820 ±   86361,952   ops/s
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate                                           thrpt    5       750,861 ±      11,365  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.alloc.rate.norm                                      thrpt    5       208,000 ±       0,001    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                  thrpt    5       802,567 ±     705,950  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                             thrpt    5       222,358 ±     196,305    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                              thrpt    5         0,054 ±       0,156  MB/sec
[info] BitSetsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,015 ±       0,043    B/op
[info] BitSetsBenchmark.readJsoniter:·gc.count                                                thrpt    5        12,000                counts
[info] BitSetsBenchmark.readJsoniter:·gc.time                                                 thrpt    5         7,000                    ms
[info] BitSetsBenchmark.readPlay                                                              thrpt    5    450082,674 ±    6863,149   ops/s
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate                                               thrpt    5      2112,462 ±      32,193  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.alloc.rate.norm                                          thrpt    5      7384,001 ±       0,001    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                      thrpt    5      2099,945 ±     599,712  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      7339,882 ±    2066,020    B/op
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                  thrpt    5         0,100 ±       0,105  MB/sec
[info] BitSetsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0,349 ±       0,365    B/op
[info] BitSetsBenchmark.readPlay:·gc.count                                                    thrpt    5        31,000                counts
[info] BitSetsBenchmark.readPlay:·gc.time                                                     thrpt    5        27,000                    ms
[info] BitSetsBenchmark.writeJackson                                                          thrpt    5   3002371,457 ±   40324,406   ops/s
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate                                           thrpt    5      1587,724 ±      21,329  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.alloc.rate.norm                                      thrpt    5       832,000 ±       0,001    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                  thrpt    5      1615,713 ±     567,595  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5       846,504 ±     289,655    B/op
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0,087 ±       0,067  MB/sec
[info] BitSetsBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,046 ±       0,036    B/op
[info] BitSetsBenchmark.writeJackson:·gc.count                                                thrpt    5        24,000                counts
[info] BitSetsBenchmark.writeJackson:·gc.time                                                 thrpt    5        19,000                    ms
[info] BitSetsBenchmark.writeJsoniter                                                         thrpt    5   6510316,291 ±   88674,662   ops/s
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate                                          thrpt    5       993,117 ±      13,523  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                     thrpt    5       240,000 ±       0,001    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       939,970 ±     571,819  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5       227,094 ±     136,681    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0,075 ±       0,108  MB/sec
[info] BitSetsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,018 ±       0,026    B/op
[info] BitSetsBenchmark.writeJsoniter:·gc.count                                               thrpt    5        14,000                counts
[info] BitSetsBenchmark.writeJsoniter:·gc.time                                                thrpt    5         9,000                    ms
[info] BitSetsBenchmark.writePlay                                                             thrpt    5    731363,841 ±    2075,739   ops/s
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate                                              thrpt    5      2156,933 ±       6,043  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.alloc.rate.norm                                         thrpt    5      4640,001 ±       0,001    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                     thrpt    5      2101,014 ±     589,673  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5      4519,660 ±    1265,123    B/op
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,075 ±       0,122  MB/sec
[info] BitSetsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,161 ±       0,261    B/op
[info] BitSetsBenchmark.writePlay:·gc.count                                                   thrpt    5        31,000                counts
[info] BitSetsBenchmark.writePlay:·gc.time                                                    thrpt    5        24,000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                       thrpt    5    916664,504 ±   57551,899   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3043,721 ±     190,961  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      5224,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2995,201 ±     584,966  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      5140,091 ±     898,058    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0,121 ±       0,174  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,208 ±       0,312    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                             thrpt    5        44,000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                              thrpt    5        30,000                    ms
[info] ExtractFieldsBenchmark.readJackson                                                     thrpt    5   1100107,678 ±    7446,342   ops/s
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5      1364,894 ±       9,288  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5      1952,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5      1407,463 ±     542,359  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2013,121 ±     788,621    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0,075 ±       0,091  MB/sec
[info] ExtractFieldsBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,107 ±       0,131    B/op
[info] ExtractFieldsBenchmark.readJackson:·gc.count                                           thrpt    5        21,000                counts
[info] ExtractFieldsBenchmark.readJackson:·gc.time                                            thrpt    5        15,000                    ms
[info] ExtractFieldsBenchmark.readJsoniter                                                    thrpt    5   8791502,152 ±  726228,209   ops/s
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       402,329 ±      33,242  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5        72,000 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       402,344 ±     576,915  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5        71,916 ±     101,195    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0,029 ±       0,156  MB/sec
[info] ExtractFieldsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0,005 ±       0,028    B/op
[info] ExtractFieldsBenchmark.readJsoniter:·gc.count                                          thrpt    5         6,000                counts
[info] ExtractFieldsBenchmark.readJsoniter:·gc.time                                           thrpt    5         4,000                    ms
[info] ExtractFieldsBenchmark.readPlay                                                        thrpt    5    303189,563 ±    1532,551   ops/s
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1555,568 ±       7,771  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5      8072,001 ±       0,001    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1612,540 ±     575,544  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8367,395 ±    2975,728    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0,079 ±       0,143  MB/sec
[info] ExtractFieldsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,411 ±       0,745    B/op
[info] ExtractFieldsBenchmark.readPlay:·gc.count                                              thrpt    5        24,000                counts
[info] ExtractFieldsBenchmark.readPlay:·gc.time                                               thrpt    5        20,000                    ms
[info] FloatArrayBenchmark.readCirce                                                          thrpt    5      7380,941 ±     231,326   ops/s
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1479,135 ±      46,613  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    315284,901 ±      27,639    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1485,963 ±     726,688  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    316782,811 ±  156292,483    B/op
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0,100 ±       0,222  MB/sec
[info] FloatArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        21,341 ±      47,546    B/op
[info] FloatArrayBenchmark.readCirce:·gc.count                                                thrpt    5        22,000                counts
[info] FloatArrayBenchmark.readCirce:·gc.time                                                 thrpt    5        15,000                    ms
[info] FloatArrayBenchmark.readJackson                                                        thrpt    5     22293,416 ±     184,564   ops/s
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1037,924 ±       8,617  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     73249,812 ±      15,431    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1067,059 ±     596,359  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     75307,710 ±   42144,508    B/op
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0,054 ±       0,072  MB/sec
[info] FloatArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         3,819 ±       5,037    B/op
[info] FloatArrayBenchmark.readJackson:·gc.count                                              thrpt    5        16,000                counts
[info] FloatArrayBenchmark.readJackson:·gc.time                                               thrpt    5        12,000                    ms
[info] FloatArrayBenchmark.readJsoniter                                                       thrpt    5     45055,775 ±    1226,424   ops/s
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       118,215 ±       3,218  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5      4128,010 ±       0,001    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       102,351 ±     539,668  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5      3570,059 ±   18823,906    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0,004 ±       0,036  MB/sec
[info] FloatArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,145 ±       1,248    B/op
[info] FloatArrayBenchmark.readJsoniter:·gc.count                                             thrpt    5         2,000                counts
[info] FloatArrayBenchmark.readJsoniter:·gc.time                                              thrpt    5         3,000                    ms
[info] FloatArrayBenchmark.readPlay                                                           thrpt    5      7110,347 ±      96,679   ops/s
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1660,961 ±      22,537  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    367504,098 ±       0,311    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1686,943 ±      35,287  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5    373257,124 ±    9688,673    B/op
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0,092 ±       0,122  MB/sec
[info] FloatArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        20,256 ±      26,557    B/op
[info] FloatArrayBenchmark.readPlay:·gc.count                                                 thrpt    5        25,000                counts
[info] FloatArrayBenchmark.readPlay:·gc.time                                                  thrpt    5        18,000                    ms
[info] FloatArrayBenchmark.writeCirce                                                         thrpt    5     18713,394 ±    2295,388   ops/s
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       695,033 ±      67,667  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     58512,537 ±   12256,647    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5       731,529 ±     581,908  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     61626,449 ±   51666,716    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0,042 ±       0,113  MB/sec
[info] FloatArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         3,475 ±       9,425    B/op
[info] FloatArrayBenchmark.writeCirce:·gc.count                                               thrpt    5        11,000                counts
[info] FloatArrayBenchmark.writeCirce:·gc.time                                                thrpt    5         8,000                    ms
[info] FloatArrayBenchmark.writeJackson                                                       thrpt    5     22320,002 ±     516,042   ops/s
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       435,253 ±      10,075  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     30680,020 ±       0,223    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5       458,908 ±     691,056  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     32317,217 ±   48276,005    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0,042 ±       0,170  MB/sec
[info] FloatArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         2,926 ±      11,943    B/op
[info] FloatArrayBenchmark.writeJackson:·gc.count                                             thrpt    5         7,000                counts
[info] FloatArrayBenchmark.writeJackson:·gc.time                                              thrpt    5         6,000                    ms
[info] FloatArrayBenchmark.writeJsoniter                                                      thrpt    5     26221,110 ±     672,185   ops/s
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       418,132 ±      10,736  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     25088,017 ±       0,002    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       466,315 ±     703,131  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     28007,159 ±   42579,888    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,046 ±       0,215  MB/sec
[info] FloatArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         2,753 ±      12,900    B/op
[info] FloatArrayBenchmark.writeJsoniter:·gc.count                                            thrpt    5         7,000                counts
[info] FloatArrayBenchmark.writeJsoniter:·gc.time                                             thrpt    5         5,000                    ms
[info] FloatArrayBenchmark.writeJsoniterPrealloc                                              thrpt    5     26968,370 ±     683,820   ops/s
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       336,795 ±       8,586  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5     19648,016 ±       0,001    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5       333,312 ±       0,744  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5     19445,495 ±     470,220    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5         0,338 ±       2,685  MB/sec
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5        19,612 ±     155,802    B/op
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         5,000                counts
[info] FloatArrayBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         4,000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                       thrpt    5      9081,300 ±     260,749   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2337,891 ±      66,850  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    405023,806 ±      83,535    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      2376,779 ±      22,871  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    411780,983 ±   13571,663    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0,156 ±       0,339  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        27,141 ±      59,029    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                             thrpt    5        35,000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                              thrpt    5        28,000                    ms
[info] GoogleMapsAPIBenchmark.readJackson                                                     thrpt    5     15238,360 ±     272,254   ops/s
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate                                      thrpt    5       411,057 ±       7,363  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.alloc.rate.norm                                 thrpt    5     42440,031 ±       0,017    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                             thrpt    5       389,740 ±     558,879  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     40233,723 ±   57586,104    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                         thrpt    5         0,012 ±       0,044  MB/sec
[info] GoogleMapsAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1,286 ±       4,521    B/op
[info] GoogleMapsAPIBenchmark.readJackson:·gc.count                                           thrpt    5         6,000                counts
[info] GoogleMapsAPIBenchmark.readJackson:·gc.time                                            thrpt    5         5,000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniter                                                    thrpt    5     26823,357 ±     475,098   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate                                     thrpt    5       502,061 ±       8,953  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                thrpt    5     29448,016 ±       0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                            thrpt    5       532,412 ±     702,094  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                       thrpt    5     31258,726 ±   41552,663    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                        thrpt    5         0,033 ±       0,134  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1,952 ±       7,855    B/op
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.count                                          thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.readJsoniter:·gc.time                                           thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.readPlay                                                        thrpt    5      2876,693 ±      20,741   ops/s
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate                                         thrpt    5      1746,679 ±      12,558  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.alloc.rate.norm                                    thrpt    5    955216,155 ±       0,024    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                thrpt    5      1752,435 ±     588,378  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                           thrpt    5    958386,756 ±  323047,420    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                            thrpt    5         0,050 ±       0,185  MB/sec
[info] GoogleMapsAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        27,326 ±     101,036    B/op
[info] GoogleMapsAPIBenchmark.readPlay:·gc.count                                              thrpt    5        26,000                counts
[info] GoogleMapsAPIBenchmark.readPlay:·gc.time                                               thrpt    5        25,000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                      thrpt    5      9609,587 ±     192,563   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      2213,000 ±      43,837  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    362306,085 ±      81,793    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2172,453 ±     717,174  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    355715,225 ±  119866,140    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0,192 ±       0,337  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        31,459 ±      55,402    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                            thrpt    5        32,000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                             thrpt    5        24,000                    ms
[info] GoogleMapsAPIBenchmark.writeJackson                                                    thrpt    5     49392,340 ±    1389,148   ops/s
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate                                     thrpt    5       716,022 ±      20,103  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                thrpt    5     22807,849 ±       0,278    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                            thrpt    5       721,249 ±     556,108  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     22973,602 ±   17678,383    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0,067 ±       0,222  MB/sec
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2,117 ±       7,069    B/op
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.count                                          thrpt    5        11,000                counts
[info] GoogleMapsAPIBenchmark.writeJackson:·gc.time                                           thrpt    5         9,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniter                                                   thrpt    5     77031,452 ±    1193,462   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate                                    thrpt    5       580,493 ±       8,998  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                               thrpt    5     11856,006 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       532,552 ±     701,440  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10877,886 ±   14338,618    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0,037 ±       0,174  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,765 ±       3,543    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.count                                         thrpt    5         8,000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniter:·gc.time                                          thrpt    5         6,000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc                                           thrpt    5     86344,327 ±     995,844   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                            thrpt    5         1,317 ±       0,015  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                       thrpt    5        24,005 ±       0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlay                                                       thrpt    5      6644,824 ±     236,637   ops/s
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate                                        thrpt    5      1986,496 ±      70,598  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.alloc.rate.norm                                   thrpt    5    470335,895 ±       1,296    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space                               thrpt    5      1961,969 ±     578,555  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5    464501,486 ±  134807,393    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0,083 ±       0,188  MB/sec
[info] GoogleMapsAPIBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        19,641 ±      44,052    B/op
[info] GoogleMapsAPIBenchmark.writePlay:·gc.count                                             thrpt    5        29,000                counts
[info] GoogleMapsAPIBenchmark.writePlay:·gc.time                                              thrpt    5        26,000                    ms
[info] IntAndLongMapsBenchmark.readJsoniter                                                   thrpt    5   6125476,062 ±   32442,932   ops/s
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate                                    thrpt    5      1837,773 ±       9,733  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                               thrpt    5       472,000 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5      1831,650 ±     717,684  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       470,401 ±     182,994    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0,071 ±       0,108  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,018 ±       0,028    B/op
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.count                                         thrpt    5        27,000                counts
[info] IntAndLongMapsBenchmark.readJsoniter:·gc.time                                          thrpt    5        16,000                    ms
[info] IntAndLongMapsBenchmark.readPlay                                                       thrpt    5    405623,911 ±    4491,979   ops/s
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate                                        thrpt    5      2180,085 ±      24,243  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.alloc.rate.norm                                   thrpt    5      8456,001 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                               thrpt    5      2169,163 ±     736,349  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8412,915 ±    2813,841    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                           thrpt    5         0,092 ±       0,166  MB/sec
[info] IntAndLongMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,355 ±       0,641    B/op
[info] IntAndLongMapsBenchmark.readPlay:·gc.count                                             thrpt    5        32,000                counts
[info] IntAndLongMapsBenchmark.readPlay:·gc.time                                              thrpt    5        26,000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniter                                                  thrpt    5   3729054,089 ±   82105,972   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate                                   thrpt    5       549,899 ±      12,121  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                              thrpt    5       232,000 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       533,106 ±     702,784  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       225,058 ±     298,241    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0,025 ±       0,105  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0,011 ±       0,044    B/op
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.count                                        thrpt    5         8,000                counts
[info] IntAndLongMapsBenchmark.writeJsoniter:·gc.time                                         thrpt    5         6,000                    ms
[info] IntAndLongMapsBenchmark.writePlay                                                      thrpt    5    388998,584 ±    3522,163   ops/s
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate                                       thrpt    5      1525,075 ±      13,824  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.alloc.rate.norm                                  thrpt    5      6168,001 ±       0,001    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                              thrpt    5      1478,596 ±     712,459  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5979,003 ±    2839,727    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0,075 ±       0,122  MB/sec
[info] IntAndLongMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,303 ±       0,492    B/op
[info] IntAndLongMapsBenchmark.writePlay:·gc.count                                            thrpt    5        22,000                counts
[info] IntAndLongMapsBenchmark.writePlay:·gc.time                                             thrpt    5        20,000                    ms
[info] IntArrayBenchmark.readCirce                                                            thrpt    5     17756,736 ±     400,883   ops/s
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2340,717 ±      52,107  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    207383,847 ±       1,547    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2310,158 ±     583,709  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    204695,481 ±   52805,491    B/op
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0,175 ±       0,357  MB/sec
[info] IntArrayBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        15,498 ±      31,509    B/op
[info] IntArrayBenchmark.readCirce:·gc.count                                                  thrpt    5        34,000                counts
[info] IntArrayBenchmark.readCirce:·gc.time                                                   thrpt    5        23,000                    ms
[info] IntArrayBenchmark.readJackson                                                          thrpt    5     45950,428 ±     861,793   ops/s
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate                                           thrpt    5       330,149 ±       6,193  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.alloc.rate.norm                                      thrpt    5     11304,010 ±       0,002    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space                                  thrpt    5       327,374 ±       0,739  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11209,193 ±     197,282    B/op
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space                              thrpt    5         0,431 ±       3,536  MB/sec
[info] IntArrayBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        14,792 ±     121,254    B/op
[info] IntArrayBenchmark.readJackson:·gc.count                                                thrpt    5         5,000                counts
[info] IntArrayBenchmark.readJackson:·gc.time                                                 thrpt    5         5,000                    ms
[info] IntArrayBenchmark.readJsoniter                                                         thrpt    5     92643,299 ±    1589,676   ops/s
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate                                          thrpt    5       485,222 ±       8,305  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.alloc.rate.norm                                     thrpt    5      8240,005 ±       0,001    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                 thrpt    5       533,233 ±     703,162  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                            thrpt    5      9050,083 ±   11875,364    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                             thrpt    5         0,037 ±       0,143  MB/sec
[info] IntArrayBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,636 ±       2,435    B/op
[info] IntArrayBenchmark.readJsoniter:·gc.count                                               thrpt    5         8,000                counts
[info] IntArrayBenchmark.readJsoniter:·gc.time                                                thrpt    5         6,000                    ms
[info] IntArrayBenchmark.readPlay                                                             thrpt    5      9465,327 ±     164,299   ops/s
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate                                              thrpt    5      3349,100 ±      61,527  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.alloc.rate.norm                                         thrpt    5    556682,584 ±    1943,549    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space                                     thrpt    5      3335,104 ±     582,653  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                thrpt    5    554389,770 ±   99719,086    B/op
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,121 ±       0,183  MB/sec
[info] IntArrayBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                            thrpt    5        20,093 ±      30,591    B/op
[info] IntArrayBenchmark.readPlay:·gc.count                                                   thrpt    5        49,000                counts
[info] IntArrayBenchmark.readPlay:·gc.time                                                    thrpt    5        38,000                    ms
[info] IntArrayBenchmark.writeCirce                                                           thrpt    5     24211,571 ±     371,088   ops/s
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1512,586 ±      23,167  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     98288,018 ±       0,002    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1487,800 ±     714,973  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     96709,966 ±   47736,170    B/op
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0,100 ±       0,183  MB/sec
[info] IntArrayBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         6,493 ±      11,858    B/op
[info] IntArrayBenchmark.writeCirce:·gc.count                                                 thrpt    5        22,000                counts
[info] IntArrayBenchmark.writeCirce:·gc.time                                                  thrpt    5        15,000                    ms
[info] IntArrayBenchmark.writeJackson                                                         thrpt    5    109745,373 ±     428,463   ops/s
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate                                          thrpt    5       885,372 ±       3,428  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.alloc.rate.norm                                     thrpt    5     12692,323 ±       0,020    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       863,035 ±     695,679  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     12371,001 ±    9949,334    B/op
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0,062 ±       0,179  MB/sec
[info] IntArrayBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,896 ±       2,572    B/op
[info] IntArrayBenchmark.writeJackson:·gc.count                                               thrpt    5        13,000                counts
[info] IntArrayBenchmark.writeJackson:·gc.time                                                thrpt    5        10,000                    ms
[info] IntArrayBenchmark.writeJsoniter                                                        thrpt    5    125322,644 ±    2923,209   ops/s
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate                                         thrpt    5       534,028 ±      12,432  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.alloc.rate.norm                                    thrpt    5      6704,003 ±       0,001    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5       533,415 ±     703,254  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5      6700,496 ±    8879,571    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0,017 ±       0,105  MB/sec
[info] IntArrayBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,211 ±       1,326    B/op
[info] IntArrayBenchmark.writeJsoniter:·gc.count                                              thrpt    5         8,000                counts
[info] IntArrayBenchmark.writeJsoniter:·gc.time                                               thrpt    5         5,000                    ms
[info] IntArrayBenchmark.writeJsoniterPrealloc                                                thrpt    5    153182,724 ±    3469,594   ops/s
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                            thrpt    5         0,003 ±       0,001    B/op
[info] IntArrayBenchmark.writeJsoniterPrealloc:·gc.count                                      thrpt    5           ≈ 0                counts
[info] IntArrayBenchmark.writePlay                                                            thrpt    5      4054,480 ±      30,512   ops/s
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate                                             thrpt    5      1778,423 ±      13,527  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.alloc.rate.norm                                        thrpt    5    690068,352 ±       1,071    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1825,602 ±     701,438  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5    708464,823 ±  276571,757    B/op
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0,062 ±       0,150  MB/sec
[info] IntArrayBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        24,225 ±      58,194    B/op
[info] IntArrayBenchmark.writePlay:·gc.count                                                  thrpt    5        27,000                counts
[info] IntArrayBenchmark.writePlay:·gc.time                                                   thrpt    5        19,000                    ms
[info] IterablesBenchmark.readCirce                                                           thrpt    5    785028,029 ±    5596,032   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2862,117 ±      20,478  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5      5736,001 ±       0,001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2858,343 ±     724,952  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5728,664 ±    1469,170    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0,129 ±       0,208  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,259 ±       0,416    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                 thrpt    5        42,000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                  thrpt    5        31,000                    ms
[info] IterablesBenchmark.readJackson                                                         thrpt    5    712767,154 ±   27815,522   ops/s
[info] IterablesBenchmark.readJackson:·gc.alloc.rate                                          thrpt    5       829,998 ±      32,287  MB/sec
[info] IterablesBenchmark.readJackson:·gc.alloc.rate.norm                                     thrpt    5      1832,001 ±       0,001    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                 thrpt    5       854,448 ±     680,852  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1887,287 ±    1529,376    B/op
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                             thrpt    5         0,054 ±       0,044  MB/sec
[info] IterablesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,119 ±       0,094    B/op
[info] IterablesBenchmark.readJackson:·gc.count                                               thrpt    5        13,000                counts
[info] IterablesBenchmark.readJackson:·gc.time                                                thrpt    5        11,000                    ms
[info] IterablesBenchmark.readJsoniter                                                        thrpt    5   5039830,138 ±  189135,247   ops/s
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate                                         thrpt    5      1998,929 ±      74,765  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                                    thrpt    5       624,000 ±       0,001    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                thrpt    5      1969,671 ±     590,423  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                           thrpt    5       615,105 ±     196,087    B/op
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                            thrpt    5         0,108 ±       0,088  MB/sec
[info] IterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,034 ±       0,028    B/op
[info] IterablesBenchmark.readJsoniter:·gc.count                                              thrpt    5        29,000                counts
[info] IterablesBenchmark.readJsoniter:·gc.time                                               thrpt    5        22,000                    ms
[info] IterablesBenchmark.readPlay                                                            thrpt    5    275866,136 ±    5682,520   ops/s
[info] IterablesBenchmark.readPlay:·gc.alloc.rate                                             thrpt    5      1920,324 ±      39,325  MB/sec
[info] IterablesBenchmark.readPlay:·gc.alloc.rate.norm                                        thrpt    5     10952,002 ±       0,001    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                    thrpt    5      1892,517 ±     727,305  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                               thrpt    5     10796,333 ±    4275,629    B/op
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                thrpt    5         0,087 ±       0,191  MB/sec
[info] IterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0,499 ±       1,103    B/op
[info] IterablesBenchmark.readPlay:·gc.count                                                  thrpt    5        28,000                counts
[info] IterablesBenchmark.readPlay:·gc.time                                                   thrpt    5        24,000                    ms
[info] IterablesBenchmark.writeCirce                                                          thrpt    5   1025629,617 ±   18966,418   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      2472,158 ±      46,225  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3792,000 ±       0,001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2515,638 ±     709,208  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      3858,579 ±    1077,505    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0,133 ±       0,134  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,204 ±       0,203    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                thrpt    5        37,000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                 thrpt    5        23,000                    ms
[info] IterablesBenchmark.writeJackson                                                        thrpt    5   2084974,983 ±    9420,911   ops/s
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate                                         thrpt    5      1410,071 ±       6,236  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.alloc.rate.norm                                    thrpt    5      1064,000 ±       0,001    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1407,857 ±     608,109  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1062,366 ±     460,611    B/op
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0,075 ±       0,091  MB/sec
[info] IterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,057 ±       0,069    B/op
[info] IterablesBenchmark.writeJackson:·gc.count                                              thrpt    5        21,000                counts
[info] IterablesBenchmark.writeJackson:·gc.time                                               thrpt    5        17,000                    ms
[info] IterablesBenchmark.writeJsoniter                                                       thrpt    5   7485658,491 ±   86394,753   ops/s
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate                                        thrpt    5       837,433 ±       9,575  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                   thrpt    5       176,000 ±       0,001    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       870,449 ±     706,751  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5       182,925 ±     148,213    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0,087 ±       0,200  MB/sec
[info] IterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,018 ±       0,042    B/op
[info] IterablesBenchmark.writeJsoniter:·gc.count                                             thrpt    5        13,000                counts
[info] IterablesBenchmark.writeJsoniter:·gc.time                                              thrpt    5         9,000                    ms
[info] IterablesBenchmark.writePlay                                                           thrpt    5    548630,784 ±    7967,044   ops/s
[info] IterablesBenchmark.writePlay:·gc.alloc.rate                                            thrpt    5      1922,110 ±      27,900  MB/sec
[info] IterablesBenchmark.writePlay:·gc.alloc.rate.norm                                       thrpt    5      5512,001 ±       0,001    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1960,669 ±     578,546  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5      5622,328 ±    1644,083    B/op
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0,129 ±       0,223  MB/sec
[info] IterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,370 ±       0,637    B/op
[info] IterablesBenchmark.writePlay:·gc.count                                                 thrpt    5        29,000                counts
[info] IterablesBenchmark.writePlay:·gc.time                                                  thrpt    5        24,000                    ms
[info] MapsBenchmark.readCirce                                                                thrpt    5    765788,395 ±    7866,386   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2721,832 ±      27,798  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5592,001 ±       0,001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2721,269 ±      15,678  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5590,872 ±      59,065    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0,121 ±       0,174  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0,248 ±       0,360    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                      thrpt    5        40,000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                       thrpt    5        26,000                    ms
[info] MapsBenchmark.readJsoniter                                                             thrpt    5   4948212,052 ±   51029,182   ops/s
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate                                              thrpt    5      1232,892 ±      12,700  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                         thrpt    5       392,000 ±       0,001    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                                     thrpt    5      1214,269 ±     717,429  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                                thrpt    5       386,089 ±     228,395    B/op
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                                 thrpt    5         0,050 ±       0,134  MB/sec
[info] MapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0,016 ±       0,043    B/op
[info] MapsBenchmark.readJsoniter:·gc.count                                                   thrpt    5        18,000                counts
[info] MapsBenchmark.readJsoniter:·gc.time                                                    thrpt    5        11,000                    ms
[info] MapsBenchmark.readPlay                                                                 thrpt    5    413405,739 ±   10506,671   ops/s
[info] MapsBenchmark.readPlay:·gc.alloc.rate                                                  thrpt    5      2150,505 ±      54,987  MB/sec
[info] MapsBenchmark.readPlay:·gc.alloc.rate.norm                                             thrpt    5      8184,001 ±       0,001    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                         thrpt    5      2168,564 ±     695,137  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      8250,771 ±    2516,046    B/op
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                                     thrpt    5         0,108 ±       0,143  MB/sec
[info] MapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0,411 ±       0,538    B/op
[info] MapsBenchmark.readPlay:·gc.count                                                       thrpt    5        32,000                counts
[info] MapsBenchmark.readPlay:·gc.time                                                        thrpt    5        35,000                    ms
[info] MapsBenchmark.writeCirce                                                               thrpt    5    611921,151 ±    8673,632   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1655,343 ±      23,343  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      4256,001 ±       0,001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      1622,732 ±     568,825  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4172,732 ±    1488,492    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0,071 ±       0,091  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0,182 ±       0,238    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                     thrpt    5        24,000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                      thrpt    5        14,000                    ms
[info] MapsBenchmark.writeJsoniter                                                            thrpt    5   3702507,439 ±   45343,814   ops/s
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate                                             thrpt    5       451,838 ±       5,540  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                        thrpt    5       192,000 ±       0,001    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                                    thrpt    5       399,281 ±     572,028  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                               thrpt    5       169,777 ±     245,180    B/op
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                                thrpt    5         0,025 ±       0,174  MB/sec
[info] MapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0,011 ±       0,074    B/op
[info] MapsBenchmark.writeJsoniter:·gc.count                                                  thrpt    5         6,000                counts
[info] MapsBenchmark.writeJsoniter:·gc.time                                                   thrpt    5         4,000                    ms
[info] MapsBenchmark.writePlay                                                                thrpt    5    398998,177 ±    4450,557   ops/s
[info] MapsBenchmark.writePlay:·gc.alloc.rate                                                 thrpt    5      1470,987 ±      16,514  MB/sec
[info] MapsBenchmark.writePlay:·gc.alloc.rate.norm                                            thrpt    5      5800,001 ±       0,001    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                        thrpt    5      1477,113 ±     718,999  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5825,487 ±    2886,391    B/op
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                                    thrpt    5         0,087 ±       0,154  MB/sec
[info] MapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0,345 ±       0,610    B/op
[info] MapsBenchmark.writePlay:·gc.count                                                      thrpt    5        22,000                counts
[info] MapsBenchmark.writePlay:·gc.time                                                       thrpt    5        17,000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                     thrpt    5   2180906,764 ±   78817,753   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      3526,599 ±     128,011  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      2544,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      3540,876 ±     714,502  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      2555,205 ±     586,923    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0,100 ±       0,105  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,072 ±       0,074    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                           thrpt    5        52,000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                            thrpt    5        42,000                    ms
[info] MissingReqFieldBenchmark.readJackson                                                   thrpt    5    326647,842 ±   26235,051   ops/s
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate                                    thrpt    5       793,991 ±      63,847  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.alloc.rate.norm                               thrpt    5      3824,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space                           thrpt    5       791,840 ±     701,139  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3811,382 ±    3307,268    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0,025 ±       0,088  MB/sec
[info] MissingReqFieldBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,121 ±       0,424    B/op
[info] MissingReqFieldBenchmark.readJackson:·gc.count                                         thrpt    5        12,000                counts
[info] MissingReqFieldBenchmark.readJackson:·gc.time                                          thrpt    5         9,000                    ms
[info] MissingReqFieldBenchmark.readJsoniter                                                  thrpt    5    763347,395 ±   40894,607   ops/s
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate                                   thrpt    5       702,571 ±      37,672  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.alloc.rate.norm                              thrpt    5      1448,001 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       738,344 ±     575,298  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1519,537 ±    1113,604    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0,046 ±       0,067  MB/sec
[info] MissingReqFieldBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0,094 ±       0,137    B/op
[info] MissingReqFieldBenchmark.readJsoniter:·gc.count                                        thrpt    5        11,000                counts
[info] MissingReqFieldBenchmark.readJsoniter:·gc.time                                         thrpt    5         7,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                         thrpt    5   4148725,669 ±   54046,394   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                          thrpt    5      2468,231 ±      32,172  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                     thrpt    5       936,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                 thrpt    5      2449,742 ±     582,090  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm            thrpt    5       929,046 ±     225,184    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space             thrpt    5         0,100 ±       0,143  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0,038 ±       0,054    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                               thrpt    5        36,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                thrpt    5        20,000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                   thrpt    5   7356533,402 ±  209374,620   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                    thrpt    5       860,371 ±      24,462  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm               thrpt    5       184,000 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space           thrpt    5       806,847 ±     709,035  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm      thrpt    5       172,690 ±     154,643    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space       thrpt    5         0,050 ±       0,122  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm  thrpt    5         0,011 ±       0,026    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                         thrpt    5        12,000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                          thrpt    5         7,000                    ms
[info] MissingReqFieldBenchmark.readPlay                                                      thrpt    5    211139,904 ±    1501,862   ops/s
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate                                       thrpt    5      1761,800 ±      12,481  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.alloc.rate.norm                                  thrpt    5     13128,002 ±       0,001    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1752,568 ±     610,648  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5     13059,138 ±    4544,995    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0,067 ±       0,105  MB/sec
[info] MissingReqFieldBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,497 ±       0,780    B/op
[info] MissingReqFieldBenchmark.readPlay:·gc.count                                            thrpt    5        26,000                counts
[info] MissingReqFieldBenchmark.readPlay:·gc.time                                             thrpt    5        22,000                    ms
[info] MutableIterablesBenchmark.readCirce                                                    thrpt    5    838299,709 ±   25738,392   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3231,125 ±      98,972  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      6064,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3199,936 ±     721,726  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6007,652 ±    1516,162    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0,162 ±       0,174  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0,305 ±       0,337    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                          thrpt    5        47,000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                           thrpt    5        28,000                    ms
[info] MutableIterablesBenchmark.readJsoniter                                                 thrpt    5   3920624,375 ±   25273,574   ops/s
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate                                  thrpt    5      2531,829 ±      15,969  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.alloc.rate.norm                             thrpt    5      1016,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                         thrpt    5      2517,400 ±     718,218  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1010,207 ±     287,958    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                     thrpt    5         0,075 ±       0,091  MB/sec
[info] MutableIterablesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0,030 ±       0,037    B/op
[info] MutableIterablesBenchmark.readJsoniter:·gc.count                                       thrpt    5        37,000                counts
[info] MutableIterablesBenchmark.readJsoniter:·gc.time                                        thrpt    5        22,000                    ms
[info] MutableIterablesBenchmark.readPlay                                                     thrpt    5    296401,474 ±    8768,786   ops/s
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate                                      thrpt    5      2120,571 ±      62,765  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.alloc.rate.norm                                 thrpt    5     11256,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space                             thrpt    5      2166,430 ±     702,951  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                        thrpt    5     11505,033 ±    4036,300    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                         thrpt    5         0,100 ±       0,088  MB/sec
[info] MutableIterablesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,531 ±       0,469    B/op
[info] MutableIterablesBenchmark.readPlay:·gc.count                                           thrpt    5        32,000                counts
[info] MutableIterablesBenchmark.readPlay:·gc.time                                            thrpt    5        32,000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                   thrpt    5    980466,667 ±   16083,279   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      2263,439 ±      37,052  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5      3632,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      2310,014 ±     583,643  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3707,337 ±     974,193    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0,104 ±       0,113  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,167 ±       0,184    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                         thrpt    5        34,000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                          thrpt    5        21,000                    ms
[info] MutableIterablesBenchmark.writeJackson                                                 thrpt    5   2044402,407 ±   62798,717   ops/s
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate                                  thrpt    5      1174,734 ±      36,173  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.alloc.rate.norm                             thrpt    5       904,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                         thrpt    5      1197,944 ±     680,978  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                    thrpt    5       922,569 ±     544,653    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                     thrpt    5         0,079 ±       0,119  MB/sec
[info] MutableIterablesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0,061 ±       0,093    B/op
[info] MutableIterablesBenchmark.writeJackson:·gc.count                                       thrpt    5        18,000                counts
[info] MutableIterablesBenchmark.writeJackson:·gc.time                                        thrpt    5        15,000                    ms
[info] MutableIterablesBenchmark.writeJsoniter                                                thrpt    5   7119389,558 ±  143117,934   ops/s
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate                                 thrpt    5       362,019 ±       7,273  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.alloc.rate.norm                            thrpt    5        80,000 ±       0,001    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                        thrpt    5       399,293 ±     573,448  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                   thrpt    5        88,215 ±     126,269    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                    thrpt    5         0,340 ±       2,660  MB/sec
[info] MutableIterablesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0,075 ±       0,587    B/op
[info] MutableIterablesBenchmark.writeJsoniter:·gc.count                                      thrpt    5         6,000                counts
[info] MutableIterablesBenchmark.writeJsoniter:·gc.time                                       thrpt    5         4,000                    ms
[info] MutableIterablesBenchmark.writePlay                                                    thrpt    5    545112,880 ±   17238,238   ops/s
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate                                     thrpt    5      1887,605 ±      59,883  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.alloc.rate.norm                                thrpt    5      5448,001 ±       0,001    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space                            thrpt    5      1892,841 ±     727,626  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                       thrpt    5      5464,908 ±    2176,821    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                        thrpt    5         0,067 ±       0,105  MB/sec
[info] MutableIterablesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0,193 ±       0,308    B/op
[info] MutableIterablesBenchmark.writePlay:·gc.count                                          thrpt    5        28,000                counts
[info] MutableIterablesBenchmark.writePlay:·gc.time                                           thrpt    5        29,000                    ms
[info] MutableMapsBenchmark.readJsoniter                                                      thrpt    5   3710834,698 ±   47562,264   ops/s
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate                                       thrpt    5      1754,864 ±      22,748  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.alloc.rate.norm                                  thrpt    5       744,000 ±       0,001    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      1762,638 ±     578,380  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       747,369 ±     249,470    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,071 ±       0,091  MB/sec
[info] MutableMapsBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,030 ±       0,039    B/op
[info] MutableMapsBenchmark.readJsoniter:·gc.count                                            thrpt    5        26,000                counts
[info] MutableMapsBenchmark.readJsoniter:·gc.time                                             thrpt    5        16,000                    ms
[info] MutableMapsBenchmark.readPlay                                                          thrpt    5    337870,902 ±   10634,677   ops/s
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate                                           thrpt    5      1790,237 ±      56,153  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.alloc.rate.norm                                      thrpt    5      8336,001 ±       0,001    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1822,223 ±     697,282  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      8490,244 ±    3491,580    B/op
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0,096 ±       0,122  MB/sec
[info] MutableMapsBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,446 ±       0,558    B/op
[info] MutableMapsBenchmark.readPlay:·gc.count                                                thrpt    5        27,000                counts
[info] MutableMapsBenchmark.readPlay:·gc.time                                                 thrpt    5        22,000                    ms
[info] MutableMapsBenchmark.writeCirce                                                        thrpt    5    551249,986 ±   47224,230   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1488,440 ±     127,565  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5      4248,001 ±       0,001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1484,986 ±     703,357  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      4235,407 ±    1850,366    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0,071 ±       0,122  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,202 ±       0,342    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                              thrpt    5        22,000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                               thrpt    5        14,000                    ms
[info] MutableMapsBenchmark.writeJsoniter                                                     thrpt    5   3295631,205 ±   39318,595   ops/s
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate                                      thrpt    5       620,042 ±       7,394  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.alloc.rate.norm                                 thrpt    5       296,000 ±       0,001    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       599,860 ±     571,192  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5       286,361 ±     272,627    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0,042 ±       0,098  MB/sec
[info] MutableMapsBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,020 ±       0,047    B/op
[info] MutableMapsBenchmark.writeJsoniter:·gc.count                                           thrpt    5         9,000                counts
[info] MutableMapsBenchmark.writeJsoniter:·gc.time                                            thrpt    5         6,000                    ms
[info] MutableMapsBenchmark.writePlay                                                         thrpt    5    395652,817 ±    5515,874   ops/s
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate                                          thrpt    5      1531,027 ±      21,364  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.alloc.rate.norm                                     thrpt    5      6088,001 ±       0,001    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1478,529 ±     712,464  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5879,048 ±    2823,238    B/op
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0,079 ±       0,191  MB/sec
[info] MutableMapsBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,315 ±       0,762    B/op
[info] MutableMapsBenchmark.writePlay:·gc.count                                               thrpt    5        22,000                counts
[info] MutableMapsBenchmark.writePlay:·gc.time                                                thrpt    5        18,000                    ms
[info] PrimitivesBenchmark.readCirce                                                          thrpt    5    799387,508 ±   11226,651   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2377,845 ±      33,346  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      4680,001 ±       0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2377,972 ±      23,286  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4680,304 ±      84,780    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0,092 ±       0,166  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,180 ±       0,328    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                thrpt    5        35,000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                 thrpt    5        21,000                    ms
[info] PrimitivesBenchmark.readJackson                                                        thrpt    5   1658794,278 ±   28725,873   ops/s
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5      1256,772 ±      21,744  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5      1192,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5      1270,473 ±     574,412  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1205,197 ±     551,365    B/op
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0,058 ±       0,067  MB/sec
[info] PrimitivesBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,055 ±       0,063    B/op
[info] PrimitivesBenchmark.readJackson:·gc.count                                              thrpt    5        19,000                counts
[info] PrimitivesBenchmark.readJackson:·gc.time                                               thrpt    5        15,000                    ms
[info] PrimitivesBenchmark.readJsoniter                                                       thrpt    5   6242346,056 ±   77514,079   ops/s
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       190,450 ±       2,375  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       220,698 ±     493,414  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5        55,607 ±     124,543    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0,297 ±       2,458  MB/sec
[info] PrimitivesBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,075 ±       0,622    B/op
[info] PrimitivesBenchmark.readJsoniter:·gc.count                                             thrpt    5         4,000                counts
[info] PrimitivesBenchmark.readJsoniter:·gc.time                                              thrpt    5         6,000                    ms
[info] PrimitivesBenchmark.readPlay                                                           thrpt    5    264960,854 ±    5872,840   ops/s
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1824,199 ±      40,280  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5     10832,002 ±       0,001    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1822,328 ±     725,596  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5     10826,281 ±    4555,222    B/op
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0,092 ±       0,122  MB/sec
[info] PrimitivesBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0,544 ±       0,723    B/op
[info] PrimitivesBenchmark.readPlay:·gc.count                                                 thrpt    5        27,000                counts
[info] PrimitivesBenchmark.readPlay:·gc.time                                                  thrpt    5        26,000                    ms
[info] PrimitivesBenchmark.writeCirce                                                         thrpt    5   1044472,636 ±   17092,203   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1837,657 ±      30,052  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      2768,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1828,567 ±     698,074  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      2754,140 ±    1041,909    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0,092 ±       0,134  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,138 ±       0,201    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                               thrpt    5        27,000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                thrpt    5        18,000                    ms
[info] PrimitivesBenchmark.writeJackson                                                       thrpt    5   2748881,907 ±   38452,523   ops/s
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5      1216,077 ±      17,044  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5       696,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5      1203,205 ±     714,830  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5       688,705 ±     411,111    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0,067 ±       0,067  MB/sec
[info] PrimitivesBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,038 ±       0,039    B/op
[info] PrimitivesBenchmark.writeJackson:·gc.count                                             thrpt    5        18,000                counts
[info] PrimitivesBenchmark.writeJackson:·gc.time                                              thrpt    5        14,000                    ms
[info] PrimitivesBenchmark.writeJsoniter                                                      thrpt    5   7207926,221 ±   54205,587   ops/s
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       586,417 ±       4,346  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5       128,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       600,396 ±     573,768  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5       131,048 ±     125,200    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,054 ±       0,146  MB/sec
[info] PrimitivesBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,012 ±       0,032    B/op
[info] PrimitivesBenchmark.writeJsoniter:·gc.count                                            thrpt    5         9,000                counts
[info] PrimitivesBenchmark.writeJsoniter:·gc.time                                             thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writeJsoniterPrealloc                                              thrpt    5   7906989,468 ±   51415,963   ops/s
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5       241,234 ±       1,586  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5        48,000 ±       0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space                      thrpt    5       235,761 ±     529,050  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Eden_Space.norm                 thrpt    5        46,897 ±     105,291    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space                  thrpt    5         0,327 ±       2,585  MB/sec
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0,065 ±       0,514    B/op
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5         4,000                counts
[info] PrimitivesBenchmark.writeJsoniterPrealloc:·gc.time                                     thrpt    5         5,000                    ms
[info] PrimitivesBenchmark.writePlay                                                          thrpt    5    345369,280 ±    4174,687   ops/s
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate                                           thrpt    5      1777,244 ±      21,460  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.alloc.rate.norm                                      thrpt    5      8096,001 ±       0,001    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space                                  thrpt    5      1821,187 ±     697,141  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Eden_Space.norm                             thrpt    5      8296,132 ±    3170,961    B/op
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space                              thrpt    5         0,087 ±       0,230  MB/sec
[info] PrimitivesBenchmark.writePlay:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0,399 ±       1,046    B/op
[info] PrimitivesBenchmark.writePlay:·gc.count                                                thrpt    5        27,000                counts
[info] PrimitivesBenchmark.writePlay:·gc.time                                                 thrpt    5        26,000                    ms
[info] StringBenchmark.readAsciiCirce                                                         thrpt    5    467874,086 ±    9599,457   ops/s
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate                                          thrpt    5      1824,726 ±      37,309  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.alloc.rate.norm                                     thrpt    5      6136,001 ±       0,001    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1830,220 ±     706,897  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      6153,328 ±    2315,230    B/op
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0,079 ±       0,088  MB/sec
[info] StringBenchmark.readAsciiCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,266 ±       0,292    B/op
[info] StringBenchmark.readAsciiCirce:·gc.count                                               thrpt    5        27,000                counts
[info] StringBenchmark.readAsciiCirce:·gc.time                                                thrpt    5        19,000                    ms
[info] StringBenchmark.readAsciiJackson                                                       thrpt    5   1072249,294 ±   47577,087   ops/s
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate                                        thrpt    5      2246,379 ±      99,449  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.alloc.rate.norm                                   thrpt    5      3296,000 ±       0,001    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space                               thrpt    5      2239,577 ±     713,528  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      3284,887 ±     970,368    B/op
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0,096 ±       0,122  MB/sec
[info] StringBenchmark.readAsciiJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,141 ±       0,181    B/op
[info] StringBenchmark.readAsciiJackson:·gc.count                                             thrpt    5        33,000                counts
[info] StringBenchmark.readAsciiJackson:·gc.time                                              thrpt    5        22,000                    ms
[info] StringBenchmark.readAsciiJsoniter                                                      thrpt    5   1274783,292 ±   87239,353   ops/s
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate                                       thrpt    5      2145,763 ±     146,158  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.alloc.rate.norm                                  thrpt    5      2648,000 ±       0,001    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5      2176,276 ±     713,382  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5      2685,052 ±     824,231    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,108 ±       0,191  MB/sec
[info] StringBenchmark.readAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,134 ±       0,245    B/op
[info] StringBenchmark.readAsciiJsoniter:·gc.count                                            thrpt    5        32,000                counts
[info] StringBenchmark.readAsciiJsoniter:·gc.time                                             thrpt    5        26,000                    ms
[info] StringBenchmark.readNonAsciiCirce                                                      thrpt    5   1646194,989 ±   69569,217   ops/s
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate                                       thrpt    5      2017,402 ±      84,993  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.alloc.rate.norm                                  thrpt    5      1928,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1968,513 ±     572,677  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1881,050 ±     530,011    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0,104 ±       0,127  MB/sec
[info] StringBenchmark.readNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,100 ±       0,120    B/op
[info] StringBenchmark.readNonAsciiCirce:·gc.count                                            thrpt    5        29,000                counts
[info] StringBenchmark.readNonAsciiCirce:·gc.time                                             thrpt    5        19,000                    ms
[info] StringBenchmark.readNonAsciiJackson                                                    thrpt    5   1379260,546 ±   12576,803   ops/s
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate                                     thrpt    5       855,611 ±       7,825  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.alloc.rate.norm                                thrpt    5       976,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space                            thrpt    5       862,145 ±     704,260  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                       thrpt    5       983,538 ±     805,051    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space                        thrpt    5         0,062 ±       0,139  MB/sec
[info] StringBenchmark.readNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0,071 ±       0,159    B/op
[info] StringBenchmark.readNonAsciiJackson:·gc.count                                          thrpt    5        13,000                counts
[info] StringBenchmark.readNonAsciiJackson:·gc.time                                           thrpt    5         9,000                    ms
[info] StringBenchmark.readNonAsciiJsoniter                                                   thrpt    5   2411916,559 ±   40558,775   ops/s
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate                                    thrpt    5       392,476 ±       6,584  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.alloc.rate.norm                               thrpt    5       256,000 ±       0,001    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space                           thrpt    5       402,363 ±     576,903  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                      thrpt    5       262,312 ±     373,583    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                       thrpt    5         0,033 ±       0,166  MB/sec
[info] StringBenchmark.readNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,022 ±       0,108    B/op
[info] StringBenchmark.readNonAsciiJsoniter:·gc.count                                         thrpt    5         6,000                counts
[info] StringBenchmark.readNonAsciiJsoniter:·gc.time                                          thrpt    5         4,000                    ms
[info] StringBenchmark.writeAsciiCirce                                                        thrpt    5    304888,329 ±    1452,364   ops/s
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate                                         thrpt    5      1556,496 ±       7,365  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.alloc.rate.norm                                    thrpt    5      8032,001 ±       0,001    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1553,857 ±     706,431  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8018,391 ±    3645,120    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0,067 ±       0,119  MB/sec
[info] StringBenchmark.writeAsciiCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0,344 ±       0,612    B/op
[info] StringBenchmark.writeAsciiCirce:·gc.count                                              thrpt    5        23,000                counts
[info] StringBenchmark.writeAsciiCirce:·gc.time                                               thrpt    5        15,000                    ms
[info] StringBenchmark.writeAsciiJackson                                                      thrpt    5    841242,714 ±   46893,579   ops/s
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate                                       thrpt    5       851,237 ±      47,460  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.alloc.rate.norm                                  thrpt    5      1592,001 ±       0,001    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space                              thrpt    5       862,465 ±     699,516  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1614,249 ±    1331,998    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space                          thrpt    5         0,075 ±       0,146  MB/sec
[info] StringBenchmark.writeAsciiJackson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,141 ±       0,274    B/op
[info] StringBenchmark.writeAsciiJackson:·gc.count                                            thrpt    5        13,000                counts
[info] StringBenchmark.writeAsciiJackson:·gc.time                                             thrpt    5         9,000                    ms
[info] StringBenchmark.writeAsciiJsoniter                                                     thrpt    5   1003501,946 ±   21966,025   ops/s
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate                                      thrpt    5       847,034 ±      18,500  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.alloc.rate.norm                                 thrpt    5      1328,000 ±       0,001    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space                             thrpt    5       804,277 ±     706,264  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1261,377 ±    1116,356    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space                         thrpt    5         0,067 ±       0,088  MB/sec
[info] StringBenchmark.writeAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,105 ±       0,140    B/op
[info] StringBenchmark.writeAsciiJsoniter:·gc.count                                           thrpt    5        12,000                counts
[info] StringBenchmark.writeAsciiJsoniter:·gc.time                                            thrpt    5         8,000                    ms
[info] StringBenchmark.writeAsciiJsoniterPrealloc                                             thrpt    5   1236951,910 ±   14194,035   ops/s
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate                              thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.alloc.rate.norm                         thrpt    5        ≈ 10⁻³                  B/op
[info] StringBenchmark.writeAsciiJsoniterPrealloc:·gc.count                                   thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeAsciiPlay                                                         thrpt    5   1009766,434 ±   11393,619   ops/s
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate                                          thrpt    5      1078,241 ±      12,194  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.alloc.rate.norm                                     thrpt    5      1680,000 ±       0,001    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space                                 thrpt    5      1139,494 ±     705,544  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1775,830 ±    1111,383    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space                             thrpt    5         0,062 ±       0,127  MB/sec
[info] StringBenchmark.writeAsciiPlay:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0,097 ±       0,199    B/op
[info] StringBenchmark.writeAsciiPlay:·gc.count                                               thrpt    5        17,000                counts
[info] StringBenchmark.writeAsciiPlay:·gc.time                                                thrpt    5        12,000                    ms
[info] StringBenchmark.writeNonAsciiCirce                                                     thrpt    5   1568481,217 ±  187782,626   ops/s
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate                                      thrpt    5      1020,871 ±     122,166  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.alloc.rate.norm                                 thrpt    5      1024,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1005,134 ±      18,088  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1008,902 ±     106,699    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0,083 ±       0,098  MB/sec
[info] StringBenchmark.writeNonAsciiCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0,084 ±       0,104    B/op
[info] StringBenchmark.writeNonAsciiCirce:·gc.count                                           thrpt    5        15,000                counts
[info] StringBenchmark.writeNonAsciiCirce:·gc.time                                            thrpt    5        11,000                    ms
[info] StringBenchmark.writeNonAsciiJackson                                                   thrpt    5   3342743,973 ±   27291,195   ops/s
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate                                    thrpt    5      1376,791 ±      11,210  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.alloc.rate.norm                               thrpt    5       648,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space                           thrpt    5      1343,515 ±      31,904  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Eden_Space.norm                      thrpt    5       632,340 ±      15,701    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space                       thrpt    5         0,100 ±       0,067  MB/sec
[info] StringBenchmark.writeNonAsciiJackson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0,047 ±       0,032    B/op
[info] StringBenchmark.writeNonAsciiJackson:·gc.count                                         thrpt    5        20,000                counts
[info] StringBenchmark.writeNonAsciiJackson:·gc.time                                          thrpt    5        12,000                    ms
[info] StringBenchmark.writeNonAsciiJsoniter                                                  thrpt    5   3625373,257 ±   85609,153   ops/s
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate                                   thrpt    5       718,967 ±      17,016  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.alloc.rate.norm                              thrpt    5       312,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space                          thrpt    5       735,150 ±     569,185  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Eden_Space.norm                     thrpt    5       319,313 ±     255,552    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space                      thrpt    5         0,083 ±       0,150  MB/sec
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0,036 ±       0,066    B/op
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.count                                        thrpt    5        11,000                counts
[info] StringBenchmark.writeNonAsciiJsoniter:·gc.time                                         thrpt    5         7,000                    ms
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc                                          thrpt    5   3866514,604 ±   16069,779   ops/s
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringBenchmark.writeNonAsciiJsoniterPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] StringBenchmark.writeNonAsciiPlay                                                      thrpt    5   3263125,750 ±   44000,352   ops/s
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate                                       thrpt    5      1377,262 ±      18,358  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.alloc.rate.norm                                  thrpt    5       664,000 ±       0,001    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space                              thrpt    5      1348,181 ±      24,859  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Eden_Space.norm                         thrpt    5       649,981 ±      10,464    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space                          thrpt    5         0,079 ±       0,067  MB/sec
[info] StringBenchmark.writeNonAsciiPlay:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,038 ±       0,032    B/op
[info] StringBenchmark.writeNonAsciiPlay:·gc.count                                            thrpt    5        20,000                counts
[info] StringBenchmark.writeNonAsciiPlay:·gc.time                                             thrpt    5        12,000                    ms
[info] TwitterAPIBenchmark.readCirce                                                          thrpt    5     12272,330 ±     136,670   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1740,220 ±      19,123  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    223088,802 ±      40,166    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1757,329 ±     553,464  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    225274,446 ±   70410,009    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0,096 ±       0,216  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        12,331 ±      27,908    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                thrpt    5        26,000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        19,000                    ms
[info] TwitterAPIBenchmark.readJackson                                                        thrpt    5     18258,797 ±     126,082   ops/s
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate                                         thrpt    5       288,686 ±       1,615  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.alloc.rate.norm                                    thrpt    5     24873,979 ±      55,952    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space                                thrpt    5       245,233 ±     539,758  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     21135,752 ±   46513,898    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space                            thrpt    5         0,573 ±       4,802  MB/sec
[info] TwitterAPIBenchmark.readJackson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        49,513 ±     414,851    B/op
[info] TwitterAPIBenchmark.readJackson:·gc.count                                              thrpt    5         4,000                counts
[info] TwitterAPIBenchmark.readJackson:·gc.time                                               thrpt    5         8,000                    ms
[info] TwitterAPIBenchmark.readJsoniter                                                       thrpt    5     41459,898 ±   10300,962   ops/s
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate                                        thrpt    5       460,846 ±     114,445  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.alloc.rate.norm                                   thrpt    5     17488,011 ±       0,004    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space                               thrpt    5       465,795 ±     701,544  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Eden_Space.norm                          thrpt    5     17958,051 ±   30274,239    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space                           thrpt    5         0,021 ±       0,113  MB/sec
[info] TwitterAPIBenchmark.readJsoniter:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0,840 ±       4,689    B/op
[info] TwitterAPIBenchmark.readJsoniter:·gc.count                                             thrpt    5         7,000                counts
[info] TwitterAPIBenchmark.readJsoniter:·gc.time                                              thrpt    5         5,000                    ms
[info] TwitterAPIBenchmark.readPlay                                                           thrpt    5      3968,147 ±     207,520   ops/s
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate                                            thrpt    5      1263,904 ±      66,271  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.alloc.rate.norm                                       thrpt    5    501096,110 ±       0,014    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space                                   thrpt    5      1275,763 ±     587,108  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Eden_Space.norm                              thrpt    5    506114,549 ±  242517,082    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space                               thrpt    5         0,008 ±       0,044  MB/sec
[info] TwitterAPIBenchmark.readPlay:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         3,280 ±      17,295    B/op
[info] TwitterAPIBenchmark.readPlay:·gc.count                                                 thrpt    5        19,000                counts
[info] TwitterAPIBenchmark.readPlay:·gc.time                                                  thrpt    5        22,000                    ms
[info] TwitterAPIBenchmark.writeJackson                                                       thrpt    5     66512,522 ±     431,699   ops/s
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate                                        thrpt    5       849,738 ±       5,476  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.alloc.rate.norm                                   thrpt    5     20100,003 ±       0,254    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space                               thrpt    5       854,319 ±     699,247  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     20203,537 ±   16438,669    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space                           thrpt    5         0,054 ±       0,176  MB/sec
[info] TwitterAPIBenchmark.writeJackson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1,280 ±       4,156    B/op
[info] TwitterAPIBenchmark.writeJackson:·gc.count                                             thrpt    5        13,000                counts
[info] TwitterAPIBenchmark.writeJackson:·gc.time                                              thrpt    5        11,000                    ms
[info] TwitterAPIBenchmark.writeJsoniter                                                      thrpt    5     92555,173 ±     561,064   ops/s
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate                                       thrpt    5       607,135 ±       3,788  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.alloc.rate.norm                                  thrpt    5     10320,005 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space                              thrpt    5       599,635 ±     573,589  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Eden_Space.norm                         thrpt    5     10191,900 ±    9741,777    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space                          thrpt    5         0,058 ±       0,143  MB/sec
[info] TwitterAPIBenchmark.writeJsoniter:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0,991 ±       2,434    B/op
[info] TwitterAPIBenchmark.writeJsoniter:·gc.count                                            thrpt    5         9,000                counts
[info] TwitterAPIBenchmark.writeJsoniter:·gc.time                                             thrpt    5         6,000                    ms
[info] TwitterAPIBenchmark.writeJsoniterPrealloc                                              thrpt    5    102395,280 ±    2904,014   ops/s
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate                               thrpt    5        12,497 ±       0,353  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.alloc.rate.norm                          thrpt    5       192,004 ±       0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[success] Total time: 2126 s, completed 13 січ. 2018 16:14:06
