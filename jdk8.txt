[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 24, 2018 6:38:42 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1046:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:448:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:456:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:948:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.16.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.16.1-SNAPSHOT.jar ...
[info] Compiling 46 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = {
[info]         val v = in.readString();
[info]         try {
[info]           Suit.valueOf(v)
[info]         } catch {
[info]           case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]         }
[info]       };
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:15:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:22:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:29:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:32:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:47:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:69:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:81:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT.jar ...
[info] Compiling 40 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 330 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 448 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.16.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk8.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 405994.481 ops/s
[info] # Warmup Iteration   2: 780660.075 ops/s
[info] # Warmup Iteration   3: 800814.888 ops/s
[info] Iteration   1: 806404.613 ops/s
[info]                  ·gc.alloc.rate:                   2123.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3900.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 805158.197 ops/s
[info]                  ·gc.alloc.rate:                   2120.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2348.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4591.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 804724.037 ops/s
[info]                  ·gc.alloc.rate:                   2118.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3959.418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 788555.460 ops/s
[info]                  ·gc.alloc.rate:                   2076.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4055.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 804562.073 ops/s
[info]                  ·gc.alloc.rate:                   2118.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3983.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   801880.876 ±(99.9%) 28818.418 ops/s [Average]
[info]   (min, avg, max) = (788555.460, 801880.876, 806404.613), stdev = 7484.052
[info]   CI (99.9%): [773062.458, 830699.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2111.326 ±(99.9%) 75.922 MB/sec [Average]
[info]   (min, avg, max) = (2076.218, 2111.326, 2123.213), stdev = 19.717
[info]   CI (99.9%): [2035.404, 2187.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.000, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2087.978 ±(99.9%) 564.517 MB/sec [Average]
[info]   (min, avg, max) = (1998.423, 2087.978, 2348.913), stdev = 146.603
[info]   CI (99.9%): [1523.461, 2652.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4098.024 ±(99.9%) 1083.405 B/op [Average]
[info]   (min, avg, max) = (3900.440, 4098.024, 4591.450), stdev = 281.357
[info]   CI (99.9%): [3014.618, 5181.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 0.373 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.155, 0.285), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.34% complete, ETA 01:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 490079.778 ops/s
[info] # Warmup Iteration   2: 1513463.141 ops/s
[info] # Warmup Iteration   3: 1589180.110 ops/s
[info] Iteration   1: 1582258.656 ops/s
[info]                  ·gc.alloc.rate:                   1270.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1297.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1563658.815 ops/s
[info]                  ·gc.alloc.rate:                   1255.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1320.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1600493.380 ops/s
[info]                  ·gc.alloc.rate:                   1285.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1579838.208 ops/s
[info]                  ·gc.alloc.rate:                   1268.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1322.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1576777.231 ops/s
[info]                  ·gc.alloc.rate:                   1266.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1333.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1580605.258 ±(99.9%) 50964.520 ops/s [Average]
[info]   (min, avg, max) = (1563658.815, 1580605.258, 1600493.380), stdev = 13235.324
[info]   CI (99.9%): [1529640.738, 1631569.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1269.449 ±(99.9%) 41.245 MB/sec [Average]
[info]   (min, avg, max) = (1255.802, 1269.449, 1285.612), stdev = 10.711
[info]   CI (99.9%): [1228.204, 1310.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1254.172 ±(99.9%) 569.824 MB/sec [Average]
[info]   (min, avg, max) = (990.400, 1254.172, 1335.946), stdev = 147.981
[info]   CI (99.9%): [684.348, 1823.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1249.684 ±(99.9%) 596.123 B/op [Average]
[info]   (min, avg, max) = (973.751, 1249.684, 1333.456), stdev = 154.811
[info]   CI (99.9%): [653.561, 1845.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.187), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.083, 0.189), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.68% complete, ETA 01:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2844411.093 ops/s
[info] # Warmup Iteration   2: 3592310.508 ops/s
[info] # Warmup Iteration   3: 3568587.040 ops/s
[info] Iteration   1: 3546859.384 ops/s
[info]                  ·gc.alloc.rate:               234.399 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113.507 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3478450.425 ops/s
[info]                  ·gc.alloc.rate:               229.856 MB/sec
[info]                  ·gc.alloc.rate.norm:          104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115.735 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3609117.938 ops/s
[info]                  ·gc.alloc.rate:                   238.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3636224.222 ops/s
[info]                  ·gc.alloc.rate:                   240.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3624912.628 ops/s
[info]                  ·gc.alloc.rate:                   239.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.631 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3579112.920 ±(99.9%) 254206.986 ops/s [Average]
[info]   (min, avg, max) = (3478450.425, 3579112.920, 3636224.222), stdev = 66016.747
[info]   CI (99.9%): [3324905.933, 3833319.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   236.526 ±(99.9%) 16.827 MB/sec [Average]
[info]   (min, avg, max) = (229.856, 236.526, 240.290), stdev = 4.370
[info]   CI (99.9%): [219.699, 253.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   271.680 ±(99.9%) 136.548 MB/sec [Average]
[info]   (min, avg, max) = (255.791, 271.680, 335.115), stdev = 35.461
[info]   CI (99.9%): [135.133, 408.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   119.400 ±(99.9%) 56.643 B/op [Average]
[info]   (min, avg, max) = (110.719, 119.400, 145.485), stdev = 14.710
[info]   CI (99.9%): [62.758, 176.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.299 ±(99.9%) 2.486 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.299, 1.454), stdev = 0.646
[info]   CI (99.9%): [≈ 0, 2.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.130 ±(99.9%) 1.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.631), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.03% complete, ETA 01:00:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31047.643 ops/s
[info] # Warmup Iteration   2: 164782.242 ops/s
[info] # Warmup Iteration   3: 169685.234 ops/s
[info] Iteration   1: 170699.966 ops/s
[info]                  ·gc.alloc.rate:                   1336.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              12320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12013.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.960 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 170277.686 ops/s
[info]                  ·gc.alloc.rate:                   1332.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              12320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12117.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 170764.320 ops/s
[info]                  ·gc.alloc.rate:                   1336.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              12320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12168.757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.576 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 168233.077 ops/s
[info]                  ·gc.alloc.rate:                   1317.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              12320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12439.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 168939.859 ops/s
[info]                  ·gc.alloc.rate:                   1322.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              12320.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12455.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   169782.981 ±(99.9%) 4374.203 ops/s [Average]
[info]   (min, avg, max) = (168233.077, 169782.981, 170764.320), stdev = 1135.967
[info]   CI (99.9%): [165408.779, 174157.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1329.233 ±(99.9%) 33.852 MB/sec [Average]
[info]   (min, avg, max) = (1317.477, 1329.233, 1336.709), stdev = 8.791
[info]   CI (99.9%): [1295.381, 1363.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12320.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12320.003, 12320.003, 12320.003), stdev = 0.001
[info]   CI (99.9%): [12320.002, 12320.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.387 ±(99.9%) 52.578 MB/sec [Average]
[info]   (min, avg, max) = (1303.460, 1320.387, 1336.945), stdev = 13.654
[info]   CI (99.9%): [1267.809, 1372.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12238.984 ±(99.9%) 763.379 B/op [Average]
[info]   (min, avg, max) = (12013.839, 12238.984, 12455.269), stdev = 198.247
[info]   CI (99.9%): [11475.606, 13002.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.617 ±(99.9%) 0.802 B/op [Average]
[info]   (min, avg, max) = (0.390, 0.617, 0.960), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 1.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.37% complete, ETA 01:00:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 607378.082 ops/s
[info] # Warmup Iteration   2: 2100409.878 ops/s
[info] # Warmup Iteration   3: 2113194.868 ops/s
[info] Iteration   1: 2097291.086 ops/s
[info]                  ·gc.alloc.rate:                   682.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.323 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2158312.264 ops/s
[info]                  ·gc.alloc.rate:                   702.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2156757.635 ops/s
[info]                  ·gc.alloc.rate:                   701.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2147172.736 ops/s
[info]                  ·gc.alloc.rate:                   698.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2153295.389 ops/s
[info]                  ·gc.alloc.rate:                   700.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2142565.822 ±(99.9%) 98840.618 ops/s [Average]
[info]   (min, avg, max) = (2097291.086, 2142565.822, 2158312.264), stdev = 25668.595
[info]   CI (99.9%): [2043725.204, 2241406.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   697.099 ±(99.9%) 32.481 MB/sec [Average]
[info]   (min, avg, max) = (682.240, 697.099, 702.299), stdev = 8.435
[info]   CI (99.9%): [664.618, 729.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.283 ±(99.9%) 571.197 MB/sec [Average]
[info]   (min, avg, max) = (650.783, 718.283, 983.632), stdev = 148.338
[info]   CI (99.9%): [147.086, 1289.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   527.374 ±(99.9%) 412.826 B/op [Average]
[info]   (min, avg, max) = (475.095, 527.374, 718.916), stdev = 107.210
[info]   CI (99.9%): [114.549, 940.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.510 ±(99.9%) 3.903 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.510, 2.323), stdev = 1.014
[info]   CI (99.9%): [≈ 0, 4.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.382 ±(99.9%) 2.931 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.382, 1.743), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.71% complete, ETA 01:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7203736.250 ops/s
[info] # Warmup Iteration   2: 6721879.434 ops/s
[info] # Warmup Iteration   3: 6900312.495 ops/s
[info] Iteration   1: 6906973.908 ops/s
[info]                  ·gc.alloc.rate:                   351.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6851854.388 ops/s
[info]                  ·gc.alloc.rate:               348.287 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 58.758 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 6803531.180 ops/s
[info]                  ·gc.alloc.rate:                   345.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.410 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7082899.464 ops/s
[info]                  ·gc.alloc.rate:                   360.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6871546.137 ops/s
[info]                  ·gc.alloc.rate:               349.431 MB/sec
[info]                  ·gc.alloc.rate.norm:          80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      662.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 151.760 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6903361.016 ±(99.9%) 412388.607 ops/s [Average]
[info]   (min, avg, max) = (6803531.180, 6903361.016, 7082899.464), stdev = 107096.012
[info]   CI (99.9%): [6490972.409, 7315749.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   350.944 ±(99.9%) 21.070 MB/sec [Average]
[info]   (min, avg, max) = (345.815, 350.944, 360.114), stdev = 5.472
[info]   CI (99.9%): [329.874, 372.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   367.870 ±(99.9%) 651.925 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 367.870, 662.868), stdev = 169.303
[info]   CI (99.9%): [≈ 0, 1019.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   83.913 ±(99.9%) 149.666 B/op [Average]
[info]   (min, avg, max) = (58.288, 83.913, 151.760), stdev = 38.868
[info]   CI (99.9%): [≈ 0, 233.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.364 ±(99.9%) 3.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.364, 1.771), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.084 ±(99.9%) 0.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.410), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 0.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 2.05% complete, ETA 01:00:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60389.602 ops/s
[info] # Warmup Iteration   2: 306122.070 ops/s
[info] # Warmup Iteration   3: 307242.177 ops/s
[info] Iteration   1: 312435.224 ops/s
[info]                  ·gc.alloc.rate:                   991.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4916.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 311920.888 ops/s
[info]                  ·gc.alloc.rate:                   989.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4937.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 312148.454 ops/s
[info]                  ·gc.alloc.rate:                   990.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4959.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 308983.737 ops/s
[info]                  ·gc.alloc.rate:                   980.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5030.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 312148.890 ops/s
[info]                  ·gc.alloc.rate:                   990.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              4992.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5009.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   311527.439 ±(99.9%) 5520.391 ops/s [Average]
[info]   (min, avg, max) = (308983.737, 311527.439, 312435.224), stdev = 1433.628
[info]   CI (99.9%): [306007.048, 317047.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   988.334 ±(99.9%) 17.098 MB/sec [Average]
[info]   (min, avg, max) = (980.453, 988.334, 991.051), stdev = 4.440
[info]   CI (99.9%): [971.237, 1005.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4992.001, 4992.001, 4992.001), stdev = 0.001
[info]   CI (99.9%): [4992.001, 4992.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.097 ±(99.9%) 27.753 MB/sec [Average]
[info]   (min, avg, max) = (976.017, 984.097, 994.049), stdev = 7.207
[info]   CI (99.9%): [956.344, 1011.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4970.720 ±(99.9%) 185.421 B/op [Average]
[info]   (min, avg, max) = (4916.275, 4970.720, 5030.561), stdev = 48.153
[info]   CI (99.9%): [4785.299, 5156.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 0.460 B/op [Average]
[info]   (min, avg, max) = (0.105, 0.273, 0.420), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.40% complete, ETA 00:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 842480.318 ops/s
[info] # Warmup Iteration   2: 1600539.332 ops/s
[info] # Warmup Iteration   3: 1619841.589 ops/s
[info] Iteration   1: 1620453.392 ops/s
[info]                  ·gc.alloc.rate:                   2528.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2680.559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2603.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1639213.558 ops/s
[info]                  ·gc.alloc.rate:                   2559.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2362.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2266.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1644469.343 ops/s
[info]                  ·gc.alloc.rate:                   2567.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710.659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2593.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1639001.177 ops/s
[info]                  ·gc.alloc.rate:                   2558.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2282.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1643643.621 ops/s
[info]                  ·gc.alloc.rate:                   2565.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2604.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1637356.218 ±(99.9%) 37629.535 ops/s [Average]
[info]   (min, avg, max) = (1620453.392, 1637356.218, 1644469.343), stdev = 9772.271
[info]   CI (99.9%): [1599726.683, 1674985.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2555.687 ±(99.9%) 60.054 MB/sec [Average]
[info]   (min, avg, max) = (2528.659, 2555.687, 2567.240), stdev = 15.596
[info]   CI (99.9%): [2495.633, 2615.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2570.303 ±(99.9%) 706.383 MB/sec [Average]
[info]   (min, avg, max) = (2362.254, 2570.303, 2720.140), stdev = 183.445
[info]   CI (99.9%): [1863.921, 3276.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2470.209 ±(99.9%) 686.808 B/op [Average]
[info]   (min, avg, max) = (2266.970, 2470.209, 2604.342), stdev = 178.362
[info]   CI (99.9%): [1783.401, 3157.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.054, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.116 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.116, 0.140), stdev = 0.016
[info]   CI (99.9%): [0.053, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 00:59:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 972284.112 ops/s
[info] # Warmup Iteration   2: 2507041.398 ops/s
[info] # Warmup Iteration   3: 2549779.249 ops/s
[info] Iteration   1: 2552616.033 ops/s
[info]                  ·gc.alloc.rate:                   1790.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2561293.241 ops/s
[info]                  ·gc.alloc.rate:                   1796.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1989.444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2591743.841 ops/s
[info]                  ·gc.alloc.rate:                   1818.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1014.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2606293.923 ops/s
[info]                  ·gc.alloc.rate:                   1828.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2569972.445 ops/s
[info]                  ·gc.alloc.rate:                   1803.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1034.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2576383.897 ±(99.9%) 85330.728 ops/s [Average]
[info]   (min, avg, max) = (2552616.033, 2576383.897, 2606293.923), stdev = 22160.119
[info]   CI (99.9%): [2491053.168, 2661714.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1807.443 ±(99.9%) 60.298 MB/sec [Average]
[info]   (min, avg, max) = (1790.524, 1807.443, 1828.212), stdev = 15.659
[info]   CI (99.9%): [1747.146, 1867.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1802.532 ±(99.9%) 712.163 MB/sec [Average]
[info]   (min, avg, max) = (1642.340, 1802.532, 2018.447), stdev = 184.946
[info]   CI (99.9%): [1090.369, 2514.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1100.785 ±(99.9%) 422.797 B/op [Average]
[info]   (min, avg, max) = (1012.633, 1100.785, 1222.481), stdev = 109.799
[info]   CI (99.9%): [677.988, 1523.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.033, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.061, 0.077), stdev = 0.011
[info]   CI (99.9%): [0.019, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 3.08% complete, ETA 00:59:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8719350.916 ops/s
[info] # Warmup Iteration   2: 9339459.430 ops/s
[info] # Warmup Iteration   3: 9726309.058 ops/s
[info] Iteration   1: 9671286.161 ops/s
[info]                  ·gc.alloc.rate:                   1229.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9437160.892 ops/s
[info]                  ·gc.alloc.rate:                   1199.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9648713.918 ops/s
[info]                  ·gc.alloc.rate:               1226.734 MB/sec
[info]                  ·gc.alloc.rate.norm:          200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 219.216 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 9611680.167 ops/s
[info]                  ·gc.alloc.rate:                   1221.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1010.578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9633577.796 ops/s
[info]                  ·gc.alloc.rate:                   1224.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9600483.787 ±(99.9%) 361397.150 ops/s [Average]
[info]   (min, avg, max) = (9437160.892, 9600483.787, 9671286.161), stdev = 93853.692
[info]   CI (99.9%): [9239086.636, 9961880.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1220.154 ±(99.9%) 46.404 MB/sec [Average]
[info]   (min, avg, max) = (1199.227, 1220.154, 1229.190), stdev = 12.051
[info]   CI (99.9%): [1173.750, 1266.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1209.962 ±(99.9%) 713.064 MB/sec [Average]
[info]   (min, avg, max) = (1003.739, 1209.962, 1350.266), stdev = 185.180
[info]   CI (99.9%): [496.898, 1923.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   198.437 ±(99.9%) 119.847 B/op [Average]
[info]   (min, avg, max) = (163.317, 198.437, 223.582), stdev = 31.124
[info]   CI (99.9%): [78.590, 318.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.011 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.024), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.42% complete, ETA 00:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137819.309 ops/s
[info] # Warmup Iteration   2: 621931.194 ops/s
[info] # Warmup Iteration   3: 644072.116 ops/s
[info] Iteration   1: 639772.870 ops/s
[info]                  ·gc.alloc.rate:                   1691.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 630412.051 ops/s
[info]                  ·gc.alloc.rate:                   1666.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4125.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 635006.178 ops/s
[info]                  ·gc.alloc.rate:                   1678.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4128.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 630888.210 ops/s
[info]                  ·gc.alloc.rate:                   1667.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4182.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.156 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 636290.200 ops/s
[info]                  ·gc.alloc.rate:                   1681.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4168.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   634473.902 ±(99.9%) 15039.357 ops/s [Average]
[info]   (min, avg, max) = (630412.051, 634473.902, 639772.870), stdev = 3905.673
[info]   CI (99.9%): [619434.544, 649513.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1677.006 ±(99.9%) 39.801 MB/sec [Average]
[info]   (min, avg, max) = (1666.267, 1677.006, 1691.029), stdev = 10.336
[info]   CI (99.9%): [1637.206, 1716.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1728.910 ±(99.9%) 509.357 MB/sec [Average]
[info]   (min, avg, max) = (1652.352, 1728.910, 1964.510), stdev = 132.278
[info]   CI (99.9%): [1219.553, 2238.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4287.611 ±(99.9%) 1177.425 B/op [Average]
[info]   (min, avg, max) = (4125.260, 4287.611, 4832.774), stdev = 305.774
[info]   CI (99.9%): [3110.186, 5465.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.248 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (0.156, 0.248, 0.312), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.77% complete, ETA 00:59:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1060162.538 ops/s
[info] # Warmup Iteration   2: 1918887.101 ops/s
[info] # Warmup Iteration   3: 1949406.476 ops/s
[info] Iteration   1: 1922125.819 ops/s
[info]                  ·gc.alloc.rate:                   1934.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1635.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1916679.699 ops/s
[info]                  ·gc.alloc.rate:                   1929.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1650.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.085 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1912855.362 ops/s
[info]                  ·gc.alloc.rate:                   1926.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1386.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1916464.829 ops/s
[info]                  ·gc.alloc.rate:                   1928.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1666.664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.034 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1925585.058 ops/s
[info]                  ·gc.alloc.rate:                   1938.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              1584.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1662.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1918742.153 ±(99.9%) 19479.917 ops/s [Average]
[info]   (min, avg, max) = (1912855.362, 1918742.153, 1925585.058), stdev = 5058.873
[info]   CI (99.9%): [1899262.236, 1938222.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1931.470 ±(99.9%) 18.632 MB/sec [Average]
[info]   (min, avg, max) = (1926.126, 1931.470, 1938.244), stdev = 4.839
[info]   CI (99.9%): [1912.839, 1950.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1584.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1584.000, 1584.000, 1584.000), stdev = 0.001
[info]   CI (99.9%): [1584.000, 1584.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1951.709 ±(99.9%) 575.700 MB/sec [Average]
[info]   (min, avg, max) = (1685.563, 1951.709, 2034.672), stdev = 149.508
[info]   CI (99.9%): [1376.009, 2527.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1600.452 ±(99.9%) 463.593 B/op [Average]
[info]   (min, avg, max) = (1386.167, 1600.452, 1666.664), stdev = 120.394
[info]   CI (99.9%): [1136.859, 2064.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.068, 0.102), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 4.11% complete, ETA 00:58:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2080146.464 ops/s
[info] # Warmup Iteration   2: 5741998.032 ops/s
[info] # Warmup Iteration   3: 5901886.479 ops/s
[info] Iteration   1: 5995980.054 ops/s
[info]                  ·gc.alloc.rate:                   1646.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1635.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     429.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6012280.304 ops/s
[info]                  ·gc.alloc.rate:                   1650.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 6058187.525 ops/s
[info]                  ·gc.alloc.rate:                   1662.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6063066.685 ops/s
[info]                  ·gc.alloc.rate:                   1664.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6068512.060 ops/s
[info]                  ·gc.alloc.rate:                   1665.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     436.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6039605.325 ±(99.9%) 127437.611 ops/s [Average]
[info]   (min, avg, max) = (5995980.054, 6039605.325, 6068512.060), stdev = 33095.143
[info]   CI (99.9%): [5912167.715, 6167042.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1657.905 ±(99.9%) 34.730 MB/sec [Average]
[info]   (min, avg, max) = (1646.098, 1657.905, 1665.953), stdev = 9.019
[info]   CI (99.9%): [1623.175, 1692.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1662.556 ±(99.9%) 74.873 MB/sec [Average]
[info]   (min, avg, max) = (1635.694, 1662.556, 1684.552), stdev = 19.444
[info]   CI (99.9%): [1587.683, 1737.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   433.201 ±(99.9%) 11.167 B/op [Average]
[info]   (min, avg, max) = (429.270, 433.201, 436.823), stdev = 2.900
[info]   CI (99.9%): [422.035, 444.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.022, 0.028, 0.038), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.45% complete, ETA 00:58:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13570093.091 ops/s
[info] # Warmup Iteration   2: 21829421.189 ops/s
[info] # Warmup Iteration   3: 22328112.307 ops/s
[info] Iteration   1: 22257151.022 ops/s
[info]                  ·gc.alloc.rate:                   678.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22476563.237 ops/s
[info]                  ·gc.alloc.rate:                   685.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 22473525.144 ops/s
[info]                  ·gc.alloc.rate:                   685.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 22472469.630 ops/s
[info]                  ·gc.alloc.rate:                   685.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 22693846.141 ops/s
[info]                  ·gc.alloc.rate:                   692.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   22474711.035 ±(99.9%) 594554.932 ops/s [Average]
[info]   (min, avg, max) = (22257151.022, 22474711.035, 22693846.141), stdev = 154404.028
[info]   CI (99.9%): [21880156.103, 23069265.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   685.582 ±(99.9%) 18.354 MB/sec [Average]
[info]   (min, avg, max) = (678.778, 685.582, 692.253), stdev = 4.766
[info]   CI (99.9%): [667.228, 703.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.211 ±(99.9%) 574.386 MB/sec [Average]
[info]   (min, avg, max) = (663.513, 731.211, 998.042), stdev = 149.166
[info]   CI (99.9%): [156.825, 1305.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   51.196 ±(99.9%) 40.206 B/op [Average]
[info]   (min, avg, max) = (46.177, 51.196, 69.866), stdev = 10.441
[info]   CI (99.9%): [10.990, 91.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.399 ±(99.9%) 3.077 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.399, 1.828), stdev = 0.799
[info]   CI (99.9%): [≈ 0, 3.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.218 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.129), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.79% complete, ETA 00:58:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20863430.726 ops/s
[info] # Warmup Iteration   2: 26124584.399 ops/s
[info] # Warmup Iteration   3: 26478327.416 ops/s
[info] Iteration   1: 26503841.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 26489778.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 26500862.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 26457602.512 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 26484994.678 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   26487415.966 ±(99.9%) 70764.248 ops/s [Average]
[info]   (min, avg, max) = (26457602.512, 26487415.966, 26503841.715), stdev = 18377.250
[info]   CI (99.9%): [26416651.718, 26558180.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 5.14% complete, ETA 00:58:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 349514.354 ops/s
[info] # Warmup Iteration   2: 1100874.146 ops/s
[info] # Warmup Iteration   3: 1097199.885 ops/s
[info] Iteration   1: 1111751.719 ops/s
[info]                  ·gc.alloc.rate:                   1689.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2320.271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1093448.854 ops/s
[info]                  ·gc.alloc.rate:                   1661.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2380.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.180 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1104301.348 ops/s
[info]                  ·gc.alloc.rate:                   1678.803 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2374.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1106307.117 ops/s
[info]                  ·gc.alloc.rate:                   1682.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2386.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1102446.076 ops/s
[info]                  ·gc.alloc.rate:                   1675.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              2392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2406.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1103651.023 ±(99.9%) 25732.790 ops/s [Average]
[info]   (min, avg, max) = (1093448.854, 1103651.023, 1111751.719), stdev = 6682.724
[info]   CI (99.9%): [1077918.233, 1129383.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1677.632 ±(99.9%) 39.599 MB/sec [Average]
[info]   (min, avg, max) = (1661.788, 1677.632, 1689.750), stdev = 10.284
[info]   CI (99.9%): [1638.034, 1717.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2392.000, 2392.000, 2392.000), stdev = 0.001
[info]   CI (99.9%): [2392.000, 2392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.665 ±(99.9%) 72.007 MB/sec [Average]
[info]   (min, avg, max) = (1639.080, 1664.665, 1685.582), stdev = 18.700
[info]   CI (99.9%): [1592.658, 1736.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2373.602 ±(99.9%) 123.420 B/op [Average]
[info]   (min, avg, max) = (2320.271, 2373.602, 2406.092), stdev = 32.052
[info]   CI (99.9%): [2250.182, 2497.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.143, 0.180), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.48% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12275.712 ops/s
[info] # Warmup Iteration   2: 14762.705 ops/s
[info] # Warmup Iteration   3: 14963.145 ops/s
[info] Iteration   1: 14994.946 ops/s
[info]                  ·gc.alloc.rate:                   1334.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              140048.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139269.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.109 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14895.921 ops/s
[info]                  ·gc.alloc.rate:                   1325.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              140048.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140757.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14642.723 ops/s
[info]                  ·gc.alloc.rate:                   1303.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              140048.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143771.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.950 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14976.281 ops/s
[info]                  ·gc.alloc.rate:                   1332.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              140048.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141126.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.563 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14870.283 ops/s
[info]                  ·gc.alloc.rate:                   1323.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              140048.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142625.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.219 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   14876.031 ±(99.9%) 541.327 ops/s [Average]
[info]   (min, avg, max) = (14642.723, 14876.031, 14994.946), stdev = 140.581
[info]   CI (99.9%): [14334.704, 15417.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1323.778 ±(99.9%) 47.833 MB/sec [Average]
[info]   (min, avg, max) = (1303.199, 1323.778, 1334.359), stdev = 12.422
[info]   CI (99.9%): [1275.945, 1371.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140048.057 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (140048.029, 140048.057, 140048.123), stdev = 0.039
[info]   CI (99.9%): [140047.905, 140048.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1337.491 ±(99.9%) 31.478 MB/sec [Average]
[info]   (min, avg, max) = (1326.941, 1337.491, 1347.486), stdev = 8.175
[info]   CI (99.9%): [1306.012, 1368.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   141510.209 ±(99.9%) 6695.549 B/op [Average]
[info]   (min, avg, max) = (139269.462, 141510.209, 143771.977), stdev = 1738.813
[info]   CI (99.9%): [134814.661, 148205.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.007 ±(99.9%) 11.882 B/op [Average]
[info]   (min, avg, max) = (6.563, 11.007, 13.219), stdev = 3.086
[info]   CI (99.9%): [≈ 0, 22.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.82% complete, ETA 00:57:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12297.815 ops/s
[info] # Warmup Iteration   2: 18381.536 ops/s
[info] # Warmup Iteration   3: 18422.611 ops/s
[info] Iteration   1: 18120.715 ops/s
[info]                  ·gc.alloc.rate:                   699.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              60779.616 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56788.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.849 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18692.115 ops/s
[info]                  ·gc.alloc.rate:                   722.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              60800.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55076.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.258 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18631.217 ops/s
[info]                  ·gc.alloc.rate:               719.906 MB/sec
[info]                  ·gc.alloc.rate.norm:          60800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55312.595 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 18696.449 ops/s
[info]                  ·gc.alloc.rate:                   722.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              60776.600 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82932.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18612.842 ops/s
[info]                  ·gc.alloc.rate:                   718.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              60768.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55707.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.321 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   18550.668 ±(99.9%) 936.255 ops/s [Average]
[info]   (min, avg, max) = (18120.715, 18550.668, 18696.449), stdev = 243.142
[info]   CI (99.9%): [17614.413, 19486.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   716.570 ±(99.9%) 36.370 MB/sec [Average]
[info]   (min, avg, max) = (699.892, 716.570, 722.300), stdev = 9.445
[info]   CI (99.9%): [680.200, 752.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   60784.859 ±(99.9%) 55.780 B/op [Average]
[info]   (min, avg, max) = (60768.023, 60784.859, 60800.032), stdev = 14.486
[info]   CI (99.9%): [60729.079, 60840.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.479 ±(99.9%) 568.624 MB/sec [Average]
[info]   (min, avg, max) = (653.933, 721.479, 985.616), stdev = 147.670
[info]   CI (99.9%): [152.855, 1290.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   61163.387 ±(99.9%) 46928.442 B/op [Average]
[info]   (min, avg, max) = (55076.039, 61163.387, 82932.829), stdev = 12187.167
[info]   CI (99.9%): [14234.945, 108091.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.737 ±(99.9%) 19.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.737, 12.321), stdev = 4.946
[info]   CI (99.9%): [≈ 0, 25.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 6.16% complete, ETA 00:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15830.129 ops/s
[info] # Warmup Iteration   2: 16521.976 ops/s
[info] # Warmup Iteration   3: 17055.647 ops/s
[info] Iteration   1: 17102.854 ops/s
[info]                  ·gc.alloc.rate:               317.339 MB/sec
[info]                  ·gc.alloc.rate.norm:          29200.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23538.711 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 17036.493 ops/s
[info]                  ·gc.alloc.rate:                   316.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47262.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.846 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 17055.261 ops/s
[info]                  ·gc.alloc.rate:                   316.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30735.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17085.861 ops/s
[info]                  ·gc.alloc.rate:                   316.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30681.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 17099.034 ops/s
[info]                  ·gc.alloc.rate:                   317.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              29200.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30595.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.832 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   17075.900 ±(99.9%) 111.266 ops/s [Average]
[info]   (min, avg, max) = (17036.493, 17075.900, 17102.854), stdev = 28.895
[info]   CI (99.9%): [16964.634, 17187.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   316.869 ±(99.9%) 1.992 MB/sec [Average]
[info]   (min, avg, max) = (316.192, 316.869, 317.339), stdev = 0.517
[info]   CI (99.9%): [314.876, 318.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29200.028 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (29200.025, 29200.028, 29200.035), stdev = 0.004
[info]   CI (99.9%): [29200.013, 29200.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   353.260 ±(99.9%) 364.638 MB/sec [Average]
[info]   (min, avg, max) = (255.813, 353.260, 511.782), stdev = 94.695
[info]   CI (99.9%): [≈ 0, 717.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   32562.744 ±(99.9%) 33803.807 B/op [Average]
[info]   (min, avg, max) = (23538.711, 32562.744, 47262.537), stdev = 8778.741
[info]   CI (99.9%): [≈ 0, 66366.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.352 ±(99.9%) 2.810 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.352, 1.657), stdev = 0.730
[info]   CI (99.9%): [≈ 0, 3.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.498 ±(99.9%) 259.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.498, 152.896), stdev = 67.323
[info]   CI (99.9%): [≈ 0, 291.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.51% complete, ETA 00:57:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9989.123 ops/s
[info] # Warmup Iteration   2: 16416.503 ops/s
[info] # Warmup Iteration   3: 16928.989 ops/s
[info] Iteration   1: 16535.804 ops/s
[info]                  ·gc.alloc.rate:                   933.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93578.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.888 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16851.846 ops/s
[info]                  ·gc.alloc.rate:                   951.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91891.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.777 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16886.881 ops/s
[info]                  ·gc.alloc.rate:               952.916 MB/sec
[info]                  ·gc.alloc.rate.norm:          88808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      988.235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 92099.615 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 16858.019 ops/s
[info]                  ·gc.alloc.rate:                   951.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92568.968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16548.854 ops/s
[info]                  ·gc.alloc.rate:                   933.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              88808.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94803.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.980 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   16736.281 ±(99.9%) 683.898 ops/s [Average]
[info]   (min, avg, max) = (16535.804, 16736.281, 16886.881), stdev = 177.606
[info]   CI (99.9%): [16052.383, 17420.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   944.484 ±(99.9%) 38.565 MB/sec [Average]
[info]   (min, avg, max) = (933.144, 944.484, 952.916), stdev = 10.015
[info]   CI (99.9%): [905.919, 983.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88808.028 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (88808.026, 88808.028, 88808.035), stdev = 0.004
[info]   CI (99.9%): [88808.013, 88808.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   988.848 ±(99.9%) 21.847 MB/sec [Average]
[info]   (min, avg, max) = (983.271, 988.848, 997.001), stdev = 5.673
[info]   CI (99.9%): [967.001, 1010.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   92988.623 ±(99.9%) 4641.802 B/op [Average]
[info]   (min, avg, max) = (91891.940, 92988.623, 94803.890), stdev = 1205.461
[info]   CI (99.9%): [88346.821, 97630.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.272 ±(99.9%) 19.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.272, 11.888), stdev = 5.085
[info]   CI (99.9%): [≈ 0, 25.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.85% complete, ETA 00:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8892.799 ops/s
[info] # Warmup Iteration   2: 12197.390 ops/s
[info] # Warmup Iteration   3: 12108.075 ops/s
[info] Iteration   1: 12495.267 ops/s
[info]                  ·gc.alloc.rate:                   1728.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1660.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209161.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.866 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 12363.899 ops/s
[info]                  ·gc.alloc.rate:                   1710.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              217680.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212666.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.249 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12468.334 ops/s
[info]                  ·gc.alloc.rate:                   1725.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              217727.631 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211985.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12458.383 ops/s
[info]                  ·gc.alloc.rate:                   1723.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              217744.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     255727.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.259 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12602.140 ops/s
[info]                  ·gc.alloc.rate:                   1743.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              217744.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211378.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.799 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   12477.605 ±(99.9%) 329.029 ops/s [Average]
[info]   (min, avg, max) = (12363.899, 12477.605, 12602.140), stdev = 85.448
[info]   CI (99.9%): [12148.576, 12806.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1726.176 ±(99.9%) 45.808 MB/sec [Average]
[info]   (min, avg, max) = (1710.131, 1726.176, 1743.448), stdev = 11.896
[info]   CI (99.9%): [1680.367, 1771.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   217715.154 ±(99.9%) 126.113 B/op [Average]
[info]   (min, avg, max) = (217680.035, 217715.154, 217744.035), stdev = 32.751
[info]   CI (99.9%): [217589.041, 217841.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1745.626 ±(99.9%) 602.408 MB/sec [Average]
[info]   (min, avg, max) = (1660.607, 1745.626, 2024.694), stdev = 156.443
[info]   CI (99.9%): [1143.218, 2348.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   220183.944 ±(99.9%) 76677.892 B/op [Average]
[info]   (min, avg, max) = (209161.463, 220183.944, 255727.667), stdev = 19913.005
[info]   CI (99.9%): [143506.052, 296861.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.462 ±(99.9%) 13.728 B/op [Average]
[info]   (min, avg, max) = (5.259, 9.462, 13.249), stdev = 3.565
[info]   CI (99.9%): [≈ 0, 23.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 7.19% complete, ETA 00:57:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6724.470 ops/s
[info] # Warmup Iteration   2: 12241.144 ops/s
[info] # Warmup Iteration   3: 12332.620 ops/s
[info] Iteration   1: 12337.238 ops/s
[info]                  ·gc.alloc.rate:                   1501.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.174 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166973.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.933 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12262.474 ops/s
[info]                  ·gc.alloc.rate:                   1492.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211570.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.359 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12348.812 ops/s
[info]                  ·gc.alloc.rate:                   1502.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169456.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 12338.322 ops/s
[info]                  ·gc.alloc.rate:                   1501.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213411.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12364.170 ops/s
[info]                  ·gc.alloc.rate:                   1504.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              191496.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171116.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   12330.203 ±(99.9%) 151.633 ops/s [Average]
[info]   (min, avg, max) = (12262.474, 12330.203, 12364.170), stdev = 39.379
[info]   CI (99.9%): [12178.571, 12481.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1500.416 ±(99.9%) 17.438 MB/sec [Average]
[info]   (min, avg, max) = (1492.682, 1500.416, 1504.450), stdev = 4.529
[info]   CI (99.9%): [1482.978, 1517.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   191496.068 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (191496.035, 191496.068, 191496.174), stdev = 0.060
[info]   CI (99.9%): [191495.837, 191496.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1461.023 ±(99.9%) 705.916 MB/sec [Average]
[info]   (min, avg, max) = (1308.807, 1461.023, 1673.143), stdev = 183.324
[info]   CI (99.9%): [755.107, 2166.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   186505.707 ±(99.9%) 91552.750 B/op [Average]
[info]   (min, avg, max) = (166973.407, 186505.707, 213411.558), stdev = 23775.959
[info]   CI (99.9%): [94952.957, 278058.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.692 ±(99.9%) 24.608 B/op [Average]
[info]   (min, avg, max) = (2.653, 11.692, 18.549), stdev = 6.391
[info]   CI (99.9%): [≈ 0, 36.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.53% complete, ETA 00:56:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11174.104 ops/s
[info] # Warmup Iteration   2: 13051.607 ops/s
[info] # Warmup Iteration   3: 13303.400 ops/s
[info] Iteration   1: 13130.418 ops/s
[info]                  ·gc.alloc.rate:                   1551.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199542.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.981 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13201.425 ops/s
[info]                  ·gc.alloc.rate:                   1559.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199407.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13350.860 ops/s
[info]                  ·gc.alloc.rate:                   1577.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158456.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13337.204 ops/s
[info]                  ·gc.alloc.rate:                   1575.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198946.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.369 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13340.957 ops/s
[info]                  ·gc.alloc.rate:                   1576.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              185904.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199436.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   13272.173 ±(99.9%) 386.273 ops/s [Average]
[info]   (min, avg, max) = (13130.418, 13272.173, 13350.860), stdev = 100.314
[info]   CI (99.9%): [12885.900, 13658.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1568.014 ±(99.9%) 45.079 MB/sec [Average]
[info]   (min, avg, max) = (1551.604, 1568.014, 1577.313), stdev = 11.707
[info]   CI (99.9%): [1522.935, 1613.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   185904.035 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (185904.032, 185904.035, 185904.044), stdev = 0.005
[info]   CI (99.9%): [185904.016, 185904.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1611.912 ±(99.9%) 577.097 MB/sec [Average]
[info]   (min, avg, max) = (1344.432, 1611.912, 1690.960), stdev = 149.870
[info]   CI (99.9%): [1034.815, 2189.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   191157.900 ±(99.9%) 70398.028 B/op [Average]
[info]   (min, avg, max) = (158456.370, 191157.900, 199542.448), stdev = 18282.144
[info]   CI (99.9%): [120759.873, 261555.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.389 ±(99.9%) 12.474 B/op [Average]
[info]   (min, avg, max) = (4.908, 9.389, 12.408), stdev = 3.239
[info]   CI (99.9%): [≈ 0, 21.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.88% complete, ETA 00:56:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11402.793 ops/s
[info] # Warmup Iteration   2: 13351.129 ops/s
[info] # Warmup Iteration   3: 13569.447 ops/s
[info] Iteration   1: 13429.925 ops/s
[info]                  ·gc.alloc.rate:                   1540.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              180568.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195085.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.319 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13484.089 ops/s
[info]                  ·gc.alloc.rate:                   1547.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              180568.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195223.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.718 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13579.935 ops/s
[info]                  ·gc.alloc.rate:                   1558.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              180568.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155784.905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.237 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13605.377 ops/s
[info]                  ·gc.alloc.rate:                   1561.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              180568.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195028.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.224 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 13440.012 ops/s
[info]                  ·gc.alloc.rate:                   1542.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              180568.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158355.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.875 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   13507.868 ±(99.9%) 310.130 ops/s [Average]
[info]   (min, avg, max) = (13429.925, 13507.868, 13605.377), stdev = 80.540
[info]   CI (99.9%): [13197.738, 13817.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1549.939 ±(99.9%) 35.824 MB/sec [Average]
[info]   (min, avg, max) = (1540.758, 1549.939, 1561.021), stdev = 9.303
[info]   CI (99.9%): [1514.115, 1585.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   180568.034 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (180568.032, 180568.034, 180568.044), stdev = 0.005
[info]   CI (99.9%): [180568.014, 180568.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1544.121 ±(99.9%) 688.727 MB/sec [Average]
[info]   (min, avg, max) = (1344.459, 1544.121, 1686.031), stdev = 178.860
[info]   CI (99.9%): [855.393, 2232.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   179895.443 ±(99.9%) 80311.359 B/op [Average]
[info]   (min, avg, max) = (155784.905, 179895.443, 195223.129), stdev = 20856.605
[info]   CI (99.9%): [99584.083, 260206.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   7.275 ±(99.9%) 6.595 B/op [Average]
[info]   (min, avg, max) = (4.875, 7.275, 9.718), stdev = 1.713
[info]   CI (99.9%): [0.680, 13.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 8.22% complete, ETA 00:56:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3007.327 ops/s
[info] # Warmup Iteration   2: 4135.126 ops/s
[info] # Warmup Iteration   3: 4279.140 ops/s
[info] Iteration   1: 4286.849 ops/s
[info]                  ·gc.alloc.rate:                   1182.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              434296.170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362159.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4269.332 ops/s
[info]                  ·gc.alloc.rate:                   1178.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              434296.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486847.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4282.580 ops/s
[info]                  ·gc.alloc.rate:                   1181.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              434296.101 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     365802.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15.298 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4270.197 ops/s
[info]                  ·gc.alloc.rate:                   1178.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              434295.706 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     491512.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4278.173 ops/s
[info]                  ·gc.alloc.rate:                   1180.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              434296.503 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369415.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.974 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   4277.426 ±(99.9%) 29.432 ops/s [Average]
[info]   (min, avg, max) = (4269.332, 4277.426, 4286.849), stdev = 7.643
[info]   CI (99.9%): [4247.994, 4306.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1180.463 ±(99.9%) 7.671 MB/sec [Average]
[info]   (min, avg, max) = (1178.386, 1180.463, 1182.914), stdev = 1.992
[info]   CI (99.9%): [1172.792, 1188.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   434296.104 ±(99.9%) 1.099 B/op [Average]
[info]   (min, avg, max) = (434295.706, 434296.104, 434296.503), stdev = 0.286
[info]   CI (99.9%): [434295.004, 434297.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1128.186 ±(99.9%) 700.939 MB/sec [Average]
[info]   (min, avg, max) = (986.432, 1128.186, 1333.844), stdev = 182.032
[info]   CI (99.9%): [427.247, 1829.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   415147.464 ±(99.9%) 260499.534 B/op [Average]
[info]   (min, avg, max) = (362159.761, 415147.464, 491512.328), stdev = 67650.902
[info]   CI (99.9%): [154647.931, 675646.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   27.596 ±(99.9%) 68.088 B/op [Average]
[info]   (min, avg, max) = (7.642, 27.596, 46.033), stdev = 17.682
[info]   CI (99.9%): [≈ 0, 95.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.56% complete, ETA 00:56:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5820.661 ops/s
[info] # Warmup Iteration   2: 7346.706 ops/s
[info] # Warmup Iteration   3: 7466.903 ops/s
[info] Iteration   1: 7447.874 ops/s
[info]                  ·gc.alloc.rate:                   1253.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280549.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.596 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7443.306 ops/s
[info]                  ·gc.alloc.rate:                   1252.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281685.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.007 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7452.213 ops/s
[info]                  ·gc.alloc.rate:                   1253.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282471.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.396 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7456.575 ops/s
[info]                  ·gc.alloc.rate:                   1255.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.062 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283444.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.787 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7336.837 ops/s
[info]                  ·gc.alloc.rate:                   1234.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              264824.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216601.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26.789 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   7427.361 ±(99.9%) 195.785 ops/s [Average]
[info]   (min, avg, max) = (7336.837, 7427.361, 7456.575), stdev = 50.845
[info]   CI (99.9%): [7231.576, 7623.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1250.073 ±(99.9%) 33.598 MB/sec [Average]
[info]   (min, avg, max) = (1234.533, 1250.073, 1255.226), stdev = 8.725
[info]   CI (99.9%): [1216.475, 1283.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   264824.060 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (264824.058, 264824.060, 264824.062), stdev = 0.002
[info]   CI (99.9%): [264824.051, 264824.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.322 ±(99.9%) 561.361 MB/sec [Average]
[info]   (min, avg, max) = (1009.735, 1270.322, 1343.484), stdev = 145.784
[info]   CI (99.9%): [708.962, 1831.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   268950.587 ±(99.9%) 112758.624 B/op [Average]
[info]   (min, avg, max) = (216601.883, 268950.587, 283444.518), stdev = 29283.056
[info]   CI (99.9%): [156191.963, 381709.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.915 ±(99.9%) 35.589 B/op [Average]
[info]   (min, avg, max) = (4.396, 15.915, 26.789), stdev = 9.242
[info]   CI (99.9%): [≈ 0, 51.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.90% complete, ETA 00:56:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17533.648 ops/s
[info] # Warmup Iteration   2: 24957.224 ops/s
[info] # Warmup Iteration   3: 25510.811 ops/s
[info] Iteration   1: 25317.622 ops/s
[info]                  ·gc.alloc.rate:                   1088.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              67664.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61037.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 25725.023 ops/s
[info]                  ·gc.alloc.rate:                   1105.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              67652.325 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80449.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.547 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25853.792 ops/s
[info]                  ·gc.alloc.rate:                   1111.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60340.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 25825.823 ops/s
[info]                  ·gc.alloc.rate:                   1109.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60712.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.806 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25745.368 ops/s
[info]                  ·gc.alloc.rate:                   1106.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              67632.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81608.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.545 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   25693.526 ±(99.9%) 835.180 ops/s [Average]
[info]   (min, avg, max) = (25317.622, 25693.526, 25853.792), stdev = 216.894
[info]   CI (99.9%): [24858.346, 26528.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1104.310 ±(99.9%) 35.134 MB/sec [Average]
[info]   (min, avg, max) = (1088.461, 1104.310, 1111.013), stdev = 9.124
[info]   CI (99.9%): [1069.176, 1139.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   67642.479 ±(99.9%) 57.412 B/op [Average]
[info]   (min, avg, max) = (67632.017, 67642.479, 67664.017), stdev = 14.910
[info]   CI (99.9%): [67585.067, 67699.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.895 ±(99.9%) 707.916 MB/sec [Average]
[info]   (min, avg, max) = (981.871, 1123.895, 1334.976), stdev = 183.844
[info]   CI (99.9%): [415.979, 1831.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68829.865 ±(99.9%) 42922.110 B/op [Average]
[info]   (min, avg, max) = (60340.362, 68829.865, 81608.851), stdev = 11146.736
[info]   CI (99.9%): [25907.755, 111751.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.589 ±(99.9%) 10.121 B/op [Average]
[info]   (min, avg, max) = (2.545, 4.589, 8.871), stdev = 2.629
[info]   CI (99.9%): [≈ 0, 14.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.25% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27627.660 ops/s
[info] # Warmup Iteration   2: 30043.750 ops/s
[info] # Warmup Iteration   3: 30025.574 ops/s
[info] Iteration   1: 30352.942 ops/s
[info]                  ·gc.alloc.rate:                   551.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17288.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 30497.030 ops/s
[info]                  ·gc.alloc.rate:                   553.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34394.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30345.702 ops/s
[info]                  ·gc.alloc.rate:                   550.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34548.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 30408.047 ops/s
[info]                  ·gc.alloc.rate:               551.974 MB/sec
[info]                  ·gc.alloc.rate.norm:          28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17238.377 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 30341.263 ops/s
[info]                  ·gc.alloc.rate:                   550.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34554.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   30388.997 ±(99.9%) 254.602 ops/s [Average]
[info]   (min, avg, max) = (30341.263, 30388.997, 30497.030), stdev = 66.119
[info]   CI (99.9%): [30134.395, 30643.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   551.665 ±(99.9%) 4.675 MB/sec [Average]
[info]   (min, avg, max) = (550.775, 551.665, 553.660), stdev = 1.214
[info]   CI (99.9%): [546.991, 556.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.020), stdev = 0.002
[info]   CI (99.9%): [28568.007, 28568.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   533.093 ±(99.9%) 702.373 MB/sec [Average]
[info]   (min, avg, max) = (333.070, 533.093, 666.579), stdev = 182.404
[info]   CI (99.9%): [≈ 0, 1235.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27604.639 ±(99.9%) 36352.527 B/op [Average]
[info]   (min, avg, max) = (17238.377, 27604.639, 34554.010), stdev = 9440.636
[info]   CI (99.9%): [≈ 0, 63957.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.533 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.530), stdev = 0.658
[info]   CI (99.9%): [≈ 0, 2.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   18.456 ±(99.9%) 131.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.456, 79.341), stdev = 34.095
[info]   CI (99.9%): [≈ 0, 149.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.59% complete, ETA 00:55:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7741.866 ops/s
[info] # Warmup Iteration   2: 13236.368 ops/s
[info] # Warmup Iteration   3: 13277.294 ops/s
[info] Iteration   1: 13276.127 ops/s
[info]                  ·gc.alloc.rate:                   1432.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              169832.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194214.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.935 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 13372.282 ops/s
[info]                  ·gc.alloc.rate:                   1443.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              169832.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     155385.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.250 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 13340.317 ops/s
[info]                  ·gc.alloc.rate:                   1439.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              169832.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156779.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.912 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13379.236 ops/s
[info]                  ·gc.alloc.rate:                   1443.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              169831.906 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196637.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.449 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 13416.851 ops/s
[info]                  ·gc.alloc.rate:                   1447.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              169832.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157688.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.768 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   13356.963 ±(99.9%) 203.110 ops/s [Average]
[info]   (min, avg, max) = (13276.127, 13356.963, 13416.851), stdev = 52.747
[info]   CI (99.9%): [13153.853, 13560.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1441.395 ±(99.9%) 22.159 MB/sec [Average]
[info]   (min, avg, max) = (1432.601, 1441.395, 1447.981), stdev = 5.755
[info]   CI (99.9%): [1419.236, 1463.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   169832.033 ±(99.9%) 0.350 B/op [Average]
[info]   (min, avg, max) = (169831.906, 169832.033, 169832.160), stdev = 0.091
[info]   CI (99.9%): [169831.684, 169832.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1460.716 ±(99.9%) 684.903 MB/sec [Average]
[info]   (min, avg, max) = (1320.410, 1460.716, 1671.533), stdev = 177.867
[info]   CI (99.9%): [775.813, 2145.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   172141.069 ±(99.9%) 81976.729 B/op [Average]
[info]   (min, avg, max) = (155385.244, 172141.069, 196637.384), stdev = 21289.096
[info]   CI (99.9%): [90164.341, 254117.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6.863 ±(99.9%) 15.458 B/op [Average]
[info]   (min, avg, max) = (2.449, 6.863, 12.250), stdev = 4.014
[info]   CI (99.9%): [≈ 0, 22.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.93% complete, ETA 00:55:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12671.056 ops/s
[info] # Warmup Iteration   2: 14235.852 ops/s
[info] # Warmup Iteration   3: 14499.740 ops/s
[info] Iteration   1: 14363.603 ops/s
[info]                  ·gc.alloc.rate:                   1391.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145724.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14315.940 ops/s
[info]                  ·gc.alloc.rate:                   1387.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     146762.558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.443 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 14110.416 ops/s
[info]                  ·gc.alloc.rate:                   1367.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     186948.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.932 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14547.814 ops/s
[info]                  ·gc.alloc.rate:                   1409.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145719.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14395.715 ops/s
[info]                  ·gc.alloc.rate:                   1394.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              152456.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     147622.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.103 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   14346.698 ±(99.9%) 608.571 ops/s [Average]
[info]   (min, avg, max) = (14110.416, 14346.698, 14547.814), stdev = 158.044
[info]   CI (99.9%): [13738.127, 14955.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1390.049 ±(99.9%) 58.325 MB/sec [Average]
[info]   (min, avg, max) = (1367.436, 1390.049, 1409.399), stdev = 15.147
[info]   CI (99.9%): [1331.724, 1448.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152456.033 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (152456.030, 152456.033, 152456.041), stdev = 0.005
[info]   CI (99.9%): [152456.016, 152456.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1407.977 ±(99.9%) 579.577 MB/sec [Average]
[info]   (min, avg, max) = (1330.077, 1407.977, 1676.812), stdev = 150.514
[info]   CI (99.9%): [828.399, 1987.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   154555.519 ±(99.9%) 69795.569 B/op [Average]
[info]   (min, avg, max) = (145719.634, 154555.519, 186948.499), stdev = 18125.688
[info]   CI (99.9%): [84759.950, 224351.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.621 ±(99.9%) 13.422 B/op [Average]
[info]   (min, avg, max) = (4.504, 9.621, 13.932), stdev = 3.486
[info]   CI (99.9%): [≈ 0, 23.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 10.27% complete, ETA 00:55:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12823.887 ops/s
[info] # Warmup Iteration   2: 14618.252 ops/s
[info] # Warmup Iteration   3: 14718.023 ops/s
[info] Iteration   1: 14783.962 ops/s
[info]                  ·gc.alloc.rate:                   1383.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141575.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14848.902 ops/s
[info]                  ·gc.alloc.rate:                   1389.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141495.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14777.963 ops/s
[info]                  ·gc.alloc.rate:                   1382.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142742.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.651 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14896.363 ops/s
[info]                  ·gc.alloc.rate:                   1393.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177789.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 14939.203 ops/s
[info]                  ·gc.alloc.rate:                   1397.914 MB/sec
[info]                  ·gc.alloc.rate.norm:              147248.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142257.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.579 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   14849.279 ±(99.9%) 269.927 ops/s [Average]
[info]   (min, avg, max) = (14777.963, 14849.279, 14939.203), stdev = 70.099
[info]   CI (99.9%): [14579.351, 15119.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1389.469 ±(99.9%) 25.722 MB/sec [Average]
[info]   (min, avg, max) = (1382.613, 1389.469, 1397.914), stdev = 6.680
[info]   CI (99.9%): [1363.748, 1415.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   147248.031 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (147248.029, 147248.031, 147248.040), stdev = 0.005
[info]   CI (99.9%): [147248.013, 147248.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1407.840 ±(99.9%) 593.113 MB/sec [Average]
[info]   (min, avg, max) = (1329.847, 1407.840, 1683.041), stdev = 154.030
[info]   CI (99.9%): [814.727, 2000.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   149171.989 ±(99.9%) 61632.239 B/op [Average]
[info]   (min, avg, max) = (141495.273, 149171.989, 177789.165), stdev = 16005.697
[info]   CI (99.9%): [87539.751, 210804.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   6.619 ±(99.9%) 10.402 B/op [Average]
[info]   (min, avg, max) = (4.399, 6.619, 11.032), stdev = 2.701
[info]   CI (99.9%): [≈ 0, 17.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.62% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274471.466 ops/s
[info] # Warmup Iteration   2: 324006.383 ops/s
[info] # Warmup Iteration   3: 326811.413 ops/s
[info] Iteration   1: 324513.996 ops/s
[info]                  ·gc.alloc.rate:                   1789.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2001.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9705.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.404 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 325985.892 ops/s
[info]                  ·gc.alloc.rate:                   1797.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8101.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.804 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 323938.189 ops/s
[info]                  ·gc.alloc.rate:                   1786.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8185.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.405 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 326194.183 ops/s
[info]                  ·gc.alloc.rate:                   1799.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9790.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.301 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 326111.904 ops/s
[info]                  ·gc.alloc.rate:                   1798.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8182.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.402 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   325348.833 ±(99.9%) 4033.816 ops/s [Average]
[info]   (min, avg, max) = (323938.189, 325348.833, 326194.183), stdev = 1047.569
[info]   CI (99.9%): [321315.016, 329382.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1794.442 ±(99.9%) 22.580 MB/sec [Average]
[info]   (min, avg, max) = (1786.609, 1794.442, 1799.435), stdev = 5.864
[info]   CI (99.9%): [1771.862, 1817.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.001, 8680.001, 8680.001), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1817.788 ±(99.9%) 695.966 MB/sec [Average]
[info]   (min, avg, max) = (1678.140, 1817.788, 2029.605), stdev = 180.740
[info]   CI (99.9%): [1121.822, 2513.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8792.871 ±(99.9%) 3361.157 B/op [Average]
[info]   (min, avg, max) = (8101.471, 8792.871, 9790.283), stdev = 872.882
[info]   CI (99.9%): [5431.713, 12154.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.463 ±(99.9%) 0.753 B/op [Average]
[info]   (min, avg, max) = (0.301, 0.463, 0.804), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 1.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.96% complete, ETA 00:55:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468052.006 ops/s
[info] # Warmup Iteration   2: 696030.438 ops/s
[info] # Warmup Iteration   3: 691169.291 ops/s
[info] Iteration   1: 701351.422 ops/s
[info]                  ·gc.alloc.rate:                   581.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1465.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 681291.324 ops/s
[info]                  ·gc.alloc.rate:               564.461 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 755.608 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 700827.417 ops/s
[info]                  ·gc.alloc.rate:                   580.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1469.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.327 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 700365.154 ops/s
[info]                  ·gc.alloc.rate:                   580.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 672355.114 ops/s
[info]                  ·gc.alloc.rate:               557.313 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 767.205 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   691238.086 ±(99.9%) 52127.640 ops/s [Average]
[info]   (min, avg, max) = (672355.114, 691238.086, 701351.422), stdev = 13537.383
[info]   CI (99.9%): [639110.446, 743365.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   572.852 ±(99.9%) 43.199 MB/sec [Average]
[info]   (min, avg, max) = (557.313, 572.852, 581.427), stdev = 11.219
[info]   CI (99.9%): [529.653, 616.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   523.460 ±(99.9%) 688.882 MB/sec [Average]
[info]   (min, avg, max) = (327.079, 523.460, 654.798), stdev = 178.900
[info]   CI (99.9%): [≈ 0, 1212.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1185.677 ±(99.9%) 1491.481 B/op [Average]
[info]   (min, avg, max) = (755.608, 1185.677, 1471.479), stdev = 387.333
[info]   CI (99.9%): [≈ 0, 2677.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.483 ±(99.9%) 3.719 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.483, 2.208), stdev = 0.966
[info]   CI (99.9%): [≈ 0, 4.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.084 ±(99.9%) 8.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.084, 4.951), stdev = 2.166
[info]   CI (99.9%): [≈ 0, 9.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 11.30% complete, ETA 00:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1660721.799 ops/s
[info] # Warmup Iteration   2: 1746390.250 ops/s
[info] # Warmup Iteration   3: 1749300.912 ops/s
[info] Iteration   1: 1724846.219 ops/s
[info]                  ·gc.alloc.rate:                   333.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233.415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.010 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1752395.632 ops/s
[info]                  ·gc.alloc.rate:               338.546 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229.746 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1749431.919 ops/s
[info]                  ·gc.alloc.rate:                   337.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.444 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1752278.203 ops/s
[info]                  ·gc.alloc.rate:                   338.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1751691.949 ops/s
[info]                  ·gc.alloc.rate:                   338.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     298.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1746128.785 ±(99.9%) 46042.811 ops/s [Average]
[info]   (min, avg, max) = (1724846.219, 1746128.785, 1752395.632), stdev = 11957.172
[info]   CI (99.9%): [1700085.974, 1792171.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   337.319 ±(99.9%) 9.037 MB/sec [Average]
[info]   (min, avg, max) = (333.144, 337.319, 338.546), stdev = 2.347
[info]   CI (99.9%): [328.282, 346.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   302.077 ±(99.9%) 162.593 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 302.077, 333.102), stdev = 42.225
[info]   CI (99.9%): [139.484, 464.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   272.127 ±(99.9%) 142.621 B/op [Average]
[info]   (min, avg, max) = (229.746, 272.127, 299.648), stdev = 37.038
[info]   CI (99.9%): [129.506, 414.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.331 ±(99.9%) 2.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.331, 1.605), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.298 ±(99.9%) 2.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.298, 1.444), stdev = 0.640
[info]   CI (99.9%): [≈ 0, 2.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.64% complete, ETA 00:54:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67800.688 ops/s
[info] # Warmup Iteration   2: 105606.792 ops/s
[info] # Warmup Iteration   3: 105498.396 ops/s
[info] Iteration   1: 106754.160 ops/s
[info]                  ·gc.alloc.rate:                   3878.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3716.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54801.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.455 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 106653.356 ops/s
[info]                  ·gc.alloc.rate:                   3874.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4074.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60123.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.458 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 104785.240 ops/s
[info]                  ·gc.alloc.rate:                   3808.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56218.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.876 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 106458.771 ops/s
[info]                  ·gc.alloc.rate:                   3867.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55355.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.539 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 104294.134 ops/s
[info]                  ·gc.alloc.rate:                   3788.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3744.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56505.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.199 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   105789.132 ±(99.9%) 4461.348 ops/s [Average]
[info]   (min, avg, max) = (104294.134, 105789.132, 106754.160), stdev = 1158.598
[info]   CI (99.9%): [101327.784, 110250.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3843.364 ±(99.9%) 160.563 MB/sec [Average]
[info]   (min, avg, max) = (3788.816, 3843.364, 3878.016), stdev = 41.698
[info]   CI (99.9%): [3682.801, 4003.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3804.803 ±(99.9%) 581.280 MB/sec [Average]
[info]   (min, avg, max) = (3716.933, 3804.803, 4074.005), stdev = 150.957
[info]   CI (99.9%): [3223.523, 4386.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   56600.511 ±(99.9%) 8020.296 B/op [Average]
[info]   (min, avg, max) = (54801.057, 56600.511, 60123.102), stdev = 2082.845
[info]   CI (99.9%): [48580.215, 64620.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.142 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.142, 0.167), stdev = 0.027
[info]   CI (99.9%): [0.037, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.105 ±(99.9%) 1.527 B/op [Average]
[info]   (min, avg, max) = (1.539, 2.105, 2.458), stdev = 0.397
[info]   CI (99.9%): [0.578, 3.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 11.000), stdev = 0.894
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.99% complete, ETA 00:54:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286137.400 ops/s
[info] # Warmup Iteration   2: 365674.838 ops/s
[info] # Warmup Iteration   3: 371330.317 ops/s
[info] Iteration   1: 376454.609 ops/s
[info]                  ·gc.alloc.rate:                   1283.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4146.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 370894.428 ops/s
[info]                  ·gc.alloc.rate:                   1265.299 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5635.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 370631.520 ops/s
[info]                  ·gc.alloc.rate:                   1264.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5664.698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 371268.938 ops/s
[info]                  ·gc.alloc.rate:                   1266.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5681.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 376397.317 ops/s
[info]                  ·gc.alloc.rate:                   1283.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5626.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.348 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   373129.363 ±(99.9%) 11621.056 ops/s [Average]
[info]   (min, avg, max) = (370631.520, 373129.363, 376454.609), stdev = 3017.951
[info]   CI (99.9%): [361508.306, 384750.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   1272.721 ±(99.9%) 39.317 MB/sec [Average]
[info]   (min, avg, max) = (1264.161, 1272.721, 1283.901), stdev = 10.210
[info]   CI (99.9%): [1233.404, 1312.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1268.062 ±(99.9%) 595.152 MB/sec [Average]
[info]   (min, avg, max) = (991.827, 1268.062, 1345.735), stdev = 154.559
[info]   CI (99.9%): [672.910, 1863.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5351.067 ±(99.9%) 2593.594 B/op [Average]
[info]   (min, avg, max) = (4146.837, 5351.067, 5681.670), stdev = 673.548
[info]   CI (99.9%): [2757.473, 7944.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.334 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (0.261, 0.334, 0.530), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 12.33% complete, ETA 00:54:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 674280.504 ops/s
[info] # Warmup Iteration   2: 888944.972 ops/s
[info] # Warmup Iteration   3: 874679.192 ops/s
[info] Iteration   1: 875696.961 ops/s
[info]                  ·gc.alloc.rate:                   618.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1174.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.734 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 894347.863 ops/s
[info]                  ·gc.alloc.rate:                   631.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 894720.090 ops/s
[info]                  ·gc.alloc.rate:                   632.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1151.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 869692.018 ops/s
[info]                  ·gc.alloc.rate:                   614.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1187.427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.075 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 889929.852 ops/s
[info]                  ·gc.alloc.rate:                   629.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1162.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   884877.357 ±(99.9%) 44197.433 ops/s [Average]
[info]   (min, avg, max) = (869692.018, 884877.357, 894720.090), stdev = 11477.933
[info]   CI (99.9%): [840679.923, 929074.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   625.288 ±(99.9%) 31.158 MB/sec [Average]
[info]   (min, avg, max) = (614.473, 625.288, 632.149), stdev = 8.092
[info]   CI (99.9%): [594.130, 656.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.001, 1112.001), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   655.318 ±(99.9%) 6.369 MB/sec [Average]
[info]   (min, avg, max) = (653.699, 655.318, 657.767), stdev = 1.654
[info]   CI (99.9%): [648.949, 661.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1165.562 ±(99.9%) 59.597 B/op [Average]
[info]   (min, avg, max) = (1151.209, 1165.562, 1187.427), stdev = 15.477
[info]   CI (99.9%): [1105.965, 1225.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.457 ±(99.9%) 3.490 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.457, 2.079), stdev = 0.906
[info]   CI (99.9%): [≈ 0, 3.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.821 ±(99.9%) 6.273 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.821, 3.734), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.67% complete, ETA 00:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1953983.038 ops/s
[info] # Warmup Iteration   2: 1974154.994 ops/s
[info] # Warmup Iteration   3: 2081093.675 ops/s
[info] Iteration   1: 2056938.198 ops/s
[info]                  ·gc.alloc.rate:                   951.739 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2015034.434 ops/s
[info]                  ·gc.alloc.rate:                   932.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2080661.697 ops/s
[info]                  ·gc.alloc.rate:                   962.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2071899.617 ops/s
[info]                  ·gc.alloc.rate:                   958.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     761.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2063893.467 ops/s
[info]                  ·gc.alloc.rate:                   954.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     766.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2057685.483 ±(99.9%) 97948.709 ops/s [Average]
[info]   (min, avg, max) = (2015034.434, 2057685.483, 2080661.697), stdev = 25436.969
[info]   CI (99.9%): [1959736.774, 2155634.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   952.058 ±(99.9%) 45.174 MB/sec [Average]
[info]   (min, avg, max) = (932.431, 952.058, 962.716), stdev = 11.732
[info]   CI (99.9%): [906.884, 997.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.906 ±(99.9%) 13.676 MB/sec [Average]
[info]   (min, avg, max) = (995.546, 999.906, 1004.548), stdev = 3.552
[info]   CI (99.9%): [986.230, 1013.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   764.672 ±(99.9%) 34.332 B/op [Average]
[info]   (min, avg, max) = (755.580, 764.672, 779.171), stdev = 8.916
[info]   CI (99.9%): [730.340, 799.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.061, 0.080), stdev = 0.014
[info]   CI (99.9%): [0.009, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 13.01% complete, ETA 00:53:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2094511.519 ops/s
[info] # Warmup Iteration   2: 2242422.647 ops/s
[info] # Warmup Iteration   3: 2242294.781 ops/s
[info] Iteration   1: 2239900.952 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2240173.532 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2239398.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2238327.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2252936.130 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2242147.456 ±(99.9%) 23381.616 ops/s [Average]
[info]   (min, avg, max) = (2238327.821, 2242147.456, 2252936.130), stdev = 6072.131
[info]   CI (99.9%): [2218765.841, 2265529.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 13.36% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 390270.724 ops/s
[info] # Warmup Iteration   2: 484206.513 ops/s
[info] # Warmup Iteration   3: 512144.122 ops/s
[info] Iteration   1: 510538.301 ops/s
[info]                  ·gc.alloc.rate:                   596.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2026.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 510255.435 ops/s
[info]                  ·gc.alloc.rate:                   596.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2025.888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 508551.902 ops/s
[info]                  ·gc.alloc.rate:               594.532 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1016.358 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 510126.085 ops/s
[info]                  ·gc.alloc.rate:                   596.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2028.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 507704.024 ops/s
[info]                  ·gc.alloc.rate:               593.545 MB/sec
[info]                  ·gc.alloc.rate.norm:          1840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2042.309 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   509435.149 ±(99.9%) 4772.362 ops/s [Average]
[info]   (min, avg, max) = (507704.024, 509435.149, 510538.301), stdev = 1239.367
[info]   CI (99.9%): [504662.787, 514207.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   595.568 ±(99.9%) 5.578 MB/sec [Average]
[info]   (min, avg, max) = (593.545, 595.568, 596.841), stdev = 1.449
[info]   CI (99.9%): [589.991, 601.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   591.791 ±(99.9%) 566.976 MB/sec [Average]
[info]   (min, avg, max) = (328.401, 591.791, 658.805), stdev = 147.242
[info]   CI (99.9%): [24.816, 1158.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1827.991 ±(99.9%) 1747.289 B/op [Average]
[info]   (min, avg, max) = (1016.358, 1827.991, 2042.309), stdev = 453.765
[info]   CI (99.9%): [80.702, 3575.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.441 ±(99.9%) 3.527 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.078), stdev = 0.916
[info]   CI (99.9%): [≈ 0, 3.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.358 ±(99.9%) 10.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.358, 6.406), stdev = 2.824
[info]   CI (99.9%): [≈ 0, 12.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.70% complete, ETA 00:53:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144679.759 ops/s
[info] # Warmup Iteration   2: 176170.296 ops/s
[info] # Warmup Iteration   3: 177941.341 ops/s
[info] Iteration   1: 177643.477 ops/s
[info]                  ·gc.alloc.rate:                   2181.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              19328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17811.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.922 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 176971.881 ops/s
[info]                  ·gc.alloc.rate:                   2173.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              19328.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17973.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.296 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 178304.732 ops/s
[info]                  ·gc.alloc.rate:                   2189.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              19328.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20903.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.102 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 177357.713 ops/s
[info]                  ·gc.alloc.rate:                   2178.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              19328.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18059.939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.108 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 175840.419 ops/s
[info]                  ·gc.alloc.rate:                   2159.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              19328.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21286.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.932 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   177223.645 ±(99.9%) 3518.487 ops/s [Average]
[info]   (min, avg, max) = (175840.419, 177223.645, 178304.732), stdev = 913.740
[info]   CI (99.9%): [173705.158, 180742.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2176.409 ±(99.9%) 43.309 MB/sec [Average]
[info]   (min, avg, max) = (2159.389, 2176.409, 2189.769), stdev = 11.247
[info]   CI (99.9%): [2133.100, 2219.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19328.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19328.002, 19328.002, 19328.003), stdev = 0.001
[info]   CI (99.9%): [19328.002, 19328.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.580 ±(99.9%) 741.201 MB/sec [Average]
[info]   (min, avg, max) = (2010.370, 2162.580, 2378.154), stdev = 192.488
[info]   CI (99.9%): [1421.379, 2903.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19206.839 ±(99.9%) 6665.004 B/op [Average]
[info]   (min, avg, max) = (17811.687, 19206.839, 21286.101), stdev = 1730.880
[info]   CI (99.9%): [12541.834, 25871.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.121, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.054, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.072 ±(99.9%) 0.592 B/op [Average]
[info]   (min, avg, max) = (0.922, 1.072, 1.296), stdev = 0.154
[info]   CI (99.9%): [0.480, 1.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 14.04% complete, ETA 00:53:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288359.794 ops/s
[info] # Warmup Iteration   2: 417905.713 ops/s
[info] # Warmup Iteration   3: 427736.926 ops/s
[info] Iteration   1: 409933.576 ops/s
[info]                  ·gc.alloc.rate:               339.754 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1964.243 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   2: 421220.479 ops/s
[info]                  ·gc.alloc.rate:               348.990 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 955.781 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 427197.957 ops/s
[info]                  ·gc.alloc.rate:                   353.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1203.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.192 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 429005.957 ops/s
[info]                  ·gc.alloc.rate:               355.445 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1198.704 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 429267.743 ops/s
[info]                  ·gc.alloc.rate:                   355.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1196.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   423325.142 ±(99.9%) 31421.615 ops/s [Average]
[info]   (min, avg, max) = (409933.576, 423325.142, 429267.743), stdev = 8160.094
[info]   CI (99.9%): [391903.528, 454746.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   350.759 ±(99.9%) 25.857 MB/sec [Average]
[info]   (min, avg, max) = (339.754, 350.759, 355.657), stdev = 6.715
[info]   CI (99.9%): [324.902, 376.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   349.494 ±(99.9%) 368.757 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 349.494, 511.778), stdev = 95.765
[info]   CI (99.9%): [≈ 0, 718.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1303.851 ±(99.9%) 1478.632 B/op [Average]
[info]   (min, avg, max) = (955.781, 1303.851, 1964.243), stdev = 383.996
[info]   CI (99.9%): [≈ 0, 2782.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.453 ±(99.9%) 3.812 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.453, 2.224), stdev = 0.990
[info]   CI (99.9%): [≈ 0, 4.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.669 ±(99.9%) 14.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.669, 8.192), stdev = 3.647
[info]   CI (99.9%): [≈ 0, 15.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 14.38% complete, ETA 00:53:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 935012.411 ops/s
[info] # Warmup Iteration   2: 967726.419 ops/s
[info] # Warmup Iteration   3: 983043.969 ops/s
[info] Iteration   1: 989409.020 ops/s
[info]                  ·gc.alloc.rate:               191.101 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 406.895 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 991308.623 ops/s
[info]                  ·gc.alloc.rate:      191.511 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 987660.466 ops/s
[info]                  ·gc.alloc.rate:               191.005 MB/sec
[info]                  ·gc.alloc.rate.norm:          304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 406.274 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 989540.916 ops/s
[info]                  ·gc.alloc.rate:                   191.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 987449.771 ops/s
[info]                  ·gc.alloc.rate:                   190.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407.734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   989073.759 ±(99.9%) 6076.210 ops/s [Average]
[info]   (min, avg, max) = (987449.771, 989073.759, 991308.623), stdev = 1577.972
[info]   CI (99.9%): [982997.549, 995149.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   191.100 ±(99.9%) 1.069 MB/sec [Average]
[info]   (min, avg, max) = (190.741, 191.100, 191.511), stdev = 0.278
[info]   CI (99.9%): [190.031, 192.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.539 ±(99.9%) 440.286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.539, 255.827), stdev = 114.341
[info]   CI (99.9%): [≈ 0, 644.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   325.555 ±(99.9%) 700.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 325.555, 407.734), stdev = 181.991
[info]   CI (99.9%): [≈ 0, 1026.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.73% complete, ETA 00:52:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47166.467 ops/s
[info] # Warmup Iteration   2: 81174.264 ops/s
[info] # Warmup Iteration   3: 81473.051 ops/s
[info] Iteration   1: 82217.346 ops/s
[info]                  ·gc.alloc.rate:                   3393.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3364.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64402.689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.391 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 82659.257 ops/s
[info]                  ·gc.alloc.rate:                   3411.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3387.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64486.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.964 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 82609.540 ops/s
[info]                  ·gc.alloc.rate:                   3409.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64712.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.380 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 82252.928 ops/s
[info]                  ·gc.alloc.rate:                   3394.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65120.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.585 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 82125.812 ops/s
[info]                  ·gc.alloc.rate:                   3389.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65235.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.591 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   82372.976 ±(99.9%) 938.566 ops/s [Average]
[info]   (min, avg, max) = (82125.812, 82372.976, 82659.257), stdev = 243.742
[info]   CI (99.9%): [81434.411, 83311.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3399.515 ±(99.9%) 39.141 MB/sec [Average]
[info]   (min, avg, max) = (3389.223, 3399.515, 3411.471), stdev = 10.165
[info]   CI (99.9%): [3360.374, 3438.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.005, 64952.006), stdev = 0.001
[info]   CI (99.9%): [64952.005, 64952.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3391.093 ±(99.9%) 63.208 MB/sec [Average]
[info]   (min, avg, max) = (3364.378, 3391.093, 3404.041), stdev = 16.415
[info]   CI (99.9%): [3327.885, 3454.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   64791.575 ±(99.9%) 1435.719 B/op [Average]
[info]   (min, avg, max) = (64402.689, 64791.575, 65235.991), stdev = 372.852
[info]   CI (99.9%): [63355.856, 66227.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.167 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.167, 0.208), stdev = 0.039
[info]   CI (99.9%): [0.017, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.182 ±(99.9%) 2.862 B/op [Average]
[info]   (min, avg, max) = (2.380, 3.182, 3.964), stdev = 0.743
[info]   CI (99.9%): [0.320, 6.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 11.000), stdev = 1.140
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 15.07% complete, ETA 00:52:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221814.542 ops/s
[info] # Warmup Iteration   2: 274338.229 ops/s
[info] # Warmup Iteration   3: 268426.203 ops/s
[info] Iteration   1: 277403.994 ops/s
[info]                  ·gc.alloc.rate:                   1529.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7528.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.709 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 271807.084 ops/s
[info]                  ·gc.alloc.rate:                   1499.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9654.678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 274619.248 ops/s
[info]                  ·gc.alloc.rate:                   1515.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7681.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 276553.049 ops/s
[info]                  ·gc.alloc.rate:                   1525.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9576.452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.592 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 277652.991 ops/s
[info]                  ·gc.alloc.rate:                   1531.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7654.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.590 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   275607.273 ±(99.9%) 9377.976 ops/s [Average]
[info]   (min, avg, max) = (271807.084, 275607.273, 277652.991), stdev = 2435.430
[info]   CI (99.9%): [266229.298, 284985.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1520.204 ±(99.9%) 50.926 MB/sec [Average]
[info]   (min, avg, max) = (1499.376, 1520.204, 1531.251), stdev = 13.225
[info]   CI (99.9%): [1469.278, 1571.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8680.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.002, 8680.002, 8680.002), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1473.731 ±(99.9%) 709.397 MB/sec [Average]
[info]   (min, avg, max) = (1326.976, 1473.731, 1682.767), stdev = 184.228
[info]   CI (99.9%): [764.334, 2183.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8419.036 ±(99.9%) 4213.143 B/op [Average]
[info]   (min, avg, max) = (7528.730, 8419.036, 9654.678), stdev = 1094.140
[info]   CI (99.9%): [4205.893, 12632.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.619 ±(99.9%) 0.690 B/op [Average]
[info]   (min, avg, max) = (0.358, 0.619, 0.844), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 1.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 15.41% complete, ETA 00:52:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1654223.765 ops/s
[info] # Warmup Iteration   2: 1773304.705 ops/s
[info] # Warmup Iteration   3: 1816640.030 ops/s
[info] Iteration   1: 1806163.511 ops/s
[info]                  ·gc.alloc.rate:                   486.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     512.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1816832.318 ops/s
[info]                  ·gc.alloc.rate:               489.483 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 287.953 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1820841.005 ops/s
[info]                  ·gc.alloc.rate:                   490.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1821454.037 ops/s
[info]                  ·gc.alloc.rate:               490.696 MB/sec
[info]                  ·gc.alloc.rate.norm:          424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 286.647 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 1785057.993 ops/s
[info]                  ·gc.alloc.rate:                   481.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1810069.773 ±(99.9%) 58783.865 ops/s [Average]
[info]   (min, avg, max) = (1785057.993, 1810069.773, 1821454.037), stdev = 15265.983
[info]   CI (99.9%): [1751285.908, 1868853.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   487.668 ±(99.9%) 15.551 MB/sec [Average]
[info]   (min, avg, max) = (481.089, 487.668, 490.696), stdev = 4.038
[info]   CI (99.9%): [472.117, 503.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.975 ±(99.9%) 657.250 MB/sec [Average]
[info]   (min, avg, max) = (331.737, 515.975, 664.084), stdev = 170.686
[info]   CI (99.9%): [≈ 0, 1173.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   449.184 ±(99.9%) 578.881 B/op [Average]
[info]   (min, avg, max) = (286.647, 449.184, 585.280), stdev = 150.334
[info]   CI (99.9%): [≈ 0, 1028.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.395 ±(99.9%) 3.001 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.786), stdev = 0.779
[info]   CI (99.9%): [≈ 0, 3.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.344 ±(99.9%) 2.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.557), stdev = 0.679
[info]   CI (99.9%): [≈ 0, 2.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.75% complete, ETA 00:52:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1821672.695 ops/s
[info] # Warmup Iteration   2: 1890811.807 ops/s
[info] # Warmup Iteration   3: 1843388.167 ops/s
[info] Iteration   1: 1942426.739 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1945293.925 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1939520.907 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1938393.045 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1940554.240 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1941237.771 ±(99.9%) 10434.700 ops/s [Average]
[info]   (min, avg, max) = (1938393.045, 1941237.771, 1945293.925), stdev = 2709.859
[info]   CI (99.9%): [1930803.071, 1951672.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 16.10% complete, ETA 00:51:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26712.268 ops/s
[info] # Warmup Iteration   2: 38182.743 ops/s
[info] # Warmup Iteration   3: 38500.427 ops/s
[info] Iteration   1: 38936.014 ops/s
[info]                  ·gc.alloc.rate:                   1705.707 MB/sec
[info]                  ·gc.alloc.rate.norm:              68946.960 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66853.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.524 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38769.925 ops/s
[info]                  ·gc.alloc.rate:                   1698.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67660.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.535 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 39080.171 ops/s
[info]                  ·gc.alloc.rate:                   1711.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67496.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.353 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39045.284 ops/s
[info]                  ·gc.alloc.rate:                   1710.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67893.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 39179.436 ops/s
[info]                  ·gc.alloc.rate:                   1717.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              68944.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67874.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.345 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39002.166 ±(99.9%) 601.739 ops/s [Average]
[info]   (min, avg, max) = (38769.925, 39002.166, 39179.436), stdev = 156.270
[info]   CI (99.9%): [38400.427, 39603.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1708.759 ±(99.9%) 26.720 MB/sec [Average]
[info]   (min, avg, max) = (1698.688, 1708.759, 1717.070), stdev = 6.939
[info]   CI (99.9%): [1682.039, 1735.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68944.601 ±(99.9%) 5.077 B/op [Average]
[info]   (min, avg, max) = (68944.011, 68944.601, 68946.960), stdev = 1.319
[info]   CI (99.9%): [68939.524, 68949.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1674.346 ±(99.9%) 55.505 MB/sec [Average]
[info]   (min, avg, max) = (1653.919, 1674.346, 1690.423), stdev = 14.414
[info]   CI (99.9%): [1618.841, 1729.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67555.627 ±(99.9%) 1637.313 B/op [Average]
[info]   (min, avg, max) = (66853.619, 67555.627, 67893.893), stdev = 425.205
[info]   CI (99.9%): [65918.314, 69192.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.358 ±(99.9%) 3.938 B/op [Average]
[info]   (min, avg, max) = (2.524, 3.358, 5.035), stdev = 1.023
[info]   CI (99.9%): [≈ 0, 7.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 16.44% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19514.766 ops/s
[info] # Warmup Iteration   2: 24954.861 ops/s
[info] # Warmup Iteration   3: 25497.551 ops/s
[info] Iteration   1: 25508.161 ops/s
[info]                  ·gc.alloc.rate:                   1606.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              99120.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102605.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.991 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25348.155 ops/s
[info]                  ·gc.alloc.rate:                   1596.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              99105.788 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103835.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.463 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 25250.863 ops/s
[info]                  ·gc.alloc.rate:                   1589.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              99088.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104774.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.595 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25579.596 ops/s
[info]                  ·gc.alloc.rate:                   1610.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              99088.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83013.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.404 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 25517.674 ops/s
[info]                  ·gc.alloc.rate:                   1606.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              99088.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104274.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.852 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25440.890 ±(99.9%) 525.054 ops/s [Average]
[info]   (min, avg, max) = (25250.863, 25440.890, 25579.596), stdev = 136.355
[info]   CI (99.9%): [24915.836, 25965.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1601.989 ±(99.9%) 33.559 MB/sec [Average]
[info]   (min, avg, max) = (1589.814, 1601.989, 1610.859), stdev = 8.715
[info]   CI (99.9%): [1568.431, 1635.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   99097.971 ±(99.9%) 55.945 B/op [Average]
[info]   (min, avg, max) = (99088.017, 99097.971, 99120.017), stdev = 14.529
[info]   CI (99.9%): [99042.026, 99153.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611.323 ±(99.9%) 564.902 MB/sec [Average]
[info]   (min, avg, max) = (1349.532, 1611.323, 1690.672), stdev = 146.703
[info]   CI (99.9%): [1046.421, 2176.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   99700.640 ±(99.9%) 36054.127 B/op [Average]
[info]   (min, avg, max) = (83013.121, 99700.640, 104774.561), stdev = 9363.142
[info]   CI (99.9%): [63646.513, 135754.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.661 ±(99.9%) 9.618 B/op [Average]
[info]   (min, avg, max) = (2.595, 5.661, 8.991), stdev = 2.498
[info]   CI (99.9%): [≈ 0, 15.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 16.78% complete, ETA 00:51:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36093.308 ops/s
[info] # Warmup Iteration   2: 56695.543 ops/s
[info] # Warmup Iteration   3: 57223.245 ops/s
[info] Iteration   1: 57502.923 ops/s
[info]                  ·gc.alloc.rate:                   1007.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26856.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.419 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 58027.193 ops/s
[info]                  ·gc.alloc.rate:                   1016.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26695.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.823 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 57932.733 ops/s
[info]                  ·gc.alloc.rate:                   1015.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26828.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 58054.840 ops/s
[info]                  ·gc.alloc.rate:                   1017.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26926.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58031.463 ops/s
[info]                  ·gc.alloc.rate:                   1017.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              27584.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27045.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.565 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   57909.830 ±(99.9%) 894.176 ops/s [Average]
[info]   (min, avg, max) = (57502.923, 57909.830, 58054.840), stdev = 232.215
[info]   CI (99.9%): [57015.654, 58804.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1015.029 ±(99.9%) 16.006 MB/sec [Average]
[info]   (min, avg, max) = (1007.771, 1015.029, 1017.706), stdev = 4.157
[info]   CI (99.9%): [999.023, 1031.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   27584.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27584.007, 27584.008, 27584.008), stdev = 0.001
[info]   CI (99.9%): [27584.007, 27584.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   988.777 ±(99.9%) 25.661 MB/sec [Average]
[info]   (min, avg, max) = (981.197, 988.777, 997.494), stdev = 6.664
[info]   CI (99.9%): [963.117, 1014.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26870.548 ±(99.9%) 495.760 B/op [Average]
[info]   (min, avg, max) = (26695.460, 26870.548, 27045.456), stdev = 128.747
[info]   CI (99.9%): [26374.788, 27366.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.926 ±(99.9%) 4.545 B/op [Average]
[info]   (min, avg, max) = (0.565, 1.926, 3.419), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 6.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 17.12% complete, ETA 00:51:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63466.023 ops/s
[info] # Warmup Iteration   2: 67908.901 ops/s
[info] # Warmup Iteration   3: 67356.502 ops/s
[info] Iteration   1: 68151.668 ops/s
[info]                  ·gc.alloc.rate:                   458.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5907.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 68022.333 ops/s
[info]                  ·gc.alloc.rate:                   457.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15413.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36.999 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 68113.212 ops/s
[info]                  ·gc.alloc.rate:                   458.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7680.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.962 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 67931.931 ops/s
[info]                  ·gc.alloc.rate:                   456.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15402.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.929 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 68042.104 ops/s
[info]                  ·gc.alloc.rate:               457.599 MB/sec
[info]                  ·gc.alloc.rate.norm:          10584.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7688.931 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   68052.250 ±(99.9%) 328.293 ops/s [Average]
[info]   (min, avg, max) = (67931.931, 68052.250, 68151.668), stdev = 85.257
[info]   CI (99.9%): [67723.956, 68380.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   457.723 ±(99.9%) 1.994 MB/sec [Average]
[info]   (min, avg, max) = (456.986, 457.723, 458.350), stdev = 0.518
[info]   CI (99.9%): [455.729, 459.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10584.006, 10584.007, 10584.007), stdev = 0.001
[info]   CI (99.9%): [10584.006, 10584.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.423 ±(99.9%) 766.353 MB/sec [Average]
[info]   (min, avg, max) = (255.821, 450.423, 666.424), stdev = 199.019
[info]   CI (99.9%): [≈ 0, 1216.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10418.532 ±(99.9%) 17759.442 B/op [Average]
[info]   (min, avg, max) = (5907.297, 10418.532, 15413.209), stdev = 4612.071
[info]   CI (99.9%): [≈ 0, 28177.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.346 ±(99.9%) 2.702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.346, 1.600), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.005 ±(99.9%) 62.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.005, 36.999), stdev = 16.227
[info]   CI (99.9%): [≈ 0, 70.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 17.47% complete, ETA 00:51:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19182.795 ops/s
[info] # Warmup Iteration   2: 33389.192 ops/s
[info] # Warmup Iteration   3: 33357.909 ops/s
[info] Iteration   1: 33243.787 ops/s
[info]                  ·gc.alloc.rate:                   1701.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1982.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93822.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.870 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33784.224 ops/s
[info]                  ·gc.alloc.rate:                   1728.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77536.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33660.029 ops/s
[info]                  ·gc.alloc.rate:                   1722.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78286.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.867 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33569.626 ops/s
[info]                  ·gc.alloc.rate:                   1718.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78904.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.880 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 33642.128 ops/s
[info]                  ·gc.alloc.rate:                   1722.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              80536.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79045.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.895 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33579.959 ±(99.9%) 782.350 ops/s [Average]
[info]   (min, avg, max) = (33243.787, 33579.959, 33784.224), stdev = 203.174
[info]   CI (99.9%): [32797.609, 34362.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1718.671 ±(99.9%) 39.883 MB/sec [Average]
[info]   (min, avg, max) = (1701.372, 1718.671, 1728.778), stdev = 10.357
[info]   CI (99.9%): [1678.788, 1758.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80536.014 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (80536.013, 80536.014, 80536.019), stdev = 0.003
[info]   CI (99.9%): [80536.004, 80536.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1738.970 ±(99.9%) 524.640 MB/sec [Average]
[info]   (min, avg, max) = (1664.382, 1738.970, 1982.063), stdev = 136.247
[info]   CI (99.9%): [1214.330, 2263.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81519.082 ±(99.9%) 26584.021 B/op [Average]
[info]   (min, avg, max) = (77536.096, 81519.082, 93822.780), stdev = 6903.786
[info]   CI (99.9%): [54935.062, 108103.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.187), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.472 ±(99.9%) 7.491 B/op [Average]
[info]   (min, avg, max) = (3.895, 5.472, 8.870), stdev = 1.945
[info]   CI (99.9%): [≈ 0, 12.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 17.81% complete, ETA 00:50:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30027.061 ops/s
[info] # Warmup Iteration   2: 39086.606 ops/s
[info] # Warmup Iteration   3: 39287.650 ops/s
[info] Iteration   1: 39066.659 ops/s
[info]                  ·gc.alloc.rate:                   616.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              24825.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26595.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39462.546 ops/s
[info]                  ·gc.alloc.rate:                   622.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26302.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 39573.529 ops/s
[info]                  ·gc.alloc.rate:                   624.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26254.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39299.891 ops/s
[info]                  ·gc.alloc.rate:                   619.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26463.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.667 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39369.490 ops/s
[info]                  ·gc.alloc.rate:                   621.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              24824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26470.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39354.423 ±(99.9%) 734.927 ops/s [Average]
[info]   (min, avg, max) = (39066.659, 39354.423, 39573.529), stdev = 190.858
[info]   CI (99.9%): [38619.496, 40089.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   620.795 ±(99.9%) 11.573 MB/sec [Average]
[info]   (min, avg, max) = (616.284, 620.795, 624.199), stdev = 3.005
[info]   CI (99.9%): [609.222, 632.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24824.246 ±(99.9%) 2.022 B/op [Average]
[info]   (min, avg, max) = (24824.011, 24824.246, 24825.185), stdev = 0.525
[info]   CI (99.9%): [24822.224, 24826.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   660.616 ±(99.9%) 3.757 MB/sec [Average]
[info]   (min, avg, max) = (659.675, 660.616, 662.206), stdev = 0.976
[info]   CI (99.9%): [656.859, 664.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26417.115 ±(99.9%) 532.852 B/op [Average]
[info]   (min, avg, max) = (26254.139, 26417.115, 26595.486), stdev = 138.380
[info]   CI (99.9%): [25884.263, 26949.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.411 ±(99.9%) 2.910 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.411, 1.761), stdev = 0.756
[info]   CI (99.9%): [≈ 0, 3.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   16.515 ±(99.9%) 117.282 B/op [Average]
[info]   (min, avg, max) = (1.660, 16.515, 70.944), stdev = 30.458
[info]   CI (99.9%): [≈ 0, 133.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 18.15% complete, ETA 00:50:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27994.116 ops/s
[info] # Warmup Iteration   2: 41552.193 ops/s
[info] # Warmup Iteration   3: 41468.377 ops/s
[info] Iteration   1: 40878.205 ops/s
[info]                  ·gc.alloc.rate:                   411.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19697.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.801 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41426.953 ops/s
[info]                  ·gc.alloc.rate:                   416.570 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12413.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.764 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41494.234 ops/s
[info]                  ·gc.alloc.rate:                   417.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12392.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.579 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 41598.938 ops/s
[info]                  ·gc.alloc.rate:                   418.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24749.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41155.890 ops/s
[info]                  ·gc.alloc.rate:                   413.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              15824.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12520.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.796 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41310.844 ±(99.9%) 1124.787 ops/s [Average]
[info]   (min, avg, max) = (40878.205, 41310.844, 41598.938), stdev = 292.104
[info]   CI (99.9%): [40186.057, 42435.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   415.458 ±(99.9%) 11.467 MB/sec [Average]
[info]   (min, avg, max) = (411.015, 415.458, 418.392), stdev = 2.978
[info]   CI (99.9%): [403.991, 426.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15824.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (15824.010, 15824.011, 15824.011), stdev = 0.001
[info]   CI (99.9%): [15824.009, 15824.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.440 ±(99.9%) 573.720 MB/sec [Average]
[info]   (min, avg, max) = (326.786, 429.440, 654.384), stdev = 148.993
[info]   CI (99.9%): [≈ 0, 1003.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16354.807 ±(99.9%) 21746.169 B/op [Average]
[info]   (min, avg, max) = (12392.813, 16354.807, 24749.468), stdev = 5647.411
[info]   CI (99.9%): [≈ 0, 38100.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.440 ±(99.9%) 3.517 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.440, 2.073), stdev = 0.913
[info]   CI (99.9%): [≈ 0, 3.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16.703 ±(99.9%) 133.599 B/op [Average]
[info]   (min, avg, max) = (0.796, 16.703, 78.764), stdev = 34.695
[info]   CI (99.9%): [≈ 0, 150.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 18.49% complete, ETA 00:50:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37610.063 ops/s
[info] # Warmup Iteration   2: 43978.734 ops/s
[info] # Warmup Iteration   3: 43413.538 ops/s
[info] Iteration   1: 44151.289 ops/s
[info]                  ·gc.alloc.rate:                   433.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18236.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.165 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 44387.979 ops/s
[info]                  ·gc.alloc.rate:                   435.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11785.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.330 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 43586.785 ops/s
[info]                  ·gc.alloc.rate:                   427.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23982.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 44318.334 ops/s
[info]                  ·gc.alloc.rate:                   434.783 MB/sec
[info]                  ·gc.alloc.rate.norm:              15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11780.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.218 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 43994.790 ops/s
[info]                  ·gc.alloc.rate:               431.609 MB/sec
[info]                  ·gc.alloc.rate.norm:          15440.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11867.434 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44087.835 ±(99.9%) 1228.215 ops/s [Average]
[info]   (min, avg, max) = (43586.785, 44087.835, 44387.979), stdev = 318.963
[info]   CI (99.9%): [42859.621, 45316.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   432.530 ±(99.9%) 12.124 MB/sec [Average]
[info]   (min, avg, max) = (427.590, 432.530, 435.522), stdev = 3.149
[info]   CI (99.9%): [420.406, 444.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   15440.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15440.010, 15440.010, 15440.010), stdev = 0.001
[info]   CI (99.9%): [15440.009, 15440.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.339 ±(99.9%) 578.301 MB/sec [Average]
[info]   (min, avg, max) = (331.739, 434.339, 664.154), stdev = 150.183
[info]   CI (99.9%): [≈ 0, 1012.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15530.642 ±(99.9%) 21113.306 B/op [Average]
[info]   (min, avg, max) = (11780.690, 15530.642, 23982.159), stdev = 5483.058
[info]   CI (99.9%): [≈ 0, 36643.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.376 ±(99.9%) 2.918 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.376, 1.730), stdev = 0.758
[info]   CI (99.9%): [≈ 0, 3.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13.344 ±(99.9%) 103.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.344, 61.330), stdev = 26.856
[info]   CI (99.9%): [≈ 0, 116.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.84% complete, ETA 00:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38569.970 ops/s
[info] # Warmup Iteration   2: 44817.323 ops/s
[info] # Warmup Iteration   3: 44477.029 ops/s
[info] Iteration   1: 44569.794 ops/s
[info]                  ·gc.alloc.rate:                   386.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18065.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 44726.345 ops/s
[info]                  ·gc.alloc.rate:                   387.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11696.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.499 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 44853.632 ops/s
[info]                  ·gc.alloc.rate:                   388.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11663.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.922 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 44261.576 ops/s
[info]                  ·gc.alloc.rate:               383.602 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11795.858 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 43578.539 ops/s
[info]                  ·gc.alloc.rate:               377.873 MB/sec
[info]                  ·gc.alloc.rate.norm:          13640.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11981.251 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44397.977 ±(99.9%) 1958.775 ops/s [Average]
[info]   (min, avg, max) = (43578.539, 44397.977, 44853.632), stdev = 508.688
[info]   CI (99.9%): [42439.202, 46356.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   384.844 ±(99.9%) 16.720 MB/sec [Average]
[info]   (min, avg, max) = (377.873, 384.844, 388.742), stdev = 4.342
[info]   CI (99.9%): [368.123, 401.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   13640.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13640.010, 13640.010, 13640.010), stdev = 0.001
[info]   CI (99.9%): [13640.009, 13640.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   368.039 ±(99.9%) 309.326 MB/sec [Average]
[info]   (min, avg, max) = (331.738, 368.039, 511.738), stdev = 80.331
[info]   CI (99.9%): [58.713, 677.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   13040.471 ±(99.9%) 10827.278 B/op [Average]
[info]   (min, avg, max) = (11663.310, 13040.471, 18065.513), stdev = 2811.810
[info]   CI (99.9%): [2213.193, 23867.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.370 ±(99.9%) 2.908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.370, 1.719), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   13.011 ±(99.9%) 102.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.011, 60.499), stdev = 26.575
[info]   CI (99.9%): [≈ 0, 115.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 19.18% complete, ETA 00:50:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10804.909 ops/s
[info] # Warmup Iteration   2: 15236.729 ops/s
[info] # Warmup Iteration   3: 15733.485 ops/s
[info] Iteration   1: 15375.833 ops/s
[info]                  ·gc.alloc.rate:                   1097.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              112336.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101693.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15161.455 ops/s
[info]                  ·gc.alloc.rate:                   1082.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              112347.514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137883.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.322 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 15665.587 ops/s
[info]                  ·gc.alloc.rate:                   1118.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100420.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.091 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15442.908 ops/s
[info]                  ·gc.alloc.rate:                   1102.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              112352.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102203.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15615.088 ops/s
[info]                  ·gc.alloc.rate:                   1114.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              112351.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135217.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   15452.174 ±(99.9%) 776.164 ops/s [Average]
[info]   (min, avg, max) = (15161.455, 15452.174, 15665.587), stdev = 201.567
[info]   CI (99.9%): [14676.010, 16228.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   1103.132 ±(99.9%) 55.558 MB/sec [Average]
[info]   (min, avg, max) = (1082.391, 1103.132, 1118.316), stdev = 14.428
[info]   CI (99.9%): [1047.574, 1158.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   112347.724 ±(99.9%) 26.172 B/op [Average]
[info]   (min, avg, max) = (112336.028, 112347.724, 112352.038), stdev = 6.797
[info]   CI (99.9%): [112321.552, 112373.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.255 ±(99.9%) 709.984 MB/sec [Average]
[info]   (min, avg, max) = (993.480, 1133.255, 1341.857), stdev = 184.381
[info]   CI (99.9%): [423.271, 1843.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115483.736 ±(99.9%) 74183.658 B/op [Average]
[info]   (min, avg, max) = (100420.493, 115483.736, 137883.180), stdev = 19265.260
[info]   CI (99.9%): [41300.078, 189667.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.086 ±(99.9%) 9.193 B/op [Average]
[info]   (min, avg, max) = (2.091, 5.086, 8.392), stdev = 2.387
[info]   CI (99.9%): [≈ 0, 14.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 19.52% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9940.089 ops/s
[info] # Warmup Iteration   2: 16050.795 ops/s
[info] # Warmup Iteration   3: 16274.875 ops/s
[info] Iteration   1: 16140.641 ops/s
[info]                  ·gc.alloc.rate:                   979.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              95464.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95679.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.149 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16431.848 ops/s
[info]                  ·gc.alloc.rate:                   996.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              95490.256 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94330.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 16539.537 ops/s
[info]                  ·gc.alloc.rate:                   1003.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94031.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.904 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16300.451 ops/s
[info]                  ·gc.alloc.rate:                   989.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              95496.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95898.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 16522.390 ops/s
[info]                  ·gc.alloc.rate:                   1002.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              95470.419 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94984.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.948 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   16386.974 ±(99.9%) 643.740 ops/s [Average]
[info]   (min, avg, max) = (16140.641, 16386.974, 16539.537), stdev = 167.177
[info]   CI (99.9%): [15743.234, 17030.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   994.318 ±(99.9%) 38.984 MB/sec [Average]
[info]   (min, avg, max) = (979.418, 994.318, 1003.597), stdev = 10.124
[info]   CI (99.9%): [955.334, 1033.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   95483.353 ±(99.9%) 58.078 B/op [Average]
[info]   (min, avg, max) = (95464.027, 95483.353, 95496.038), stdev = 15.083
[info]   CI (99.9%): [95425.275, 95541.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   989.073 ±(99.9%) 24.414 MB/sec [Average]
[info]   (min, avg, max) = (981.628, 989.073, 997.419), stdev = 6.340
[info]   CI (99.9%): [964.659, 1013.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   94984.820 ±(99.9%) 3136.395 B/op [Average]
[info]   (min, avg, max) = (94031.463, 94984.820, 95898.106), stdev = 814.512
[info]   CI (99.9%): [91848.425, 98121.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.204 ±(99.9%) 10.415 B/op [Average]
[info]   (min, avg, max) = (3.988, 7.204, 10.149), stdev = 2.705
[info]   CI (99.9%): [≈ 0, 17.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 19.86% complete, ETA 00:49:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69281.399 ops/s
[info] # Warmup Iteration   2: 71458.312 ops/s
[info] # Warmup Iteration   3: 74937.814 ops/s
[info] Iteration   1: 75814.884 ops/s
[info]                  ·gc.alloc.rate:               197.305 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5310.086 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 74988.233 ops/s
[info]                  ·gc.alloc.rate:      195.153 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74778.696 ops/s
[info]                  ·gc.alloc.rate:               194.614 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5383.640 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 74785.301 ops/s
[info]                  ·gc.alloc.rate:               194.635 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5383.064 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 74464.075 ops/s
[info]                  ·gc.alloc.rate:                   193.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5406.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.660 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74966.238 ±(99.9%) 1964.169 ops/s [Average]
[info]   (min, avg, max) = (74464.075, 74966.238, 75814.884), stdev = 510.088
[info]   CI (99.9%): [73002.069, 76930.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   195.099 ±(99.9%) 5.105 MB/sec [Average]
[info]   (min, avg, max) = (193.791, 195.099, 197.305), stdev = 1.326
[info]   CI (99.9%): [189.995, 200.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.006, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204.634 ±(99.9%) 440.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.634, 255.796), stdev = 114.394
[info]   CI (99.9%): [≈ 0, 645.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4296.669 ±(99.9%) 9249.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4296.669, 5406.555), stdev = 2402.186
[info]   CI (99.9%): [≈ 0, 13546.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.006 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.132 ±(99.9%) 1.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.660), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 20.21% complete, ETA 00:49:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7167.767 ops/s
[info] # Warmup Iteration   2: 13122.366 ops/s
[info] # Warmup Iteration   3: 13484.843 ops/s
[info] Iteration   1: 13378.295 ops/s
[info]                  ·gc.alloc.rate:                   1281.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154582.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13543.273 ops/s
[info]                  ·gc.alloc.rate:                   1297.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153501.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13136.672 ops/s
[info]                  ·gc.alloc.rate:                   1258.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159173.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.988 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 13395.375 ops/s
[info]                  ·gc.alloc.rate:                   1283.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117630.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13468.460 ops/s
[info]                  ·gc.alloc.rate:                   1290.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              150800.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156613.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   13384.415 ±(99.9%) 589.770 ops/s [Average]
[info]   (min, avg, max) = (13136.672, 13384.415, 13543.273), stdev = 153.161
[info]   CI (99.9%): [12794.644, 13974.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1282.555 ±(99.9%) 56.715 MB/sec [Average]
[info]   (min, avg, max) = (1258.734, 1282.555, 1297.819), stdev = 14.729
[info]   CI (99.9%): [1225.840, 1339.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   150800.214 ±(99.9%) 1.565 B/op [Average]
[info]   (min, avg, max) = (150800.032, 150800.214, 150800.941), stdev = 0.406
[info]   CI (99.9%): [150798.650, 150801.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1261.084 ±(99.9%) 560.160 MB/sec [Average]
[info]   (min, avg, max) = (1001.447, 1261.084, 1340.370), stdev = 145.472
[info]   CI (99.9%): [700.924, 1821.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   148300.185 ±(99.9%) 66542.266 B/op [Average]
[info]   (min, avg, max) = (117630.223, 148300.185, 159173.821), stdev = 17280.815
[info]   CI (99.9%): [81757.920, 214842.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.320 ±(99.9%) 14.634 B/op [Average]
[info]   (min, avg, max) = (2.449, 7.320, 12.095), stdev = 3.800
[info]   CI (99.9%): [≈ 0, 21.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 20.55% complete, ETA 00:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42451.063 ops/s
[info] # Warmup Iteration   2: 56155.334 ops/s
[info] # Warmup Iteration   3: 55457.659 ops/s
[info] Iteration   1: 56665.854 ops/s
[info]                  ·gc.alloc.rate:                   1405.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36818.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.156 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 56043.321 ops/s
[info]                  ·gc.alloc.rate:                   1389.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37386.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 56476.621 ops/s
[info]                  ·gc.alloc.rate:                   1400.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37276.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.160 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56568.646 ops/s
[info]                  ·gc.alloc.rate:                   1402.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37361.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 55763.730 ops/s
[info]                  ·gc.alloc.rate:                   1382.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              39016.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38045.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.350 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   56303.634 ±(99.9%) 1479.641 ops/s [Average]
[info]   (min, avg, max) = (55763.730, 56303.634, 56665.854), stdev = 384.258
[info]   CI (99.9%): [54823.993, 57783.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1396.101 ±(99.9%) 36.175 MB/sec [Average]
[info]   (min, avg, max) = (1382.817, 1396.101, 1405.258), stdev = 9.395
[info]   CI (99.9%): [1359.926, 1432.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   39016.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (39016.008, 39016.008, 39016.008), stdev = 0.001
[info]   CI (99.9%): [39016.007, 39016.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1337.403 ±(99.9%) 33.878 MB/sec [Average]
[info]   (min, avg, max) = (1326.096, 1337.403, 1348.417), stdev = 8.798
[info]   CI (99.9%): [1303.525, 1371.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   37377.682 ±(99.9%) 1688.938 B/op [Average]
[info]   (min, avg, max) = (36818.107, 37377.682, 38045.428), stdev = 438.612
[info]   CI (99.9%): [35688.744, 39066.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.750 ±(99.9%) 3.214 B/op [Average]
[info]   (min, avg, max) = (1.156, 1.750, 2.923), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 4.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 20.89% complete, ETA 00:49:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259139.820 ops/s
[info] # Warmup Iteration   2: 278819.686 ops/s
[info] # Warmup Iteration   3: 286052.046 ops/s
[info] Iteration   1: 280726.739 ops/s
[info]                  ·gc.alloc.rate:                   445.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1434.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.259 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 275403.123 ops/s
[info]                  ·gc.alloc.rate:                   436.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3799.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 286208.451 ops/s
[info]                  ·gc.alloc.rate:                   453.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1824.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.229 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 287714.672 ops/s
[info]                  ·gc.alloc.rate:                   456.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1814.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 285251.293 ops/s
[info]                  ·gc.alloc.rate:                   452.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3660.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   283060.856 ±(99.9%) 19296.716 ops/s [Average]
[info]   (min, avg, max) = (275403.123, 283060.856, 287714.672), stdev = 5011.296
[info]   CI (99.9%): [263764.139, 302357.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   449.040 ±(99.9%) 30.469 MB/sec [Average]
[info]   (min, avg, max) = (436.959, 449.040, 456.499), stdev = 7.913
[info]   CI (99.9%): [418.571, 479.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.634 ±(99.9%) 764.005 MB/sec [Average]
[info]   (min, avg, max) = (255.901, 449.634, 665.107), stdev = 198.410
[info]   CI (99.9%): [≈ 0, 1213.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2506.577 ±(99.9%) 4347.075 B/op [Average]
[info]   (min, avg, max) = (1434.108, 2506.577, 3799.230), stdev = 1128.922
[info]   CI (99.9%): [≈ 0, 6853.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.399 ±(99.9%) 2.980 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.399, 1.783), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.272 ±(99.9%) 17.041 B/op [Average]
[info]   (min, avg, max) = (0.114, 2.272, 10.182), stdev = 4.425
[info]   CI (99.9%): [≈ 0, 19.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 21.23% complete, ETA 00:48:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300239.206 ops/s
[info] # Warmup Iteration   2: 325332.077 ops/s
[info] # Warmup Iteration   3: 338032.832 ops/s
[info] Iteration   1: 337676.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 337983.538 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 338010.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 337895.528 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 338098.457 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   337932.847 ±(99.9%) 619.062 ops/s [Average]
[info]   (min, avg, max) = (337676.054, 337932.847, 338098.457), stdev = 160.769
[info]   CI (99.9%): [337313.784, 338551.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 21.58% complete, ETA 00:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53182.091 ops/s
[info] # Warmup Iteration   2: 73146.978 ops/s
[info] # Warmup Iteration   3: 72546.077 ops/s
[info] Iteration   1: 73746.934 ops/s
[info]                  ·gc.alloc.rate:                   1392.242 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35192.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.444 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 73804.009 ops/s
[info]                  ·gc.alloc.rate:                   1393.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28296.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.663 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73900.257 ops/s
[info]                  ·gc.alloc.rate:                   1395.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28408.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.217 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72998.979 ops/s
[info]                  ·gc.alloc.rate:                   1378.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28895.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.795 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72878.578 ops/s
[info]                  ·gc.alloc.rate:                   1375.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              29712.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29058.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.248 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   73465.751 ±(99.9%) 1871.552 ops/s [Average]
[info]   (min, avg, max) = (72878.578, 73465.751, 73900.257), stdev = 486.036
[info]   CI (99.9%): [71594.199, 75337.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1387.050 ±(99.9%) 35.653 MB/sec [Average]
[info]   (min, avg, max) = (1375.860, 1387.050, 1395.683), stdev = 9.259
[info]   CI (99.9%): [1351.397, 1422.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   29712.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29712.006, 29712.006, 29712.006), stdev = 0.001
[info]   CI (99.9%): [29712.005, 29712.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1399.267 ±(99.9%) 538.318 MB/sec [Average]
[info]   (min, avg, max) = (1326.882, 1399.267, 1649.038), stdev = 139.800
[info]   CI (99.9%): [860.949, 1937.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29970.406 ±(99.9%) 11307.816 B/op [Average]
[info]   (min, avg, max) = (28296.892, 29970.406, 35192.314), stdev = 2936.604
[info]   CI (99.9%): [18662.591, 41278.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.873 ±(99.9%) 3.296 B/op [Average]
[info]   (min, avg, max) = (0.444, 1.873, 2.663), stdev = 0.856
[info]   CI (99.9%): [≈ 0, 5.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 21.92% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19686.514 ops/s
[info] # Warmup Iteration   2: 26751.088 ops/s
[info] # Warmup Iteration   3: 26542.625 ops/s
[info] Iteration   1: 26530.692 ops/s
[info]                  ·gc.alloc.rate:                   589.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39082.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.826 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 26594.608 ops/s
[info]                  ·gc.alloc.rate:                   590.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38948.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 26687.767 ops/s
[info]                  ·gc.alloc.rate:               592.811 MB/sec
[info]                  ·gc.alloc.rate.norm:          34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      329.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19445.719 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 26871.389 ops/s
[info]                  ·gc.alloc.rate:                   596.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          659.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38646.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.219 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 26981.051 ops/s
[info]                  ·gc.alloc.rate:                   599.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              34960.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38545.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.071 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   26733.101 ±(99.9%) 727.578 ops/s [Average]
[info]   (min, avg, max) = (26530.692, 26733.101, 26981.051), stdev = 188.950
[info]   CI (99.9%): [26005.523, 27460.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   593.827 ±(99.9%) 16.151 MB/sec [Average]
[info]   (min, avg, max) = (589.336, 593.827, 599.345), stdev = 4.194
[info]   CI (99.9%): [577.676, 609.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   34960.018 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (34960.016, 34960.018, 34960.023), stdev = 0.003
[info]   CI (99.9%): [34960.005, 34960.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   593.469 ±(99.9%) 567.715 MB/sec [Average]
[info]   (min, avg, max) = (329.738, 593.469, 660.812), stdev = 147.434
[info]   CI (99.9%): [25.754, 1161.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   34933.578 ±(99.9%) 33349.344 B/op [Average]
[info]   (min, avg, max) = (19445.719, 34933.578, 39082.030), stdev = 8660.719
[info]   CI (99.9%): [1584.234, 68282.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.405 ±(99.9%) 3.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.405, 1.818), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 3.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   24.009 ±(99.9%) 180.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.009, 107.826), stdev = 46.922
[info]   CI (99.9%): [≈ 0, 204.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 22.26% complete, ETA 00:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112306.664 ops/s
[info] # Warmup Iteration   2: 126140.564 ops/s
[info] # Warmup Iteration   3: 124848.914 ops/s
[info] Iteration   1: 124720.968 ops/s
[info]                  ·gc.alloc.rate:                   486.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7426.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20.646 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 124207.517 ops/s
[info]                  ·gc.alloc.rate:                   484.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4216.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 123877.905 ops/s
[info]                  ·gc.alloc.rate:                   483.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8446.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 123524.075 ops/s
[info]                  ·gc.alloc.rate:                   482.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4235.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.265 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 123928.974 ops/s
[info]                  ·gc.alloc.rate:                   483.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8443.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.322 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   124051.888 ±(99.9%) 1717.591 ops/s [Average]
[info]   (min, avg, max) = (123524.075, 124051.888, 124720.968), stdev = 446.053
[info]   CI (99.9%): [122334.297, 125769.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   484.299 ±(99.9%) 6.706 MB/sec [Average]
[info]   (min, avg, max) = (482.214, 484.299, 486.881), stdev = 1.741
[info]   CI (99.9%): [477.593, 491.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.699 ±(99.9%) 658.174 MB/sec [Average]
[info]   (min, avg, max) = (332.391, 516.699, 664.913), stdev = 170.926
[info]   CI (99.9%): [≈ 0, 1174.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6553.631 ±(99.9%) 8337.953 B/op [Average]
[info]   (min, avg, max) = (4216.386, 6553.631, 8446.634), stdev = 2165.340
[info]   CI (99.9%): [≈ 0, 14891.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.365 ±(99.9%) 2.740 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.365, 1.636), stdev = 0.712
[info]   CI (99.9%): [≈ 0, 3.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.605 ±(99.9%) 34.569 B/op [Average]
[info]   (min, avg, max) = (0.264, 4.605, 20.646), stdev = 8.978
[info]   CI (99.9%): [≈ 0, 39.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 22.60% complete, ETA 00:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10397.425 ops/s
[info] # Warmup Iteration   2: 21011.249 ops/s
[info] # Warmup Iteration   3: 21750.598 ops/s
[info] Iteration   1: 21698.425 ops/s
[info]                  ·gc.alloc.rate:                   1212.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              87960.187 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94604.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21572.991 ops/s
[info]                  ·gc.alloc.rate:                   1205.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              87960.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95740.393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.556 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 21801.103 ops/s
[info]                  ·gc.alloc.rate:                   1218.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              87960.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71435.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21422.440 ops/s
[info]                  ·gc.alloc.rate:                   1197.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              87960.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97560.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 21889.741 ops/s
[info]                  ·gc.alloc.rate:                   1223.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              87960.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96054.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.497 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21676.940 ±(99.9%) 711.947 ops/s [Average]
[info]   (min, avg, max) = (21422.440, 21676.940, 21889.741), stdev = 184.890
[info]   CI (99.9%): [20964.993, 22388.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1211.491 ±(99.9%) 39.672 MB/sec [Average]
[info]   (min, avg, max) = (1197.314, 1211.491, 1223.366), stdev = 10.303
[info]   CI (99.9%): [1171.819, 1251.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87960.055 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (87960.020, 87960.055, 87960.187), stdev = 0.074
[info]   CI (99.9%): [87959.772, 87960.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1254.015 ±(99.9%) 571.356 MB/sec [Average]
[info]   (min, avg, max) = (989.530, 1254.015, 1335.944), stdev = 148.379
[info]   CI (99.9%): [682.660, 1825.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   91079.231 ±(99.9%) 42478.491 B/op [Average]
[info]   (min, avg, max) = (71435.893, 91079.231, 97560.733), stdev = 11031.529
[info]   CI (99.9%): [48600.740, 133557.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.236 ±(99.9%) 6.376 B/op [Average]
[info]   (min, avg, max) = (1.497, 4.236, 6.011), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 10.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 22.95% complete, ETA 00:47:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137073.590 ops/s
[info] # Warmup Iteration   2: 168373.184 ops/s
[info] # Warmup Iteration   3: 168377.537 ops/s
[info] Iteration   1: 168668.290 ops/s
[info]                  ·gc.alloc.rate:                   1103.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12326.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.583 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 165320.758 ops/s
[info]                  ·gc.alloc.rate:                   1081.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9464.999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.595 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 168185.627 ops/s
[info]                  ·gc.alloc.rate:                   1100.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9335.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 167680.785 ops/s
[info]                  ·gc.alloc.rate:                   1096.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12542.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.586 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 168396.020 ops/s
[info]                  ·gc.alloc.rate:                   1101.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              10296.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9401.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.778 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   167650.296 ±(99.9%) 5204.310 ops/s [Average]
[info]   (min, avg, max) = (165320.758, 167650.296, 168668.290), stdev = 1351.543
[info]   CI (99.9%): [162445.986, 172854.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1096.879 ±(99.9%) 33.798 MB/sec [Average]
[info]   (min, avg, max) = (1081.808, 1096.879, 1103.748), stdev = 8.777
[info]   CI (99.9%): [1063.081, 1130.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10296.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10296.003, 10296.003, 10296.003), stdev = 0.001
[info]   CI (99.9%): [10296.002, 10296.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1131.141 ±(99.9%) 695.529 MB/sec [Average]
[info]   (min, avg, max) = (994.494, 1131.141, 1336.346), stdev = 180.627
[info]   CI (99.9%): [435.612, 1826.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10614.110 ±(99.9%) 6408.266 B/op [Average]
[info]   (min, avg, max) = (9335.124, 10614.110, 12542.820), stdev = 1664.206
[info]   CI (99.9%): [4205.844, 17022.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.664 ±(99.9%) 0.403 B/op [Average]
[info]   (min, avg, max) = (0.583, 0.664, 0.779), stdev = 0.105
[info]   CI (99.9%): [0.261, 1.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 23.29% complete, ETA 00:47:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 521455.662 ops/s
[info] # Warmup Iteration   2: 565516.423 ops/s
[info] # Warmup Iteration   3: 565489.821 ops/s
[info] Iteration   1: 566902.038 ops/s
[info]                  ·gc.alloc.rate:               435.142 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 710.179 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 564992.516 ops/s
[info]                  ·gc.alloc.rate:                   433.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.877 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 567636.356 ops/s
[info]                  ·gc.alloc.rate:                   435.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1840.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 563724.595 ops/s
[info]                  ·gc.alloc.rate:                   432.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 568450.228 ops/s
[info]                  ·gc.alloc.rate:               436.314 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 918.503 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   566341.147 ±(99.9%) 7482.926 ops/s [Average]
[info]   (min, avg, max) = (563724.595, 566341.147, 568450.228), stdev = 1943.292
[info]   CI (99.9%): [558858.221, 573824.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   434.690 ±(99.9%) 5.776 MB/sec [Average]
[info]   (min, avg, max) = (432.672, 434.690, 436.314), stdev = 1.500
[info]   CI (99.9%): [428.914, 440.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.038 ±(99.9%) 617.544 MB/sec [Average]
[info]   (min, avg, max) = (255.819, 383.038, 663.814), stdev = 160.374
[info]   CI (99.9%): [≈ 0, 1000.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1064.095 ±(99.9%) 1708.737 B/op [Average]
[info]   (min, avg, max) = (710.179, 1064.095, 1840.540), stdev = 443.754
[info]   CI (99.9%): [≈ 0, 2772.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.375 ±(99.9%) 2.964 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.751), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.045 ±(99.9%) 8.256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.045, 4.877), stdev = 2.144
[info]   CI (99.9%): [≈ 0, 9.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 23.63% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552470.169 ops/s
[info] # Warmup Iteration   2: 604104.222 ops/s
[info] # Warmup Iteration   3: 583406.310 ops/s
[info] Iteration   1: 593557.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 603077.329 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 588035.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 570208.104 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 603415.299 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   591658.772 ±(99.9%) 52567.449 ops/s [Average]
[info]   (min, avg, max) = (570208.104, 591658.772, 603415.299), stdev = 13651.600
[info]   CI (99.9%): [539091.323, 644226.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.97% complete, ETA 00:47:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195023.665 ops/s
[info] # Warmup Iteration   2: 331199.903 ops/s
[info] # Warmup Iteration   3: 333503.366 ops/s
[info] Iteration   1: 336970.249 ops/s
[info]                  ·gc.alloc.rate:                   931.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4564.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 337140.351 ops/s
[info]                  ·gc.alloc.rate:                   932.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4568.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.486 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 337217.632 ops/s
[info]                  ·gc.alloc.rate:                   932.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4590.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 337433.898 ops/s
[info]                  ·gc.alloc.rate:                   933.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4606.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 337536.655 ops/s
[info]                  ·gc.alloc.rate:                   933.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.388 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   337259.757 ±(99.9%) 875.640 ops/s [Average]
[info]   (min, avg, max) = (336970.249, 337259.757, 337536.655), stdev = 227.401
[info]   CI (99.9%): [336384.117, 338135.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   932.759 ±(99.9%) 1.972 MB/sec [Average]
[info]   (min, avg, max) = (931.977, 932.759, 933.332), stdev = 0.512
[info]   CI (99.9%): [930.787, 934.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   984.293 ±(99.9%) 25.221 MB/sec [Average]
[info]   (min, avg, max) = (977.446, 984.293, 993.545), stdev = 6.550
[info]   CI (99.9%): [959.072, 1009.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4592.434 ±(99.9%) 108.785 B/op [Average]
[info]   (min, avg, max) = (4564.329, 4592.434, 4632.762), stdev = 28.251
[info]   CI (99.9%): [4483.648, 4701.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.311 ±(99.9%) 0.614 B/op [Average]
[info]   (min, avg, max) = (0.097, 0.311, 0.486), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 24.32% complete, ETA 00:46:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29520.632 ops/s
[info] # Warmup Iteration   2: 35659.096 ops/s
[info] # Warmup Iteration   3: 35853.377 ops/s
[info] Iteration   1: 35454.222 ops/s
[info]                  ·gc.alloc.rate:                   1670.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              74159.570 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73882.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.620 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 35688.944 ops/s
[info]                  ·gc.alloc.rate:                   1681.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73851.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.098 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34987.480 ops/s
[info]                  ·gc.alloc.rate:                   1648.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75660.239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.682 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 35513.169 ops/s
[info]                  ·gc.alloc.rate:                   1673.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74794.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.690 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35853.674 ops/s
[info]                  ·gc.alloc.rate:                   1689.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              74160.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74288.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   35499.498 ±(99.9%) 1256.234 ops/s [Average]
[info]   (min, avg, max) = (34987.480, 35499.498, 35853.674), stdev = 326.240
[info]   CI (99.9%): [34243.263, 36755.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1672.796 ±(99.9%) 59.234 MB/sec [Average]
[info]   (min, avg, max) = (1648.604, 1672.796, 1689.444), stdev = 15.383
[info]   CI (99.9%): [1613.562, 1732.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   74159.924 ±(99.9%) 0.762 B/op [Average]
[info]   (min, avg, max) = (74159.570, 74159.924, 74160.013), stdev = 0.198
[info]   CI (99.9%): [74159.162, 74160.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1680.267 ±(99.9%) 42.863 MB/sec [Average]
[info]   (min, avg, max) = (1664.322, 1680.267, 1692.368), stdev = 11.131
[info]   CI (99.9%): [1637.404, 1723.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   74495.430 ±(99.9%) 2907.327 B/op [Average]
[info]   (min, avg, max) = (73851.241, 74495.430, 75660.239), stdev = 755.024
[info]   CI (99.9%): [71588.102, 77402.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.133 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.133, 0.229), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.897 ±(99.9%) 9.793 B/op [Average]
[info]   (min, avg, max) = (3.690, 5.897, 10.098), stdev = 2.543
[info]   CI (99.9%): [≈ 0, 15.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 24.66% complete, ETA 00:46:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64448.300 ops/s
[info] # Warmup Iteration   2: 94747.803 ops/s
[info] # Warmup Iteration   3: 94976.050 ops/s
[info] Iteration   1: 95108.891 ops/s
[info]                  ·gc.alloc.rate:                   1109.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16248.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.033 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 95121.036 ops/s
[info]                  ·gc.alloc.rate:                   1110.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21751.876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.722 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 96250.624 ops/s
[info]                  ·gc.alloc.rate:                   1123.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16202.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.021 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 96188.347 ops/s
[info]                  ·gc.alloc.rate:                   1122.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21745.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 95344.027 ops/s
[info]                  ·gc.alloc.rate:                   1112.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              18368.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16543.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   95602.585 ±(99.9%) 2199.882 ops/s [Average]
[info]   (min, avg, max) = (95108.891, 95602.585, 96250.624), stdev = 571.302
[info]   CI (99.9%): [93402.703, 97802.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1115.797 ±(99.9%) 25.463 MB/sec [Average]
[info]   (min, avg, max) = (1109.910, 1115.797, 1123.260), stdev = 6.613
[info]   CI (99.9%): [1090.333, 1141.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18368.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18368.004, 18368.005, 18368.005), stdev = 0.001
[info]   CI (99.9%): [18368.004, 18368.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.783 ±(99.9%) 697.173 MB/sec [Average]
[info]   (min, avg, max) = (981.853, 1123.783, 1328.972), stdev = 181.054
[info]   CI (99.9%): [426.610, 1820.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18498.476 ±(99.9%) 11435.501 B/op [Average]
[info]   (min, avg, max) = (16202.909, 18498.476, 21751.876), stdev = 2969.763
[info]   CI (99.9%): [7062.975, 29933.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.167 ±(99.9%) 1.524 B/op [Average]
[info]   (min, avg, max) = (0.681, 1.167, 1.722), stdev = 0.396
[info]   CI (99.9%): [≈ 0, 2.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 25.00% complete, ETA 00:46:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154670.422 ops/s
[info] # Warmup Iteration   2: 160470.598 ops/s
[info] # Warmup Iteration   3: 159606.665 ops/s
[info] Iteration   1: 155187.970 ops/s
[info]                  ·gc.alloc.rate:      101.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156973.396 ops/s
[info]                  ·gc.alloc.rate:                   102.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2564.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.465 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 157340.870 ops/s
[info]                  ·gc.alloc.rate:      102.412 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 152203.889 ops/s
[info]                  ·gc.alloc.rate:      99.077 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 160075.167 ops/s
[info]                  ·gc.alloc.rate:               104.151 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2515.105 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   156356.258 ±(99.9%) 11191.351 ops/s [Average]
[info]   (min, avg, max) = (152203.889, 156356.258, 160075.167), stdev = 2906.358
[info]   CI (99.9%): [145164.908, 167547.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   101.757 ±(99.9%) 7.212 MB/sec [Average]
[info]   (min, avg, max) = (99.077, 101.757, 104.151), stdev = 1.873
[info]   CI (99.9%): [94.546, 108.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.003, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102.322 ±(99.9%) 539.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.322, 255.810), stdev = 140.110
[info]   CI (99.9%): [≈ 0, 641.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1015.981 ±(99.9%) 5357.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1015.981, 2564.801), stdev = 1391.300
[info]   CI (99.9%): [≈ 0, 6373.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.448 ±(99.9%) 3.858 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.448, 2.241), stdev = 1.002
[info]   CI (99.9%): [≈ 0, 4.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.493 ±(99.9%) 38.686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.493, 22.465), stdev = 10.047
[info]   CI (99.9%): [≈ 0, 43.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 25.34% complete, ETA 00:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22408.942 ops/s
[info] # Warmup Iteration   2: 38399.263 ops/s
[info] # Warmup Iteration   3: 38826.470 ops/s
[info] Iteration   1: 38839.858 ops/s
[info]                  ·gc.alloc.rate:                   2036.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80642.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.374 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 38897.461 ops/s
[info]                  ·gc.alloc.rate:                   2039.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81170.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.212 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 38863.145 ops/s
[info]                  ·gc.alloc.rate:                   2037.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81740.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.372 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38843.804 ops/s
[info]                  ·gc.alloc.rate:                   2036.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82176.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.374 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 38357.274 ops/s
[info]                  ·gc.alloc.rate:                   2010.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              82504.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83449.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38760.309 ±(99.9%) 871.987 ops/s [Average]
[info]   (min, avg, max) = (38357.274, 38760.309, 38897.461), stdev = 226.452
[info]   CI (99.9%): [37888.322, 39632.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2031.956 ±(99.9%) 45.915 MB/sec [Average]
[info]   (min, avg, max) = (2010.718, 2031.956, 2039.084), stdev = 11.924
[info]   CI (99.9%): [1986.041, 2077.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82504.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (82504.011, 82504.012, 82504.015), stdev = 0.002
[info]   CI (99.9%): [82504.005, 82504.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2015.398 ±(99.9%) 67.131 MB/sec [Average]
[info]   (min, avg, max) = (1990.501, 2015.398, 2033.769), stdev = 17.434
[info]   CI (99.9%): [1948.267, 2082.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81835.985 ±(99.9%) 4128.215 B/op [Average]
[info]   (min, avg, max) = (80642.043, 81835.985, 83449.834), stdev = 1072.084
[info]   CI (99.9%): [77707.771, 85964.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.550 ±(99.9%) 1.426 B/op [Average]
[info]   (min, avg, max) = (3.372, 3.550, 4.212), stdev = 0.370
[info]   CI (99.9%): [2.123, 4.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 25.68% complete, ETA 00:46:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69466.130 ops/s
[info] # Warmup Iteration   2: 85526.522 ops/s
[info] # Warmup Iteration   3: 85665.867 ops/s
[info] Iteration   1: 86241.075 ops/s
[info]                  ·gc.alloc.rate:                   689.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          660.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12053.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.279 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 86178.220 ops/s
[info]                  ·gc.alloc.rate:                   688.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12068.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.521 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 86233.907 ops/s
[info]                  ·gc.alloc.rate:                   689.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12066.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 86155.069 ops/s
[info]                  ·gc.alloc.rate:                   688.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12095.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 86245.366 ops/s
[info]                  ·gc.alloc.rate:               689.408 MB/sec
[info]                  ·gc.alloc.rate.norm:          12576.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12107.931 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   86210.727 ±(99.9%) 158.915 ops/s [Average]
[info]   (min, avg, max) = (86155.069, 86210.727, 86245.366), stdev = 41.270
[info]   CI (99.9%): [86051.813, 86369.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   688.985 ±(99.9%) 1.353 MB/sec [Average]
[info]   (min, avg, max) = (688.445, 688.985, 689.408), stdev = 0.351
[info]   CI (99.9%): [687.632, 690.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12576.005, 12576.005, 12576.005), stdev = 0.001
[info]   CI (99.9%): [12576.004, 12576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   661.736 ±(99.9%) 4.909 MB/sec [Average]
[info]   (min, avg, max) = (660.490, 661.736, 663.748), stdev = 1.275
[info]   CI (99.9%): [656.828, 666.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12078.627 ±(99.9%) 86.605 B/op [Average]
[info]   (min, avg, max) = (12053.506, 12078.627, 12107.931), stdev = 22.491
[info]   CI (99.9%): [11992.023, 12165.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.064 ±(99.9%) 3.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.064, 2.279), stdev = 0.866
[info]   CI (99.9%): [≈ 0, 4.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 26.03% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69639.483 ops/s
[info] # Warmup Iteration   2: 98881.196 ops/s
[info] # Warmup Iteration   3: 98061.062 ops/s
[info] Iteration   1: 98491.561 ops/s
[info]                  ·gc.alloc.rate:                   388.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4087.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 97699.490 ops/s
[info]                  ·gc.alloc.rate:                   385.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9384.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 98624.020 ops/s
[info]                  ·gc.alloc.rate:                   389.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5214.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 98797.246 ops/s
[info]                  ·gc.alloc.rate:                   389.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5210.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 97348.568 ops/s
[info]                  ·gc.alloc.rate:               383.985 MB/sec
[info]                  ·gc.alloc.rate.norm:          6208.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5287.951 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98192.177 ±(99.9%) 2432.806 ops/s [Average]
[info]   (min, avg, max) = (97348.568, 98192.177, 98797.246), stdev = 631.792
[info]   CI (99.9%): [95759.371, 100624.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   387.319 ±(99.9%) 9.624 MB/sec [Average]
[info]   (min, avg, max) = (383.985, 387.319, 389.689), stdev = 2.499
[info]   CI (99.9%): [377.695, 396.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   6208.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.004, 6208.004, 6208.005), stdev = 0.001
[info]   CI (99.9%): [6208.004, 6208.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.856 ±(99.9%) 485.495 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 363.856, 582.551), stdev = 126.081
[info]   CI (99.9%): [≈ 0, 849.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5836.937 ±(99.9%) 7874.311 B/op [Average]
[info]   (min, avg, max) = (4087.684, 5836.937, 9384.515), stdev = 2044.934
[info]   CI (99.9%): [≈ 0, 13711.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.444 ±(99.9%) 3.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.115), stdev = 0.934
[info]   CI (99.9%): [≈ 0, 4.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7.146 ±(99.9%) 57.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.146, 34.069), stdev = 15.055
[info]   CI (99.9%): [≈ 0, 65.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 26.37% complete, ETA 00:45:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101900.063 ops/s
[info] # Warmup Iteration   2: 111021.137 ops/s
[info] # Warmup Iteration   3: 111996.485 ops/s
[info] Iteration   1: 111869.147 ops/s
[info]                  ·gc.alloc.rate:                   413.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7197.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.228 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 112119.344 ops/s
[info]                  ·gc.alloc.rate:                   414.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4661.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.573 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 112195.867 ops/s
[info]                  ·gc.alloc.rate:                   415.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4658.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.876 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 111912.662 ops/s
[info]                  ·gc.alloc.rate:                   414.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9330.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.293 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 110950.502 ops/s
[info]                  ·gc.alloc.rate:                   410.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              5824.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4705.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.295 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   111809.504 ±(99.9%) 1922.779 ops/s [Average]
[info]   (min, avg, max) = (110950.502, 111809.504, 112195.867), stdev = 499.340
[info]   CI (99.9%): [109886.726, 113732.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   413.776 ±(99.9%) 7.155 MB/sec [Average]
[info]   (min, avg, max) = (410.560, 413.776, 415.165), stdev = 1.858
[info]   CI (99.9%): [406.621, 420.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5824.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5824.004, 5824.004, 5824.004), stdev = 0.001
[info]   CI (99.9%): [5824.003, 5824.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.250 ±(99.9%) 577.728 MB/sec [Average]
[info]   (min, avg, max) = (331.743, 434.250, 663.733), stdev = 150.034
[info]   CI (99.9%): [≈ 0, 1011.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6110.856 ±(99.9%) 8107.996 B/op [Average]
[info]   (min, avg, max) = (4658.240, 6110.856, 9330.918), stdev = 2105.621
[info]   CI (99.9%): [≈ 0, 14218.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.374 ±(99.9%) 2.964 MB/sec [Average]
[info]   (min, avg, max) = (0.016, 0.374, 1.751), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.253 ±(99.9%) 41.601 B/op [Average]
[info]   (min, avg, max) = (0.228, 5.253, 24.573), stdev = 10.804
[info]   CI (99.9%): [≈ 0, 46.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 26.71% complete, ETA 00:45:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101753.183 ops/s
[info] # Warmup Iteration   2: 113600.638 ops/s
[info] # Warmup Iteration   3: 109607.860 ops/s
[info] Iteration   1: 112653.458 ops/s
[info]                  ·gc.alloc.rate:                   328.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7147.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 113702.562 ops/s
[info]                  ·gc.alloc.rate:               331.218 MB/sec
[info]                  ·gc.alloc.rate.norm:          4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3540.867 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 113926.661 ops/s
[info]                  ·gc.alloc.rate:                   331.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4592.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 114186.951 ops/s
[info]                  ·gc.alloc.rate:                   332.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4581.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 114162.254 ops/s
[info]                  ·gc.alloc.rate:                   332.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4573.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   113726.377 ±(99.9%) 2430.755 ops/s [Average]
[info]   (min, avg, max) = (112653.458, 113726.377, 114186.951), stdev = 631.259
[info]   CI (99.9%): [111295.622, 116157.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   331.272 ±(99.9%) 7.161 MB/sec [Average]
[info]   (min, avg, max) = (328.114, 331.272, 332.649), stdev = 1.860
[info]   CI (99.9%): [324.111, 338.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   4584.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4584.004, 4584.004, 4584.004), stdev = 0.001
[info]   CI (99.9%): [4584.004, 4584.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   352.827 ±(99.9%) 364.736 MB/sec [Average]
[info]   (min, avg, max) = (255.846, 352.827, 511.602), stdev = 94.721
[info]   CI (99.9%): [≈ 0, 717.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4887.128 ±(99.9%) 5166.287 B/op [Average]
[info]   (min, avg, max) = (3540.867, 4887.128, 7147.478), stdev = 1341.668
[info]   CI (99.9%): [≈ 0, 10053.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.371 ±(99.9%) 3.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.371, 1.771), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   5.125 ±(99.9%) 41.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.125, 24.471), stdev = 10.817
[info]   CI (99.9%): [≈ 0, 46.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 27.05% complete, ETA 00:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6094.232 ops/s
[info] # Warmup Iteration   2: 9155.501 ops/s
[info] # Warmup Iteration   3: 9361.033 ops/s
[info] Iteration   1: 9297.789 ops/s
[info]                  ·gc.alloc.rate:                   1541.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281172.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9272.076 ops/s
[info]                  ·gc.alloc.rate:                   1537.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     283400.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.667 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9317.595 ops/s
[info]                  ·gc.alloc.rate:                   1545.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226615.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.033 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9326.175 ops/s
[info]                  ·gc.alloc.rate:                   1546.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              260928.715 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     284120.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9264.878 ops/s
[info]                  ·gc.alloc.rate:                   1536.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              260944.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229609.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.755 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9295.703 ±(99.9%) 104.050 ops/s [Average]
[info]   (min, avg, max) = (9264.878, 9295.703, 9326.175), stdev = 27.021
[info]   CI (99.9%): [9191.653, 9399.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1541.587 ±(99.9%) 17.322 MB/sec [Average]
[info]   (min, avg, max) = (1536.658, 1541.587, 1546.871), stdev = 4.498
[info]   CI (99.9%): [1524.265, 1558.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260931.381 ±(99.9%) 27.287 B/op [Average]
[info]   (min, avg, max) = (260928.046, 260931.381, 260944.047), stdev = 7.086
[info]   CI (99.9%): [260904.094, 260958.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1541.954 ±(99.9%) 686.170 MB/sec [Average]
[info]   (min, avg, max) = (1341.859, 1541.954, 1684.360), stdev = 178.196
[info]   CI (99.9%): [855.784, 2228.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   260983.738 ±(99.9%) 115694.348 B/op [Average]
[info]   (min, avg, max) = (226615.738, 260983.738, 284120.480), stdev = 30045.455
[info]   CI (99.9%): [145289.391, 376678.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   14.115 ±(99.9%) 28.959 B/op [Average]
[info]   (min, avg, max) = (7.026, 14.115, 24.755), stdev = 7.521
[info]   CI (99.9%): [≈ 0, 43.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 27.40% complete, ETA 00:45:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5358.623 ops/s
[info] # Warmup Iteration   2: 9845.757 ops/s
[info] # Warmup Iteration   3: 10098.190 ops/s
[info] Iteration   1: 10089.298 ops/s
[info]                  ·gc.alloc.rate:                   1551.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1644.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256610.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.236 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 10080.514 ops/s
[info]                  ·gc.alloc.rate:                   1550.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206969.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.750 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10131.848 ops/s
[info]                  ·gc.alloc.rate:                   1558.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              242104.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1667.947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259039.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.934 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 10135.994 ops/s
[info]                  ·gc.alloc.rate:                   1559.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              242117.899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260489.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10096.067 ops/s
[info]                  ·gc.alloc.rate:                   1553.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              242136.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210047.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.979 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10106.744 ±(99.9%) 98.025 ops/s [Average]
[info]   (min, avg, max) = (10080.514, 10106.744, 10135.994), stdev = 25.457
[info]   CI (99.9%): [10008.719, 10204.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1554.819 ±(99.9%) 15.509 MB/sec [Average]
[info]   (min, avg, max) = (1550.607, 1554.819, 1559.309), stdev = 4.028
[info]   CI (99.9%): [1539.310, 1570.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   242113.215 ±(99.9%) 54.299 B/op [Average]
[info]   (min, avg, max) = (242104.043, 242113.215, 242136.043), stdev = 14.101
[info]   CI (99.9%): [242058.916, 242167.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1532.716 ±(99.9%) 691.831 MB/sec [Average]
[info]   (min, avg, max) = (1325.580, 1532.716, 1677.625), stdev = 179.666
[info]   CI (99.9%): [840.885, 2224.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   238631.320 ±(99.9%) 106103.224 B/op [Average]
[info]   (min, avg, max) = (206969.474, 238631.320, 260489.116), stdev = 27554.670
[info]   CI (99.9%): [132528.095, 344734.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11.026 ±(99.9%) 18.959 B/op [Average]
[info]   (min, avg, max) = (3.232, 11.026, 16.236), stdev = 4.924
[info]   CI (99.9%): [≈ 0, 29.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 27.74% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99067.374 ops/s
[info] # Warmup Iteration   2: 103351.468 ops/s
[info] # Warmup Iteration   3: 103696.119 ops/s
[info] Iteration   1: 103259.162 ops/s
[info]                  ·gc.alloc.rate:               268.728 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3898.845 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 101953.196 ops/s
[info]                  ·gc.alloc.rate:               265.430 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3948.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 103367.740 ops/s
[info]                  ·gc.alloc.rate:               269.016 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3894.809 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 103035.415 ops/s
[info]                  ·gc.alloc.rate:                   268.130 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5092.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 103178.394 ops/s
[info]                  ·gc.alloc.rate:      268.564 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   102958.781 ±(99.9%) 2214.355 ops/s [Average]
[info]   (min, avg, max) = (101953.196, 102958.781, 103367.740), stdev = 575.061
[info]   CI (99.9%): [100744.427, 105173.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.974 ±(99.9%) 5.614 MB/sec [Average]
[info]   (min, avg, max) = (265.430, 267.974, 269.016), stdev = 1.458
[info]   CI (99.9%): [262.360, 273.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   220.171 ±(99.9%) 491.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 220.171, 333.365), stdev = 127.576
[info]   CI (99.9%): [≈ 0, 711.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3367.019 ±(99.9%) 7509.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3367.019, 5092.546), stdev = 1950.272
[info]   CI (99.9%): [≈ 0, 10876.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.316 ±(99.9%) 2.724 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.582), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 3.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4.833 ±(99.9%) 41.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.833, 24.166), stdev = 10.807
[info]   CI (99.9%): [≈ 0, 46.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 2.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 28.08% complete, ETA 00:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2344.719 ops/s
[info] # Warmup Iteration   2: 4966.944 ops/s
[info] # Warmup Iteration   3: 5056.631 ops/s
[info] Iteration   1: 5101.223 ops/s
[info]                  ·gc.alloc.rate:                   1357.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405393.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32.113 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5107.676 ops/s
[info]                  ·gc.alloc.rate:                   1358.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     406890.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5105.377 ops/s
[info]                  ·gc.alloc.rate:                   1358.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     409410.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.833 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5090.060 ops/s
[info]                  ·gc.alloc.rate:                   1354.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     413066.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5116.200 ops/s
[info]                  ·gc.alloc.rate:                   1361.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              418664.084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516091.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25.615 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5104.107 ±(99.9%) 36.844 ops/s [Average]
[info]   (min, avg, max) = (5090.060, 5104.107, 5116.200), stdev = 9.568
[info]   CI (99.9%): [5067.263, 5140.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1357.865 ±(99.9%) 9.782 MB/sec [Average]
[info]   (min, avg, max) = (1354.073, 1357.865, 1361.037), stdev = 2.540
[info]   CI (99.9%): [1348.083, 1367.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418664.086 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (418664.084, 418664.086, 418664.091), stdev = 0.003
[info]   CI (99.9%): [418664.075, 418664.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1395.339 ±(99.9%) 608.750 MB/sec [Average]
[info]   (min, avg, max) = (1314.211, 1395.339, 1677.763), stdev = 158.090
[info]   CI (99.9%): [786.589, 2004.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   430170.267 ±(99.9%) 185289.459 B/op [Average]
[info]   (min, avg, max) = (405393.211, 430170.267, 516091.197), stdev = 48119.084
[info]   CI (99.9%): [244880.809, 615459.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19.248 ±(99.9%) 39.048 B/op [Average]
[info]   (min, avg, max) = (6.436, 19.248, 32.113), stdev = 10.141
[info]   CI (99.9%): [≈ 0, 58.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 28.42% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16922.691 ops/s
[info] # Warmup Iteration   2: 24119.735 ops/s
[info] # Warmup Iteration   3: 24146.899 ops/s
[info] Iteration   1: 23828.710 ops/s
[info]                  ·gc.alloc.rate:                   1754.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              115896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109864.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23740.396 ops/s
[info]                  ·gc.alloc.rate:                   1748.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              115887.380 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110894.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.520 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 23912.373 ops/s
[info]                  ·gc.alloc.rate:                   1760.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110662.562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.110 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24004.289 ops/s
[info]                  ·gc.alloc.rate:                   1766.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132819.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.095 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 24309.192 ops/s
[info]                  ·gc.alloc.rate:                   1789.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              115832.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109631.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.739 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   23958.992 ±(99.9%) 842.805 ops/s [Average]
[info]   (min, avg, max) = (23740.396, 23958.992, 24309.192), stdev = 218.874
[info]   CI (99.9%): [23116.187, 24801.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1763.893 ±(99.9%) 61.592 MB/sec [Average]
[info]   (min, avg, max) = (1748.120, 1763.893, 1789.800), stdev = 15.995
[info]   CI (99.9%): [1702.301, 1825.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   115855.891 ±(99.9%) 126.422 B/op [Average]
[info]   (min, avg, max) = (115832.018, 115855.891, 115896.019), stdev = 32.831
[info]   CI (99.9%): [115729.469, 115982.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1747.510 ±(99.9%) 600.332 MB/sec [Average]
[info]   (min, avg, max) = (1663.532, 1747.510, 2025.675), stdev = 155.904
[info]   CI (99.9%): [1147.178, 2347.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   114774.581 ±(99.9%) 38895.271 B/op [Average]
[info]   (min, avg, max) = (109631.892, 114774.581, 132819.044), stdev = 10100.978
[info]   CI (99.9%): [75879.311, 153669.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.468 ±(99.9%) 5.211 B/op [Average]
[info]   (min, avg, max) = (4.095, 5.468, 6.875), stdev = 1.353
[info]   CI (99.9%): [0.257, 10.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 28.77% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318963.206 ops/s
[info] # Warmup Iteration   2: 337600.803 ops/s
[info] # Warmup Iteration   3: 333948.417 ops/s
[info] Iteration   1: 335193.884 ops/s
[info]                  ·gc.alloc.rate:                   739.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3115.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 333749.562 ops/s
[info]                  ·gc.alloc.rate:                   736.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3128.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 332788.632 ops/s
[info]                  ·gc.alloc.rate:                   734.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3140.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 328960.133 ops/s
[info]                  ·gc.alloc.rate:                   725.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 335180.383 ops/s
[info]                  ·gc.alloc.rate:                   739.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4695.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.489 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   333174.519 ±(99.9%) 9881.603 ops/s [Average]
[info]   (min, avg, max) = (328960.133, 333174.519, 335193.884), stdev = 2566.221
[info]   CI (99.9%): [323292.916, 343056.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   734.973 ±(99.9%) 21.792 MB/sec [Average]
[info]   (min, avg, max) = (725.679, 734.973, 739.414), stdev = 5.659
[info]   CI (99.9%): [713.180, 756.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.145 ±(99.9%) 578.499 MB/sec [Average]
[info]   (min, avg, max) = (663.448, 731.145, 999.890), stdev = 150.234
[info]   CI (99.9%): [152.645, 1309.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3452.175 ±(99.9%) 2677.157 B/op [Average]
[info]   (min, avg, max) = (3115.298, 3452.175, 4695.107), stdev = 695.249
[info]   CI (99.9%): [775.018, 6129.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.373 ±(99.9%) 0.671 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.373, 0.491), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 1.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.11% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350786.276 ops/s
[info] # Warmup Iteration   2: 371427.451 ops/s
[info] # Warmup Iteration   3: 384398.293 ops/s
[info] Iteration   1: 384599.501 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 383738.469 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 383466.956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 383627.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 383501.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   383786.664 ±(99.9%) 1798.053 ops/s [Average]
[info]   (min, avg, max) = (383466.956, 383786.664, 384599.501), stdev = 466.949
[info]   CI (99.9%): [381988.611, 385584.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 29.45% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19267.161 ops/s
[info] # Warmup Iteration   2: 28445.699 ops/s
[info] # Warmup Iteration   3: 28604.591 ops/s
[info] Iteration   1: 28723.962 ops/s
[info]                  ·gc.alloc.rate:                   1883.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1990.303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     109058.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.844 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28374.887 ops/s
[info]                  ·gc.alloc.rate:                   1860.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2005.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111249.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28393.910 ops/s
[info]                  ·gc.alloc.rate:                   1861.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93193.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 28693.021 ops/s
[info]                  ·gc.alloc.rate:                   1881.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027.129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111189.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.567 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28352.601 ops/s
[info]                  ·gc.alloc.rate:                   1859.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              103200.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94030.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28507.676 ±(99.9%) 709.387 ops/s [Average]
[info]   (min, avg, max) = (28352.601, 28507.676, 28723.962), stdev = 184.225
[info]   CI (99.9%): [27798.290, 29217.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1869.312 ±(99.9%) 46.288 MB/sec [Average]
[info]   (min, avg, max) = (1859.354, 1869.312, 1883.385), stdev = 12.021
[info]   CI (99.9%): [1823.024, 1915.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   103200.016 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (103200.015, 103200.016, 103200.021), stdev = 0.002
[info]   CI (99.9%): [103200.007, 103200.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1879.708 ±(99.9%) 676.957 MB/sec [Average]
[info]   (min, avg, max) = (1681.292, 1879.708, 2027.129), stdev = 175.803
[info]   CI (99.9%): [1202.751, 2556.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   103744.525 ±(99.9%) 35796.203 B/op [Average]
[info]   (min, avg, max) = (93193.627, 103744.525, 111249.554), stdev = 9296.160
[info]   CI (99.9%): [67948.322, 139540.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.053 ±(99.9%) 9.167 B/op [Average]
[info]   (min, avg, max) = (2.311, 5.053, 8.082), stdev = 2.381
[info]   CI (99.9%): [≈ 0, 14.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.79% complete, ETA 00:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104374.146 ops/s
[info] # Warmup Iteration   2: 128843.722 ops/s
[info] # Warmup Iteration   3: 128091.781 ops/s
[info] Iteration   1: 128464.304 ops/s
[info]                  ·gc.alloc.rate:                   2212.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24629.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.020 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 130366.141 ops/s
[info]                  ·gc.alloc.rate:                   2245.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2359.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28477.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.011 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 129271.615 ops/s
[info]                  ·gc.alloc.rate:                   2227.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28831.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.760 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 128657.743 ops/s
[info]                  ·gc.alloc.rate:                   2215.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24902.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.764 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 128586.120 ops/s
[info]                  ·gc.alloc.rate:                   2214.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              27104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29107.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.784 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   129069.185 ±(99.9%) 3039.076 ops/s [Average]
[info]   (min, avg, max) = (128464.304, 129069.185, 130366.141), stdev = 789.238
[info]   CI (99.9%): [126030.108, 132108.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2223.229 ±(99.9%) 53.199 MB/sec [Average]
[info]   (min, avg, max) = (2212.598, 2223.229, 2245.799), stdev = 13.816
[info]   CI (99.9%): [2170.030, 2276.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27104.003, 27104.003, 27104.004), stdev = 0.001
[info]   CI (99.9%): [27104.003, 27104.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2230.733 ±(99.9%) 730.876 MB/sec [Average]
[info]   (min, avg, max) = (2010.615, 2230.733, 2378.672), stdev = 189.806
[info]   CI (99.9%): [1499.856, 2961.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27189.730 ±(99.9%) 8570.833 B/op [Average]
[info]   (min, avg, max) = (24629.748, 27189.730, 29107.860), stdev = 2225.818
[info]   CI (99.9%): [18618.897, 35760.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.268 ±(99.9%) 2.270 B/op [Average]
[info]   (min, avg, max) = (0.760, 1.268, 2.011), stdev = 0.590
[info]   CI (99.9%): [≈ 0, 3.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.14% complete, ETA 00:43:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196127.948 ops/s
[info] # Warmup Iteration   2: 305368.568 ops/s
[info] # Warmup Iteration   3: 299315.759 ops/s
[info] Iteration   1: 307904.480 ops/s
[info]                  ·gc.alloc.rate:                   435.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2615.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.160 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 308467.558 ops/s
[info]                  ·gc.alloc.rate:                   435.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1667.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.094 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.685 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 309390.777 ops/s
[info]                  ·gc.alloc.rate:                   437.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1662.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 308403.960 ops/s
[info]                  ·gc.alloc.rate:                   435.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3338.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 309104.679 ops/s
[info]                  ·gc.alloc.rate:               436.817 MB/sec
[info]                  ·gc.alloc.rate.norm:          2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1665.451 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   308654.291 ±(99.9%) 2282.146 ops/s [Average]
[info]   (min, avg, max) = (307904.480, 308654.291, 309390.777), stdev = 592.666
[info]   CI (99.9%): [306372.145, 310936.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   436.178 ±(99.9%) 3.227 MB/sec [Average]
[info]   (min, avg, max) = (435.106, 436.178, 437.210), stdev = 0.838
[info]   CI (99.9%): [432.951, 439.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.001), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   429.301 ±(99.9%) 573.818 MB/sec [Average]
[info]   (min, avg, max) = (326.763, 429.301, 654.209), stdev = 149.019
[info]   CI (99.9%): [≈ 0, 1003.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2189.680 ±(99.9%) 2936.816 B/op [Average]
[info]   (min, avg, max) = (1662.179, 2189.680, 3338.440), stdev = 762.682
[info]   CI (99.9%): [≈ 0, 5126.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.094), stdev = 0.920
[info]   CI (99.9%): [≈ 0, 3.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.296 ±(99.9%) 18.064 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.296, 10.685), stdev = 4.691
[info]   CI (99.9%): [≈ 0, 20.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.48% complete, ETA 00:43:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 693138.445 ops/s
[info] # Warmup Iteration   2: 716394.936 ops/s
[info] # Warmup Iteration   3: 719790.385 ops/s
[info] Iteration   1: 720184.173 ops/s
[info]                  ·gc.alloc.rate:                   468.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1286.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 721343.366 ops/s
[info]                  ·gc.alloc.rate:               469.407 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 726.733 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 717160.886 ops/s
[info]                  ·gc.alloc.rate:                   466.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     729.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 722039.987 ops/s
[info]                  ·gc.alloc.rate:                   469.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1449.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 722417.153 ops/s
[info]                  ·gc.alloc.rate:               470.019 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 724.186 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   720629.113 ±(99.9%) 8151.273 ops/s [Average]
[info]   (min, avg, max) = (717160.886, 720629.113, 722417.153), stdev = 2116.860
[info]   CI (99.9%): [712477.840, 728780.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   468.873 ±(99.9%) 5.341 MB/sec [Average]
[info]   (min, avg, max) = (466.601, 468.873, 470.019), stdev = 1.387
[info]   CI (99.9%): [463.532, 474.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.320 ±(99.9%) 629.012 MB/sec [Average]
[info]   (min, avg, max) = (332.403, 450.320, 664.810), stdev = 163.352
[info]   CI (99.9%): [≈ 0, 1079.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   983.282 ±(99.9%) 1370.266 B/op [Average]
[info]   (min, avg, max) = (724.186, 983.282, 1449.098), stdev = 355.854
[info]   CI (99.9%): [≈ 0, 2353.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.344 ±(99.9%) 2.651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.574), stdev = 0.688
[info]   CI (99.9%): [≈ 0, 2.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.751 ±(99.9%) 5.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.439), stdev = 1.504
[info]   CI (99.9%): [≈ 0, 6.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 30.82% complete, ETA 00:42:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43000.860 ops/s
[info] # Warmup Iteration   2: 69915.340 ops/s
[info] # Warmup Iteration   3: 70757.507 ops/s
[info] Iteration   1: 71018.930 ops/s
[info]                  ·gc.alloc.rate:                   3017.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3021.723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66940.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.307 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 70995.403 ops/s
[info]                  ·gc.alloc.rate:                   3016.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3043.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67455.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.230 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 71332.382 ops/s
[info]                  ·gc.alloc.rate:                   3030.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              66857.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67389.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.837 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 71036.004 ops/s
[info]                  ·gc.alloc.rate:                   3018.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60247.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.845 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 70512.141 ops/s
[info]                  ·gc.alloc.rate:                   2995.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68381.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.717 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70978.972 ±(99.9%) 1135.694 ops/s [Average]
[info]   (min, avg, max) = (70512.141, 70978.972, 71332.382), stdev = 294.936
[info]   CI (99.9%): [69843.278, 72114.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3015.841 ±(99.9%) 48.238 MB/sec [Average]
[info]   (min, avg, max) = (2995.676, 3015.841, 3030.232), stdev = 12.527
[info]   CI (99.9%): [2967.603, 3064.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66856.296 ±(99.9%) 2.499 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66856.296, 66857.457), stdev = 0.649
[info]   CI (99.9%): [66853.797, 66858.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2980.828 ±(99.9%) 563.692 MB/sec [Average]
[info]   (min, avg, max) = (2720.477, 2980.828, 3064.030), stdev = 146.389
[info]   CI (99.9%): [2417.137, 3544.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66082.964 ±(99.9%) 12722.072 B/op [Average]
[info]   (min, avg, max) = (60247.551, 66082.964, 68381.512), stdev = 3303.882
[info]   CI (99.9%): [53360.892, 78805.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.587 ±(99.9%) 3.269 B/op [Average]
[info]   (min, avg, max) = (1.837, 2.587, 3.717), stdev = 0.849
[info]   CI (99.9%): [≈ 0, 5.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 8.000), stdev = 0.894
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.16% complete, ETA 00:42:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169082.613 ops/s
[info] # Warmup Iteration   2: 209486.358 ops/s
[info] # Warmup Iteration   3: 210164.793 ops/s
[info] Iteration   1: 212541.280 ops/s
[info]                  ·gc.alloc.rate:                   1731.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1664.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12317.385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.771 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 209705.403 ops/s
[info]                  ·gc.alloc.rate:                   1708.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12553.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.781 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 212794.703 ops/s
[info]                  ·gc.alloc.rate:                   1732.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12436.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 213016.363 ops/s
[info]                  ·gc.alloc.rate:                   1734.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12471.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.308 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 211527.842 ops/s
[info]                  ·gc.alloc.rate:                   1722.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              12816.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1693.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12599.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   211917.118 ±(99.9%) 5241.436 ops/s [Average]
[info]   (min, avg, max) = (209705.403, 211917.118, 213016.363), stdev = 1361.184
[info]   CI (99.9%): [206675.682, 217158.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1725.937 ±(99.9%) 41.994 MB/sec [Average]
[info]   (min, avg, max) = (1708.288, 1725.937, 1734.611), stdev = 10.906
[info]   CI (99.9%): [1683.943, 1767.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12816.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12816.002, 12816.002, 12816.002), stdev = 0.001
[info]   CI (99.9%): [12816.002, 12816.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1680.053 ±(99.9%) 45.002 MB/sec [Average]
[info]   (min, avg, max) = (1664.023, 1680.053, 1693.395), stdev = 11.687
[info]   CI (99.9%): [1635.052, 1725.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12475.633 ±(99.9%) 421.607 B/op [Average]
[info]   (min, avg, max) = (12317.385, 12475.633, 12599.109), stdev = 109.490
[info]   CI (99.9%): [12054.027, 12897.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.681 ±(99.9%) 0.803 B/op [Average]
[info]   (min, avg, max) = (0.308, 0.681, 0.781), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 1.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 31.51% complete, ETA 00:42:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598240.103 ops/s
[info] # Warmup Iteration   2: 834168.065 ops/s
[info] # Warmup Iteration   3: 829037.755 ops/s
[info] Iteration   1: 828578.721 ops/s
[info]                  ·gc.alloc.rate:                   652.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1241.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 848622.781 ops/s
[info]                  ·gc.alloc.rate:                   668.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1819.859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 845940.305 ops/s
[info]                  ·gc.alloc.rate:                   666.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1218.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 839592.578 ops/s
[info]                  ·gc.alloc.rate:               661.479 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1230.597 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 840340.582 ops/s
[info]                  ·gc.alloc.rate:               662.130 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      658.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1233.268 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   840614.994 ±(99.9%) 29732.114 ops/s [Average]
[info]   (min, avg, max) = (828578.721, 840614.994, 848622.781), stdev = 7721.336
[info]   CI (99.9%): [810882.880, 870347.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   662.321 ±(99.9%) 23.529 MB/sec [Average]
[info]   (min, avg, max) = (652.805, 662.321, 668.699), stdev = 6.111
[info]   CI (99.9%): [638.791, 685.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   720.940 ±(99.9%) 560.709 MB/sec [Average]
[info]   (min, avg, max) = (653.493, 720.940, 981.401), stdev = 145.614
[info]   CI (99.9%): [160.231, 1281.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1348.660 ±(99.9%) 1014.791 B/op [Average]
[info]   (min, avg, max) = (1218.269, 1348.660, 1819.859), stdev = 263.538
[info]   CI (99.9%): [333.868, 2363.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.447 ±(99.9%) 3.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.447, 2.109), stdev = 0.930
[info]   CI (99.9%): [≈ 0, 4.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.848 ±(99.9%) 6.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.848, 4.006), stdev = 1.768
[info]   CI (99.9%): [≈ 0, 7.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 31.85% complete, ETA 00:42:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923848.636 ops/s
[info] # Warmup Iteration   2: 1020506.448 ops/s
[info] # Warmup Iteration   3: 1023752.645 ops/s
[info] Iteration   1: 1024031.753 ops/s
[info]                  ·gc.alloc.rate:                   557.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1021.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1028486.010 ops/s
[info]                  ·gc.alloc.rate:               559.459 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 507.652 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 1002991.900 ops/s
[info]                  ·gc.alloc.rate:                   545.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1041.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1026300.140 ops/s
[info]                  ·gc.alloc.rate:                   558.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1017.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1029493.285 ops/s
[info]                  ·gc.alloc.rate:               559.931 MB/sec
[info]                  ·gc.alloc.rate.norm:          856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 507.658 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1022260.618 ±(99.9%) 42260.932 ops/s [Average]
[info]   (min, avg, max) = (1002991.900, 1022260.618, 1029493.285), stdev = 10975.030
[info]   CI (99.9%): [979999.686, 1064521.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   556.068 ±(99.9%) 22.898 MB/sec [Average]
[info]   (min, avg, max) = (545.610, 556.068, 559.931), stdev = 5.947
[info]   CI (99.9%): [533.170, 578.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   531.252 ±(99.9%) 700.650 MB/sec [Average]
[info]   (min, avg, max) = (331.788, 531.252, 665.035), stdev = 181.957
[info]   CI (99.9%): [≈ 0, 1231.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   819.217 ±(99.9%) 1095.702 B/op [Average]
[info]   (min, avg, max) = (507.652, 819.217, 1041.054), stdev = 284.550
[info]   CI (99.9%): [≈ 0, 1914.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.793), stdev = 0.783
[info]   CI (99.9%): [≈ 0, 3.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.609 ±(99.9%) 4.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.609, 2.754), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 32.19% complete, ETA 00:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 938389.643 ops/s
[info] # Warmup Iteration   2: 1005146.382 ops/s
[info] # Warmup Iteration   3: 1004339.210 ops/s
[info] Iteration   1: 1004275.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1001192.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1003844.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1003829.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1003860.471 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1003400.555 ±(99.9%) 4806.926 ops/s [Average]
[info]   (min, avg, max) = (1001192.582, 1003400.555, 1004275.462), stdev = 1248.343
[info]   CI (99.9%): [998593.629, 1008207.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 32.53% complete, ETA 00:41:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21340.817 ops/s
[info] # Warmup Iteration   2: 30139.247 ops/s
[info] # Warmup Iteration   3: 30053.483 ops/s
[info] Iteration   1: 30127.951 ops/s
[info]                  ·gc.alloc.rate:                   1657.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              86599.441 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86456.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.175 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30447.364 ops/s
[info]                  ·gc.alloc.rate:                   1675.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86153.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.456 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30350.324 ops/s
[info]                  ·gc.alloc.rate:                   1669.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86914.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 30339.667 ops/s
[info]                  ·gc.alloc.rate:                   1670.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87120.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.230 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30367.467 ops/s
[info]                  ·gc.alloc.rate:                   1670.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              86584.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1689.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87571.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   30326.555 ±(99.9%) 457.437 ops/s [Average]
[info]   (min, avg, max) = (30127.951, 30326.555, 30447.364), stdev = 118.795
[info]   CI (99.9%): [29869.117, 30783.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1668.892 ±(99.9%) 25.199 MB/sec [Average]
[info]   (min, avg, max) = (1657.831, 1668.892, 1675.318), stdev = 6.544
[info]   CI (99.9%): [1643.693, 1694.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86587.100 ±(99.9%) 26.565 B/op [Average]
[info]   (min, avg, max) = (86584.014, 86587.100, 86599.441), stdev = 6.899
[info]   CI (99.9%): [86560.535, 86613.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1673.831 ±(99.9%) 51.227 MB/sec [Average]
[info]   (min, avg, max) = (1655.090, 1673.831, 1689.636), stdev = 13.303
[info]   CI (99.9%): [1622.605, 1725.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86843.144 ±(99.9%) 2141.888 B/op [Average]
[info]   (min, avg, max) = (86153.197, 86843.144, 87571.218), stdev = 556.241
[info]   CI (99.9%): [84701.256, 88985.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.099 ±(99.9%) 6.121 B/op [Average]
[info]   (min, avg, max) = (2.175, 4.099, 6.456), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 10.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 32.88% complete, ETA 00:41:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123372.240 ops/s
[info] # Warmup Iteration   2: 193387.885 ops/s
[info] # Warmup Iteration   3: 195425.012 ops/s
[info] Iteration   1: 192461.632 ops/s
[info]                  ·gc.alloc.rate:                   1148.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10698.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 194554.745 ops/s
[info]                  ·gc.alloc.rate:                   1161.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7972.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 190375.908 ops/s
[info]                  ·gc.alloc.rate:                   1136.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10925.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.860 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 190623.662 ops/s
[info]                  ·gc.alloc.rate:                   1137.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8230.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.344 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 190943.584 ops/s
[info]                  ·gc.alloc.rate:                   1139.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              9392.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11009.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   191791.907 ±(99.9%) 6716.948 ops/s [Average]
[info]   (min, avg, max) = (190375.908, 191791.907, 194554.745), stdev = 1744.370
[info]   CI (99.9%): [185074.958, 198508.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1144.558 ±(99.9%) 40.160 MB/sec [Average]
[info]   (min, avg, max) = (1136.077, 1144.558, 1161.119), stdev = 10.429
[info]   CI (99.9%): [1104.398, 1184.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9392.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9392.002, 9392.002, 9392.002), stdev = 0.001
[info]   CI (99.9%): [9392.002, 9392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1189.651 ±(99.9%) 698.249 MB/sec [Average]
[info]   (min, avg, max) = (985.689, 1189.651, 1335.650), stdev = 181.333
[info]   CI (99.9%): [491.402, 1887.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9767.559 ±(99.9%) 5882.117 B/op [Average]
[info]   (min, avg, max) = (7972.989, 9767.559, 11009.263), stdev = 1527.567
[info]   CI (99.9%): [3885.442, 15649.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.513 ±(99.9%) 0.818 B/op [Average]
[info]   (min, avg, max) = (0.337, 0.513, 0.860), stdev = 0.212
[info]   CI (99.9%): [≈ 0, 1.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 33.22% complete, ETA 00:41:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247302.395 ops/s
[info] # Warmup Iteration   2: 261766.411 ops/s
[info] # Warmup Iteration   3: 263127.701 ops/s
[info] Iteration   1: 261342.298 ops/s
[info]                  ·gc.alloc.rate:                   850.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4011.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 260297.640 ops/s
[info]                  ·gc.alloc.rate:                   846.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6041.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 260075.016 ops/s
[info]                  ·gc.alloc.rate:               846.411 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4035.186 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 263027.794 ops/s
[info]                  ·gc.alloc.rate:                   855.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5994.938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.374 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 261328.777 ops/s
[info]                  ·gc.alloc.rate:                   850.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4031.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   261214.305 ±(99.9%) 4497.382 ops/s [Average]
[info]   (min, avg, max) = (260075.016, 261214.305, 263027.794), stdev = 1167.956
[info]   CI (99.9%): [256716.923, 265711.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   849.851 ±(99.9%) 14.467 MB/sec [Average]
[info]   (min, avg, max) = (846.411, 849.851, 855.770), stdev = 3.757
[info]   CI (99.9%): [835.384, 864.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   800.782 ±(99.9%) 702.502 MB/sec [Average]
[info]   (min, avg, max) = (666.112, 800.782, 1002.009), stdev = 182.438
[info]   CI (99.9%): [98.279, 1503.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4823.101 ±(99.9%) 4202.217 B/op [Average]
[info]   (min, avg, max) = (4011.753, 4823.101, 6041.832), stdev = 1091.302
[info]   CI (99.9%): [620.884, 9025.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.351 ±(99.9%) 0.866 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.351, 0.629), stdev = 0.225
[info]   CI (99.9%): [≈ 0, 1.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 33.56% complete, ETA 00:41:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29656.452 ops/s
[info] # Warmup Iteration   2: 66327.810 ops/s
[info] # Warmup Iteration   3: 65771.102 ops/s
[info] Iteration   1: 67235.455 ops/s
[info]                  ·gc.alloc.rate:                   2794.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2668.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62452.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.949 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 67095.379 ops/s
[info]                  ·gc.alloc.rate:                   2789.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63143.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.418 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 66604.521 ops/s
[info]                  ·gc.alloc.rate:                   2767.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63970.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.968 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 66875.305 ops/s
[info]                  ·gc.alloc.rate:                   2779.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71909.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.919 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 67308.786 ops/s
[info]                  ·gc.alloc.rate:                   2797.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              65408.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63599.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.921 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   67023.889 ±(99.9%) 1104.310 ops/s [Average]
[info]   (min, avg, max) = (66604.521, 67023.889, 67308.786), stdev = 286.786
[info]   CI (99.9%): [65919.579, 68128.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2785.664 ±(99.9%) 46.373 MB/sec [Average]
[info]   (min, avg, max) = (2767.960, 2785.664, 2797.281), stdev = 12.043
[info]   CI (99.9%): [2739.291, 2832.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65408.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65408.006, 65408.007, 65408.007), stdev = 0.001
[info]   CI (99.9%): [65408.006, 65408.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2768.712 ±(99.9%) 621.707 MB/sec [Average]
[info]   (min, avg, max) = (2668.068, 2768.712, 3055.471), stdev = 161.455
[info]   CI (99.9%): [2147.005, 3390.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65015.138 ±(99.9%) 15000.179 B/op [Average]
[info]   (min, avg, max) = (62452.366, 65015.138, 71909.610), stdev = 3895.499
[info]   CI (99.9%): [50014.959, 80015.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.835 ±(99.9%) 3.368 B/op [Average]
[info]   (min, avg, max) = (1.949, 2.835, 3.919), stdev = 0.875
[info]   CI (99.9%): [≈ 0, 6.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 33.90% complete, ETA 00:41:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381521.400 ops/s
[info] # Warmup Iteration   2: 554176.688 ops/s
[info] # Warmup Iteration   3: 520435.000 ops/s
[info] Iteration   1: 562176.898 ops/s
[info]                  ·gc.alloc.rate:                   568.610 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     912.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 560255.755 ops/s
[info]                  ·gc.alloc.rate:                   566.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1833.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.117 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 547171.439 ops/s
[info]                  ·gc.alloc.rate:                   553.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1878.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.240 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 559400.953 ops/s
[info]                  ·gc.alloc.rate:               565.843 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      326.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919.284 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 558384.793 ops/s
[info]                  ·gc.alloc.rate:               564.886 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      654.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1845.678 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   557477.968 ±(99.9%) 22824.672 ops/s [Average]
[info]   (min, avg, max) = (547171.439, 557477.968, 562176.898), stdev = 5927.495
[info]   CI (99.9%): [534653.296, 580302.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   563.951 ±(99.9%) 23.158 MB/sec [Average]
[info]   (min, avg, max) = (553.481, 563.951, 568.610), stdev = 6.014
[info]   CI (99.9%): [540.793, 587.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   522.725 ±(99.9%) 690.130 MB/sec [Average]
[info]   (min, avg, max) = (326.052, 522.725, 654.898), stdev = 179.225
[info]   CI (99.9%): [≈ 0, 1212.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1477.922 ±(99.9%) 1976.005 B/op [Average]
[info]   (min, avg, max) = (912.885, 1477.922, 1878.760), stdev = 513.162
[info]   CI (99.9%): [≈ 0, 3453.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.680 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.167), stdev = 0.956
[info]   CI (99.9%): [≈ 0, 4.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.285 ±(99.9%) 10.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.285, 6.066), stdev = 2.675
[info]   CI (99.9%): [≈ 0, 11.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 34.25% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505780.238 ops/s
[info] # Warmup Iteration   2: 548301.225 ops/s
[info] # Warmup Iteration   3: 555392.791 ops/s
[info] Iteration   1: 550771.436 ops/s
[info]                  ·gc.alloc.rate:                   422.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1461.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 535242.217 ops/s
[info]                  ·gc.alloc.rate:                   410.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     977.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.178 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 542450.507 ops/s
[info]                  ·gc.alloc.rate:                   416.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1926.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 557136.998 ops/s
[info]                  ·gc.alloc.rate:                   427.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     937.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.118 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 551846.251 ops/s
[info]                  ·gc.alloc.rate:               423.569 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 946.118 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   547489.482 ±(99.9%) 33248.141 ops/s [Average]
[info]   (min, avg, max) = (535242.217, 547489.482, 557136.998), stdev = 8634.437
[info]   CI (99.9%): [514241.341, 580737.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   420.286 ±(99.9%) 25.444 MB/sec [Average]
[info]   (min, avg, max) = (410.972, 420.286, 427.726), stdev = 6.608
[info]   CI (99.9%): [394.842, 445.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   434.390 ±(99.9%) 578.254 MB/sec [Average]
[info]   (min, avg, max) = (331.744, 434.390, 664.165), stdev = 150.171
[info]   CI (99.9%): [≈ 0, 1012.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1249.923 ±(99.9%) 1686.988 B/op [Average]
[info]   (min, avg, max) = (937.131, 1249.923, 1926.972), stdev = 438.105
[info]   CI (99.9%): [≈ 0, 2936.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.383 ±(99.9%) 2.973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.762), stdev = 0.772
[info]   CI (99.9%): [≈ 0, 3.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.123 ±(99.9%) 8.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.123, 5.178), stdev = 2.270
[info]   CI (99.9%): [≈ 0, 9.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 34.59% complete, ETA 00:40:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567465.094 ops/s
[info] # Warmup Iteration   2: 616187.814 ops/s
[info] # Warmup Iteration   3: 615090.612 ops/s
[info] Iteration   1: 615114.565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616668.103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 616875.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 616848.559 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 616756.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   616452.688 ±(99.9%) 2897.593 ops/s [Average]
[info]   (min, avg, max) = (615114.565, 616452.688, 616875.944), stdev = 752.496
[info]   CI (99.9%): [613555.095, 619350.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 34.93% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190411.125 ops/s
[info] # Warmup Iteration   2: 315144.854 ops/s
[info] # Warmup Iteration   3: 323332.518 ops/s
[info] Iteration   1: 323994.392 ops/s
[info]                  ·gc.alloc.rate:                   892.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4746.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 323994.005 ops/s
[info]                  ·gc.alloc.rate:                   892.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3168.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.506 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 325293.115 ops/s
[info]                  ·gc.alloc.rate:                   896.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4747.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 316405.346 ops/s
[info]                  ·gc.alloc.rate:                   871.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4910.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.414 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 320560.040 ops/s
[info]                  ·gc.alloc.rate:                   883.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4866.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   322049.379 ±(99.9%) 13904.998 ops/s [Average]
[info]   (min, avg, max) = (316405.346, 322049.379, 325293.115), stdev = 3611.084
[info]   CI (99.9%): [308144.381, 335954.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   887.320 ±(99.9%) 38.342 MB/sec [Average]
[info]   (min, avg, max) = (871.689, 887.320, 896.218), stdev = 9.957
[info]   CI (99.9%): [848.978, 925.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   917.885 ±(99.9%) 572.080 MB/sec [Average]
[info]   (min, avg, max) = (652.301, 917.885, 991.461), stdev = 148.567
[info]   CI (99.9%): [345.806, 1489.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4487.990 ±(99.9%) 2854.957 B/op [Average]
[info]   (min, avg, max) = (3168.030, 4487.990, 4910.696), stdev = 741.423
[info]   CI (99.9%): [1633.033, 7342.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.468 ±(99.9%) 0.587 B/op [Average]
[info]   (min, avg, max) = (0.302, 0.468, 0.708), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 1.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 35.27% complete, ETA 00:40:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6748.486 ops/s
[info] # Warmup Iteration   2: 8815.682 ops/s
[info] # Warmup Iteration   3: 9244.586 ops/s
[info] Iteration   1: 9230.592 ops/s
[info]                  ·gc.alloc.rate:                   1209.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169575.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.549 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9064.582 ops/s
[info]                  ·gc.alloc.rate:                   1187.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230857.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9220.419 ops/s
[info]                  ·gc.alloc.rate:                   1207.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227837.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.764 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9168.522 ops/s
[info]                  ·gc.alloc.rate:                   1200.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              206144.152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172666.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.147 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9215.902 ops/s
[info]                  ·gc.alloc.rate:                   1207.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              206160.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229610.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9180.003 ±(99.9%) 264.936 ops/s [Average]
[info]   (min, avg, max) = (9064.582, 9180.003, 9230.592), stdev = 68.803
[info]   CI (99.9%): [8915.067, 9444.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1202.576 ±(99.9%) 34.693 MB/sec [Average]
[info]   (min, avg, max) = (1187.534, 1202.576, 1209.474), stdev = 9.010
[info]   CI (99.9%): [1167.882, 1237.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   206147.269 ±(99.9%) 27.512 B/op [Average]
[info]   (min, avg, max) = (206144.047, 206147.269, 206160.050), stdev = 7.145
[info]   CI (99.9%): [206119.757, 206174.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1202.016 ±(99.9%) 709.128 MB/sec [Average]
[info]   (min, avg, max) = (994.924, 1202.016, 1344.513), stdev = 184.158
[info]   CI (99.9%): [492.888, 1911.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206109.645 ±(99.9%) 123131.158 B/op [Average]
[info]   (min, avg, max) = (169575.820, 206109.645, 230857.897), stdev = 31976.771
[info]   CI (99.9%): [82978.487, 329240.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11.451 ±(99.9%) 30.101 B/op [Average]
[info]   (min, avg, max) = (3.549, 11.451, 21.686), stdev = 7.817
[info]   CI (99.9%): [≈ 0, 41.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 35.62% complete, ETA 00:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5833.475 ops/s
[info] # Warmup Iteration   2: 9343.276 ops/s
[info] # Warmup Iteration   3: 9682.789 ops/s
[info] Iteration   1: 9657.532 ops/s
[info]                  ·gc.alloc.rate:                   1157.205 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     213427.934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.392 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 9600.906 ops/s
[info]                  ·gc.alloc.rate:                   1150.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161823.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9571.627 ops/s
[info]                  ·gc.alloc.rate:                   1147.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              188592.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217513.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 9591.783 ops/s
[info]                  ·gc.alloc.rate:                   1149.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              188598.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163614.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.662 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 9624.540 ops/s
[info]                  ·gc.alloc.rate:                   1153.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              188624.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218625.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.021 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9609.278 ±(99.9%) 127.058 ops/s [Average]
[info]   (min, avg, max) = (9571.627, 9609.278, 9657.532), stdev = 32.997
[info]   CI (99.9%): [9482.219, 9736.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1151.605 ±(99.9%) 14.986 MB/sec [Average]
[info]   (min, avg, max) = (1147.090, 1151.605, 1157.205), stdev = 3.892
[info]   CI (99.9%): [1136.619, 1166.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   188599.679 ±(99.9%) 53.446 B/op [Average]
[info]   (min, avg, max) = (188592.045, 188599.679, 188624.045), stdev = 13.880
[info]   CI (99.9%): [188546.233, 188653.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1190.838 ±(99.9%) 698.971 MB/sec [Average]
[info]   (min, avg, max) = (987.417, 1190.838, 1336.970), stdev = 181.520
[info]   CI (99.9%): [491.868, 1889.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   195000.986 ±(99.9%) 113746.436 B/op [Average]
[info]   (min, avg, max) = (161823.350, 195000.986, 218625.808), stdev = 29539.588
[info]   CI (99.9%): [81254.550, 308747.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10.916 ±(99.9%) 19.472 B/op [Average]
[info]   (min, avg, max) = (3.392, 10.916, 17.021), stdev = 5.057
[info]   CI (99.9%): [≈ 0, 30.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 35.96% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143078.404 ops/s
[info] # Warmup Iteration   2: 148485.469 ops/s
[info] # Warmup Iteration   3: 149577.914 ops/s
[info] Iteration   1: 148383.910 ops/s
[info]                  ·gc.alloc.rate:                   965.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10598.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 148742.938 ops/s
[info]                  ·gc.alloc.rate:                   968.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7055.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.661 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 149896.113 ops/s
[info]                  ·gc.alloc.rate:                   975.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10518.911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 150241.138 ops/s
[info]                  ·gc.alloc.rate:                   977.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10522.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.654 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 147633.582 ops/s
[info]                  ·gc.alloc.rate:                   961.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10730.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.222 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   148979.536 ±(99.9%) 4153.565 ops/s [Average]
[info]   (min, avg, max) = (147633.582, 148979.536, 150241.138), stdev = 1078.668
[info]   CI (99.9%): [144825.972, 153133.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   969.459 ±(99.9%) 26.493 MB/sec [Average]
[info]   (min, avg, max) = (961.007, 969.459, 977.513), stdev = 6.880
[info]   CI (99.9%): [942.967, 995.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.003, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.918 ±(99.9%) 578.825 MB/sec [Average]
[info]   (min, avg, max) = (667.070, 935.918, 1007.010), stdev = 150.319
[info]   CI (99.9%): [357.093, 1514.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9885.202 ±(99.9%) 6099.764 B/op [Average]
[info]   (min, avg, max) = (7055.636, 9885.202, 10730.190), stdev = 1584.089
[info]   CI (99.9%): [3785.438, 15984.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.571 ±(99.9%) 0.954 B/op [Average]
[info]   (min, avg, max) = (0.222, 0.571, 0.874), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 36.30% complete, ETA 00:39:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4160.347 ops/s
[info] # Warmup Iteration   2: 7092.535 ops/s
[info] # Warmup Iteration   3: 7252.710 ops/s
[info] Iteration   1: 7255.683 ops/s
[info]                  ·gc.alloc.rate:                   1351.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     285371.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.031 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7262.366 ops/s
[info]                  ·gc.alloc.rate:                   1352.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286683.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.555 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7282.688 ops/s
[info]                  ·gc.alloc.rate:                   1356.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287480.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.493 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7301.375 ops/s
[info]                  ·gc.alloc.rate:                   1359.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288311.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17.948 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7298.713 ops/s
[info]                  ·gc.alloc.rate:                   1359.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              293080.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     289579.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.466 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7280.165 ±(99.9%) 79.765 ops/s [Average]
[info]   (min, avg, max) = (7255.683, 7280.165, 7301.375), stdev = 20.715
[info]   CI (99.9%): [7200.400, 7359.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1355.877 ±(99.9%) 14.311 MB/sec [Average]
[info]   (min, avg, max) = (1351.327, 1355.877, 1359.730), stdev = 3.717
[info]   CI (99.9%): [1341.566, 1370.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293080.061 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (293080.059, 293080.061, 293080.064), stdev = 0.002
[info]   CI (99.9%): [293080.052, 293080.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1330.008 ±(99.9%) 41.791 MB/sec [Average]
[info]   (min, avg, max) = (1315.783, 1330.008, 1342.942), stdev = 10.853
[info]   CI (99.9%): [1288.218, 1371.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   287485.259 ±(99.9%) 6143.070 B/op [Average]
[info]   (min, avg, max) = (285371.035, 287485.259, 289579.345), stdev = 1595.336
[info]   CI (99.9%): [281342.189, 293628.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   17.099 ±(99.9%) 22.608 B/op [Average]
[info]   (min, avg, max) = (9.031, 17.099, 22.555), stdev = 5.871
[info]   CI (99.9%): [≈ 0, 39.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 36.64% complete, ETA 00:39:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15269.673 ops/s
[info] # Warmup Iteration   2: 20053.965 ops/s
[info] # Warmup Iteration   3: 20337.334 ops/s
[info] Iteration   1: 20121.981 ops/s
[info]                  ·gc.alloc.rate:                   1069.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              83621.666 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77555.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20109.725 ops/s
[info]                  ·gc.alloc.rate:                   1068.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              83640.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77758.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.775 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 19782.589 ops/s
[info]                  ·gc.alloc.rate:                   1051.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              83620.221 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105779.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20183.534 ops/s
[info]                  ·gc.alloc.rate:                   1072.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78122.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20191.006 ops/s
[info]                  ·gc.alloc.rate:                   1072.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              83576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78303.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.623 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   20077.767 ±(99.9%) 650.394 ops/s [Average]
[info]   (min, avg, max) = (19782.589, 20077.767, 20191.006), stdev = 168.905
[info]   CI (99.9%): [19427.373, 20728.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1066.693 ±(99.9%) 34.281 MB/sec [Average]
[info]   (min, avg, max) = (1051.037, 1066.693, 1072.252), stdev = 8.903
[info]   CI (99.9%): [1032.413, 1100.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   83606.791 ±(99.9%) 112.257 B/op [Average]
[info]   (min, avg, max) = (83576.021, 83606.791, 83640.023), stdev = 29.153
[info]   CI (99.9%): [83494.534, 83719.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1064.331 ±(99.9%) 571.328 MB/sec [Average]
[info]   (min, avg, max) = (991.497, 1064.331, 1329.564), stdev = 148.372
[info]   CI (99.9%): [493.003, 1635.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   83503.811 ±(99.9%) 47963.957 B/op [Average]
[info]   (min, avg, max) = (77555.547, 83503.811, 105779.728), stdev = 12456.087
[info]   CI (99.9%): [35539.854, 131467.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.874 ±(99.9%) 11.375 B/op [Average]
[info]   (min, avg, max) = (1.623, 5.874, 9.775), stdev = 2.954
[info]   CI (99.9%): [≈ 0, 17.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 36.99% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 606070.752 ops/s
[info] # Warmup Iteration   2: 689937.528 ops/s
[info] # Warmup Iteration   3: 700453.425 ops/s
[info] Iteration   1: 701057.509 ops/s
[info]                  ·gc.alloc.rate:                   1264.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2986.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 703670.978 ops/s
[info]                  ·gc.alloc.rate:                   1269.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2236.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 688260.880 ops/s
[info]                  ·gc.alloc.rate:                   1241.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3058.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 702533.565 ops/s
[info]                  ·gc.alloc.rate:                   1267.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3008.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.187 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 702597.020 ops/s
[info]                  ·gc.alloc.rate:                   1267.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3019.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.233 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   699623.990 ±(99.9%) 24720.557 ops/s [Average]
[info]   (min, avg, max) = (688260.880, 699623.990, 703670.978), stdev = 6419.850
[info]   CI (99.9%): [674903.434, 724344.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1262.463 ±(99.9%) 44.765 MB/sec [Average]
[info]   (min, avg, max) = (1241.915, 1262.463, 1269.984), stdev = 11.625
[info]   CI (99.9%): [1217.698, 1307.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1271.739 ±(99.9%) 585.464 MB/sec [Average]
[info]   (min, avg, max) = (1000.010, 1271.739, 1347.915), stdev = 152.043
[info]   CI (99.9%): [686.274, 1857.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2861.951 ±(99.9%) 1350.605 B/op [Average]
[info]   (min, avg, max) = (2236.272, 2861.951, 3058.880), stdev = 350.748
[info]   CI (99.9%): [1511.345, 4212.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.231 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.178, 0.233), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 37.33% complete, ETA 00:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512839.248 ops/s
[info] # Warmup Iteration   2: 547401.847 ops/s
[info] # Warmup Iteration   3: 547429.428 ops/s
[info] Iteration   1: 546423.110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 547203.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 547256.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 546463.162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 547224.015 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   546914.196 ±(99.9%) 1658.349 ops/s [Average]
[info]   (min, avg, max) = (546423.110, 546914.196, 547256.928), stdev = 430.668
[info]   CI (99.9%): [545255.847, 548572.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 37.67% complete, ETA 00:38:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15631.862 ops/s
[info] # Warmup Iteration   2: 21289.933 ops/s
[info] # Warmup Iteration   3: 21389.938 ops/s
[info] Iteration   1: 21527.212 ops/s
[info]                  ·gc.alloc.rate:                   992.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72077.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.088 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 21460.182 ops/s
[info]                  ·gc.alloc.rate:                   989.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72473.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 21448.554 ops/s
[info]                  ·gc.alloc.rate:                   989.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              72566.948 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72758.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.583 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21033.346 ops/s
[info]                  ·gc.alloc.rate:                   969.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74542.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 20985.001 ops/s
[info]                  ·gc.alloc.rate:                   967.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74966.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.684 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   21290.859 ±(99.9%) 999.060 ops/s [Average]
[info]   (min, avg, max) = (20985.001, 21290.859, 21527.212), stdev = 259.453
[info]   CI (99.9%): [20291.799, 22289.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   981.843 ±(99.9%) 46.109 MB/sec [Average]
[info]   (min, avg, max) = (967.931, 981.843, 992.658), stdev = 11.974
[info]   CI (99.9%): [935.734, 1027.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72567.806 ±(99.9%) 30.860 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72567.806, 72576.020), stdev = 8.014
[info]   CI (99.9%): [72536.946, 72598.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   992.436 ±(99.9%) 22.143 MB/sec [Average]
[info]   (min, avg, max) = (985.834, 992.436, 1000.028), stdev = 5.750
[info]   CI (99.9%): [970.293, 1014.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   73363.319 ±(99.9%) 5010.255 B/op [Average]
[info]   (min, avg, max) = (72077.120, 73363.319, 74966.090), stdev = 1301.147
[info]   CI (99.9%): [68353.064, 78373.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.921 ±(99.9%) 2.517 B/op [Average]
[info]   (min, avg, max) = (4.580, 4.921, 6.088), stdev = 0.654
[info]   CI (99.9%): [2.404, 7.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 38.01% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17215.632 ops/s
[info] # Warmup Iteration   2: 22859.831 ops/s
[info] # Warmup Iteration   3: 23587.769 ops/s
[info] Iteration   1: 23665.798 ops/s
[info]                  ·gc.alloc.rate:                   1325.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              88144.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88293.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.538 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23607.102 ops/s
[info]                  ·gc.alloc.rate:                   1322.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              88143.087 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88820.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.327 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23026.469 ops/s
[info]                  ·gc.alloc.rate:                   1289.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91513.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 23283.690 ops/s
[info]                  ·gc.alloc.rate:                   1304.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68057.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23708.158 ops/s
[info]                  ·gc.alloc.rate:                   1328.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              88128.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89419.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.528 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   23458.243 ±(99.9%) 1130.204 ops/s [Average]
[info]   (min, avg, max) = (23026.469, 23458.243, 23708.158), stdev = 293.510
[info]   CI (99.9%): [22328.039, 24588.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1313.922 ±(99.9%) 64.046 MB/sec [Average]
[info]   (min, avg, max) = (1289.393, 1313.922, 1328.090), stdev = 16.633
[info]   CI (99.9%): [1249.876, 1377.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   88134.232 ±(99.9%) 32.787 B/op [Average]
[info]   (min, avg, max) = (88128.018, 88134.232, 88144.018), stdev = 8.515
[info]   CI (99.9%): [88101.445, 88167.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1270.802 ±(99.9%) 568.366 MB/sec [Average]
[info]   (min, avg, max) = (1007.096, 1270.802, 1347.549), stdev = 147.603
[info]   CI (99.9%): [702.436, 1839.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85220.806 ±(99.9%) 37243.935 B/op [Average]
[info]   (min, avg, max) = (68057.481, 85220.806, 91513.081), stdev = 9672.132
[info]   CI (99.9%): [47976.871, 122464.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5.576 ±(99.9%) 6.419 B/op [Average]
[info]   (min, avg, max) = (4.221, 5.576, 8.327), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 11.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 38.36% complete, ETA 00:38:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17908.007 ops/s
[info] # Warmup Iteration   2: 27607.604 ops/s
[info] # Warmup Iteration   3: 28068.792 ops/s
[info] Iteration   1: 28237.497 ops/s
[info]                  ·gc.alloc.rate:                   1308.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              72912.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73086.958 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28191.783 ops/s
[info]                  ·gc.alloc.rate:                   1306.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              72890.408 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73631.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.324 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28246.113 ops/s
[info]                  ·gc.alloc.rate:                   1308.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73973.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.480 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27685.062 ops/s
[info]                  ·gc.alloc.rate:                   1282.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75888.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.550 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 28265.858 ops/s
[info]                  ·gc.alloc.rate:                   1308.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              72880.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74702.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.477 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   28125.263 ±(99.9%) 953.317 ops/s [Average]
[info]   (min, avg, max) = (27685.062, 28125.263, 28265.858), stdev = 247.573
[info]   CI (99.9%): [27171.946, 29078.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1302.665 ±(99.9%) 44.642 MB/sec [Average]
[info]   (min, avg, max) = (1282.017, 1302.665, 1308.863), stdev = 11.593
[info]   CI (99.9%): [1258.023, 1347.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   72888.496 ±(99.9%) 53.525 B/op [Average]
[info]   (min, avg, max) = (72880.015, 72888.496, 72912.022), stdev = 13.900
[info]   CI (99.9%): [72834.970, 72942.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.000 ±(99.9%) 46.147 MB/sec [Average]
[info]   (min, avg, max) = (1311.542, 1327.000, 1341.589), stdev = 11.984
[info]   CI (99.9%): [1280.853, 1373.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   74256.349 ±(99.9%) 4174.212 B/op [Average]
[info]   (min, avg, max) = (73086.958, 74256.349, 75888.274), stdev = 1084.030
[info]   CI (99.9%): [70082.137, 78430.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.010, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3.030 ±(99.9%) 2.491 B/op [Average]
[info]   (min, avg, max) = (2.321, 3.030, 3.550), stdev = 0.647
[info]   CI (99.9%): [0.539, 5.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 38.70% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238525.441 ops/s
[info] # Warmup Iteration   2: 248545.424 ops/s
[info] # Warmup Iteration   3: 250447.688 ops/s
[info] Iteration   1: 251469.075 ops/s
[info]                  ·gc.alloc.rate:                   654.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4171.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 249195.744 ops/s
[info]                  ·gc.alloc.rate:                   648.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4207.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 250681.281 ops/s
[info]                  ·gc.alloc.rate:                   652.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4182.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 250311.143 ops/s
[info]                  ·gc.alloc.rate:                   651.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4192.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 248856.981 ops/s
[info]                  ·gc.alloc.rate:               647.675 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4223.474 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   250102.845 ±(99.9%) 4138.131 ops/s [Average]
[info]   (min, avg, max) = (248856.981, 250102.845, 251469.075), stdev = 1074.659
[info]   CI (99.9%): [245964.714, 254240.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   650.978 ±(99.9%) 11.039 MB/sec [Average]
[info]   (min, avg, max) = (647.675, 650.978, 654.741), stdev = 2.867
[info]   CI (99.9%): [639.940, 662.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.761 ±(99.9%) 2.595 MB/sec [Average]
[info]   (min, avg, max) = (666.132, 666.761, 667.831), stdev = 0.674
[info]   CI (99.9%): [664.166, 669.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4195.380 ±(99.9%) 79.169 B/op [Average]
[info]   (min, avg, max) = (4171.307, 4195.380, 4223.474), stdev = 20.560
[info]   CI (99.9%): [4116.211, 4274.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 1.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 0.782), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 39.04% complete, ETA 00:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8914.837 ops/s
[info] # Warmup Iteration   2: 15656.673 ops/s
[info] # Warmup Iteration   3: 15962.343 ops/s
[info] Iteration   1: 15687.448 ops/s
[info]                  ·gc.alloc.rate:                   1604.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.614 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165562.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.265 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 15725.393 ops/s
[info]                  ·gc.alloc.rate:                   1608.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132972.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.417 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15971.695 ops/s
[info]                  ·gc.alloc.rate:                   1633.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     164621.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.205 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15946.366 ops/s
[info]                  ·gc.alloc.rate:                   1631.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165777.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.109 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 15950.187 ops/s
[info]                  ·gc.alloc.rate:                   1631.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              160984.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166458.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15856.218 ±(99.9%) 530.392 ops/s [Average]
[info]   (min, avg, max) = (15687.448, 15856.218, 15971.695), stdev = 137.741
[info]   CI (99.9%): [15325.826, 16386.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1621.944 ±(99.9%) 53.872 MB/sec [Average]
[info]   (min, avg, max) = (1604.964, 1621.944, 1633.655), stdev = 13.990
[info]   CI (99.9%): [1568.073, 1675.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   160984.030 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (160984.027, 160984.030, 160984.039), stdev = 0.005
[info]   CI (99.9%): [160984.010, 160984.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.292 ±(99.9%) 593.650 MB/sec [Average]
[info]   (min, avg, max) = (1328.587, 1603.292, 1687.028), stdev = 154.169
[info]   CI (99.9%): [1009.641, 2196.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   159078.558 ±(99.9%) 56253.129 B/op [Average]
[info]   (min, avg, max) = (132972.077, 159078.558, 166458.893), stdev = 14608.759
[info]   CI (99.9%): [102825.430, 215331.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.264 ±(99.9%) 12.534 B/op [Average]
[info]   (min, avg, max) = (4.109, 8.264, 12.324), stdev = 3.255
[info]   CI (99.9%): [≈ 0, 20.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 39.38% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33237.440 ops/s
[info] # Warmup Iteration   2: 42018.408 ops/s
[info] # Warmup Iteration   3: 42644.280 ops/s
[info] Iteration   1: 43234.968 ops/s
[info]                  ·gc.alloc.rate:                   1374.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1656.755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60296.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.758 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43028.210 ops/s
[info]                  ·gc.alloc.rate:                   1368.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48694.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.046 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 42744.556 ops/s
[info]                  ·gc.alloc.rate:                   1359.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49250.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.066 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 43494.666 ops/s
[info]                  ·gc.alloc.rate:                   1383.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48593.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.260 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43220.068 ops/s
[info]                  ·gc.alloc.rate:                   1374.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              50040.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49086.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.516 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   43144.494 ±(99.9%) 1071.957 ops/s [Average]
[info]   (min, avg, max) = (42744.556, 43144.494, 43494.666), stdev = 278.384
[info]   CI (99.9%): [42072.537, 44216.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1371.957 ±(99.9%) 34.660 MB/sec [Average]
[info]   (min, avg, max) = (1359.040, 1371.957, 1383.195), stdev = 9.001
[info]   CI (99.9%): [1337.297, 1406.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   50040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (50040.010, 50040.010, 50040.011), stdev = 0.001
[info]   CI (99.9%): [50040.009, 50040.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1403.439 ±(99.9%) 545.834 MB/sec [Average]
[info]   (min, avg, max) = (1331.273, 1403.439, 1656.755), stdev = 141.751
[info]   CI (99.9%): [857.605, 1949.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51184.267 ±(99.9%) 19642.587 B/op [Average]
[info]   (min, avg, max) = (48593.840, 51184.267, 60296.576), stdev = 5101.118
[info]   CI (99.9%): [31541.680, 70826.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.129 ±(99.9%) 3.846 B/op [Average]
[info]   (min, avg, max) = (0.758, 2.129, 3.066), stdev = 0.999
[info]   CI (99.9%): [≈ 0, 5.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 39.73% complete, ETA 00:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 963446.638 ops/s
[info] # Warmup Iteration   2: 1085465.612 ops/s
[info] # Warmup Iteration   3: 1097709.260 ops/s
[info] Iteration   1: 1092323.722 ops/s
[info]                  ·gc.alloc.rate:                   1171.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1915.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1096308.090 ops/s
[info]                  ·gc.alloc.rate:                   1175.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1434.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1093612.158 ops/s
[info]                  ·gc.alloc.rate:                   1172.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1923.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1096961.675 ops/s
[info]                  ·gc.alloc.rate:                   1176.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1443.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1092161.193 ops/s
[info]                  ·gc.alloc.rate:                   1171.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1939.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1094273.367 ±(99.9%) 8624.646 ops/s [Average]
[info]   (min, avg, max) = (1092161.193, 1094273.367, 1096961.675), stdev = 2239.793
[info]   CI (99.9%): [1085648.722, 1102898.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1173.761 ±(99.9%) 8.936 MB/sec [Average]
[info]   (min, avg, max) = (1171.712, 1173.761, 1176.642), stdev = 2.321
[info]   CI (99.9%): [1164.825, 1182.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1203.524 ±(99.9%) 706.149 MB/sec [Average]
[info]   (min, avg, max) = (999.522, 1203.524, 1346.010), stdev = 183.385
[info]   CI (99.9%): [497.374, 1909.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1731.213 ±(99.9%) 1027.636 B/op [Average]
[info]   (min, avg, max) = (1434.895, 1731.213, 1939.098), stdev = 266.874
[info]   CI (99.9%): [703.577, 2758.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.090, 0.120), stdev = 0.021
[info]   CI (99.9%): [0.008, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 40.07% complete, ETA 00:37:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 645567.134 ops/s
[info] # Warmup Iteration   2: 625974.776 ops/s
[info] # Warmup Iteration   3: 698397.616 ops/s
[info] Iteration   1: 698337.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 698313.202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 698047.342 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 698328.122 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 698155.902 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   698236.341 ±(99.9%) 497.177 ops/s [Average]
[info]   (min, avg, max) = (698047.342, 698236.341, 698337.140), stdev = 129.115
[info]   CI (99.9%): [697739.165, 698733.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 40.41% complete, ETA 00:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36052.635 ops/s
[info] # Warmup Iteration   2: 49165.852 ops/s
[info] # Warmup Iteration   3: 50066.667 ops/s
[info] Iteration   1: 50531.412 ops/s
[info]                  ·gc.alloc.rate:                   1338.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1317.586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41039.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.945 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 49804.225 ops/s
[info]                  ·gc.alloc.rate:                   1320.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41869.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.947 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 50532.387 ops/s
[info]                  ·gc.alloc.rate:                   1339.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41495.716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.593 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 50478.932 ops/s
[info]                  ·gc.alloc.rate:                   1338.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41745.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.596 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 49389.349 ops/s
[info]                  ·gc.alloc.rate:                   1308.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              41704.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42838.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   50147.261 ±(99.9%) 2017.462 ops/s [Average]
[info]   (min, avg, max) = (49389.349, 50147.261, 50532.387), stdev = 523.928
[info]   CI (99.9%): [48129.799, 52164.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1329.026 ±(99.9%) 53.495 MB/sec [Average]
[info]   (min, avg, max) = (1308.700, 1329.026, 1339.032), stdev = 13.892
[info]   CI (99.9%): [1275.531, 1382.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   41704.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41704.009, 41704.009, 41704.009), stdev = 0.001
[info]   CI (99.9%): [41704.007, 41704.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1331.852 ±(99.9%) 41.171 MB/sec [Average]
[info]   (min, avg, max) = (1317.586, 1331.852, 1344.286), stdev = 10.692
[info]   CI (99.9%): [1290.681, 1373.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   41797.619 ±(99.9%) 2551.764 B/op [Average]
[info]   (min, avg, max) = (41039.263, 41797.619, 42838.011), stdev = 662.685
[info]   CI (99.9%): [39245.855, 44349.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.747 ±(99.9%) 2.815 B/op [Average]
[info]   (min, avg, max) = (1.945, 2.747, 3.947), stdev = 0.731
[info]   CI (99.9%): [≈ 0, 5.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 40.75% complete, ETA 00:36:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11223.483 ops/s
[info] # Warmup Iteration   2: 14920.373 ops/s
[info] # Warmup Iteration   3: 14936.905 ops/s
[info] Iteration   1: 14969.078 ops/s
[info]                  ·gc.alloc.rate:                   1359.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              142912.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139572.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14943.880 ops/s
[info]                  ·gc.alloc.rate:                   1357.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              142922.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140305.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14942.889 ops/s
[info]                  ·gc.alloc.rate:                   1357.045 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176317.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.770 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15130.676 ops/s
[info]                  ·gc.alloc.rate:                   1374.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              142928.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139863.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.827 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15007.761 ops/s
[info]                  ·gc.alloc.rate:                   1363.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              142921.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141428.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.915 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14998.857 ±(99.9%) 301.344 ops/s [Average]
[info]   (min, avg, max) = (14942.889, 14998.857, 15130.676), stdev = 78.258
[info]   CI (99.9%): [14697.513, 15300.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1362.208 ±(99.9%) 27.241 MB/sec [Average]
[info]   (min, avg, max) = (1357.045, 1362.208, 1374.047), stdev = 7.074
[info]   CI (99.9%): [1334.967, 1389.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142922.305 ±(99.9%) 25.295 B/op [Average]
[info]   (min, avg, max) = (142912.031, 142922.305, 142928.029), stdev = 6.569
[info]   CI (99.9%): [142897.010, 142947.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1405.549 ±(99.9%) 578.960 MB/sec [Average]
[info]   (min, avg, max) = (1327.904, 1405.549, 1674.068), stdev = 150.354
[info]   CI (99.9%): [826.588, 1984.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   147497.524 ±(99.9%) 62097.646 B/op [Average]
[info]   (min, avg, max) = (139572.028, 147497.524, 176317.932), stdev = 16126.562
[info]   CI (99.9%): [85399.877, 209595.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.046 ±(99.9%) 9.581 B/op [Average]
[info]   (min, avg, max) = (6.565, 10.046, 13.154), stdev = 2.488
[info]   CI (99.9%): [0.465, 19.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 41.10% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9730.495 ops/s
[info] # Warmup Iteration   2: 15814.616 ops/s
[info] # Warmup Iteration   3: 15993.362 ops/s
[info] Iteration   1: 15823.527 ops/s
[info]                  ·gc.alloc.rate:                   1288.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              128176.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1312.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130525.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.282 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 15977.431 ops/s
[info]                  ·gc.alloc.rate:                   1301.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              128200.134 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129923.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15839.365 ops/s
[info]                  ·gc.alloc.rate:                   1290.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131907.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.205 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 15904.976 ops/s
[info]                  ·gc.alloc.rate:                   1295.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              128208.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132093.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.060 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16022.310 ops/s
[info]                  ·gc.alloc.rate:                   1305.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              128187.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131783.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.269 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   15913.522 ±(99.9%) 331.192 ops/s [Average]
[info]   (min, avg, max) = (15823.527, 15913.522, 16022.310), stdev = 86.009
[info]   CI (99.9%): [15582.330, 16244.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1296.285 ±(99.9%) 27.439 MB/sec [Average]
[info]   (min, avg, max) = (1288.631, 1296.285, 1305.119), stdev = 7.126
[info]   CI (99.9%): [1268.845, 1323.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   128196.006 ±(99.9%) 53.524 B/op [Average]
[info]   (min, avg, max) = (128176.027, 128196.006, 128208.037), stdev = 13.900
[info]   CI (99.9%): [128142.482, 128249.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1327.131 ±(99.9%) 45.370 MB/sec [Average]
[info]   (min, avg, max) = (1312.251, 1327.131, 1341.729), stdev = 11.782
[info]   CI (99.9%): [1281.760, 1372.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   131246.787 ±(99.9%) 3709.970 B/op [Average]
[info]   (min, avg, max) = (129923.685, 131246.787, 132093.683), stdev = 963.467
[info]   CI (99.9%): [127536.817, 134956.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.224 ±(99.9%) 16.683 B/op [Average]
[info]   (min, avg, max) = (2.060, 8.224, 12.303), stdev = 4.332
[info]   CI (99.9%): [≈ 0, 24.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 41.44% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256393.366 ops/s
[info] # Warmup Iteration   2: 258768.533 ops/s
[info] # Warmup Iteration   3: 266009.929 ops/s
[info] Iteration   1: 266678.368 ops/s
[info]                  ·gc.alloc.rate:                   693.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3933.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 266526.414 ops/s
[info]                  ·gc.alloc.rate:                   693.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3933.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 267058.989 ops/s
[info]                  ·gc.alloc.rate:                   695.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3925.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 256035.149 ops/s
[info]                  ·gc.alloc.rate:               666.326 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4099.023 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 258403.262 ops/s
[info]                  ·gc.alloc.rate:               672.507 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4067.551 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   262940.436 ±(99.9%) 20381.403 ops/s [Average]
[info]   (min, avg, max) = (256035.149, 262940.436, 267058.989), stdev = 5292.986
[info]   CI (99.9%): [242559.033, 283321.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   684.339 ±(99.9%) 53.178 MB/sec [Average]
[info]   (min, avg, max) = (666.326, 684.339, 695.246), stdev = 13.810
[info]   CI (99.9%): [631.162, 737.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.708 ±(99.9%) 2.610 MB/sec [Average]
[info]   (min, avg, max) = (666.134, 666.708, 667.836), stdev = 0.678
[info]   CI (99.9%): [664.098, 669.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3991.832 ±(99.9%) 324.554 B/op [Average]
[info]   (min, avg, max) = (3925.619, 3991.832, 4099.023), stdev = 84.286
[info]   CI (99.9%): [3667.279, 4316.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.270 ±(99.9%) 1.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.270, 0.614), stdev = 0.280
[info]   CI (99.9%): [≈ 0, 1.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 41.78% complete, ETA 00:36:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6840.119 ops/s
[info] # Warmup Iteration   2: 11450.633 ops/s
[info] # Warmup Iteration   3: 11866.739 ops/s
[info] Iteration   1: 11824.609 ops/s
[info]                  ·gc.alloc.rate:                   1624.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1649.960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219609.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.082 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11739.515 ops/s
[info]                  ·gc.alloc.rate:                   1613.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178066.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.372 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11800.045 ops/s
[info]                  ·gc.alloc.rate:                   1621.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              216282.473 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222810.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.329 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 11856.796 ops/s
[info]                  ·gc.alloc.rate:                   1629.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222951.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11843.973 ops/s
[info]                  ·gc.alloc.rate:                   1627.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              216280.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224170.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.298 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   11812.988 ±(99.9%) 178.341 ops/s [Average]
[info]   (min, avg, max) = (11739.515, 11812.988, 11856.796), stdev = 46.315
[info]   CI (99.9%): [11634.647, 11991.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1623.490 ±(99.9%) 23.423 MB/sec [Average]
[info]   (min, avg, max) = (1613.952, 1623.490, 1629.336), stdev = 6.083
[info]   CI (99.9%): [1600.067, 1646.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   216280.524 ±(99.9%) 4.194 B/op [Average]
[info]   (min, avg, max) = (216280.036, 216280.524, 216282.473), stdev = 1.089
[info]   CI (99.9%): [216276.330, 216284.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1603.177 ±(99.9%) 593.045 MB/sec [Average]
[info]   (min, avg, max) = (1328.793, 1603.177, 1687.006), stdev = 154.012
[info]   CI (99.9%): [1010.131, 2196.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   213521.678 ±(99.9%) 76595.406 B/op [Average]
[info]   (min, avg, max) = (178066.815, 213521.678, 224170.076), stdev = 19891.584
[info]   CI (99.9%): [136926.272, 290117.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.874 ±(99.9%) 4.755 B/op [Average]
[info]   (min, avg, max) = (8.289, 8.874, 11.082), stdev = 1.235
[info]   CI (99.9%): [4.119, 13.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 42.12% complete, ETA 00:35:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31109.483 ops/s
[info] # Warmup Iteration   2: 40400.284 ops/s
[info] # Warmup Iteration   3: 40048.362 ops/s
[info] Iteration   1: 40792.609 ops/s
[info]                  ·gc.alloc.rate:                   1549.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64037.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.606 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 41323.888 ops/s
[info]                  ·gc.alloc.rate:                   1569.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50831.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41297.880 ops/s
[info]                  ·gc.alloc.rate:                   1568.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63873.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.380 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 41312.784 ops/s
[info]                  ·gc.alloc.rate:                   1569.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64165.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.965 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 41197.235 ops/s
[info]                  ·gc.alloc.rate:                   1564.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              59768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351.275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51622.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.386 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   41184.879 ±(99.9%) 866.354 ops/s [Average]
[info]   (min, avg, max) = (40792.609, 41184.879, 41323.888), stdev = 224.990
[info]   CI (99.9%): [40318.525, 42051.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1564.157 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (1549.102, 1564.157, 1569.532), stdev = 8.657
[info]   CI (99.9%): [1530.822, 1597.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   59768.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (59768.010, 59768.011, 59768.011), stdev = 0.001
[info]   CI (99.9%): [59768.009, 59768.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1541.352 ±(99.9%) 698.491 MB/sec [Average]
[info]   (min, avg, max) = (1334.714, 1541.352, 1685.015), stdev = 181.396
[info]   CI (99.9%): [842.861, 2239.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   58905.960 ±(99.9%) 27017.448 B/op [Average]
[info]   (min, avg, max) = (50831.668, 58905.960, 64165.644), stdev = 7016.345
[info]   CI (99.9%): [31888.512, 85923.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.702 ±(99.9%) 3.455 B/op [Average]
[info]   (min, avg, max) = (1.606, 2.702, 3.965), stdev = 0.897
[info]   CI (99.9%): [≈ 0, 6.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 983083.718 ops/s
[info] # Warmup Iteration   2: 1055076.790 ops/s
[info] # Warmup Iteration   3: 1091405.861 ops/s
[info] Iteration   1: 1090366.190 ops/s
[info]                  ·gc.alloc.rate:                   992.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1437.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1085546.614 ops/s
[info]                  ·gc.alloc.rate:                   987.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.879 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1446.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1090703.023 ops/s
[info]                  ·gc.alloc.rate:                   992.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1442.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1091551.842 ops/s
[info]                  ·gc.alloc.rate:                   993.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1445.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1094009.993 ops/s
[info]                  ·gc.alloc.rate:                   995.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1090435.532 ±(99.9%) 11868.606 ops/s [Average]
[info]   (min, avg, max) = (1085546.614, 1090435.532, 1094009.993), stdev = 3082.239
[info]   CI (99.9%): [1078566.926, 1102304.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   992.225 ±(99.9%) 10.856 MB/sec [Average]
[info]   (min, avg, max) = (987.694, 992.225, 995.435), stdev = 2.819
[info]   CI (99.9%): [981.369, 1003.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   933.355 ±(99.9%) 566.542 MB/sec [Average]
[info]   (min, avg, max) = (670.197, 933.355, 1002.581), stdev = 147.129
[info]   CI (99.9%): [366.813, 1499.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1347.351 ±(99.9%) 825.041 B/op [Average]
[info]   (min, avg, max) = (964.123, 1347.351, 1446.767), stdev = 214.261
[info]   CI (99.9%): [522.310, 2172.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.096 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.096, 0.151), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 42.81% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1184098.782 ops/s
[info] # Warmup Iteration   2: 1281919.512 ops/s
[info] # Warmup Iteration   3: 1284545.640 ops/s
[info] Iteration   1: 1260633.678 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1283415.857 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1283454.143 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1283136.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1278862.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1277900.428 ±(99.9%) 37911.974 ops/s [Average]
[info]   (min, avg, max) = (1260633.678, 1277900.428, 1283454.143), stdev = 9845.619
[info]   CI (99.9%): [1239988.454, 1315812.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 43.15% complete, ETA 00:35:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2594.542 ops/s
[info] # Warmup Iteration   2: 3220.749 ops/s
[info] # Warmup Iteration   3: 3474.639 ops/s
[info] Iteration   1: 3595.977 ops/s
[info]                  ·gc.alloc.rate:               485.524 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111941.391 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 3587.522 ops/s
[info]                  ·gc.alloc.rate:                   484.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288365.704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 895.597 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3587.415 ops/s
[info]                  ·gc.alloc.rate:               484.365 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.129 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144076.914 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 3589.701 ops/s
[info]                  ·gc.alloc.rate:                   484.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288059.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3590.600 ops/s
[info]                  ·gc.alloc.rate:               484.832 MB/sec
[info]                  ·gc.alloc.rate.norm:          212496.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      328.693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 144062.432 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   3590.243 ±(99.9%) 13.436 ops/s [Average]
[info]   (min, avg, max) = (3587.415, 3590.243, 3595.977), stdev = 3.489
[info]   CI (99.9%): [3576.807, 3603.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   484.777 ±(99.9%) 1.761 MB/sec [Average]
[info]   (min, avg, max) = (484.365, 484.777, 485.524), stdev = 0.457
[info]   CI (99.9%): [483.016, 486.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   212496.122 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (212496.120, 212496.122, 212496.129), stdev = 0.004
[info]   CI (99.9%): [212496.106, 212496.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   445.473 ±(99.9%) 753.154 MB/sec [Average]
[info]   (min, avg, max) = (255.770, 445.473, 657.430), stdev = 195.592
[info]   CI (99.9%): [≈ 0, 1198.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   195301.108 ±(99.9%) 330478.732 B/op [Average]
[info]   (min, avg, max) = (111941.391, 195301.108, 288365.704), stdev = 85824.277
[info]   CI (99.9%): [≈ 0, 525779.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.429 ±(99.9%) 3.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.429, 2.042), stdev = 0.903
[info]   CI (99.9%): [≈ 0, 3.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   188.244 ±(99.9%) 1524.528 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 188.244, 895.597), stdev = 395.915
[info]   CI (99.9%): [≈ 0, 1712.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 43.49% complete, ETA 00:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98170.109 ops/s
[info] # Warmup Iteration   2: 118257.128 ops/s
[info] # Warmup Iteration   3: 116684.044 ops/s
[info] Iteration   1: 117963.839 ops/s
[info]                  ·gc.alloc.rate:                   2191.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26823.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 118839.820 ops/s
[info]                  ·gc.alloc.rate:                   2207.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2358.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31230.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.930 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 119175.294 ops/s
[info]                  ·gc.alloc.rate:                   2214.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26801.409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.375 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 118029.711 ops/s
[info]                  ·gc.alloc.rate:                   2192.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31661.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 119376.214 ops/s
[info]                  ·gc.alloc.rate:                   2217.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              29240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26873.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.823 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   118676.976 ±(99.9%) 2503.874 ops/s [Average]
[info]   (min, avg, max) = (117963.839, 118676.976, 119376.214), stdev = 650.248
[info]   CI (99.9%): [116173.102, 121180.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2204.853 ±(99.9%) 46.658 MB/sec [Average]
[info]   (min, avg, max) = (2191.533, 2204.853, 2217.985), stdev = 12.117
[info]   CI (99.9%): [2158.195, 2251.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29240.004, 29240.004, 29240.004), stdev = 0.001
[info]   CI (99.9%): [29240.003, 29240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2162.173 ±(99.9%) 718.907 MB/sec [Average]
[info]   (min, avg, max) = (2010.429, 2162.173, 2374.431), stdev = 186.698
[info]   CI (99.9%): [1443.266, 2881.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28678.017 ±(99.9%) 9747.190 B/op [Average]
[info]   (min, avg, max) = (26801.409, 28678.017, 31661.309), stdev = 2531.314
[info]   CI (99.9%): [18930.827, 38425.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.048 ±(99.9%) 2.416 B/op [Average]
[info]   (min, avg, max) = (0.278, 1.048, 1.930), stdev = 0.627
[info]   CI (99.9%): [≈ 0, 3.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 43.84% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170281.544 ops/s
[info] # Warmup Iteration   2: 250187.718 ops/s
[info] # Warmup Iteration   3: 250573.264 ops/s
[info] Iteration   1: 253940.645 ops/s
[info]                  ·gc.alloc.rate:                   557.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3610.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.624 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 250569.681 ops/s
[info]                  ·gc.alloc.rate:                   550.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4102.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.262 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 254545.018 ops/s
[info]                  ·gc.alloc.rate:                   558.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4040.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.257 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 254598.515 ops/s
[info]                  ·gc.alloc.rate:               559.085 MB/sec
[info]                  ·gc.alloc.rate.norm:          3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2021.988 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 253596.786 ops/s
[info]                  ·gc.alloc.rate:                   556.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4068.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   253450.129 ±(99.9%) 6407.785 ops/s [Average]
[info]   (min, avg, max) = (250569.681, 253450.129, 254598.515), stdev = 1664.081
[info]   CI (99.9%): [247042.344, 259857.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   556.613 ±(99.9%) 13.750 MB/sec [Average]
[info]   (min, avg, max) = (550.438, 556.613, 559.085), stdev = 3.571
[info]   CI (99.9%): [542.863, 570.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.002, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   574.444 ±(99.9%) 545.607 MB/sec [Average]
[info]   (min, avg, max) = (327.102, 574.444, 655.496), stdev = 141.692
[info]   CI (99.9%): [28.837, 1120.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3568.821 ±(99.9%) 3417.907 B/op [Average]
[info]   (min, avg, max) = (2021.988, 3568.821, 4102.751), stdev = 887.620
[info]   CI (99.9%): [150.913, 6986.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.461 ±(99.9%) 3.742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.199), stdev = 0.972
[info]   CI (99.9%): [≈ 0, 4.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.854 ±(99.9%) 23.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.854, 13.624), stdev = 6.021
[info]   CI (99.9%): [≈ 0, 26.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 44.18% complete, ETA 00:34:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462547.438 ops/s
[info] # Warmup Iteration   2: 480729.148 ops/s
[info] # Warmup Iteration   3: 483736.565 ops/s
[info] Iteration   1: 485891.088 ops/s
[info]                  ·gc.alloc.rate:                   612.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2157.781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 486154.809 ops/s
[info]                  ·gc.alloc.rate:               612.860 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2152.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 487145.325 ops/s
[info]                  ·gc.alloc.rate:                   614.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2150.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 483270.710 ops/s
[info]                  ·gc.alloc.rate:               609.201 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2169.411 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 482455.380 ops/s
[info]                  ·gc.alloc.rate:                   608.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2175.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   484983.463 ±(99.9%) 7747.887 ops/s [Average]
[info]   (min, avg, max) = (482455.380, 484983.463, 487145.325), stdev = 2012.102
[info]   CI (99.9%): [477235.576, 492731.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   611.425 ±(99.9%) 9.441 MB/sec [Average]
[info]   (min, avg, max) = (608.464, 611.425, 614.086), stdev = 2.452
[info]   CI (99.9%): [601.984, 620.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.954 ±(99.9%) 3.283 MB/sec [Average]
[info]   (min, avg, max) = (664.864, 665.954, 667.140), stdev = 0.853
[info]   CI (99.9%): [662.671, 669.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2160.975 ±(99.9%) 42.267 B/op [Average]
[info]   (min, avg, max) = (2150.005, 2160.975, 2175.325), stdev = 10.977
[info]   CI (99.9%): [2118.708, 2203.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.356 ±(99.9%) 2.760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.636), stdev = 0.717
[info]   CI (99.9%): [≈ 0, 3.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.154 ±(99.9%) 8.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.154, 5.300), stdev = 2.321
[info]   CI (99.9%): [≈ 0, 10.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 44.52% complete, ETA 00:34:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42397.775 ops/s
[info] # Warmup Iteration   2: 68814.457 ops/s
[info] # Warmup Iteration   3: 69496.211 ops/s
[info] Iteration   1: 69581.590 ops/s
[info]                  ·gc.alloc.rate:                   3020.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              68319.993 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3019.982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68310.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.354 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 70163.809 ops/s
[info]                  ·gc.alloc.rate:                   3039.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3043.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68257.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.802 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 70564.895 ops/s
[info]                  ·gc.alloc.rate:                   3056.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3054.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68123.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.179 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 69933.362 ops/s
[info]                  ·gc.alloc.rate:                   3029.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3058.937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68841.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.811 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 69656.608 ops/s
[info]                  ·gc.alloc.rate:                   3017.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69220.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.352 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   69980.053 ±(99.9%) 1541.912 ops/s [Average]
[info]   (min, avg, max) = (69581.590, 69980.053, 70564.895), stdev = 400.430
[info]   CI (99.9%): [68438.141, 71521.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3032.611 ±(99.9%) 60.733 MB/sec [Average]
[info]   (min, avg, max) = (3017.737, 3032.611, 3056.353), stdev = 15.772
[info]   CI (99.9%): [2971.878, 3093.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68198.404 ±(99.9%) 261.731 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68198.404, 68319.993), stdev = 67.971
[info]   CI (99.9%): [67936.673, 68460.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3048.228 ±(99.9%) 67.563 MB/sec [Average]
[info]   (min, avg, max) = (3019.982, 3048.228, 3064.340), stdev = 17.546
[info]   CI (99.9%): [2980.665, 3115.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68550.660 ±(99.9%) 1785.685 B/op [Average]
[info]   (min, avg, max) = (68123.118, 68550.660, 69220.736), stdev = 463.737
[info]   CI (99.9%): [66764.974, 70336.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.187), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2.900 ±(99.9%) 2.889 B/op [Average]
[info]   (min, avg, max) = (2.352, 2.900, 4.179), stdev = 0.750
[info]   CI (99.9%): [0.011, 5.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 10.000), stdev = 1.304
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 44.86% complete, ETA 00:34:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146183.113 ops/s
[info] # Warmup Iteration   2: 177770.824 ops/s
[info] # Warmup Iteration   3: 181337.063 ops/s
[info] Iteration   1: 182479.401 ops/s
[info]                  ·gc.alloc.rate:                   1861.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14361.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.898 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 183839.350 ops/s
[info]                  ·gc.alloc.rate:                   1875.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17211.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.248 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 184778.117 ops/s
[info]                  ·gc.alloc.rate:                   1885.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14349.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.709 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 184144.758 ops/s
[info]                  ·gc.alloc.rate:                   1878.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17336.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.712 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 183378.774 ops/s
[info]                  ·gc.alloc.rate:                   1871.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              16056.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14544.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.251 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   183724.080 ±(99.9%) 3317.880 ops/s [Average]
[info]   (min, avg, max) = (182479.401, 183724.080, 184778.117), stdev = 861.643
[info]   CI (99.9%): [180406.200, 187041.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1874.351 ±(99.9%) 33.713 MB/sec [Average]
[info]   (min, avg, max) = (1861.548, 1874.351, 1885.026), stdev = 8.755
[info]   CI (99.9%): [1840.638, 1908.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   16056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16056.002, 16056.002, 16056.003), stdev = 0.001
[info]   CI (99.9%): [16056.002, 16056.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1816.706 ±(99.9%) 714.168 MB/sec [Average]
[info]   (min, avg, max) = (1665.031, 1816.706, 2028.436), stdev = 185.467
[info]   CI (99.9%): [1102.538, 2530.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   15560.621 ±(99.9%) 6033.602 B/op [Average]
[info]   (min, avg, max) = (14349.209, 15560.621, 17336.870), stdev = 1566.907
[info]   CI (99.9%): [9527.019, 21594.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.963 ±(99.9%) 1.047 B/op [Average]
[info]   (min, avg, max) = (0.709, 0.963, 1.251), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 2.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 45.21% complete, ETA 00:34:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348246.127 ops/s
[info] # Warmup Iteration   2: 471315.257 ops/s
[info] # Warmup Iteration   3: 477025.829 ops/s
[info] Iteration   1: 473786.375 ops/s
[info]                  ·gc.alloc.rate:                   486.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1935.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 477825.235 ops/s
[info]                  ·gc.alloc.rate:                   490.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1076.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 476355.174 ops/s
[info]                  ·gc.alloc.rate:                   489.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 477651.688 ops/s
[info]                  ·gc.alloc.rate:               490.440 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1077.691 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 474773.319 ops/s
[info]                  ·gc.alloc.rate:                   487.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2170.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   476078.358 ±(99.9%) 6823.327 ops/s [Average]
[info]   (min, avg, max) = (473786.375, 476078.358, 477825.235), stdev = 1771.996
[info]   CI (99.9%): [469255.031, 482901.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   488.838 ±(99.9%) 7.078 MB/sec [Average]
[info]   (min, avg, max) = (486.459, 488.838, 490.677), stdev = 1.838
[info]   CI (99.9%): [481.760, 495.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.073 ±(99.9%) 650.196 MB/sec [Average]
[info]   (min, avg, max) = (326.779, 509.073, 654.823), stdev = 168.854
[info]   CI (99.9%): [≈ 0, 1159.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1684.206 ±(99.9%) 2165.234 B/op [Average]
[info]   (min, avg, max) = (1076.218, 1684.206, 2170.713), stdev = 562.304
[info]   CI (99.9%): [≈ 0, 3849.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.458 ±(99.9%) 3.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.458, 2.125), stdev = 0.932
[info]   CI (99.9%): [≈ 0, 4.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.522 ±(99.9%) 11.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.522, 7.060), stdev = 3.098
[info]   CI (99.9%): [≈ 0, 13.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 45.55% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548756.515 ops/s
[info] # Warmup Iteration   2: 597086.536 ops/s
[info] # Warmup Iteration   3: 576411.680 ops/s
[info] Iteration   1: 576043.388 ops/s
[info]                  ·gc.alloc.rate:               450.877 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 698.897 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 572130.216 ops/s
[info]                  ·gc.alloc.rate:                   447.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1828.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.016 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 572538.830 ops/s
[info]                  ·gc.alloc.rate:               448.180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 911.902 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 573778.519 ops/s
[info]                  ·gc.alloc.rate:                   449.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     909.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 569679.502 ops/s
[info]                  ·gc.alloc.rate:                   445.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1833.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   572834.091 ±(99.9%) 8974.063 ops/s [Average]
[info]   (min, avg, max) = (569679.502, 572834.091, 576043.388), stdev = 2330.536
[info]   CI (99.9%): [563860.028, 581808.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   448.416 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (445.985, 448.416, 450.877), stdev = 1.787
[info]   CI (99.9%): [441.535, 455.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   449.543 ±(99.9%) 764.076 MB/sec [Average]
[info]   (min, avg, max) = (255.776, 449.543, 664.916), stdev = 198.428
[info]   CI (99.9%): [≈ 0, 1213.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1236.535 ±(99.9%) 2115.892 B/op [Average]
[info]   (min, avg, max) = (698.897, 1236.535, 1833.043), stdev = 549.490
[info]   CI (99.9%): [≈ 0, 3352.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 3.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.824), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.061 ±(99.9%) 8.519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.061, 5.016), stdev = 2.212
[info]   CI (99.9%): [≈ 0, 9.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 45.89% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 580949.906 ops/s
[info] # Warmup Iteration   2: 625255.088 ops/s
[info] # Warmup Iteration   3: 659564.161 ops/s
[info] Iteration   1: 659417.797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 658018.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 659760.594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 660251.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 660246.519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   659539.053 ±(99.9%) 3541.495 ops/s [Average]
[info]   (min, avg, max) = (658018.714, 659539.053, 660251.639), stdev = 919.715
[info]   CI (99.9%): [655997.558, 663080.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 46.23% complete, ETA 00:33:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19363.914 ops/s
[info] # Warmup Iteration   2: 27188.115 ops/s
[info] # Warmup Iteration   3: 27481.709 ops/s
[info] Iteration   1: 27451.739 ops/s
[info]                  ·gc.alloc.rate:                   1509.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              86528.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1650.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94637.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.580 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27082.573 ops/s
[info]                  ·gc.alloc.rate:                   1488.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              86517.385 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77229.266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.839 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27478.779 ops/s
[info]                  ·gc.alloc.rate:                   1510.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95685.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.577 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27518.610 ops/s
[info]                  ·gc.alloc.rate:                   1512.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76803.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27490.310 ops/s
[info]                  ·gc.alloc.rate:                   1511.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              86512.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96524.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27404.402 ±(99.9%) 698.895 ops/s [Average]
[info]   (min, avg, max) = (27082.573, 27404.402, 27518.610), stdev = 181.501
[info]   CI (99.9%): [26705.507, 28103.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1506.447 ±(99.9%) 38.424 MB/sec [Average]
[info]   (min, avg, max) = (1488.744, 1506.447, 1512.713), stdev = 9.979
[info]   CI (99.9%): [1468.023, 1544.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   86516.291 ±(99.9%) 26.791 B/op [Average]
[info]   (min, avg, max) = (86512.016, 86516.291, 86528.022), stdev = 6.958
[info]   CI (99.9%): [86489.500, 86543.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1535.831 ±(99.9%) 704.589 MB/sec [Average]
[info]   (min, avg, max) = (1328.919, 1535.831, 1686.018), stdev = 182.980
[info]   CI (99.9%): [831.242, 2240.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88176.103 ±(99.9%) 39317.303 B/op [Average]
[info]   (min, avg, max) = (76803.125, 88176.103, 96524.672), stdev = 10210.579
[info]   CI (99.9%): [48858.801, 127493.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.543 ±(99.9%) 3.851 B/op [Average]
[info]   (min, avg, max) = (3.577, 4.543, 5.959), stdev = 1.000
[info]   CI (99.9%): [0.693, 8.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 46.58% complete, ETA 00:33:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4278.640 ops/s
[info] # Warmup Iteration   2: 6995.771 ops/s
[info] # Warmup Iteration   3: 7023.184 ops/s
[info] Iteration   1: 7148.611 ops/s
[info]                  ·gc.alloc.rate:                   1130.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218734.420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.332 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 7143.964 ops/s
[info]                  ·gc.alloc.rate:                   1130.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     292632.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.931 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7164.313 ops/s
[info]                  ·gc.alloc.rate:                   1133.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     219562.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7160.983 ops/s
[info]                  ·gc.alloc.rate:               1132.364 MB/sec
[info]                  ·gc.alloc.rate.norm:          248864.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1002.929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 220417.644 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   5: 7152.551 ops/s
[info]                  ·gc.alloc.rate:                   1131.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              248864.060 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     295195.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.902 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   7154.084 ±(99.9%) 32.613 ops/s [Average]
[info]   (min, avg, max) = (7143.964, 7154.084, 7164.313), stdev = 8.470
[info]   CI (99.9%): [7121.471, 7186.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1131.444 ±(99.9%) 4.769 MB/sec [Average]
[info]   (min, avg, max) = (1130.174, 1131.444, 1133.085), stdev = 1.239
[info]   CI (99.9%): [1126.675, 1136.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   248864.062 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (248864.060, 248864.062, 248864.065), stdev = 0.002
[info]   CI (99.9%): [248864.053, 248864.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1133.369 ±(99.9%) 710.114 MB/sec [Average]
[info]   (min, avg, max) = (993.656, 1133.369, 1341.643), stdev = 184.414
[info]   CI (99.9%): [423.255, 1843.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   249308.742 ±(99.9%) 156850.515 B/op [Average]
[info]   (min, avg, max) = (218734.420, 249308.742, 295195.983), stdev = 40733.581
[info]   CI (99.9%): [92458.228, 406159.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13.747 ±(99.9%) 41.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.747, 22.931), stdev = 10.751
[info]   CI (99.9%): [≈ 0, 55.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 46.92% complete, ETA 00:32:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88977.005 ops/s
[info] # Warmup Iteration   2: 99850.402 ops/s
[info] # Warmup Iteration   3: 101900.704 ops/s
[info] Iteration   1: 100164.730 ops/s
[info]                  ·gc.alloc.rate:                   970.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15700.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.981 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 99854.714 ops/s
[info]                  ·gc.alloc.rate:                   967.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15760.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.969 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 100575.100 ops/s
[info]                  ·gc.alloc.rate:                   974.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15678.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 101092.066 ops/s
[info]                  ·gc.alloc.rate:                   979.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15639.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.648 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 101081.728 ops/s
[info]                  ·gc.alloc.rate:                   979.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15672.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.972 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   100553.668 ±(99.9%) 2116.968 ops/s [Average]
[info]   (min, avg, max) = (99854.714, 100553.668, 101092.066), stdev = 549.770
[info]   CI (99.9%): [98436.699, 102670.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   974.375 ±(99.9%) 20.913 MB/sec [Average]
[info]   (min, avg, max) = (967.599, 974.375, 979.703), stdev = 5.431
[info]   CI (99.9%): [953.462, 995.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1002.610 ±(99.9%) 12.492 MB/sec [Average]
[info]   (min, avg, max) = (999.161, 1002.610, 1006.949), stdev = 3.244
[info]   CI (99.9%): [990.118, 1015.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   15690.032 ±(99.9%) 172.514 B/op [Average]
[info]   (min, avg, max) = (15639.553, 15690.032, 15760.087), stdev = 44.801
[info]   CI (99.9%): [15517.518, 15862.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.175 ±(99.9%) 1.928 B/op [Average]
[info]   (min, avg, max) = (0.648, 1.175, 1.969), stdev = 0.501
[info]   CI (99.9%): [≈ 0, 3.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 47.26% complete, ETA 00:32:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3573.555 ops/s
[info] # Warmup Iteration   2: 6662.757 ops/s
[info] # Warmup Iteration   3: 6870.638 ops/s
[info] Iteration   1: 6800.124 ops/s
[info]                  ·gc.alloc.rate:                   1241.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227844.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.635 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6873.219 ops/s
[info]                  ·gc.alloc.rate:                   1254.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301837.368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6828.462 ops/s
[info]                  ·gc.alloc.rate:                   1246.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305668.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.595 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6845.067 ops/s
[info]                  ·gc.alloc.rate:                   1249.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306791.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.359 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6766.407 ops/s
[info]                  ·gc.alloc.rate:                   1234.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              287232.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233714.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.842 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6822.656 ±(99.9%) 158.348 ops/s [Average]
[info]   (min, avg, max) = (6766.407, 6822.656, 6873.219), stdev = 41.123
[info]   CI (99.9%): [6664.308, 6981.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1245.259 ±(99.9%) 28.830 MB/sec [Average]
[info]   (min, avg, max) = (1234.885, 1245.259, 1254.523), stdev = 7.487
[info]   CI (99.9%): [1216.428, 1274.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   287232.065 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (287232.063, 287232.065, 287232.068), stdev = 0.003
[info]   CI (99.9%): [287232.055, 287232.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1193.673 ±(99.9%) 699.943 MB/sec [Average]
[info]   (min, avg, max) = (984.797, 1193.673, 1334.294), stdev = 181.773
[info]   CI (99.9%): [493.730, 1893.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   275171.163 ±(99.9%) 156408.957 B/op [Average]
[info]   (min, avg, max) = (227844.065, 275171.163, 306791.956), stdev = 40618.909
[info]   CI (99.9%): [118762.206, 431580.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.593 ±(99.9%) 12.958 B/op [Average]
[info]   (min, avg, max) = (4.842, 9.593, 14.359), stdev = 3.365
[info]   CI (99.9%): [≈ 0, 22.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 47.60% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12665.060 ops/s
[info] # Warmup Iteration   2: 16934.895 ops/s
[info] # Warmup Iteration   3: 16926.876 ops/s
[info] Iteration   1: 17017.122 ops/s
[info]                  ·gc.alloc.rate:                   1003.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              92815.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          990.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91550.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.776 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 16891.172 ops/s
[info]                  ·gc.alloc.rate:                   996.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92419.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.698 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17003.253 ops/s
[info]                  ·gc.alloc.rate:                   1003.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              92872.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92118.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.854 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 16899.925 ops/s
[info]                  ·gc.alloc.rate:                   996.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              92853.902 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93052.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.754 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16778.284 ops/s
[info]                  ·gc.alloc.rate:                   989.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              92808.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94041.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.858 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   16917.951 ±(99.9%) 373.633 ops/s [Average]
[info]   (min, avg, max) = (16778.284, 16917.951, 17017.122), stdev = 97.031
[info]   CI (99.9%): [16544.318, 17291.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   998.057 ±(99.9%) 22.806 MB/sec [Average]
[info]   (min, avg, max) = (989.348, 998.057, 1003.853), stdev = 5.923
[info]   CI (99.9%): [975.251, 1020.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92844.391 ±(99.9%) 117.865 B/op [Average]
[info]   (min, avg, max) = (92808.026, 92844.391, 92872.027), stdev = 30.609
[info]   CI (99.9%): [92726.526, 92962.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   995.775 ±(99.9%) 19.559 MB/sec [Average]
[info]   (min, avg, max) = (990.163, 995.775, 1002.495), stdev = 5.079
[info]   CI (99.9%): [976.216, 1015.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   92636.363 ±(99.9%) 3674.140 B/op [Average]
[info]   (min, avg, max) = (91550.173, 92636.363, 94041.290), stdev = 954.163
[info]   CI (99.9%): [88962.223, 96310.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.588 ±(99.9%) 8.546 B/op [Average]
[info]   (min, avg, max) = (3.854, 6.588, 9.698), stdev = 2.219
[info]   CI (99.9%): [≈ 0, 15.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 47.95% complete, ETA 00:32:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 436959.656 ops/s
[info] # Warmup Iteration   2: 497954.429 ops/s
[info] # Warmup Iteration   3: 490831.300 ops/s
[info] Iteration   1: 493329.083 ops/s
[info]                  ·gc.alloc.rate:                   1118.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3179.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 495005.922 ops/s
[info]                  ·gc.alloc.rate:                   1122.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3174.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.331 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 491808.419 ops/s
[info]                  ·gc.alloc.rate:                   1115.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4271.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.266 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 501133.567 ops/s
[info]                  ·gc.alloc.rate:                   1136.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3154.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 501448.590 ops/s
[info]                  ·gc.alloc.rate:                   1137.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4219.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.196 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   496545.116 ±(99.9%) 17247.083 ops/s [Average]
[info]   (min, avg, max) = (491808.419, 496545.116, 501448.590), stdev = 4479.013
[info]   CI (99.9%): [479298.033, 513792.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1125.904 ±(99.9%) 39.142 MB/sec [Average]
[info]   (min, avg, max) = (1115.325, 1125.904, 1137.244), stdev = 10.165
[info]   CI (99.9%): [1086.762, 1165.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1135.999 ±(99.9%) 717.565 MB/sec [Average]
[info]   (min, avg, max) = (996.493, 1135.999, 1344.831), stdev = 186.349
[info]   CI (99.9%): [418.433, 1853.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3599.989 ±(99.9%) 2270.588 B/op [Average]
[info]   (min, avg, max) = (3154.713, 3599.989, 4271.784), stdev = 589.664
[info]   CI (99.9%): [1329.402, 5870.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.224 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.224, 0.331), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.29% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 392882.681 ops/s
[info] # Warmup Iteration   2: 417846.572 ops/s
[info] # Warmup Iteration   3: 418480.807 ops/s
[info] Iteration   1: 418029.965 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 418398.334 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 418547.973 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 418439.873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418019.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   418287.042 ±(99.9%) 946.599 ops/s [Average]
[info]   (min, avg, max) = (418019.067, 418287.042, 418547.973), stdev = 245.829
[info]   CI (99.9%): [417340.443, 419233.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 48.63% complete, ETA 00:31:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13166.729 ops/s
[info] # Warmup Iteration   2: 18164.884 ops/s
[info] # Warmup Iteration   3: 18041.835 ops/s
[info] Iteration   1: 18294.615 ops/s
[info]                  ·gc.alloc.rate:                   926.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          657.426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56534.963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18137.862 ops/s
[info]                  ·gc.alloc.rate:                   918.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85637.560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17989.591 ops/s
[info]                  ·gc.alloc.rate:               910.898 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      990.289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86633.405 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   4: 18012.898 ops/s
[info]                  ·gc.alloc.rate:                   911.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              79678.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86809.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18137.473 ops/s
[info]                  ·gc.alloc.rate:                   918.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              79672.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86678.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.226 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18114.488 ±(99.9%) 469.400 ops/s [Average]
[info]   (min, avg, max) = (17989.591, 18114.488, 18294.615), stdev = 121.902
[info]   CI (99.9%): [17645.088, 18583.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   917.279 ±(99.9%) 24.360 MB/sec [Average]
[info]   (min, avg, max) = (910.898, 917.279, 926.666), stdev = 6.326
[info]   CI (99.9%): [892.919, 941.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79682.823 ±(99.9%) 28.624 B/op [Average]
[info]   (min, avg, max) = (79672.026, 79682.823, 79688.033), stdev = 7.434
[info]   CI (99.9%): [79654.199, 79711.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   925.500 ±(99.9%) 577.318 MB/sec [Average]
[info]   (min, avg, max) = (657.426, 925.500, 999.320), stdev = 149.928
[info]   CI (99.9%): [348.182, 1502.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80458.596 ±(99.9%) 51528.875 B/op [Average]
[info]   (min, avg, max) = (56534.963, 80458.596, 86809.009), stdev = 13381.885
[info]   CI (99.9%): [28929.721, 131987.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.509 ±(99.9%) 16.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.509, 10.913), stdev = 4.181
[info]   CI (99.9%): [≈ 0, 22.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 48.97% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8352.219 ops/s
[info] # Warmup Iteration   2: 11680.420 ops/s
[info] # Warmup Iteration   3: 11883.287 ops/s
[info] Iteration   1: 11878.005 ops/s
[info]                  ·gc.alloc.rate:                   1224.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175689.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11829.127 ops/s
[info]                  ·gc.alloc.rate:                   1219.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132722.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11766.589 ops/s
[info]                  ·gc.alloc.rate:                   1213.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.144 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178564.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.923 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11716.599 ops/s
[info]                  ·gc.alloc.rate:                   1207.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180026.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.388 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11892.810 ops/s
[info]                  ·gc.alloc.rate:                   1226.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              162264.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1008.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133507.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   11816.626 ±(99.9%) 287.104 ops/s [Average]
[info]   (min, avg, max) = (11716.599, 11816.626, 11892.810), stdev = 74.560
[info]   CI (99.9%): [11529.522, 12103.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1218.382 ±(99.9%) 29.455 MB/sec [Average]
[info]   (min, avg, max) = (1207.991, 1218.382, 1226.189), stdev = 7.649
[info]   CI (99.9%): [1188.926, 1247.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   162264.058 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (162264.036, 162264.058, 162264.144), stdev = 0.048
[info]   CI (99.9%): [162263.873, 162264.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1201.605 ±(99.9%) 697.788 MB/sec [Average]
[info]   (min, avg, max) = (997.566, 1201.605, 1340.228), stdev = 181.213
[info]   CI (99.9%): [503.817, 1899.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   160102.138 ±(99.9%) 95059.787 B/op [Average]
[info]   (min, avg, max) = (132722.725, 160102.138, 180026.872), stdev = 24686.725
[info]   CI (99.9%): [65042.351, 255161.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10.537 ±(99.9%) 8.973 B/op [Average]
[info]   (min, avg, max) = (8.275, 10.537, 13.923), stdev = 2.330
[info]   CI (99.9%): [1.563, 19.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 49.32% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7158.081 ops/s
[info] # Warmup Iteration   2: 12006.748 ops/s
[info] # Warmup Iteration   3: 12258.860 ops/s
[info] Iteration   1: 12299.837 ops/s
[info]                  ·gc.alloc.rate:                   1141.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125627.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.327 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 12133.058 ops/s
[info]                  ·gc.alloc.rate:                   1125.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              146048.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170571.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.801 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 12184.493 ops/s
[info]                  ·gc.alloc.rate:                   1130.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              146067.369 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128028.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 12293.010 ops/s
[info]                  ·gc.alloc.rate:                   1141.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170143.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 12350.172 ops/s
[info]                  ·gc.alloc.rate:                   1146.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              146080.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127708.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.263 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   12252.114 ±(99.9%) 346.089 ops/s [Average]
[info]   (min, avg, max) = (12133.058, 12252.114, 12350.172), stdev = 89.878
[info]   CI (99.9%): [11906.025, 12598.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1137.121 ±(99.9%) 32.442 MB/sec [Average]
[info]   (min, avg, max) = (1125.920, 1137.121, 1146.404), stdev = 8.425
[info]   CI (99.9%): [1104.679, 1169.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   146064.702 ±(99.9%) 61.874 B/op [Average]
[info]   (min, avg, max) = (146048.035, 146064.702, 146080.035), stdev = 16.068
[info]   CI (99.9%): [146002.828, 146126.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1123.839 ±(99.9%) 697.290 MB/sec [Average]
[info]   (min, avg, max) = (981.799, 1123.839, 1328.969), stdev = 181.084
[info]   CI (99.9%): [426.549, 1821.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   144415.930 ±(99.9%) 91258.985 B/op [Average]
[info]   (min, avg, max) = (125627.979, 144415.930, 170571.819), stdev = 23699.669
[info]   CI (99.9%): [53156.945, 235674.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.624 ±(99.9%) 11.647 B/op [Average]
[info]   (min, avg, max) = (5.327, 9.624, 13.263), stdev = 3.025
[info]   CI (99.9%): [≈ 0, 21.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 49.66% complete, ETA 00:31:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159546.485 ops/s
[info] # Warmup Iteration   2: 168606.701 ops/s
[info] # Warmup Iteration   3: 169884.009 ops/s
[info] Iteration   1: 169784.607 ops/s
[info]                  ·gc.alloc.rate:                   982.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9262.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 169534.858 ops/s
[info]                  ·gc.alloc.rate:                   980.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9288.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.966 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 169837.516 ops/s
[info]                  ·gc.alloc.rate:                   982.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9293.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 168052.846 ops/s
[info]                  ·gc.alloc.rate:               972.068 MB/sec
[info]                  ·gc.alloc.rate.norm:          9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669.801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6273.089 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 169942.613 ops/s
[info]                  ·gc.alloc.rate:                   983.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1006.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9321.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.578 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   169430.488 ±(99.9%) 3021.059 ops/s [Average]
[info]   (min, avg, max) = (168052.846, 169430.488, 169942.613), stdev = 784.559
[info]   CI (99.9%): [166409.429, 172451.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   980.089 ±(99.9%) 17.575 MB/sec [Average]
[info]   (min, avg, max) = (972.068, 980.089, 983.039), stdev = 4.564
[info]   CI (99.9%): [962.514, 997.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.003, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   935.818 ±(99.9%) 572.723 MB/sec [Average]
[info]   (min, avg, max) = (669.801, 935.818, 1006.550), stdev = 148.734
[info]   CI (99.9%): [363.095, 1508.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8687.825 ±(99.9%) 5198.535 B/op [Average]
[info]   (min, avg, max) = (6273.089, 8687.825, 9321.745), stdev = 1350.043
[info]   CI (99.9%): [3489.290, 13886.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.540 ±(99.9%) 1.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.540, 0.966), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 50.00% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20636.348 ops/s
[info] # Warmup Iteration   2: 27124.753 ops/s
[info] # Warmup Iteration   3: 27295.583 ops/s
[info] Iteration   1: 27466.179 ops/s
[info]                  ·gc.alloc.rate:                   1206.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              69120.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75825.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 27314.456 ops/s
[info]                  ·gc.alloc.rate:                   1198.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              69072.474 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57364.991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.197 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 27608.351 ops/s
[info]                  ·gc.alloc.rate:                   1211.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75983.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.560 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27617.517 ops/s
[info]                  ·gc.alloc.rate:                   1211.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76302.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27660.367 ops/s
[info]                  ·gc.alloc.rate:                   1213.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              69056.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1007.958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57346.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27533.374 ±(99.9%) 548.866 ops/s [Average]
[info]   (min, avg, max) = (27314.456, 27533.374, 27660.367), stdev = 142.539
[info]   CI (99.9%): [26984.508, 28082.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1208.439 ±(99.9%) 23.201 MB/sec [Average]
[info]   (min, avg, max) = (1198.791, 1208.439, 1213.768), stdev = 6.025
[info]   CI (99.9%): [1185.238, 1231.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   69072.109 ±(99.9%) 106.724 B/op [Average]
[info]   (min, avg, max) = (69056.016, 69072.109, 69120.022), stdev = 27.716
[info]   CI (99.9%): [68965.384, 69178.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1199.784 ±(99.9%) 696.540 MB/sec [Average]
[info]   (min, avg, max) = (995.601, 1199.784, 1338.955), stdev = 180.889
[info]   CI (99.9%): [503.244, 1896.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   68564.604 ±(99.9%) 39406.003 B/op [Average]
[info]   (min, avg, max) = (57346.665, 68564.604, 76302.866), stdev = 10233.614
[info]   CI (99.9%): [29158.601, 107970.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3.812 ±(99.9%) 8.284 B/op [Average]
[info]   (min, avg, max) = (1.193, 3.812, 7.197), stdev = 2.151
[info]   CI (99.9%): [≈ 0, 12.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 50.34% complete, ETA 00:30:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 601458.633 ops/s
[info] # Warmup Iteration   2: 653184.045 ops/s
[info] # Warmup Iteration   3: 652071.611 ops/s
[info] Iteration   1: 655930.805 ops/s
[info]                  ·gc.alloc.rate:                   900.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2387.962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 653924.125 ops/s
[info]                  ·gc.alloc.rate:                   897.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1598.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 651230.866 ops/s
[info]                  ·gc.alloc.rate:                   893.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2411.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 655112.855 ops/s
[info]                  ·gc.alloc.rate:                   899.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2403.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.150 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 652990.527 ops/s
[info]                  ·gc.alloc.rate:                   896.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1611.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   653837.836 ±(99.9%) 7081.382 ops/s [Average]
[info]   (min, avg, max) = (651230.866, 653837.836, 655930.805), stdev = 1839.012
[info]   CI (99.9%): [646756.454, 660919.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   897.369 ±(99.9%) 9.767 MB/sec [Average]
[info]   (min, avg, max) = (893.759, 897.369, 900.252), stdev = 2.536
[info]   CI (99.9%): [887.602, 907.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   865.335 ±(99.9%) 698.946 MB/sec [Average]
[info]   (min, avg, max) = (664.215, 865.335, 1000.525), stdev = 181.514
[info]   CI (99.9%): [166.389, 1564.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2082.735 ±(99.9%) 1678.948 B/op [Average]
[info]   (min, avg, max) = (1598.461, 2082.735, 2411.582), stdev = 436.018
[info]   CI (99.9%): [403.787, 3761.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.150 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.150, 0.201), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 50.68% complete, ETA 00:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 706601.323 ops/s
[info] # Warmup Iteration   2: 761592.359 ops/s
[info] # Warmup Iteration   3: 766691.076 ops/s
[info] Iteration   1: 765169.771 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 768709.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 723874.643 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 764839.490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 766417.456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   757802.241 ±(99.9%) 73265.598 ops/s [Average]
[info]   (min, avg, max) = (723874.643, 757802.241, 768709.846), stdev = 19026.843
[info]   CI (99.9%): [684536.644, 831067.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 51.03% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5114.030 ops/s
[info] # Warmup Iteration   2: 16968.743 ops/s
[info] # Warmup Iteration   3: 17679.306 ops/s
[info] Iteration   1: 17896.634 ops/s
[info]                  ·gc.alloc.rate:                   865.778 MB/sec
[info]                  ·gc.alloc.rate.norm:              76136.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58228.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.492 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 17613.631 ops/s
[info]                  ·gc.alloc.rate:                   852.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              76136.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88745.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.580 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17576.009 ops/s
[info]                  ·gc.alloc.rate:                   850.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              76136.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89086.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.864 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 17420.910 ops/s
[info]                  ·gc.alloc.rate:               842.735 MB/sec
[info]                  ·gc.alloc.rate.norm:          76136.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60059.622 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 17803.780 ops/s
[info]                  ·gc.alloc.rate:                   861.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              76136.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88357.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.361 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   17662.193 ±(99.9%) 728.100 ops/s [Average]
[info]   (min, avg, max) = (17420.910, 17662.193, 17896.634), stdev = 189.085
[info]   CI (99.9%): [16934.093, 18390.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   854.520 ±(99.9%) 35.300 MB/sec [Average]
[info]   (min, avg, max) = (842.735, 854.520, 865.778), stdev = 9.167
[info]   CI (99.9%): [819.220, 889.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   76136.034 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (76136.024, 76136.034, 76136.058), stdev = 0.014
[info]   CI (99.9%): [76135.979, 76136.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   863.018 ±(99.9%) 701.526 MB/sec [Average]
[info]   (min, avg, max) = (662.139, 863.018, 999.727), stdev = 182.184
[info]   CI (99.9%): [161.492, 1564.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76895.464 ±(99.9%) 62456.914 B/op [Average]
[info]   (min, avg, max) = (58228.187, 76895.464, 89086.311), stdev = 16219.862
[info]   CI (99.9%): [14438.551, 139352.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4.059 ±(99.9%) 11.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.059, 7.361), stdev = 3.023
[info]   CI (99.9%): [≈ 0, 15.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 51.37% complete, ETA 00:30:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4515.247 ops/s
[info] # Warmup Iteration   2: 22313.560 ops/s
[info] # Warmup Iteration   3: 22759.958 ops/s
[info] Iteration   1: 22751.619 ops/s
[info]                  ·gc.alloc.rate:                   908.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              62815.751 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67851.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.200 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 23171.279 ops/s
[info]                  ·gc.alloc.rate:                   925.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              62832.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66692.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.484 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 22807.716 ops/s
[info]                  ·gc.alloc.rate:                   910.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              62821.729 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45299.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23224.547 ops/s
[info]                  ·gc.alloc.rate:                   926.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66918.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.232 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 23279.637 ops/s
[info]                  ·gc.alloc.rate:                   929.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              62800.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67145.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.629 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   23046.959 ±(99.9%) 954.143 ops/s [Average]
[info]   (min, avg, max) = (22751.619, 23046.959, 23279.637), stdev = 247.788
[info]   CI (99.9%): [22092.817, 24001.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   920.044 ±(99.9%) 37.756 MB/sec [Average]
[info]   (min, avg, max) = (908.480, 920.044, 929.305), stdev = 9.805
[info]   CI (99.9%): [882.288, 957.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   62813.908 ±(99.9%) 53.713 B/op [Average]
[info]   (min, avg, max) = (62800.019, 62813.908, 62832.019), stdev = 13.949
[info]   CI (99.9%): [62760.194, 62867.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   920.211 ±(99.9%) 568.017 MB/sec [Average]
[info]   (min, avg, max) = (656.480, 920.211, 993.616), stdev = 147.512
[info]   CI (99.9%): [352.194, 1488.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62781.580 ±(99.9%) 37668.711 B/op [Average]
[info]   (min, avg, max) = (45299.476, 62781.580, 67851.475), stdev = 9782.445
[info]   CI (99.9%): [25112.869, 100450.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5.396 ±(99.9%) 10.523 B/op [Average]
[info]   (min, avg, max) = (1.436, 5.396, 8.484), stdev = 2.733
[info]   CI (99.9%): [≈ 0, 15.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 51.71% complete, ETA 00:30:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167730.260 ops/s
[info] # Warmup Iteration   2: 176899.550 ops/s
[info] # Warmup Iteration   3: 177584.773 ops/s
[info] Iteration   1: 177394.641 ops/s
[info]                  ·gc.alloc.rate:               461.705 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2269.479 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 177106.333 ops/s
[info]                  ·gc.alloc.rate:                   460.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5925.663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.060 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 177324.617 ops/s
[info]                  ·gc.alloc.rate:                   461.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2956.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 177214.487 ops/s
[info]                  ·gc.alloc.rate:                   461.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5916.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 177502.275 ops/s
[info]                  ·gc.alloc.rate:               461.948 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      333.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2953.269 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   177308.470 ±(99.9%) 593.233 ops/s [Average]
[info]   (min, avg, max) = (177106.333, 177308.470, 177502.275), stdev = 154.061
[info]   CI (99.9%): [176715.238, 177901.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   461.468 ±(99.9%) 1.473 MB/sec [Average]
[info]   (min, avg, max) = (460.994, 461.468, 461.948), stdev = 0.383
[info]   CI (99.9%): [459.995, 462.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   450.999 ±(99.9%) 767.258 MB/sec [Average]
[info]   (min, avg, max) = (255.817, 450.999, 666.917), stdev = 199.254
[info]   CI (99.9%): [≈ 0, 1218.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4004.113 ±(99.9%) 6823.123 B/op [Average]
[info]   (min, avg, max) = (2269.479, 4004.113, 5925.663), stdev = 1771.943
[info]   CI (99.9%): [≈ 0, 10827.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.337 ±(99.9%) 2.682 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.337, 1.582), stdev = 0.697
[info]   CI (99.9%): [≈ 0, 3.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.997 ±(99.9%) 23.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.997, 14.060), stdev = 6.189
[info]   CI (99.9%): [≈ 0, 26.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 52.05% complete, ETA 00:29:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2885.697 ops/s
[info] # Warmup Iteration   2: 15450.275 ops/s
[info] # Warmup Iteration   3: 15741.280 ops/s
[info] Iteration   1: 15778.467 ops/s
[info]                  ·gc.alloc.rate:                   1184.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130748.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.376 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15979.139 ops/s
[info]                  ·gc.alloc.rate:                   1199.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.366 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97239.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.303 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15830.586 ops/s
[info]                  ·gc.alloc.rate:                   1188.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131527.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.139 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15980.890 ops/s
[info]                  ·gc.alloc.rate:                   1199.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98199.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.050 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15951.646 ops/s
[info]                  ·gc.alloc.rate:                   1197.657 MB/sec
[info]                  ·gc.alloc.rate.norm:              118152.934 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131803.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15904.146 ±(99.9%) 360.073 ops/s [Average]
[info]   (min, avg, max) = (15778.467, 15904.146, 15980.890), stdev = 93.510
[info]   CI (99.9%): [15544.073, 16264.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1194.142 ±(99.9%) 26.937 MB/sec [Average]
[info]   (min, avg, max) = (1184.810, 1194.142, 1199.909), stdev = 6.996
[info]   CI (99.9%): [1167.204, 1221.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   118152.277 ±(99.9%) 1.522 B/op [Average]
[info]   (min, avg, max) = (118152.027, 118152.277, 118152.934), stdev = 0.395
[info]   CI (99.9%): [118150.754, 118153.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1190.989 ±(99.9%) 699.190 MB/sec [Average]
[info]   (min, avg, max) = (987.529, 1190.989, 1336.023), stdev = 181.577
[info]   CI (99.9%): [491.799, 1890.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117903.604 ±(99.9%) 70977.139 B/op [Average]
[info]   (min, avg, max) = (97239.824, 117903.604, 131803.144), stdev = 18432.538
[info]   CI (99.9%): [46926.465, 188880.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7.006 ±(99.9%) 16.439 B/op [Average]
[info]   (min, avg, max) = (2.050, 7.006, 12.303), stdev = 4.269
[info]   CI (99.9%): [≈ 0, 23.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 52.40% complete, ETA 00:29:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63092.388 ops/s
[info] # Warmup Iteration   2: 79041.561 ops/s
[info] # Warmup Iteration   3: 81293.222 ops/s
[info] Iteration   1: 80817.658 ops/s
[info]                  ·gc.alloc.rate:                   1596.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32321.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80700.998 ops/s
[info]                  ·gc.alloc.rate:                   1594.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32549.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.812 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 81193.781 ops/s
[info]                  ·gc.alloc.rate:                   1604.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32539.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 81634.459 ops/s
[info]                  ·gc.alloc.rate:                   1612.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32505.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 80948.650 ops/s
[info]                  ·gc.alloc.rate:                   1599.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              31096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26305.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   81059.109 ±(99.9%) 1425.138 ops/s [Average]
[info]   (min, avg, max) = (80700.998, 81059.109, 81634.459), stdev = 370.104
[info]   CI (99.9%): [79633.971, 82484.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1601.577 ±(99.9%) 28.194 MB/sec [Average]
[info]   (min, avg, max) = (1594.464, 1601.577, 1612.964), stdev = 7.322
[info]   CI (99.9%): [1573.383, 1629.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   31096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31096.005, 31096.005, 31096.006), stdev = 0.001
[info]   CI (99.9%): [31096.005, 31096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1609.305 ±(99.9%) 552.866 MB/sec [Average]
[info]   (min, avg, max) = (1353.082, 1609.305, 1686.077), stdev = 143.578
[info]   CI (99.9%): [1056.439, 2162.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31244.352 ±(99.9%) 10637.439 B/op [Average]
[info]   (min, avg, max) = (26305.387, 31244.352, 32549.585), stdev = 2762.509
[info]   CI (99.9%): [20606.913, 41881.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.374 ±(99.9%) 1.780 B/op [Average]
[info]   (min, avg, max) = (0.812, 1.374, 2.024), stdev = 0.462
[info]   CI (99.9%): [≈ 0, 3.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 52.74% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87028.856 ops/s
[info] # Warmup Iteration   2: 132423.201 ops/s
[info] # Warmup Iteration   3: 132449.778 ops/s
[info] Iteration   1: 135396.299 ops/s
[info]                  ·gc.alloc.rate:                   1430.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1643.320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19103.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 134328.510 ops/s
[info]                  ·gc.alloc.rate:                   1418.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15504.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.220 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 134510.277 ops/s
[info]                  ·gc.alloc.rate:                   1420.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15576.924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.244 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 135369.494 ops/s
[info]                  ·gc.alloc.rate:                   1429.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19462.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.726 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 135392.441 ops/s
[info]                  ·gc.alloc.rate:                   1430.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              16624.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15641.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   134999.404 ±(99.9%) 2054.162 ops/s [Average]
[info]   (min, avg, max) = (134328.510, 134999.404, 135396.299), stdev = 533.459
[info]   CI (99.9%): [132945.243, 137053.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1426.025 ±(99.9%) 22.049 MB/sec [Average]
[info]   (min, avg, max) = (1418.849, 1426.025, 1430.645), stdev = 5.726
[info]   CI (99.9%): [1403.976, 1448.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16624.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16624.003, 16624.003, 16624.003), stdev = 0.001
[info]   CI (99.9%): [16624.003, 16624.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1463.601 ±(99.9%) 687.622 MB/sec [Average]
[info]   (min, avg, max) = (1323.299, 1463.601, 1673.981), stdev = 178.573
[info]   CI (99.9%): [775.979, 2151.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17057.871 ±(99.9%) 7839.208 B/op [Average]
[info]   (min, avg, max) = (15504.483, 17057.871, 19462.966), stdev = 2035.818
[info]   CI (99.9%): [9218.663, 24897.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.777 ±(99.9%) 1.391 B/op [Average]
[info]   (min, avg, max) = (0.244, 0.777, 1.220), stdev = 0.361
[info]   CI (99.9%): [≈ 0, 2.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 53.08% complete, ETA 00:29:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412177.111 ops/s
[info] # Warmup Iteration   2: 448129.789 ops/s
[info] # Warmup Iteration   3: 407547.750 ops/s
[info] Iteration   1: 428322.010 ops/s
[info]                  ·gc.alloc.rate:                   474.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2161.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 445943.931 ops/s
[info]                  ·gc.alloc.rate:                   494.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1173.146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 444151.854 ops/s
[info]                  ·gc.alloc.rate:                   492.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2351.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.369 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 443658.584 ops/s
[info]                  ·gc.alloc.rate:               491.732 MB/sec
[info]                  ·gc.alloc.rate.norm:          1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1176.877 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 445836.087 ops/s
[info]                  ·gc.alloc.rate:                   494.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2343.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   441582.493 ±(99.9%) 28807.049 ops/s [Average]
[info]   (min, avg, max) = (428322.010, 441582.493, 445943.931), stdev = 7481.099
[info]   CI (99.9%): [412775.445, 470389.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   489.392 ±(99.9%) 31.852 MB/sec [Average]
[info]   (min, avg, max) = (474.727, 489.392, 494.229), stdev = 8.272
[info]   CI (99.9%): [457.540, 521.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.017 ±(99.9%) 657.120 MB/sec [Average]
[info]   (min, avg, max) = (331.828, 516.017, 663.883), stdev = 170.652
[info]   CI (99.9%): [≈ 0, 1173.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1841.210 ±(99.9%) 2359.978 B/op [Average]
[info]   (min, avg, max) = (1173.146, 1841.210, 2351.157), stdev = 612.879
[info]   CI (99.9%): [≈ 0, 4201.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.381 ±(99.9%) 2.929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.381, 1.741), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.397 ±(99.9%) 10.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.397, 6.394), stdev = 2.797
[info]   CI (99.9%): [≈ 0, 12.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 53.42% complete, ETA 00:28:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472407.062 ops/s
[info] # Warmup Iteration   2: 510917.535 ops/s
[info] # Warmup Iteration   3: 530633.030 ops/s
[info] Iteration   1: 528672.273 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 528805.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 531362.048 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531326.652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 531317.194 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   530296.645 ±(99.9%) 5479.876 ops/s [Average]
[info]   (min, avg, max) = (528672.273, 530296.645, 531362.048), stdev = 1423.106
[info]   CI (99.9%): [524816.769, 535776.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 53.77% complete, ETA 00:28:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91632.420 ops/s
[info] # Warmup Iteration   2: 120189.108 ops/s
[info] # Warmup Iteration   3: 121644.951 ops/s
[info] Iteration   1: 120862.881 ops/s
[info]                  ·gc.alloc.rate:                   1492.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17210.675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.355 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 118267.148 ops/s
[info]                  ·gc.alloc.rate:                   1460.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17686.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.385 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 121544.097 ops/s
[info]                  ·gc.alloc.rate:                   1501.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21634.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.078 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 121782.784 ops/s
[info]                  ·gc.alloc.rate:                   1504.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17356.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.807 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 121609.303 ops/s
[info]                  ·gc.alloc.rate:                   1501.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              19432.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21820.726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.347 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   120813.243 ±(99.9%) 5643.831 ops/s [Average]
[info]   (min, avg, max) = (118267.148, 120813.243, 121782.784), stdev = 1465.685
[info]   CI (99.9%): [115169.411, 126457.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1491.866 ±(99.9%) 70.229 MB/sec [Average]
[info]   (min, avg, max) = (1460.253, 1491.866, 1504.256), stdev = 18.238
[info]   CI (99.9%): [1421.637, 1562.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19432.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19432.004, 19432.004, 19432.004), stdev = 0.001
[info]   CI (99.9%): [19432.003, 19432.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1470.310 ±(99.9%) 733.194 MB/sec [Average]
[info]   (min, avg, max) = (1321.666, 1470.310, 1686.023), stdev = 190.408
[info]   CI (99.9%): [737.116, 2203.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19141.601 ±(99.9%) 9117.653 B/op [Average]
[info]   (min, avg, max) = (17210.675, 19141.601, 21820.726), stdev = 2367.826
[info]   CI (99.9%): [10023.948, 28259.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1.195 ±(99.9%) 0.961 B/op [Average]
[info]   (min, avg, max) = (0.807, 1.195, 1.385), stdev = 0.250
[info]   CI (99.9%): [0.234, 2.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 54.11% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123221.655 ops/s
[info] # Warmup Iteration   2: 146478.589 ops/s
[info] # Warmup Iteration   3: 148177.660 ops/s
[info] Iteration   1: 146546.436 ops/s
[info]                  ·gc.alloc.rate:                   2525.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2353.286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25269.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.671 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 149371.792 ops/s
[info]                  ·gc.alloc.rate:                   2574.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28483.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.755 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 149998.184 ops/s
[info]                  ·gc.alloc.rate:                   2585.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2374.390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24909.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.437 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 149899.006 ops/s
[info]                  ·gc.alloc.rate:                   2582.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28535.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.656 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 148396.393 ops/s
[info]                  ·gc.alloc.rate:                   2557.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              27120.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28875.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.987 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   148842.362 ±(99.9%) 5514.252 ops/s [Average]
[info]   (min, avg, max) = (146546.436, 148842.362, 149998.184), stdev = 1432.034
[info]   CI (99.9%): [143328.110, 154356.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2565.140 ±(99.9%) 95.081 MB/sec [Average]
[info]   (min, avg, max) = (2525.639, 2565.140, 2585.078), stdev = 24.692
[info]   CI (99.9%): [2470.059, 2660.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27120.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27120.003, 27120.003, 27120.003), stdev = 0.001
[info]   CI (99.9%): [27120.002, 27120.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2574.492 ±(99.9%) 741.477 MB/sec [Average]
[info]   (min, avg, max) = (2353.286, 2574.492, 2722.561), stdev = 192.559
[info]   CI (99.9%): [1833.015, 3315.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   27214.707 ±(99.9%) 7508.899 B/op [Average]
[info]   (min, avg, max) = (24909.682, 27214.707, 28875.706), stdev = 1950.037
[info]   CI (99.9%): [19705.808, 34723.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.187), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1.101 ±(99.9%) 2.748 B/op [Average]
[info]   (min, avg, max) = (0.437, 1.101, 1.987), stdev = 0.714
[info]   CI (99.9%): [≈ 0, 3.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 54.45% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235955.918 ops/s
[info] # Warmup Iteration   2: 355251.690 ops/s
[info] # Warmup Iteration   3: 357759.502 ops/s
[info] Iteration   1: 358647.376 ops/s
[info]                  ·gc.alloc.rate:                   366.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1122.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 357005.608 ops/s
[info]                  ·gc.alloc.rate:               364.752 MB/sec
[info]                  ·gc.alloc.rate.norm:          1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1127.700 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 358014.089 ops/s
[info]                  ·gc.alloc.rate:                   365.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1436.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 358761.699 ops/s
[info]                  ·gc.alloc.rate:                   366.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          326.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1433.359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 358574.193 ops/s
[info]                  ·gc.alloc.rate:                   366.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2865.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   358200.593 ±(99.9%) 2801.197 ops/s [Average]
[info]   (min, avg, max) = (357005.608, 358200.593, 358761.699), stdev = 727.462
[info]   CI (99.9%): [355399.396, 361001.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   366.004 ±(99.9%) 2.971 MB/sec [Average]
[info]   (min, avg, max) = (364.752, 366.004, 366.631), stdev = 0.772
[info]   CI (99.9%): [363.033, 368.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   363.627 ±(99.9%) 637.694 MB/sec [Average]
[info]   (min, avg, max) = (255.799, 363.627, 652.993), stdev = 165.607
[info]   CI (99.9%): [≈ 0, 1001.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1597.073 ±(99.9%) 2794.550 B/op [Average]
[info]   (min, avg, max) = (1122.553, 1597.073, 2865.401), stdev = 725.736
[info]   CI (99.9%): [≈ 0, 4391.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.451 ±(99.9%) 3.771 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 2.203), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 4.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.982 ±(99.9%) 16.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.982, 9.683), stdev = 4.305
[info]   CI (99.9%): [≈ 0, 18.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 54.79% complete, ETA 00:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 859183.468 ops/s
[info] # Warmup Iteration   2: 896253.227 ops/s
[info] # Warmup Iteration   3: 880935.553 ops/s
[info] Iteration   1: 894500.850 ops/s
[info]                  ·gc.alloc.rate:                   309.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 898331.167 ops/s
[info]                  ·gc.alloc.rate:                   310.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     896.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.073 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 902927.044 ops/s
[info]                  ·gc.alloc.rate:                   312.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     580.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.743 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 904045.934 ops/s
[info]                  ·gc.alloc.rate:                   312.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          333.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     579.866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.072 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 905626.558 ops/s
[info]                  ·gc.alloc.rate:      313.067 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   901086.310 ±(99.9%) 17616.499 ops/s [Average]
[info]   (min, avg, max) = (894500.850, 901086.310, 905626.558), stdev = 4574.949
[info]   CI (99.9%): [883469.811, 918702.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   311.507 ±(99.9%) 6.264 MB/sec [Average]
[info]   (min, avg, max) = (309.166, 311.507, 313.067), stdev = 1.627
[info]   CI (99.9%): [305.243, 317.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   286.755 ±(99.9%) 715.366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 286.755, 511.595), stdev = 185.778
[info]   CI (99.9%): [≈ 0, 1002.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   501.366 ±(99.9%) 1251.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 501.366, 896.320), stdev = 324.970
[info]   CI (99.9%): [≈ 0, 1752.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.334 ±(99.9%) 2.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.334, 1.574), stdev = 0.694
[info]   CI (99.9%): [≈ 0, 3.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.581 ±(99.9%) 4.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.581, 2.743), stdev = 1.209
[info]   CI (99.9%): [≈ 0, 5.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 55.14% complete, ETA 00:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46516.192 ops/s
[info] # Warmup Iteration   2: 74771.299 ops/s
[info] # Warmup Iteration   3: 75407.710 ops/s
[info] Iteration   1: 76012.136 ops/s
[info]                  ·gc.alloc.rate:                   3260.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3026.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62668.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.586 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 76680.537 ops/s
[info]                  ·gc.alloc.rate:                   3289.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3385.317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69485.764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.846 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 76250.370 ops/s
[info]                  ·gc.alloc.rate:                   3271.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70093.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.008 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 76248.770 ops/s
[info]                  ·gc.alloc.rate:                   3271.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3062.663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63209.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.578 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 76746.195 ops/s
[info]                  ·gc.alloc.rate:                   3292.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69806.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.842 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76387.602 ±(99.9%) 1207.719 ops/s [Average]
[info]   (min, avg, max) = (76012.136, 76387.602, 76746.195), stdev = 313.641
[info]   CI (99.9%): [75179.883, 77595.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3276.816 ±(99.9%) 51.474 MB/sec [Average]
[info]   (min, avg, max) = (3260.392, 3276.816, 3292.013), stdev = 13.368
[info]   CI (99.9%): [3225.342, 3328.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.006, 67512.006, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3254.977 ±(99.9%) 741.655 MB/sec [Average]
[info]   (min, avg, max) = (3026.495, 3254.977, 3403.907), stdev = 192.605
[info]   CI (99.9%): [2513.322, 3996.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67052.954 ±(99.9%) 14502.823 B/op [Average]
[info]   (min, avg, max) = (62668.768, 67052.954, 70093.890), stdev = 3766.337
[info]   CI (99.9%): [52550.131, 81555.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.154 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.154, 0.187), stdev = 0.032
[info]   CI (99.9%): [0.033, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.172 ±(99.9%) 2.455 B/op [Average]
[info]   (min, avg, max) = (2.578, 3.172, 3.846), stdev = 0.637
[info]   CI (99.9%): [0.717, 5.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 55.48% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186700.780 ops/s
[info] # Warmup Iteration   2: 233500.256 ops/s
[info] # Warmup Iteration   3: 234195.499 ops/s
[info] Iteration   1: 235698.842 ops/s
[info]                  ·gc.alloc.rate:                   1806.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13335.727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.556 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 236349.666 ops/s
[info]                  ·gc.alloc.rate:                   1810.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11152.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 234156.822 ops/s
[info]                  ·gc.alloc.rate:                   1794.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11309.867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 236147.078 ops/s
[info]                  ·gc.alloc.rate:                   1809.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13518.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 236404.215 ops/s
[info]                  ·gc.alloc.rate:                   1810.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              12056.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1694.635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11282.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.970 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   235751.325 ±(99.9%) 3594.784 ops/s [Average]
[info]   (min, avg, max) = (234156.822, 235751.325, 236404.215), stdev = 933.554
[info]   CI (99.9%): [232156.541, 239346.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1806.239 ±(99.9%) 26.559 MB/sec [Average]
[info]   (min, avg, max) = (1794.342, 1806.239, 1810.861), stdev = 6.897
[info]   CI (99.9%): [1779.680, 1832.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12056.002, 12056.002, 12056.002), stdev = 0.001
[info]   CI (99.9%): [12056.002, 12056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1815.882 ±(99.9%) 695.975 MB/sec [Average]
[info]   (min, avg, max) = (1674.756, 1815.882, 2028.786), stdev = 180.743
[info]   CI (99.9%): [1119.906, 2511.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   12119.719 ±(99.9%) 4608.484 B/op [Average]
[info]   (min, avg, max) = (11152.091, 12119.719, 13518.699), stdev = 1196.809
[info]   CI (99.9%): [7511.235, 16728.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.583 ±(99.9%) 1.024 B/op [Average]
[info]   (min, avg, max) = (0.277, 0.583, 0.970), stdev = 0.266
[info]   CI (99.9%): [≈ 0, 1.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 55.82% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 878053.286 ops/s
[info] # Warmup Iteration   2: 1209050.408 ops/s
[info] # Warmup Iteration   3: 1232771.267 ops/s
[info] Iteration   1: 1240161.631 ops/s
[info]                  ·gc.alloc.rate:                   813.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     830.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1240151.696 ops/s
[info]                  ·gc.alloc.rate:                   813.520 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1245721.408 ops/s
[info]                  ·gc.alloc.rate:                   816.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     829.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1243172.690 ops/s
[info]                  ·gc.alloc.rate:                   815.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1251.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1245892.244 ops/s
[info]                  ·gc.alloc.rate:                   816.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          661.482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     835.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1243019.934 ±(99.9%) 10885.844 ops/s [Average]
[info]   (min, avg, max) = (1240151.696, 1243019.934, 1245892.244), stdev = 2827.019
[info]   CI (99.9%): [1232134.090, 1253905.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   815.113 ±(99.9%) 6.874 MB/sec [Average]
[info]   (min, avg, max) = (813.140, 815.113, 816.947), stdev = 1.785
[info]   CI (99.9%): [808.239, 821.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   788.511 ±(99.9%) 691.608 MB/sec [Average]
[info]   (min, avg, max) = (654.115, 788.511, 988.157), stdev = 179.608
[info]   CI (99.9%): [96.903, 1480.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   998.478 ±(99.9%) 879.233 B/op [Average]
[info]   (min, avg, max) = (829.438, 998.478, 1251.065), stdev = 228.334
[info]   CI (99.9%): [119.245, 1877.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.100 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.100, 0.132), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 56.16% complete, ETA 00:27:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1170287.105 ops/s
[info] # Warmup Iteration   2: 1226243.920 ops/s
[info] # Warmup Iteration   3: 1236066.555 ops/s
[info] Iteration   1: 1268004.335 ops/s
[info]                  ·gc.alloc.rate:                   522.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     412.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.166 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1264562.345 ops/s
[info]                  ·gc.alloc.rate:                   520.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     826.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1270300.586 ops/s
[info]                  ·gc.alloc.rate:                   523.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1267883.804 ops/s
[info]                  ·gc.alloc.rate:                   522.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     823.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1228435.837 ops/s
[info]                  ·gc.alloc.rate:               506.017 MB/sec
[info]                  ·gc.alloc.rate.norm:          648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 425.473 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1259837.381 ±(99.9%) 68051.485 ops/s [Average]
[info]   (min, avg, max) = (1228435.837, 1259837.381, 1270300.586), stdev = 17672.754
[info]   CI (99.9%): [1191785.897, 1327888.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   518.784 ±(99.9%) 27.687 MB/sec [Average]
[info]   (min, avg, max) = (506.017, 518.784, 523.131), stdev = 7.190
[info]   CI (99.9%): [491.096, 546.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   464.844 ±(99.9%) 699.573 MB/sec [Average]
[info]   (min, avg, max) = (331.823, 464.844, 664.191), stdev = 181.677
[info]   CI (99.9%): [≈ 0, 1164.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   579.877 ±(99.9%) 862.409 B/op [Average]
[info]   (min, avg, max) = (411.028, 579.877, 826.636), stdev = 223.965
[info]   CI (99.9%): [≈ 0, 1442.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.382 ±(99.9%) 2.936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.382, 1.745), stdev = 0.762
[info]   CI (99.9%): [≈ 0, 3.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.475 ±(99.9%) 3.644 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.475, 2.166), stdev = 0.946
[info]   CI (99.9%): [≈ 0, 4.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 56.51% complete, ETA 00:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1282346.308 ops/s
[info] # Warmup Iteration   2: 1382391.975 ops/s
[info] # Warmup Iteration   3: 1380104.855 ops/s
[info] Iteration   1: 1380115.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1379315.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1380999.933 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1379384.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1380190.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1380001.390 ±(99.9%) 2650.941 ops/s [Average]
[info]   (min, avg, max) = (1379315.848, 1380001.390, 1380999.933), stdev = 688.441
[info]   CI (99.9%): [1377350.450, 1382652.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 56.85% complete, ETA 00:26:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23411.469 ops/s
[info] # Warmup Iteration   2: 33576.963 ops/s
[info] # Warmup Iteration   3: 34203.806 ops/s
[info] Iteration   1: 34141.010 ops/s
[info]                  ·gc.alloc.rate:                   1727.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              79641.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76282.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.879 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34137.434 ops/s
[info]                  ·gc.alloc.rate:                   1727.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76841.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.799 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 34301.234 ops/s
[info]                  ·gc.alloc.rate:                   1735.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92335.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.731 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34349.159 ops/s
[info]                  ·gc.alloc.rate:                   1738.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77217.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.908 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 34336.722 ops/s
[info]                  ·gc.alloc.rate:                   1737.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              79632.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1690.670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77491.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.725 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34253.112 ±(99.9%) 406.054 ops/s [Average]
[info]   (min, avg, max) = (34137.434, 34253.112, 34349.159), stdev = 105.451
[info]   CI (99.9%): [33847.057, 34659.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1733.273 ±(99.9%) 20.640 MB/sec [Average]
[info]   (min, avg, max) = (1727.254, 1733.273, 1738.421), stdev = 5.360
[info]   CI (99.9%): [1712.634, 1753.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   79633.830 ±(99.9%) 15.649 B/op [Average]
[info]   (min, avg, max) = (79632.013, 79633.830, 79641.100), stdev = 4.064
[info]   CI (99.9%): [79618.181, 79649.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1742.088 ±(99.9%) 584.520 MB/sec [Average]
[info]   (min, avg, max) = (1654.911, 1742.088, 2012.405), stdev = 151.798
[info]   CI (99.9%): [1157.568, 2326.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80033.780 ±(99.9%) 26537.475 B/op [Average]
[info]   (min, avg, max) = (76282.407, 80033.780, 92335.328), stdev = 6891.698
[info]   CI (99.9%): [53496.305, 106571.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4.208 ±(99.9%) 6.677 B/op [Average]
[info]   (min, avg, max) = (1.908, 4.208, 5.731), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 10.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 57.19% complete, ETA 00:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14941.903 ops/s
[info] # Warmup Iteration   2: 18356.120 ops/s
[info] # Warmup Iteration   3: 18391.548 ops/s
[info] Iteration   1: 18478.799 ops/s
[info]                  ·gc.alloc.rate:                   1939.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              165159.209 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170696.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.638 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 18538.782 ops/s
[info]                  ·gc.alloc.rate:                   1945.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171152.803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.603 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 18506.360 ops/s
[info]                  ·gc.alloc.rate:                   1942.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172222.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 18495.784 ops/s
[info]                  ·gc.alloc.rate:                   1941.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              165174.282 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172854.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.399 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18626.302 ops/s
[info]                  ·gc.alloc.rate:                   1955.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              165176.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1697.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     143356.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.553 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   18529.205 ±(99.9%) 225.345 ops/s [Average]
[info]   (min, avg, max) = (18478.799, 18529.205, 18626.302), stdev = 58.521
[info]   CI (99.9%): [18303.860, 18754.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1944.852 ±(99.9%) 24.349 MB/sec [Average]
[info]   (min, avg, max) = (1939.153, 1944.852, 1955.298), stdev = 6.323
[info]   CI (99.9%): [1920.503, 1969.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   165172.314 ±(99.9%) 28.359 B/op [Average]
[info]   (min, avg, max) = (165159.209, 165172.314, 165176.032), stdev = 7.365
[info]   CI (99.9%): [165143.955, 165200.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1954.906 ±(99.9%) 556.585 MB/sec [Average]
[info]   (min, avg, max) = (1697.001, 1954.906, 2031.347), stdev = 144.543
[info]   CI (99.9%): [1398.320, 2511.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   166056.477 ±(99.9%) 48974.588 B/op [Average]
[info]   (min, avg, max) = (143356.043, 166056.477, 172854.344), stdev = 12718.545
[info]   CI (99.9%): [117081.890, 215031.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9.901 ±(99.9%) 10.327 B/op [Average]
[info]   (min, avg, max) = (5.311, 9.901, 12.399), stdev = 2.682
[info]   CI (99.9%): [≈ 0, 20.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 57.53% complete, ETA 00:26:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66972.446 ops/s
[info] # Warmup Iteration   2: 94313.236 ops/s
[info] # Warmup Iteration   3: 98660.192 ops/s
[info] Iteration   1: 98513.939 ops/s
[info]                  ·gc.alloc.rate:                   1292.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20949.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 95736.985 ops/s
[info]                  ·gc.alloc.rate:                   1256.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21672.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 98497.395 ops/s
[info]                  ·gc.alloc.rate:                   1292.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21192.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 97430.541 ops/s
[info]                  ·gc.alloc.rate:                   1278.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21548.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.673 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 98722.241 ops/s
[info]                  ·gc.alloc.rate:                   1296.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              20656.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21383.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.332 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   97780.220 ±(99.9%) 4808.362 ops/s [Average]
[info]   (min, avg, max) = (95736.985, 97780.220, 98722.241), stdev = 1248.716
[info]   CI (99.9%): [92971.859, 102588.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1283.454 ±(99.9%) 63.072 MB/sec [Average]
[info]   (min, avg, max) = (1256.634, 1283.454, 1296.070), stdev = 16.380
[info]   CI (99.9%): [1220.382, 1346.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20656.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20656.004, 20656.005, 20656.005), stdev = 0.001
[info]   CI (99.9%): [20656.004, 20656.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1326.388 ±(99.9%) 46.656 MB/sec [Average]
[info]   (min, avg, max) = (1311.253, 1326.388, 1341.695), stdev = 12.116
[info]   CI (99.9%): [1279.732, 1373.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21349.231 ±(99.9%) 1105.569 B/op [Average]
[info]   (min, avg, max) = (20949.384, 21349.231, 21672.622), stdev = 287.113
[info]   CI (99.9%): [20243.661, 22454.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.872 ±(99.9%) 1.468 B/op [Average]
[info]   (min, avg, max) = (0.332, 0.872, 1.330), stdev = 0.381
[info]   CI (99.9%): [≈ 0, 2.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 57.88% complete, ETA 00:26:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221236.704 ops/s
[info] # Warmup Iteration   2: 233043.519 ops/s
[info] # Warmup Iteration   3: 232383.782 ops/s
[info] Iteration   1: 234882.210 ops/s
[info]                  ·gc.alloc.rate:                   764.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4463.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 234584.563 ops/s
[info]                  ·gc.alloc.rate:               763.259 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4460.333 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 234790.699 ops/s
[info]                  ·gc.alloc.rate:                   763.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6700.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 231731.356 ops/s
[info]                  ·gc.alloc.rate:               754.239 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667.497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4531.172 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 231361.826 ops/s
[info]                  ·gc.alloc.rate:                   752.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4545.254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   233470.131 ±(99.9%) 6792.900 ops/s [Average]
[info]   (min, avg, max) = (231361.826, 233470.131, 234882.210), stdev = 1764.095
[info]   CI (99.9%): [226677.231, 240263.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   759.601 ±(99.9%) 21.804 MB/sec [Average]
[info]   (min, avg, max) = (752.636, 759.601, 764.075), stdev = 5.663
[info]   CI (99.9%): [737.797, 781.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.002, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   733.238 ±(99.9%) 573.185 MB/sec [Average]
[info]   (min, avg, max) = (664.920, 733.238, 999.508), stdev = 148.854
[info]   CI (99.9%): [160.053, 1306.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4940.084 ±(99.9%) 3791.373 B/op [Average]
[info]   (min, avg, max) = (4460.333, 4940.084, 6700.059), stdev = 984.608
[info]   CI (99.9%): [1148.710, 8731.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.365 ±(99.9%) 1.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.365, 0.708), stdev = 0.339
[info]   CI (99.9%): [≈ 0, 1.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 58.22% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9746.111 ops/s
[info] # Warmup Iteration   2: 16204.140 ops/s
[info] # Warmup Iteration   3: 16357.158 ops/s
[info] Iteration   1: 16376.331 ops/s
[info]                  ·gc.alloc.rate:                   2151.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              206800.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1993.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191546.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 16286.905 ops/s
[info]                  ·gc.alloc.rate:                   2140.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              206800.887 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     226561.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.070 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16376.059 ops/s
[info]                  ·gc.alloc.rate:                   2151.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              206800.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194319.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.001 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16297.150 ops/s
[info]                  ·gc.alloc.rate:                   2141.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              206800.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228821.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 16161.941 ops/s
[info]                  ·gc.alloc.rate:                   2124.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              206800.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     198221.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   16299.677 ±(99.9%) 338.170 ops/s [Average]
[info]   (min, avg, max) = (16161.941, 16299.677, 16376.331), stdev = 87.822
[info]   CI (99.9%): [15961.507, 16637.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2141.921 ±(99.9%) 42.909 MB/sec [Average]
[info]   (min, avg, max) = (2124.632, 2141.921, 2151.785), stdev = 11.143
[info]   CI (99.9%): [2099.012, 2184.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   206800.201 ±(99.9%) 1.477 B/op [Average]
[info]   (min, avg, max) = (206800.026, 206800.201, 206800.887), stdev = 0.384
[info]   CI (99.9%): [206798.725, 206801.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2153.082 ±(99.9%) 720.039 MB/sec [Average]
[info]   (min, avg, max) = (1993.039, 2153.082, 2369.431), stdev = 186.992
[info]   CI (99.9%): [1433.043, 2873.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   207894.040 ±(99.9%) 70254.386 B/op [Average]
[info]   (min, avg, max) = (191546.455, 207894.040, 228821.155), stdev = 18244.841
[info]   CI (99.9%): [137639.654, 278148.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8.839 ±(99.9%) 11.672 B/op [Average]
[info]   (min, avg, max) = (6.001, 8.839, 12.070), stdev = 3.031
[info]   CI (99.9%): [≈ 0, 20.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 58.56% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15342.329 ops/s
[info] # Warmup Iteration   2: 20670.851 ops/s
[info] # Warmup Iteration   3: 20653.128 ops/s
[info] Iteration   1: 20562.925 ops/s
[info]                  ·gc.alloc.rate:                   1664.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              127382.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127127.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.966 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20485.325 ops/s
[info]                  ·gc.alloc.rate:                   1658.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              127392.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128404.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.996 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20201.347 ops/s
[info]                  ·gc.alloc.rate:                   1635.394 MB/sec
[info]                  ·gc.alloc.rate.norm:              127375.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     130831.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.109 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 20759.070 ops/s
[info]                  ·gc.alloc.rate:                   1679.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127865.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 20843.126 ops/s
[info]                  ·gc.alloc.rate:                   1686.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              127352.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127708.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.003 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   20570.359 ±(99.9%) 969.317 ops/s [Average]
[info]   (min, avg, max) = (20201.347, 20570.359, 20843.126), stdev = 251.729
[info]   CI (99.9%): [19601.042, 21539.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1664.968 ±(99.9%) 77.561 MB/sec [Average]
[info]   (min, avg, max) = (1635.394, 1664.968, 1686.898), stdev = 20.142
[info]   CI (99.9%): [1587.407, 1742.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   127370.883 ±(99.9%) 69.990 B/op [Average]
[info]   (min, avg, max) = (127352.022, 127370.883, 127392.024), stdev = 18.176
[info]   CI (99.9%): [127300.893, 127440.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1678.109 ±(99.9%) 46.727 MB/sec [Average]
[info]   (min, avg, max) = (1661.198, 1678.109, 1691.617), stdev = 12.135
[info]   CI (99.9%): [1631.381, 1724.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   128387.411 ±(99.9%) 5546.225 B/op [Average]
[info]   (min, avg, max) = (127127.158, 128387.411, 130831.977), stdev = 1440.337
[info]   CI (99.9%): [122841.185, 133933.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8.277 ±(99.9%) 6.527 B/op [Average]
[info]   (min, avg, max) = (6.312, 8.277, 11.003), stdev = 1.695
[info]   CI (99.9%): [1.750, 14.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 58.90% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57988.538 ops/s
[info] # Warmup Iteration   2: 88002.357 ops/s
[info] # Warmup Iteration   3: 88300.569 ops/s
[info] Iteration   1: 88972.094 ops/s
[info]                  ·gc.alloc.rate:                   1218.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23166.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 89062.894 ops/s
[info]                  ·gc.alloc.rate:                   1220.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.983 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17439.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 88521.766 ops/s
[info]                  ·gc.alloc.rate:                   1212.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1323.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23532.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.740 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 88351.497 ops/s
[info]                  ·gc.alloc.rate:                   1210.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23732.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.742 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 87659.749 ops/s
[info]                  ·gc.alloc.rate:                   1201.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18024.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.495 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   88513.600 ±(99.9%) 2167.459 ops/s [Average]
[info]   (min, avg, max) = (87659.749, 88513.600, 89062.894), stdev = 562.882
[info]   CI (99.9%): [86346.141, 90681.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1212.647 ±(99.9%) 28.844 MB/sec [Average]
[info]   (min, avg, max) = (1201.403, 1212.647, 1220.033), stdev = 7.491
[info]   CI (99.9%): [1183.803, 1241.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.010 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.010, 21560.028), stdev = 0.025
[info]   CI (99.9%): [21559.915, 21560.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1191.362 ±(99.9%) 689.124 MB/sec [Average]
[info]   (min, avg, max) = (986.890, 1191.362, 1332.255), stdev = 178.963
[info]   CI (99.9%): [502.238, 1880.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21179.223 ±(99.9%) 12168.249 B/op [Average]
[info]   (min, avg, max) = (17439.970, 21179.223, 23732.298), stdev = 3160.056
[info]   CI (99.9%): [9010.974, 33347.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.110 ±(99.9%) 2.839 B/op [Average]
[info]   (min, avg, max) = (0.368, 1.110, 2.207), stdev = 0.737
[info]   CI (99.9%): [≈ 0, 3.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 59.25% complete, ETA 00:25:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 214647.682 ops/s
[info] # Warmup Iteration   2: 227741.291 ops/s
[info] # Warmup Iteration   3: 225168.472 ops/s
[info] Iteration   1: 226334.810 ops/s
[info]                  ·gc.alloc.rate:                   721.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6925.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 226143.817 ops/s
[info]                  ·gc.alloc.rate:                   720.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4617.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 226022.959 ops/s
[info]                  ·gc.alloc.rate:               720.309 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4624.713 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 226106.702 ops/s
[info]                  ·gc.alloc.rate:                   720.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4627.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 217366.848 ops/s
[info]                  ·gc.alloc.rate:                   692.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.754 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   224395.027 ±(99.9%) 15135.078 ops/s [Average]
[info]   (min, avg, max) = (217366.848, 224395.027, 226334.810), stdev = 3930.532
[info]   CI (99.9%): [209259.949, 239530.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   715.217 ±(99.9%) 47.986 MB/sec [Average]
[info]   (min, avg, max) = (692.933, 715.217, 721.291), stdev = 12.462
[info]   CI (99.9%): [667.231, 763.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.002, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   730.941 ±(99.9%) 570.169 MB/sec [Average]
[info]   (min, avg, max) = (663.457, 730.941, 995.811), stdev = 148.071
[info]   CI (99.9%): [160.772, 1301.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5123.616 ±(99.9%) 3892.129 B/op [Average]
[info]   (min, avg, max) = (4617.501, 5123.616, 6925.070), stdev = 1010.773
[info]   CI (99.9%): [1231.488, 9015.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.167), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.556 ±(99.9%) 1.656 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.556, 1.158), stdev = 0.430
[info]   CI (99.9%): [≈ 0, 2.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 59.59% complete, ETA 00:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233320.331 ops/s
[info] # Warmup Iteration   2: 246784.830 ops/s
[info] # Warmup Iteration   3: 253237.144 ops/s
[info] Iteration   1: 254081.357 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 253946.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 254645.237 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 254693.091 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 254655.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   254404.185 ±(99.9%) 1386.586 ops/s [Average]
[info]   (min, avg, max) = (253946.062, 254404.185, 254693.091), stdev = 360.092
[info]   CI (99.9%): [253017.599, 255790.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 59.93% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17881.375 ops/s
[info] # Warmup Iteration   2: 25693.783 ops/s
[info] # Warmup Iteration   3: 25962.170 ops/s
[info] Iteration   1: 26003.459 ops/s
[info]                  ·gc.alloc.rate:                   1772.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              107311.941 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1987.742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120311.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.040 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25606.802 ops/s
[info]                  ·gc.alloc.rate:                   1745.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102540.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.677 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 25537.930 ops/s
[info]                  ·gc.alloc.rate:                   1741.208 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103412.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 26030.040 ops/s
[info]                  ·gc.alloc.rate:                   1774.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              107311.940 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122357.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.034 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25681.935 ops/s
[info]                  ·gc.alloc.rate:                   1751.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              107312.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103690.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.827 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   25772.033 ±(99.9%) 883.026 ops/s [Average]
[info]   (min, avg, max) = (25537.930, 25772.033, 26030.040), stdev = 229.319
[info]   CI (99.9%): [24889.006, 26655.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1757.219 ±(99.9%) 60.296 MB/sec [Average]
[info]   (min, avg, max) = (1741.208, 1757.219, 1774.885), stdev = 15.659
[info]   CI (99.9%): [1696.923, 1817.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   107312.007 ±(99.9%) 0.282 B/op [Average]
[info]   (min, avg, max) = (107311.940, 107312.007, 107312.118), stdev = 0.073
[info]   CI (99.9%): [107311.725, 107312.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1809.942 ±(99.9%) 690.745 MB/sec [Average]
[info]   (min, avg, max) = (1668.322, 1809.942, 2023.729), stdev = 179.384
[info]   CI (99.9%): [1119.197, 2500.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110462.418 ±(99.9%) 38353.436 B/op [Average]
[info]   (min, avg, max) = (102540.260, 110462.418, 122357.361), stdev = 9960.266
[info]   CI (99.9%): [72108.982, 148815.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5.085 ±(99.9%) 6.037 B/op [Average]
[info]   (min, avg, max) = (3.827, 5.085, 7.677), stdev = 1.568
[info]   CI (99.9%): [≈ 0, 11.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 60.27% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53208.564 ops/s
[info] # Warmup Iteration   2: 68981.689 ops/s
[info] # Warmup Iteration   3: 68137.112 ops/s
[info] Iteration   1: 69868.344 ops/s
[info]                  ·gc.alloc.rate:                   1571.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37282.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.876 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 69745.246 ops/s
[info]                  ·gc.alloc.rate:                   1569.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30041.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.879 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 70463.540 ops/s
[info]                  ·gc.alloc.rate:                   1584.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37373.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.860 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 70590.877 ops/s
[info]                  ·gc.alloc.rate:                   1588.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37486.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.392 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 70567.149 ops/s
[info]                  ·gc.alloc.rate:                   1587.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              35400.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37663.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   70247.031 ±(99.9%) 1567.423 ops/s [Average]
[info]   (min, avg, max) = (69745.246, 70247.031, 70590.877), stdev = 407.055
[info]   CI (99.9%): [68679.608, 71814.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1580.355 ±(99.9%) 34.930 MB/sec [Average]
[info]   (min, avg, max) = (1569.337, 1580.355, 1588.513), stdev = 9.071
[info]   CI (99.9%): [1545.425, 1615.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35400.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35400.006, 35400.006, 35400.007), stdev = 0.001
[info]   CI (99.9%): [35400.005, 35400.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1606.255 ±(99.9%) 592.731 MB/sec [Average]
[info]   (min, avg, max) = (1331.808, 1606.255, 1688.698), stdev = 153.930
[info]   CI (99.9%): [1013.524, 2198.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   35969.481 ±(99.9%) 12771.110 B/op [Average]
[info]   (min, avg, max) = (30041.992, 35969.481, 37663.514), stdev = 3316.617
[info]   CI (99.9%): [23198.372, 48740.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.187), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2.237 ±(99.9%) 4.255 B/op [Average]
[info]   (min, avg, max) = (1.392, 2.237, 4.179), stdev = 1.105
[info]   CI (99.9%): [≈ 0, 6.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 60.62% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57810.708 ops/s
[info] # Warmup Iteration   2: 91996.743 ops/s
[info] # Warmup Iteration   3: 92931.004 ops/s
[info] Iteration   1: 91307.713 ops/s
[info]                  ·gc.alloc.rate:                   1137.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22494.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.076 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 93811.381 ops/s
[info]                  ·gc.alloc.rate:                   1169.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16501.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.397 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 92978.390 ops/s
[info]                  ·gc.alloc.rate:                   1158.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1318.315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22315.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 94673.556 ops/s
[info]                  ·gc.alloc.rate:                   1180.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16539.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.384 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 94563.840 ops/s
[info]                  ·gc.alloc.rate:                   1178.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              19608.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22197.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   93466.976 ±(99.9%) 5335.156 ops/s [Average]
[info]   (min, avg, max) = (91307.713, 93466.976, 94673.556), stdev = 1385.523
[info]   CI (99.9%): [88131.820, 98802.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1164.696 ±(99.9%) 66.914 MB/sec [Average]
[info]   (min, avg, max) = (1137.677, 1164.696, 1180.043), stdev = 17.377
[info]   CI (99.9%): [1097.782, 1231.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   19608.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19608.005, 19608.005, 19608.005), stdev = 0.001
[info]   CI (99.9%): [19608.004, 19608.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1187.308 ±(99.9%) 696.001 MB/sec [Average]
[info]   (min, avg, max) = (983.965, 1187.308, 1333.745), stdev = 180.749
[info]   CI (99.9%): [491.306, 1883.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20009.534 ±(99.9%) 12272.098 B/op [Average]
[info]   (min, avg, max) = (16501.172, 20009.534, 22494.337), stdev = 3187.025
[info]   CI (99.9%): [7737.436, 32281.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.191 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (1.039, 1.191, 1.397), stdev = 0.183
[info]   CI (99.9%): [0.487, 1.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 60.96% complete, ETA 00:24:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93316.979 ops/s
[info] # Warmup Iteration   2: 105279.792 ops/s
[info] # Warmup Iteration   3: 105344.450 ops/s
[info] Iteration   1: 105226.412 ops/s
[info]                  ·gc.alloc.rate:                   1230.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14865.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 105283.727 ops/s
[info]                  ·gc.alloc.rate:                   1231.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329.577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19876.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.245 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 103494.876 ops/s
[info]                  ·gc.alloc.rate:                   1210.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20300.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.633 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105777.630 ops/s
[info]                  ·gc.alloc.rate:                   1237.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14946.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.310 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 105522.462 ops/s
[info]                  ·gc.alloc.rate:                   1234.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              18408.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20049.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.242 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   105061.021 ±(99.9%) 3474.243 ops/s [Average]
[info]   (min, avg, max) = (103494.876, 105061.021, 105777.630), stdev = 902.250
[info]   CI (99.9%): [101586.779, 108535.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1228.883 ±(99.9%) 39.758 MB/sec [Average]
[info]   (min, avg, max) = (1210.997, 1228.883, 1237.191), stdev = 10.325
[info]   CI (99.9%): [1189.125, 1268.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   18408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18408.004, 18408.004, 18408.004), stdev = 0.001
[info]   CI (99.9%): [18408.004, 18408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1201.540 ±(99.9%) 711.756 MB/sec [Average]
[info]   (min, avg, max) = (993.841, 1201.540, 1344.264), stdev = 184.841
[info]   CI (99.9%): [489.784, 1913.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   18007.631 ±(99.9%) 10919.379 B/op [Average]
[info]   (min, avg, max) = (14865.504, 18007.631, 20300.509), stdev = 2835.728
[info]   CI (99.9%): [7088.252, 28927.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.935 ±(99.9%) 1.688 B/op [Average]
[info]   (min, avg, max) = (0.310, 0.935, 1.245), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 2.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 61.30% complete, ETA 00:24:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26733.010 ops/s
[info] # Warmup Iteration   2: 44916.043 ops/s
[info] # Warmup Iteration   3: 45502.558 ops/s
[info] Iteration   1: 46539.971 ops/s
[info]                  ·gc.alloc.rate:                   2216.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2318.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78419.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.520 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 46602.302 ops/s
[info]                  ·gc.alloc.rate:                   2219.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2006.492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67763.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.109 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 46732.279 ops/s
[info]                  ·gc.alloc.rate:                   2225.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79372.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.206 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 46122.288 ops/s
[info]                  ·gc.alloc.rate:                   2197.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2368.985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80806.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.552 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 46280.954 ops/s
[info]                  ·gc.alloc.rate:                   2204.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              74944.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69226.993 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.124 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   46455.559 ±(99.9%) 956.459 ops/s [Average]
[info]   (min, avg, max) = (46122.288, 46455.559, 46732.279), stdev = 248.389
[info]   CI (99.9%): [45499.100, 47412.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2212.387 ±(99.9%) 44.221 MB/sec [Average]
[info]   (min, avg, max) = (2197.114, 2212.387, 2225.412), stdev = 11.484
[info]   CI (99.9%): [2168.165, 2256.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   74944.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (74944.009, 74944.010, 74944.010), stdev = 0.001
[info]   CI (99.9%): [74944.008, 74944.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2217.456 ±(99.9%) 694.366 MB/sec [Average]
[info]   (min, avg, max) = (2006.492, 2217.456, 2368.985), stdev = 180.325
[info]   CI (99.9%): [1523.090, 2911.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   75117.640 ±(99.9%) 23592.208 B/op [Average]
[info]   (min, avg, max) = (67763.279, 75117.640, 80806.566), stdev = 6126.822
[info]   CI (99.9%): [51525.432, 98709.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3.102 ±(99.9%) 3.622 B/op [Average]
[info]   (min, avg, max) = (2.109, 3.102, 4.206), stdev = 0.941
[info]   CI (99.9%): [≈ 0, 6.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 61.64% complete, ETA 00:23:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96388.312 ops/s
[info] # Warmup Iteration   2: 118125.923 ops/s
[info] # Warmup Iteration   3: 119843.372 ops/s
[info] Iteration   1: 118216.923 ops/s
[info]                  ·gc.alloc.rate:                   1109.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13125.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 120106.135 ops/s
[info]                  ·gc.alloc.rate:                   1127.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          989.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12962.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 120086.510 ops/s
[info]                  ·gc.alloc.rate:                   1126.732 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17369.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.637 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 120150.746 ops/s
[info]                  ·gc.alloc.rate:                   1127.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13084.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.273 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 118871.528 ops/s
[info]                  ·gc.alloc.rate:                   1115.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              14768.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13277.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   119486.368 ±(99.9%) 3430.748 ops/s [Average]
[info]   (min, avg, max) = (118216.923, 119486.368, 120150.746), stdev = 890.954
[info]   CI (99.9%): [116055.621, 122917.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1121.338 ±(99.9%) 32.199 MB/sec [Average]
[info]   (min, avg, max) = (1109.232, 1121.338, 1127.473), stdev = 8.362
[info]   CI (99.9%): [1089.139, 1153.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14768.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14768.004, 14768.004, 14768.004), stdev = 0.001
[info]   CI (99.9%): [14768.003, 14768.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1060.583 ±(99.9%) 570.288 MB/sec [Average]
[info]   (min, avg, max) = (985.887, 1060.583, 1325.223), stdev = 148.102
[info]   CI (99.9%): [490.295, 1630.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13964.152 ±(99.9%) 7343.331 B/op [Average]
[info]   (min, avg, max) = (12962.625, 13964.152, 17369.607), stdev = 1907.040
[info]   CI (99.9%): [6620.820, 21307.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.822 ±(99.9%) 2.230 B/op [Average]
[info]   (min, avg, max) = (0.273, 0.822, 1.637), stdev = 0.579
[info]   CI (99.9%): [≈ 0, 3.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 61.99% complete, ETA 00:23:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238030.987 ops/s
[info] # Warmup Iteration   2: 340666.296 ops/s
[info] # Warmup Iteration   3: 342122.653 ops/s
[info] Iteration   1: 338201.325 ops/s
[info]                  ·gc.alloc.rate:                   501.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          581.503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2706.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 335793.407 ops/s
[info]                  ·gc.alloc.rate:               498.443 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1526.761 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 344355.128 ops/s
[info]                  ·gc.alloc.rate:                   511.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          651.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2977.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 345775.173 ops/s
[info]                  ·gc.alloc.rate:               513.222 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      325.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1482.598 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 343884.024 ops/s
[info]                  ·gc.alloc.rate:                   510.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2984.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   341601.811 ±(99.9%) 16730.047 ops/s [Average]
[info]   (min, avg, max) = (335793.407, 341601.811, 345775.173), stdev = 4344.740
[info]   CI (99.9%): [324871.765, 358331.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   507.022 ±(99.9%) 24.784 MB/sec [Average]
[info]   (min, avg, max) = (498.443, 507.022, 513.222), stdev = 6.436
[info]   CI (99.9%): [482.238, 531.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.001, 2336.001, 2336.001), stdev = 0.001
[info]   CI (99.9%): [2336.001, 2336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507.316 ±(99.9%) 647.722 MB/sec [Average]
[info]   (min, avg, max) = (325.729, 507.316, 652.136), stdev = 168.211
[info]   CI (99.9%): [≈ 0, 1155.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2335.547 ±(99.9%) 2953.037 B/op [Average]
[info]   (min, avg, max) = (1482.598, 2335.547, 2984.729), stdev = 766.894
[info]   CI (99.9%): [≈ 0, 5288.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.537 ±(99.9%) 4.362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 2.562), stdev = 1.133
[info]   CI (99.9%): [≈ 0, 4.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.499 ±(99.9%) 20.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.499, 11.924), stdev = 5.272
[info]   CI (99.9%): [≈ 0, 22.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 62.33% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 610800.112 ops/s
[info] # Warmup Iteration   2: 636898.403 ops/s
[info] # Warmup Iteration   3: 646841.517 ops/s
[info] Iteration   1: 662435.233 ops/s
[info]                  ·gc.alloc.rate:                   821.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2359.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.297 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 689429.906 ops/s
[info]                  ·gc.alloc.rate:                   855.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1511.576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.285 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 664378.401 ops/s
[info]                  ·gc.alloc.rate:                   824.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          994.583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2356.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 658245.125 ops/s
[info]                  ·gc.alloc.rate:                   816.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589.591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 658856.727 ops/s
[info]                  ·gc.alloc.rate:                   817.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2388.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.199 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   666669.079 ±(99.9%) 49955.473 ops/s [Average]
[info]   (min, avg, max) = (658245.125, 666669.079, 689429.906), stdev = 12973.278
[info]   CI (99.9%): [616713.605, 716624.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   826.874 ±(99.9%) 61.794 MB/sec [Average]
[info]   (min, avg, max) = (816.606, 826.874, 855.046), stdev = 16.048
[info]   CI (99.9%): [765.080, 888.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   862.949 ±(99.9%) 700.959 MB/sec [Average]
[info]   (min, avg, max) = (662.124, 862.949, 999.853), stdev = 182.037
[info]   CI (99.9%): [161.990, 1563.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2041.096 ±(99.9%) 1728.160 B/op [Average]
[info]   (min, avg, max) = (1511.576, 2041.096, 2388.436), stdev = 448.798
[info]   CI (99.9%): [312.936, 3769.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.206 ±(99.9%) 0.381 B/op [Average]
[info]   (min, avg, max) = (0.049, 0.206, 0.297), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.67% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 679169.138 ops/s
[info] # Warmup Iteration   2: 707644.504 ops/s
[info] # Warmup Iteration   3: 709886.273 ops/s
[info] Iteration   1: 723317.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 724185.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 730221.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 712840.518 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 724643.264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   723041.781 ±(99.9%) 24320.140 ops/s [Average]
[info]   (min, avg, max) = (712840.518, 723041.781, 730221.239), stdev = 6315.863
[info]   CI (99.9%): [698721.642, 747361.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 63.01% complete, ETA 00:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198278.439 ops/s
[info] # Warmup Iteration   2: 252389.469 ops/s
[info] # Warmup Iteration   3: 212012.024 ops/s
[info] Iteration   1: 212620.137 ops/s
[info]                  ·gc.alloc.rate:                   694.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4842.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 212031.290 ops/s
[info]                  ·gc.alloc.rate:                   693.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4855.617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 213879.090 ops/s
[info]                  ·gc.alloc.rate:                   699.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4823.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 215544.164 ops/s
[info]                  ·gc.alloc.rate:                   704.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4796.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 215407.222 ops/s
[info]                  ·gc.alloc.rate:                   704.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          658.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4813.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.456 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   213896.381 ±(99.9%) 6120.432 ops/s [Average]
[info]   (min, avg, max) = (212031.290, 213896.381, 215544.164), stdev = 1589.457
[info]   CI (99.9%): [207775.948, 220016.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   699.130 ±(99.9%) 19.734 MB/sec [Average]
[info]   (min, avg, max) = (693.167, 699.130, 704.445), stdev = 5.125
[info]   CI (99.9%): [679.396, 718.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   655.915 ±(99.9%) 7.427 MB/sec [Average]
[info]   (min, avg, max) = (654.197, 655.915, 658.809), stdev = 1.929
[info]   CI (99.9%): [648.488, 663.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4826.170 ±(99.9%) 90.246 B/op [Average]
[info]   (min, avg, max) = (4796.036, 4826.170, 4855.617), stdev = 23.437
[info]   CI (99.9%): [4735.923, 4916.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.492 ±(99.9%) 1.359 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.492, 0.927), stdev = 0.353
[info]   CI (99.9%): [≈ 0, 1.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 63.36% complete, ETA 00:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125228.473 ops/s
[info] # Warmup Iteration   2: 184830.403 ops/s
[info] # Warmup Iteration   3: 186881.738 ops/s
[info] Iteration   1: 184307.330 ops/s
[info]                  ·gc.alloc.rate:                   1098.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8384.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.533 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 183566.994 ops/s
[info]                  ·gc.alloc.rate:                   1095.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11274.765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.535 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 187135.936 ops/s
[info]                  ·gc.alloc.rate:                   1116.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8336.839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.525 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 184153.266 ops/s
[info]                  ·gc.alloc.rate:                   1098.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8514.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 186906.917 ops/s
[info]                  ·gc.alloc.rate:                   1114.429 MB/sec
[info]                  ·gc.alloc.rate.norm:              9384.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11241.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.701 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185214.089 ±(99.9%) 6449.007 ops/s [Average]
[info]   (min, avg, max) = (183566.994, 185214.089, 187135.936), stdev = 1674.787
[info]   CI (99.9%): [178765.081, 191663.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1104.569 ±(99.9%) 38.025 MB/sec [Average]
[info]   (min, avg, max) = (1095.003, 1104.569, 1116.053), stdev = 9.875
[info]   CI (99.9%): [1066.544, 1142.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   9384.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9384.002, 9384.002, 9384.002), stdev = 0.001
[info]   CI (99.9%): [9384.002, 9384.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1124.140 ±(99.9%) 707.973 MB/sec [Average]
[info]   (min, avg, max) = (981.865, 1124.140, 1335.012), stdev = 183.858
[info]   CI (99.9%): [416.167, 1832.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9550.419 ±(99.9%) 6008.078 B/op [Average]
[info]   (min, avg, max) = (8336.839, 9550.419, 11274.765), stdev = 1560.279
[info]   CI (99.9%): [3542.341, 15558.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.530 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (0.356, 0.530, 0.701), stdev = 0.122
[info]   CI (99.9%): [0.060, 1.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 63.70% complete, ETA 00:22:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 303229.922 ops/s
[info] # Warmup Iteration   2: 317890.347 ops/s
[info] # Warmup Iteration   3: 314911.227 ops/s
[info] Iteration   1: 322056.966 ops/s
[info]                  ·gc.alloc.rate:                   625.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3261.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.630 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 316196.235 ops/s
[info]                  ·gc.alloc.rate:                   614.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3315.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 320016.422 ops/s
[info]                  ·gc.alloc.rate:                   621.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3276.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 319476.072 ops/s
[info]                  ·gc.alloc.rate:                   620.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3281.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 323213.558 ops/s
[info]                  ·gc.alloc.rate:                   627.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3250.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.304 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   320191.851 ±(99.9%) 10389.147 ops/s [Average]
[info]   (min, avg, max) = (316196.235, 320191.851, 323213.558), stdev = 2698.029
[info]   CI (99.9%): [309802.703, 330580.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   621.846 ±(99.9%) 20.208 MB/sec [Average]
[info]   (min, avg, max) = (614.197, 621.846, 627.857), stdev = 5.248
[info]   CI (99.9%): [601.638, 642.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   666.813 ±(99.9%) 3.044 MB/sec [Average]
[info]   (min, avg, max) = (666.163, 666.813, 667.764), stdev = 0.790
[info]   CI (99.9%): [663.769, 669.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3277.155 ±(99.9%) 95.708 B/op [Average]
[info]   (min, avg, max) = (3250.242, 3277.155, 3315.739), stdev = 24.855
[info]   CI (99.9%): [3181.447, 3372.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.358 ±(99.9%) 2.593 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.358, 1.562), stdev = 0.673
[info]   CI (99.9%): [≈ 0, 2.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.751 ±(99.9%) 12.668 B/op [Average]
[info]   (min, avg, max) = (0.104, 1.751, 7.630), stdev = 3.290
[info]   CI (99.9%): [≈ 0, 14.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 64.04% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382837.873 ops/s
[info] # Warmup Iteration   2: 535475.964 ops/s
[info] # Warmup Iteration   3: 517793.491 ops/s
[info] Iteration   1: 536902.893 ops/s
[info]                  ·gc.alloc.rate:                   529.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          582.576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1707.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.230 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 538523.534 ops/s
[info]                  ·gc.alloc.rate:                   531.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1910.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 534189.485 ops/s
[info]                  ·gc.alloc.rate:                   527.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          327.265 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 537549.715 ops/s
[info]                  ·gc.alloc.rate:                   530.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1915.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 536581.617 ops/s
[info]                  ·gc.alloc.rate:               529.136 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      327.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 961.312 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   536749.449 ±(99.9%) 6206.867 ops/s [Average]
[info]   (min, avg, max) = (534189.485, 536749.449, 538523.534), stdev = 1611.904
[info]   CI (99.9%): [530542.582, 542956.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   529.348 ±(99.9%) 5.670 MB/sec [Average]
[info]   (min, avg, max) = (527.047, 529.348, 531.015), stdev = 1.472
[info]   CI (99.9%): [523.679, 535.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   509.114 ±(99.9%) 648.172 MB/sec [Average]
[info]   (min, avg, max) = (327.265, 509.114, 654.174), stdev = 168.328
[info]   CI (99.9%): [≈ 0, 1157.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1491.783 ±(99.9%) 1888.305 B/op [Average]
[info]   (min, avg, max) = (961.312, 1491.783, 1915.321), stdev = 490.387
[info]   CI (99.9%): [≈ 0, 3380.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.450 ±(99.9%) 3.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.450, 2.125), stdev = 0.937
[info]   CI (99.9%): [≈ 0, 4.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.319 ±(99.9%) 10.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.319, 6.230), stdev = 2.747
[info]   CI (99.9%): [≈ 0, 11.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 64.38% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 920407.177 ops/s
[info] # Warmup Iteration   2: 977674.369 ops/s
[info] # Warmup Iteration   3: 1009322.316 ops/s
[info] Iteration   1: 1014769.165 ops/s
[info]                  ·gc.alloc.rate:                   753.023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1029.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1020141.072 ops/s
[info]                  ·gc.alloc.rate:                   757.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1023.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1015099.095 ops/s
[info]                  ·gc.alloc.rate:                   753.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1030.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1007127.450 ops/s
[info]                  ·gc.alloc.rate:                   747.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1559.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1017718.776 ops/s
[info]                  ·gc.alloc.rate:                   755.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1031.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1014971.112 ±(99.9%) 18850.302 ops/s [Average]
[info]   (min, avg, max) = (1007127.450, 1014971.112, 1020141.072), stdev = 4895.364
[info]   CI (99.9%): [996120.810, 1033821.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   753.250 ±(99.9%) 14.251 MB/sec [Average]
[info]   (min, avg, max) = (747.387, 753.250, 757.291), stdev = 3.701
[info]   CI (99.9%): [738.999, 767.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.312 ±(99.9%) 573.749 MB/sec [Average]
[info]   (min, avg, max) = (663.439, 731.312, 997.842), stdev = 149.001
[info]   CI (99.9%): [157.563, 1305.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1134.813 ±(99.9%) 914.041 B/op [Average]
[info]   (min, avg, max) = (1023.636, 1134.813, 1559.405), stdev = 237.374
[info]   CI (99.9%): [220.771, 2048.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (0.065, 0.097, 0.129), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.73% complete, ETA 00:21:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1062589.899 ops/s
[info] # Warmup Iteration   2: 1143779.329 ops/s
[info] # Warmup Iteration   3: 1150715.182 ops/s
[info] Iteration   1: 1149661.916 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1149089.209 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1152606.946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1151904.150 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1151200.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1150892.500 ±(99.9%) 5719.109 ops/s [Average]
[info]   (min, avg, max) = (1149089.209, 1150892.500, 1152606.946), stdev = 1485.234
[info]   CI (99.9%): [1145173.391, 1156611.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 65.07% complete, ETA 00:21:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468.809 ops/s
[info] # Warmup Iteration   2: 672.153 ops/s
[info] # Warmup Iteration   3: 661.045 ops/s
[info] Iteration   1: 660.281 ops/s
[info]                  ·gc.alloc.rate:                   1378.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3928590.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148.720 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 663.492 ops/s
[info]                  ·gc.alloc.rate:                   1385.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3143359.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246.747 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 658.394 ops/s
[info]                  ·gc.alloc.rate:                   1375.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3184711.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.448 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 665.499 ops/s
[info]                  ·gc.alloc.rate:                   1389.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.697 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3166982.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 658.851 ops/s
[info]                  ·gc.alloc.rate:                   1375.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              3284912.656 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3214147.982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149.171 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   661.303 ±(99.9%) 11.856 ops/s [Average]
[info]   (min, avg, max) = (658.394, 661.303, 665.499), stdev = 3.079
[info]   CI (99.9%): [649.448, 673.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1380.643 ±(99.9%) 24.430 MB/sec [Average]
[info]   (min, avg, max) = (1375.090, 1380.643, 1389.320), stdev = 6.344
[info]   CI (99.9%): [1356.213, 1405.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3284912.735 ±(99.9%) 0.500 B/op [Average]
[info]   (min, avg, max) = (3284912.656, 3284912.735, 3284912.964), stdev = 0.130
[info]   CI (99.9%): [3284912.234, 3284913.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1398.441 ±(99.9%) 539.388 MB/sec [Average]
[info]   (min, avg, max) = (1325.441, 1398.441, 1648.664), stdev = 140.077
[info]   CI (99.9%): [859.053, 1937.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3327558.465 ±(99.9%) 1297588.206 B/op [Average]
[info]   (min, avg, max) = (3143359.229, 3327558.465, 3928590.717), stdev = 336979.536
[info]   CI (99.9%): [2029970.259, 4625146.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   148.498 ±(99.9%) 232.389 B/op [Average]
[info]   (min, avg, max) = (98.402, 148.498, 246.747), stdev = 60.351
[info]   CI (99.9%): [≈ 0, 380.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 65.41% complete, ETA 00:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14481.369 ops/s
[info] # Warmup Iteration   2: 29105.571 ops/s
[info] # Warmup Iteration   3: 30048.940 ops/s
[info] Iteration   1: 30323.801 ops/s
[info]                  ·gc.alloc.rate:                   547.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30494.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30095.711 ops/s
[info]                  ·gc.alloc.rate:                   543.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17348.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 30159.089 ops/s
[info]                  ·gc.alloc.rate:                   544.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34553.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.173 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 30118.528 ops/s
[info]                  ·gc.alloc.rate:                   544.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34600.954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.088 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 30181.534 ops/s
[info]                  ·gc.alloc.rate:               545.337 MB/sec
[info]                  ·gc.alloc.rate.norm:          28432.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17263.798 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30175.733 ±(99.9%) 343.931 ops/s [Average]
[info]   (min, avg, max) = (30095.711, 30175.733, 30323.801), stdev = 89.318
[info]   CI (99.9%): [29831.801, 30519.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   545.184 ±(99.9%) 6.113 MB/sec [Average]
[info]   (min, avg, max) = (543.705, 545.184, 547.785), stdev = 1.588
[info]   CI (99.9%): [539.071, 551.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28432.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (28432.014, 28432.016, 28432.021), stdev = 0.003
[info]   CI (99.9%): [28432.005, 28432.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   514.980 ±(99.9%) 655.773 MB/sec [Average]
[info]   (min, avg, max) = (331.126, 514.980, 662.260), stdev = 170.302
[info]   CI (99.9%): [≈ 0, 1170.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26852.387 ±(99.9%) 34164.829 B/op [Average]
[info]   (min, avg, max) = (17263.798, 26852.387, 34600.954), stdev = 8872.498
[info]   CI (99.9%): [≈ 0, 61017.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.451 ±(99.9%) 3.704 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 2.171), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 4.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   23.411 ±(99.9%) 192.240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.411, 112.708), stdev = 49.924
[info]   CI (99.9%): [≈ 0, 215.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 65.75% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368.512 ops/s
[info] # Warmup Iteration   2: 644.145 ops/s
[info] # Warmup Iteration   3: 670.259 ops/s
[info] Iteration   1: 669.543 ops/s
[info]                  ·gc.alloc.rate:                   1433.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368480.645 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1307.169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3072171.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97.815 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 660.488 ops/s
[info]                  ·gc.alloc.rate:                   1414.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368510.814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3920658.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.147 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 671.888 ops/s
[info]                  ·gc.alloc.rate:                   1438.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368470.964 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108278.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 671.385 ops/s
[info]                  ·gc.alloc.rate:                   1437.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368464.643 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3127003.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 665.277 ops/s
[info]                  ·gc.alloc.rate:                   1424.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              3368466.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965223.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147.604 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   667.716 ±(99.9%) 18.506 ops/s [Average]
[info]   (min, avg, max) = (660.488, 667.716, 671.888), stdev = 4.806
[info]   CI (99.9%): [649.210, 686.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1429.433 ±(99.9%) 38.826 MB/sec [Average]
[info]   (min, avg, max) = (1414.315, 1429.433, 1438.049), stdev = 10.083
[info]   CI (99.9%): [1390.607, 1468.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   3368478.662 ±(99.9%) 73.254 B/op [Average]
[info]   (min, avg, max) = (3368464.643, 3368478.662, 3368510.814), stdev = 19.024
[info]   CI (99.9%): [3368405.409, 3368551.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1458.224 ±(99.9%) 716.216 MB/sec [Average]
[info]   (min, avg, max) = (1307.169, 1458.224, 1676.548), stdev = 185.999
[info]   CI (99.9%): [742.008, 2174.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3438667.129 ±(99.9%) 1775254.809 B/op [Average]
[info]   (min, avg, max) = (3072171.176, 3438667.129, 3965223.207), stdev = 461028.036
[info]   CI (99.9%): [1663412.320, 5213921.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   88.418 ±(99.9%) 159.367 B/op [Average]
[info]   (min, avg, max) = (48.762, 88.418, 147.604), stdev = 41.387
[info]   CI (99.9%): [≈ 0, 247.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 66.10% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9750.697 ops/s
[info] # Warmup Iteration   2: 12905.346 ops/s
[info] # Warmup Iteration   3: 12960.727 ops/s
[info] Iteration   1: 13142.383 ops/s
[info]                  ·gc.alloc.rate:                   1058.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              126712.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118019.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.986 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13003.394 ops/s
[info]                  ·gc.alloc.rate:                   1047.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              126713.664 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119522.829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7.558 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 12947.811 ops/s
[info]                  ·gc.alloc.rate:                   1042.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120525.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.061 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13095.365 ops/s
[info]                  ·gc.alloc.rate:                   1054.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119643.979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13098.842 ops/s
[info]                  ·gc.alloc.rate:                   1055.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              126776.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160315.833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.005 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13057.559 ±(99.9%) 306.284 ops/s [Average]
[info]   (min, avg, max) = (12947.811, 13057.559, 13142.383), stdev = 79.541
[info]   CI (99.9%): [12751.275, 13363.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1051.768 ±(99.9%) 24.451 MB/sec [Average]
[info]   (min, avg, max) = (1042.975, 1051.768, 1058.127), stdev = 6.350
[info]   CI (99.9%): [1027.318, 1076.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   126750.760 ±(99.9%) 133.282 B/op [Average]
[info]   (min, avg, max) = (126712.033, 126750.760, 126776.035), stdev = 34.613
[info]   CI (99.9%): [126617.478, 126884.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1059.063 ±(99.9%) 593.774 MB/sec [Average]
[info]   (min, avg, max) = (985.540, 1059.063, 1334.824), stdev = 154.201
[info]   CI (99.9%): [465.289, 1652.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   127605.559 ±(99.9%) 70496.662 B/op [Average]
[info]   (min, avg, max) = (118019.642, 127605.559, 160315.833), stdev = 18307.759
[info]   CI (99.9%): [57108.897, 198102.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.054 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.054, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6.523 ±(99.9%) 8.611 B/op [Average]
[info]   (min, avg, max) = (4.986, 6.523, 10.005), stdev = 2.236
[info]   CI (99.9%): [≈ 0, 15.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 66.44% complete, ETA 00:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258023.629 ops/s
[info] # Warmup Iteration   2: 282022.192 ops/s
[info] # Warmup Iteration   3: 275390.708 ops/s
[info] Iteration   1: 269679.482 ops/s
[info]                  ·gc.alloc.rate:                   951.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          993.267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5796.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.243 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 270377.599 ops/s
[info]                  ·gc.alloc.rate:                   953.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3856.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.727 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 273696.769 ops/s
[info]                  ·gc.alloc.rate:                   965.460 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5724.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 274294.813 ops/s
[info]                  ·gc.alloc.rate:                   967.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          999.183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5733.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 273622.142 ops/s
[info]                  ·gc.alloc.rate:                   965.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5766.586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   272334.161 ±(99.9%) 8221.644 ops/s [Average]
[info]   (min, avg, max) = (269679.482, 272334.161, 274294.813), stdev = 2135.135
[info]   CI (99.9%): [264112.517, 280555.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   960.691 ±(99.9%) 28.877 MB/sec [Average]
[info]   (min, avg, max) = (951.332, 960.691, 967.589), stdev = 7.499
[info]   CI (99.9%): [931.814, 989.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.002, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   930.606 ±(99.9%) 577.149 MB/sec [Average]
[info]   (min, avg, max) = (662.560, 930.606, 1002.514), stdev = 149.884
[info]   CI (99.9%): [353.457, 1507.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5375.570 ±(99.9%) 3271.855 B/op [Average]
[info]   (min, avg, max) = (3856.456, 5375.570, 5796.739), stdev = 849.690
[info]   CI (99.9%): [2103.715, 8647.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.481 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (0.243, 0.481, 0.727), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66.78% complete, ETA 00:20:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274041.554 ops/s
[info] # Warmup Iteration   2: 284540.599 ops/s
[info] # Warmup Iteration   3: 300126.495 ops/s
[info] Iteration   1: 300124.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 300041.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 300049.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 299229.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 299308.224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   299750.437 ±(99.9%) 1701.220 ops/s [Average]
[info]   (min, avg, max) = (299229.260, 299750.437, 300124.308), stdev = 441.801
[info]   CI (99.9%): [298049.216, 301451.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 67.12% complete, ETA 00:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10771.364 ops/s
[info] # Warmup Iteration   2: 15139.349 ops/s
[info] # Warmup Iteration   3: 15284.140 ops/s
[info] Iteration   1: 15038.171 ops/s
[info]                  ·gc.alloc.rate:               996.639 MB/sec
[info]                  ·gc.alloc.rate.norm:          104280.159 B/op
[info]                  ·gc.churn.PS_Eden_Space:      980.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102550.050 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 15341.848 ops/s
[info]                  ·gc.alloc.rate:                   1017.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134340.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.666 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 15352.084 ops/s
[info]                  ·gc.alloc.rate:                   1017.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              104280.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          988.224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101306.577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15238.994 ops/s
[info]                  ·gc.alloc.rate:                   1009.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              104279.928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102539.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.599 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15304.495 ops/s
[info]                  ·gc.alloc.rate:                   1014.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              104281.639 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102576.598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15255.118 ±(99.9%) 497.198 ops/s [Average]
[info]   (min, avg, max) = (15038.171, 15255.118, 15352.084), stdev = 129.121
[info]   CI (99.9%): [14757.920, 15752.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1010.977 ±(99.9%) 33.061 MB/sec [Average]
[info]   (min, avg, max) = (996.639, 1010.977, 1017.231), stdev = 8.586
[info]   CI (99.9%): [977.916, 1044.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   104280.353 ±(99.9%) 2.806 B/op [Average]
[info]   (min, avg, max) = (104279.901, 104280.353, 104281.639), stdev = 0.729
[info]   CI (99.9%): [104277.547, 104283.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1053.828 ±(99.9%) 552.978 MB/sec [Average]
[info]   (min, avg, max) = (980.104, 1053.828, 1310.463), stdev = 143.607
[info]   CI (99.9%): [500.850, 1606.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   108662.496 ±(99.9%) 55312.104 B/op [Average]
[info]   (min, avg, max) = (101306.577, 108662.496, 134340.054), stdev = 14364.378
[info]   CI (99.9%): [53350.392, 163974.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6.842 ±(99.9%) 21.281 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.842, 12.804), stdev = 5.527
[info]   CI (99.9%): [≈ 0, 28.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 67.47% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572267.297 ops/s
[info] # Warmup Iteration   2: 876794.594 ops/s
[info] # Warmup Iteration   3: 881380.578 ops/s
[info] Iteration   1: 884192.538 ops/s
[info]                  ·gc.alloc.rate:                   2891.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3029.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5390.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.111 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 874323.812 ops/s
[info]                  ·gc.alloc.rate:                   2858.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4873.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.225 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 881532.728 ops/s
[info]                  ·gc.alloc.rate:                   2881.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5455.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.149 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 882627.664 ops/s
[info]                  ·gc.alloc.rate:                   2884.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4851.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.148 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 882132.060 ops/s
[info]                  ·gc.alloc.rate:                   2883.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4858.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.186 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   880961.761 ±(99.9%) 14785.059 ops/s [Average]
[info]   (min, avg, max) = (874323.812, 880961.761, 884192.538), stdev = 3839.633
[info]   CI (99.9%): [866176.702, 895746.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2879.798 ±(99.9%) 47.558 MB/sec [Average]
[info]   (min, avg, max) = (2858.741, 2879.798, 2891.171), stdev = 12.351
[info]   CI (99.9%): [2832.240, 2927.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.000, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2847.488 ±(99.9%) 687.324 MB/sec [Average]
[info]   (min, avg, max) = (2708.357, 2847.488, 3055.589), stdev = 178.496
[info]   CI (99.9%): [2160.164, 3534.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5085.833 ±(99.9%) 1188.712 B/op [Average]
[info]   (min, avg, max) = (4851.246, 5085.833, 5455.356), stdev = 308.705
[info]   CI (99.9%): [3897.121, 6274.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.164 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.164, 0.225), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 67.81% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 772777.378 ops/s
[info] # Warmup Iteration   2: 1622703.564 ops/s
[info] # Warmup Iteration   3: 1650562.361 ops/s
[info] Iteration   1: 1665544.607 ops/s
[info]                  ·gc.alloc.rate:                   1566.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1238.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1649576.056 ops/s
[info]                  ·gc.alloc.rate:                   1551.785 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1651.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1575.238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.159 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 1662300.012 ops/s
[info]                  ·gc.alloc.rate:                   1563.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1576.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1661635.328 ops/s
[info]                  ·gc.alloc.rate:                   1562.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1587.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.059 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1665331.361 ops/s
[info]                  ·gc.alloc.rate:                   1566.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1273.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1660877.473 ±(99.9%) 25245.901 ops/s [Average]
[info]   (min, avg, max) = (1649576.056, 1660877.473, 1665544.607), stdev = 6556.280
[info]   CI (99.9%): [1635631.571, 1686123.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1561.951 ±(99.9%) 22.744 MB/sec [Average]
[info]   (min, avg, max) = (1551.785, 1561.951, 1566.114), stdev = 5.907
[info]   CI (99.9%): [1539.207, 1584.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1530.085 ±(99.9%) 709.415 MB/sec [Average]
[info]   (min, avg, max) = (1310.888, 1530.085, 1675.775), stdev = 184.233
[info]   CI (99.9%): [820.670, 2239.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1450.143 ±(99.9%) 684.545 B/op [Average]
[info]   (min, avg, max) = (1238.808, 1450.143, 1587.216), stdev = 177.774
[info]   CI (99.9%): [765.598, 2134.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.091 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.059, 0.091, 0.159), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 68.15% complete, ETA 00:19:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6409563.711 ops/s
[info] # Warmup Iteration   2: 7137246.774 ops/s
[info] # Warmup Iteration   3: 7221535.750 ops/s
[info] Iteration   1: 7185930.186 ops/s
[info]                  ·gc.alloc.rate:                   2154.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     441.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7229644.679 ops/s
[info]                  ·gc.alloc.rate:                   2168.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7253906.302 ops/s
[info]                  ·gc.alloc.rate:                   2175.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     440.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7097388.118 ops/s
[info]                  ·gc.alloc.rate:                   2128.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7239128.143 ops/s
[info]                  ·gc.alloc.rate:                   2170.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     517.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   7201199.485 ±(99.9%) 243807.437 ops/s [Average]
[info]   (min, avg, max) = (7097388.118, 7201199.485, 7253906.302), stdev = 63316.017
[info]   CI (99.9%): [6957392.048, 7445006.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2159.683 ±(99.9%) 73.530 MB/sec [Average]
[info]   (min, avg, max) = (2128.362, 2159.683, 2175.398), stdev = 19.096
[info]   CI (99.9%): [2086.153, 2233.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2165.443 ±(99.9%) 723.848 MB/sec [Average]
[info]   (min, avg, max) = (2015.708, 2165.443, 2378.768), stdev = 187.981
[info]   CI (99.9%): [1441.595, 2889.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   473.149 ±(99.9%) 150.810 B/op [Average]
[info]   (min, avg, max) = (440.965, 473.149, 517.180), stdev = 39.165
[info]   CI (99.9%): [322.340, 623.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.020, 0.027), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 68.49% complete, ETA 00:19:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87122.201 ops/s
[info] # Warmup Iteration   2: 317744.592 ops/s
[info] # Warmup Iteration   3: 325630.764 ops/s
[info] Iteration   1: 328598.171 ops/s
[info]                  ·gc.alloc.rate:                   2003.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9453.961 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.499 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 327717.096 ops/s
[info]                  ·gc.alloc.rate:                   1997.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1994.523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9578.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.600 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 324956.767 ops/s
[info]                  ·gc.alloc.rate:                   1980.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9739.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 324436.068 ops/s
[info]                  ·gc.alloc.rate:                   1977.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9811.162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.101 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 328124.106 ops/s
[info]                  ·gc.alloc.rate:                   1999.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8112.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   326766.441 ±(99.9%) 7408.812 ops/s [Average]
[info]   (min, avg, max) = (324436.068, 326766.441, 328598.171), stdev = 1924.045
[info]   CI (99.9%): [319357.630, 334175.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1991.640 ±(99.9%) 45.621 MB/sec [Average]
[info]   (min, avg, max) = (1977.337, 1991.640, 2003.176), stdev = 11.848
[info]   CI (99.9%): [1946.020, 2037.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1938.739 ±(99.9%) 536.887 MB/sec [Average]
[info]   (min, avg, max) = (1691.436, 1938.739, 2022.515), stdev = 139.428
[info]   CI (99.9%): [1401.852, 2475.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9339.088 ±(99.9%) 2693.483 B/op [Average]
[info]   (min, avg, max) = (8112.792, 9339.088, 9811.162), stdev = 699.489
[info]   CI (99.9%): [6645.605, 12032.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.380 ±(99.9%) 0.737 B/op [Average]
[info]   (min, avg, max) = (0.101, 0.380, 0.600), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 1.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 68.84% complete, ETA 00:19:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619653.701 ops/s
[info] # Warmup Iteration   2: 1059632.708 ops/s
[info] # Warmup Iteration   3: 1075014.458 ops/s
[info] Iteration   1: 1076518.634 ops/s
[info]                  ·gc.alloc.rate:                   2479.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2678.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3915.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.183 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1064536.654 ops/s
[info]                  ·gc.alloc.rate:                   2452.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3489.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.246 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1059831.811 ops/s
[info]                  ·gc.alloc.rate:                   2440.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2370.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3519.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.155 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1065735.432 ops/s
[info]                  ·gc.alloc.rate:                   2453.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3509.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1068022.257 ops/s
[info]                  ·gc.alloc.rate:                   2459.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719.835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4007.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.215 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1066928.958 ±(99.9%) 23633.224 ops/s [Average]
[info]   (min, avg, max) = (1059831.811, 1066928.958, 1076518.634), stdev = 6137.473
[info]   CI (99.9%): [1043295.734, 1090562.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2457.152 ±(99.9%) 54.168 MB/sec [Average]
[info]   (min, avg, max) = (2440.801, 2457.152, 2479.097), stdev = 14.067
[info]   CI (99.9%): [2402.984, 2511.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3624.000, 3624.000, 3624.000), stdev = 0.001
[info]   CI (99.9%): [3624.000, 3624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2501.185 ±(99.9%) 698.179 MB/sec [Average]
[info]   (min, avg, max) = (2361.114, 2501.185, 2719.835), stdev = 181.315
[info]   CI (99.9%): [1803.006, 3199.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3688.117 ±(99.9%) 968.749 B/op [Average]
[info]   (min, avg, max) = (3489.459, 3688.117, 4007.092), stdev = 251.581
[info]   CI (99.9%): [2719.368, 4656.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.178, 0.246), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 69.18% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1477461.092 ops/s
[info] # Warmup Iteration   2: 3313176.809 ops/s
[info] # Warmup Iteration   3: 3345670.239 ops/s
[info] Iteration   1: 3355982.081 ops/s
[info]                  ·gc.alloc.rate:                   1944.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1975.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3360303.148 ops/s
[info]                  ·gc.alloc.rate:                   1947.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.078 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3335858.041 ops/s
[info]                  ·gc.alloc.rate:                   1933.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011.634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     949.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3307511.529 ops/s
[info]                  ·gc.alloc.rate:                   1916.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     962.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.030 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3367715.060 ops/s
[info]                  ·gc.alloc.rate:                   1951.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              912.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1691.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3345473.972 ±(99.9%) 93504.149 ops/s [Average]
[info]   (min, avg, max) = (3307511.529, 3345473.972, 3367715.060), stdev = 24282.731
[info]   CI (99.9%): [3251969.822, 3438978.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1938.599 ±(99.9%) 54.109 MB/sec [Average]
[info]   (min, avg, max) = (1916.564, 1938.599, 1951.455), stdev = 14.052
[info]   CI (99.9%): [1884.490, 1992.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   912.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (912.000, 912.000, 912.000), stdev = 0.001
[info]   CI (99.9%): [912.000, 912.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1939.389 ±(99.9%) 537.057 MB/sec [Average]
[info]   (min, avg, max) = (1691.999, 1939.389, 2023.080), stdev = 139.472
[info]   CI (99.9%): [1402.332, 2476.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   912.640 ±(99.9%) 267.809 B/op [Average]
[info]   (min, avg, max) = (790.745, 912.640, 962.686), stdev = 69.549
[info]   CI (99.9%): [644.830, 1180.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.047 ±(99.9%) 0.072 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.047, 0.078), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 69.52% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12205148.040 ops/s
[info] # Warmup Iteration   2: 14677193.688 ops/s
[info] # Warmup Iteration   3: 14938394.681 ops/s
[info] Iteration   1: 14741993.170 ops/s
[info]                  ·gc.alloc.rate:                   899.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14881732.768 ops/s
[info]                  ·gc.alloc.rate:                   907.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14870342.590 ops/s
[info]                  ·gc.alloc.rate:                   906.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 14967911.007 ops/s
[info]                  ·gc.alloc.rate:                   912.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15316141.858 ops/s
[info]                  ·gc.alloc.rate:                   934.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68.794 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   14955624.279 ±(99.9%) 835898.128 ops/s [Average]
[info]   (min, avg, max) = (14741993.170, 14955624.279, 15316141.858), stdev = 217080.089
[info]   CI (99.9%): [14119726.150, 15791522.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   912.338 ±(99.9%) 50.517 MB/sec [Average]
[info]   (min, avg, max) = (899.568, 912.338, 934.182), stdev = 13.119
[info]   CI (99.9%): [861.822, 962.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   866.479 ±(99.9%) 700.303 MB/sec [Average]
[info]   (min, avg, max) = (665.094, 866.479, 1001.561), stdev = 181.867
[info]   CI (99.9%): [166.175, 1566.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   91.254 ±(99.9%) 75.172 B/op [Average]
[info]   (min, avg, max) = (68.794, 91.254, 105.720), stdev = 19.522
[info]   CI (99.9%): [16.081, 166.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.009 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.009, 0.011), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 69.86% complete, ETA 00:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144333.353 ops/s
[info] # Warmup Iteration   2: 465480.155 ops/s
[info] # Warmup Iteration   3: 464474.897 ops/s
[info] Iteration   1: 465587.214 ops/s
[info]                  ·gc.alloc.rate:                   1675.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5539.538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 471014.647 ops/s
[info]                  ·gc.alloc.rate:                   1695.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5521.434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.417 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 471148.847 ops/s
[info]                  ·gc.alloc.rate:                   1695.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1666.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5566.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.278 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 467897.055 ops/s
[info]                  ·gc.alloc.rate:                   1684.495 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5642.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 463699.407 ops/s
[info]                  ·gc.alloc.rate:                   1668.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              5664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5720.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.353 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   467869.434 ±(99.9%) 12661.144 ops/s [Average]
[info]   (min, avg, max) = (463699.407, 467869.434, 471148.847), stdev = 3288.059
[info]   CI (99.9%): [455208.290, 480530.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1683.861 ±(99.9%) 45.664 MB/sec [Average]
[info]   (min, avg, max) = (1668.710, 1683.861, 1695.572), stdev = 11.859
[info]   CI (99.9%): [1638.197, 1729.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5664.001, 5664.001, 5664.001), stdev = 0.001
[info]   CI (99.9%): [5664.001, 5664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.155 ±(99.9%) 72.947 MB/sec [Average]
[info]   (min, avg, max) = (1638.661, 1664.155, 1685.394), stdev = 18.944
[info]   CI (99.9%): [1591.208, 1737.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5598.023 ±(99.9%) 317.875 B/op [Average]
[info]   (min, avg, max) = (5521.434, 5598.023, 5720.632), stdev = 82.551
[info]   CI (99.9%): [5280.148, 5915.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.294 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (0.210, 0.294, 0.417), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 70.21% complete, ETA 00:18:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1137331.429 ops/s
[info] # Warmup Iteration   2: 2031319.800 ops/s
[info] # Warmup Iteration   3: 2056758.387 ops/s
[info] Iteration   1: 2060676.008 ops/s
[info]                  ·gc.alloc.rate:                   1330.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     996.969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2028432.482 ops/s
[info]                  ·gc.alloc.rate:                   1310.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1313.655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1018.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2073834.242 ops/s
[info]                  ·gc.alloc.rate:                   1338.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1004.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1998231.426 ops/s
[info]                  ·gc.alloc.rate:                   1290.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1048.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2021959.589 ops/s
[info]                  ·gc.alloc.rate:                   1305.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1042.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2036626.749 ±(99.9%) 117416.811 ops/s [Average]
[info]   (min, avg, max) = (1998231.426, 2036626.749, 2073834.242), stdev = 30492.773
[info]   CI (99.9%): [1919209.938, 2154043.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1315.072 ±(99.9%) 75.069 MB/sec [Average]
[info]   (min, avg, max) = (1290.485, 1315.072, 1338.774), stdev = 19.495
[info]   CI (99.9%): [1240.003, 1390.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1322.726 ±(99.9%) 52.306 MB/sec [Average]
[info]   (min, avg, max) = (1305.579, 1322.726, 1339.231), stdev = 13.584
[info]   CI (99.9%): [1270.420, 1375.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1022.164 ±(99.9%) 87.976 B/op [Average]
[info]   (min, avg, max) = (996.969, 1022.164, 1048.823), stdev = 22.847
[info]   CI (99.9%): [934.188, 1110.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.061, 0.130), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 70.55% complete, ETA 00:18:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5945748.004 ops/s
[info] # Warmup Iteration   2: 5140233.731 ops/s
[info] # Warmup Iteration   3: 5323369.890 ops/s
[info] Iteration   1: 5353634.338 ops/s
[info]                  ·gc.alloc.rate:                   707.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5350705.025 ops/s
[info]                  ·gc.alloc.rate:                   707.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5347295.987 ops/s
[info]                  ·gc.alloc.rate:               706.662 MB/sec
[info]                  ·gc.alloc.rate.norm:          208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666.124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196.068 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5210999.763 ops/s
[info]                  ·gc.alloc.rate:                   688.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5349075.866 ops/s
[info]                  ·gc.alloc.rate:                   706.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667.491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     196.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5322342.196 ±(99.9%) 239841.078 ops/s [Average]
[info]   (min, avg, max) = (5210999.763, 5322342.196, 5353634.338), stdev = 62285.966
[info]   CI (99.9%): [5082501.118, 5562183.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   703.404 ±(99.9%) 31.738 MB/sec [Average]
[info]   (min, avg, max) = (688.670, 703.404, 707.472), stdev = 8.242
[info]   CI (99.9%): [671.665, 735.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   665.893 ±(99.9%) 4.226 MB/sec [Average]
[info]   (min, avg, max) = (664.764, 665.893, 667.491), stdev = 1.098
[info]   CI (99.9%): [661.666, 670.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   196.930 ±(99.9%) 9.295 B/op [Average]
[info]   (min, avg, max) = (195.444, 196.930, 201.192), stdev = 2.414
[info]   CI (99.9%): [187.635, 206.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.023 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.037), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 70.89% complete, ETA 00:18:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131466.252 ops/s
[info] # Warmup Iteration   2: 391785.004 ops/s
[info] # Warmup Iteration   3: 397688.481 ops/s
[info] Iteration   1: 399228.866 ops/s
[info]                  ·gc.alloc.rate:                   1873.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1971.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7770.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.574 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 401741.547 ops/s
[info]                  ·gc.alloc.rate:                   1885.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1992.037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7803.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.734 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 403400.358 ops/s
[info]                  ·gc.alloc.rate:                   1892.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1672.970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6527.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 402321.810 ops/s
[info]                  ·gc.alloc.rate:                   1887.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7900.899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.163 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 401847.614 ops/s
[info]                  ·gc.alloc.rate:                   1886.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7942.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   401708.039 ±(99.9%) 5905.298 ops/s [Average]
[info]   (min, avg, max) = (399228.866, 401708.039, 403400.358), stdev = 1533.587
[info]   CI (99.9%): [395802.741, 407613.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1884.980 ±(99.9%) 26.997 MB/sec [Average]
[info]   (min, avg, max) = (1873.541, 1884.980, 1892.573), stdev = 7.011
[info]   CI (99.9%): [1857.982, 1911.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1937.064 ±(99.9%) 575.155 MB/sec [Average]
[info]   (min, avg, max) = (1672.970, 1937.064, 2029.001), stdev = 149.366
[info]   CI (99.9%): [1361.909, 2512.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7588.974 ±(99.9%) 2301.419 B/op [Average]
[info]   (min, avg, max) = (6527.205, 7588.974, 7942.967), stdev = 597.671
[info]   CI (99.9%): [5287.555, 9890.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 0.822 B/op [Average]
[info]   (min, avg, max) = (0.163, 0.457, 0.734), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 1.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 71.23% complete, ETA 00:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1547582.882 ops/s
[info] # Warmup Iteration   2: 2573745.055 ops/s
[info] # Warmup Iteration   3: 2580177.157 ops/s
[info] Iteration   1: 2613533.997 ops/s
[info]                  ·gc.alloc.rate:                   1382.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2605945.874 ops/s
[info]                  ·gc.alloc.rate:                   1377.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1315.552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     794.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2602399.889 ops/s
[info]                  ·gc.alloc.rate:                   1376.414 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2616054.941 ops/s
[info]                  ·gc.alloc.rate:                   1382.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1668.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1003.742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2578998.226 ops/s
[info]                  ·gc.alloc.rate:                   1363.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818.763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.064 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2603386.586 ±(99.9%) 56650.707 ops/s [Average]
[info]   (min, avg, max) = (2578998.226, 2603386.586, 2616054.941), stdev = 14712.009
[info]   CI (99.9%): [2546735.879, 2660037.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1376.444 ±(99.9%) 30.186 MB/sec [Average]
[info]   (min, avg, max) = (1363.351, 1376.444, 1382.889), stdev = 7.839
[info]   CI (99.9%): [1346.258, 1406.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1391.989 ±(99.9%) 596.859 MB/sec [Average]
[info]   (min, avg, max) = (1308.109, 1391.989, 1668.347), stdev = 155.002
[info]   CI (99.9%): [795.130, 1988.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   841.252 ±(99.9%) 352.619 B/op [Average]
[info]   (min, avg, max) = (787.470, 841.252, 1003.742), stdev = 91.574
[info]   CI (99.9%): [488.633, 1193.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.050 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.050, 0.064), stdev = 0.013
[info]   CI (99.9%): [0.001, 0.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 71.58% complete, ETA 00:17:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5602218.439 ops/s
[info] # Warmup Iteration   2: 6332739.835 ops/s
[info] # Warmup Iteration   3: 6506498.651 ops/s
[info] Iteration   1: 6398950.682 ops/s
[info]                  ·gc.alloc.rate:                   975.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6509586.535 ops/s
[info]                  ·gc.alloc.rate:                   992.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6493722.490 ops/s
[info]                  ·gc.alloc.rate:                   990.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6381068.384 ops/s
[info]                  ·gc.alloc.rate:                   973.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     247.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6479826.851 ops/s
[info]                  ·gc.alloc.rate:                   988.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1004.554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6452630.988 ±(99.9%) 225146.154 ops/s [Average]
[info]   (min, avg, max) = (6381068.384, 6452630.988, 6509586.535), stdev = 58469.741
[info]   CI (99.9%): [6227484.835, 6677777.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   983.968 ±(99.9%) 34.378 MB/sec [Average]
[info]   (min, avg, max) = (973.027, 983.968, 992.658), stdev = 8.928
[info]   CI (99.9%): [949.590, 1018.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   999.381 ±(99.9%) 14.678 MB/sec [Average]
[info]   (min, avg, max) = (995.281, 999.381, 1004.554), stdev = 3.812
[info]   CI (99.9%): [984.703, 1014.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   243.776 ±(99.9%) 9.286 B/op [Average]
[info]   (min, avg, max) = (240.952, 243.776, 247.114), stdev = 2.412
[info]   CI (99.9%): [234.489, 253.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.020, 0.025), stdev = 0.003
[info]   CI (99.9%): [0.007, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 71.92% complete, ETA 00:17:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263769.866 ops/s
[info] # Warmup Iteration   2: 638026.026 ops/s
[info] # Warmup Iteration   3: 638222.300 ops/s
[info] Iteration   1: 645724.548 ops/s
[info]                  ·gc.alloc.rate:                   1910.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4812.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.152 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 639712.832 ops/s
[info]                  ·gc.alloc.rate:                   1892.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4908.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.307 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 650480.098 ops/s
[info]                  ·gc.alloc.rate:                   1924.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4052.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 650296.491 ops/s
[info]                  ·gc.alloc.rate:                   1923.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4893.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.252 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 644449.473 ops/s
[info]                  ·gc.alloc.rate:                   1906.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              4656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4955.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   646132.688 ±(99.9%) 17269.136 ops/s [Average]
[info]   (min, avg, max) = (639712.832, 646132.688, 650480.098), stdev = 4484.740
[info]   CI (99.9%): [628863.553, 663401.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1911.507 ±(99.9%) 50.853 MB/sec [Average]
[info]   (min, avg, max) = (1892.498, 1911.507, 1924.321), stdev = 13.206
[info]   CI (99.9%): [1860.654, 1962.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4656.001, 4656.001, 4656.001), stdev = 0.001
[info]   CI (99.9%): [4656.001, 4656.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.137 ±(99.9%) 574.879 MB/sec [Average]
[info]   (min, avg, max) = (1674.943, 1939.137, 2029.495), stdev = 149.294
[info]   CI (99.9%): [1364.259, 2514.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4724.477 ±(99.9%) 1459.709 B/op [Average]
[info]   (min, avg, max) = (4052.616, 4724.477, 4955.399), stdev = 379.082
[info]   CI (99.9%): [3264.768, 6184.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.213 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.213, 0.307), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 72.26% complete, ETA 00:17:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 450429.731 ops/s
[info] # Warmup Iteration   2: 797582.569 ops/s
[info] # Warmup Iteration   3: 813431.101 ops/s
[info] Iteration   1: 816557.172 ops/s
[info]                  ·gc.alloc.rate:                   2710.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685.747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5176.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 805424.191 ops/s
[info]                  ·gc.alloc.rate:                   2674.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5281.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.325 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 803730.702 ops/s
[info]                  ·gc.alloc.rate:                   2667.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713.504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5313.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.122 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 810710.206 ops/s
[info]                  ·gc.alloc.rate:                   2690.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4616.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.162 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 816324.070 ops/s
[info]                  ·gc.alloc.rate:                   2710.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              5224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723.066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5248.974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.281 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   810549.268 ±(99.9%) 22961.304 ops/s [Average]
[info]   (min, avg, max) = (803730.702, 810549.268, 816557.172), stdev = 5962.978
[info]   CI (99.9%): [787587.964, 833510.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2690.763 ±(99.9%) 75.435 MB/sec [Average]
[info]   (min, avg, max) = (2667.887, 2690.763, 2710.203), stdev = 19.590
[info]   CI (99.9%): [2615.328, 2766.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5224.001, 5224.001, 5224.001), stdev = 0.001
[info]   CI (99.9%): [5224.000, 5224.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2640.897 ±(99.9%) 567.879 MB/sec [Average]
[info]   (min, avg, max) = (2378.239, 2640.897, 2723.066), stdev = 147.476
[info]   CI (99.9%): [2073.018, 3208.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5127.450 ±(99.9%) 1116.087 B/op [Average]
[info]   (min, avg, max) = (4616.913, 5127.450, 5313.324), stdev = 289.844
[info]   CI (99.9%): [4011.363, 6243.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.218 ±(99.9%) 0.323 B/op [Average]
[info]   (min, avg, max) = (0.122, 0.218, 0.325), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 9.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 72.60% complete, ETA 00:17:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 312094.438 ops/s
[info] # Warmup Iteration   2: 982114.878 ops/s
[info] # Warmup Iteration   3: 1000722.898 ops/s
[info] Iteration   1: 1000745.566 ops/s
[info]                  ·gc.alloc.rate:                   1241.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1305.641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2053.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1002198.584 ops/s
[info]                  ·gc.alloc.rate:                   1242.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1545.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1001575.171 ops/s
[info]                  ·gc.alloc.rate:                   1242.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2074.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 975238.536 ops/s
[info]                  ·gc.alloc.rate:                   1209.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2144.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 987647.637 ops/s
[info]                  ·gc.alloc.rate:                   1225.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1596.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   993481.099 ±(99.9%) 45606.217 ops/s [Average]
[info]   (min, avg, max) = (975238.536, 993481.099, 1002198.584), stdev = 11843.790
[info]   CI (99.9%): [947874.882, 1039087.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1232.185 ±(99.9%) 56.420 MB/sec [Average]
[info]   (min, avg, max) = (1209.594, 1232.185, 1242.955), stdev = 14.652
[info]   CI (99.9%): [1175.765, 1288.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1188.046 ±(99.9%) 686.963 MB/sec [Average]
[info]   (min, avg, max) = (984.227, 1188.046, 1328.726), stdev = 178.402
[info]   CI (99.9%): [501.083, 1875.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1882.731 ±(99.9%) 1105.939 B/op [Average]
[info]   (min, avg, max) = (1545.680, 1882.731, 2144.251), stdev = 287.209
[info]   CI (99.9%): [776.793, 2988.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.105 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (0.067, 0.105, 0.131), stdev = 0.027
[info]   CI (99.9%): [0.003, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 72.95% complete, ETA 00:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7044308.714 ops/s
[info] # Warmup Iteration   2: 7632450.734 ops/s
[info] # Warmup Iteration   3: 7912803.139 ops/s
[info] Iteration   1: 7888766.567 ops/s
[info]                  ·gc.alloc.rate:               360.859 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.033 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 7868981.400 ops/s
[info]                  ·gc.alloc.rate:               360.028 MB/sec
[info]                  ·gc.alloc.rate.norm:          72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51.164 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 7850642.950 ops/s
[info]                  ·gc.alloc.rate:                   359.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 7892138.971 ops/s
[info]                  ·gc.alloc.rate:                   361.037 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 7859667.516 ops/s
[info]                  ·gc.alloc.rate:                   359.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.008 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7872039.481 ±(99.9%) 69525.555 ops/s [Average]
[info]   (min, avg, max) = (7850642.950, 7872039.481, 7892138.971), stdev = 18055.566
[info]   CI (99.9%): [7802513.926, 7941565.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   360.151 ±(99.9%) 3.043 MB/sec [Average]
[info]   (min, avg, max) = (359.178, 360.151, 361.037), stdev = 0.790
[info]   CI (99.9%): [357.108, 363.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   370.575 ±(99.9%) 662.144 MB/sec [Average]
[info]   (min, avg, max) = (255.772, 370.575, 669.752), stdev = 171.957
[info]   CI (99.9%): [≈ 0, 1032.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   74.108 ±(99.9%) 132.736 B/op [Average]
[info]   (min, avg, max) = (51.033, 74.108, 134.081), stdev = 34.471
[info]   CI (99.9%): [≈ 0, 206.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.316 ±(99.9%) 2.540 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.316, 1.495), stdev = 0.660
[info]   CI (99.9%): [≈ 0, 2.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.300), stdev = 0.132
[info]   CI (99.9%): [≈ 0, 0.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 73.29% complete, ETA 00:16:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42327.062 ops/s
[info] # Warmup Iteration   2: 260969.788 ops/s
[info] # Warmup Iteration   3: 266038.240 ops/s
[info] Iteration   1: 269602.675 ops/s
[info]                  ·gc.alloc.rate:                   1385.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              8088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1303.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7606.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.608 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 265074.054 ops/s
[info]                  ·gc.alloc.rate:                   1362.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              8088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7787.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.865 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 268907.821 ops/s
[info]                  ·gc.alloc.rate:                   1381.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              8088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9671.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 269471.366 ops/s
[info]                  ·gc.alloc.rate:                   1384.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              8088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7777.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 266969.000 ops/s
[info]                  ·gc.alloc.rate:                   1371.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              8088.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7893.745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   268004.983 ±(99.9%) 7501.747 ops/s [Average]
[info]   (min, avg, max) = (265074.054, 268004.983, 269602.675), stdev = 1948.180
[info]   CI (99.9%): [260503.237, 275506.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1377.272 ±(99.9%) 38.617 MB/sec [Average]
[info]   (min, avg, max) = (1362.174, 1377.272, 1385.525), stdev = 10.029
[info]   CI (99.9%): [1338.655, 1415.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8088.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8088.002, 8088.002, 8088.002), stdev = 0.001
[info]   CI (99.9%): [8088.001, 8088.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1387.537 ±(99.9%) 572.941 MB/sec [Average]
[info]   (min, avg, max) = (1303.025, 1387.537, 1652.425), stdev = 148.791
[info]   CI (99.9%): [814.596, 1960.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8147.315 ±(99.9%) 3303.768 B/op [Average]
[info]   (min, avg, max) = (7606.408, 8147.315, 9671.024), stdev = 857.978
[info]   CI (99.9%): [4843.548, 11451.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.612 ±(99.9%) 0.761 B/op [Average]
[info]   (min, avg, max) = (0.365, 0.612, 0.865), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 1.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 73.63% complete, ETA 00:16:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5355.134 ops/s
[info] # Warmup Iteration   2: 7780.495 ops/s
[info] # Warmup Iteration   3: 8080.971 ops/s
[info] Iteration   1: 8010.289 ops/s
[info]                  ·gc.alloc.rate:                   2061.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     392757.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.071 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.931 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7940.482 ops/s
[info]                  ·gc.alloc.rate:                   2043.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398860.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18.180 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7970.320 ops/s
[info]                  ·gc.alloc.rate:                   2051.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399413.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35.319 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8120.934 ops/s
[info]                  ·gc.alloc.rate:                   2089.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393328.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.130 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8129.962 ops/s
[info]                  ·gc.alloc.rate:                   2092.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              405000.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034.859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393925.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.785 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8034.397 ±(99.9%) 334.189 ops/s [Average]
[info]   (min, avg, max) = (7940.482, 8034.397, 8129.962), stdev = 86.788
[info]   CI (99.9%): [7700.209, 8368.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2067.522 ±(99.9%) 85.770 MB/sec [Average]
[info]   (min, avg, max) = (2043.431, 2067.522, 2092.067), stdev = 22.274
[info]   CI (99.9%): [1981.751, 2153.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   405000.055 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (405000.053, 405000.055, 405000.058), stdev = 0.002
[info]   CI (99.9%): [405000.046, 405000.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2019.720 ±(99.9%) 55.068 MB/sec [Average]
[info]   (min, avg, max) = (1998.967, 2019.720, 2034.859), stdev = 14.301
[info]   CI (99.9%): [1964.652, 2074.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   395657.203 ±(99.9%) 12357.661 B/op [Average]
[info]   (min, avg, max) = (392757.935, 395657.203, 399413.685), stdev = 3209.245
[info]   CI (99.9%): [383299.542, 408014.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.137 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (0.071, 0.137, 0.233), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26.869 ±(99.9%) 49.970 B/op [Average]
[info]   (min, avg, max) = (13.931, 26.869, 45.130), stdev = 12.977
[info]   CI (99.9%): [≈ 0, 76.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 73.97% complete, ETA 00:16:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7233.351 ops/s
[info] # Warmup Iteration   2: 13386.911 ops/s
[info] # Warmup Iteration   3: 13477.474 ops/s
[info] Iteration   1: 13377.952 ops/s
[info]                  ·gc.alloc.rate:                   360.752 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511.571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60182.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 13166.806 ops/s
[info]                  ·gc.alloc.rate:               355.147 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30575.836 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 13541.384 ops/s
[info]                  ·gc.alloc.rate:                   365.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              42440.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          323.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37626.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.545 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13485.340 ops/s
[info]                  ·gc.alloc.rate:               363.825 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37782.320 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 13281.804 ops/s
[info]                  ·gc.alloc.rate:               358.317 MB/sec
[info]                  ·gc.alloc.rate.norm:          42440.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      323.891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38362.537 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13370.657 ±(99.9%) 583.355 ops/s [Average]
[info]   (min, avg, max) = (13166.806, 13370.657, 13541.384), stdev = 151.496
[info]   CI (99.9%): [12787.302, 13954.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   360.641 ±(99.9%) 15.666 MB/sec [Average]
[info]   (min, avg, max) = (355.147, 360.641, 365.165), stdev = 4.068
[info]   CI (99.9%): [344.976, 376.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   42440.033 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (42440.032, 42440.033, 42440.035), stdev = 0.001
[info]   CI (99.9%): [42440.029, 42440.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   347.794 ±(99.9%) 370.317 MB/sec [Average]
[info]   (min, avg, max) = (255.865, 347.794, 511.571), stdev = 96.170
[info]   CI (99.9%): [≈ 0, 718.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   40905.924 ±(99.9%) 43278.760 B/op [Average]
[info]   (min, avg, max) = (30575.836, 40905.924, 60182.824), stdev = 11239.357
[info]   CI (99.9%): [≈ 0, 84184.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.530 ±(99.9%) 4.538 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.530, 2.638), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61.553 ±(99.9%) 527.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.553, 306.545), stdev = 136.956
[info]   CI (99.9%): [≈ 0, 588.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 6.000), stdev = 2.074
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 74.32% complete, ETA 00:15:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19440.212 ops/s
[info] # Warmup Iteration   2: 23501.240 ops/s
[info] # Warmup Iteration   3: 23124.562 ops/s
[info] Iteration   1: 23445.985 ops/s
[info]                  ·gc.alloc.rate:                   438.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17171.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.493 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23426.120 ops/s
[info]                  ·gc.alloc.rate:                   438.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22354.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.870 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23586.488 ops/s
[info]                  ·gc.alloc.rate:                   441.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44383.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23775.702 ops/s
[info]                  ·gc.alloc.rate:               445.047 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22003.340 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 23621.783 ops/s
[info]                  ·gc.alloc.rate:               442.077 MB/sec
[info]                  ·gc.alloc.rate.norm:          29448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22146.763 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   23571.215 ±(99.9%) 549.107 ops/s [Average]
[info]   (min, avg, max) = (23426.120, 23571.215, 23775.702), stdev = 142.601
[info]   CI (99.9%): [23022.109, 24120.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   441.084 ±(99.9%) 10.579 MB/sec [Average]
[info]   (min, avg, max) = (438.317, 441.084, 445.047), stdev = 2.747
[info]   CI (99.9%): [430.505, 451.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29448.020 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (29448.018, 29448.020, 29448.025), stdev = 0.003
[info]   CI (99.9%): [29448.009, 29448.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   383.731 ±(99.9%) 619.095 MB/sec [Average]
[info]   (min, avg, max) = (255.797, 383.731, 665.121), stdev = 160.777
[info]   CI (99.9%): [≈ 0, 1002.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25611.860 ±(99.9%) 41259.818 B/op [Average]
[info]   (min, avg, max) = (17171.444, 25611.860, 44383.346), stdev = 10715.044
[info]   CI (99.9%): [≈ 0, 66871.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.359 ±(99.9%) 2.846 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.680), stdev = 0.739
[info]   CI (99.9%): [≈ 0, 3.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   24.106 ±(99.9%) 191.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.106, 112.870), stdev = 49.658
[info]   CI (99.9%): [≈ 0, 215.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 74.66% complete, ETA 00:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 900.375 ops/s
[info] # Warmup Iteration   2: 2281.751 ops/s
[info] # Warmup Iteration   3: 2341.944 ops/s
[info] Iteration   1: 2327.591 ops/s
[info]                  ·gc.alloc.rate:                   1457.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              985535.268 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1639.060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108256.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14.076 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2365.794 ops/s
[info]                  ·gc.alloc.rate:                   1481.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.196 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     879793.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.844 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2367.880 ops/s
[info]                  ·gc.alloc.rate:               1482.890 MB/sec
[info]                  ·gc.alloc.rate.norm:          985528.182 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885690.408 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   4: 2362.250 ops/s
[info]                  ·gc.alloc.rate:                   1479.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116247.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.867 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2364.873 ops/s
[info]                  ·gc.alloc.rate:                   1481.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              985528.183 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     896120.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13.850 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2357.678 ±(99.9%) 65.230 ops/s [Average]
[info]   (min, avg, max) = (2327.591, 2357.678, 2367.880), stdev = 16.940
[info]   CI (99.9%): [2292.448, 2422.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1476.525 ±(99.9%) 41.111 MB/sec [Average]
[info]   (min, avg, max) = (1457.561, 1476.525, 1482.890), stdev = 10.676
[info]   CI (99.9%): [1435.414, 1517.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   985529.602 ±(99.9%) 12.196 B/op [Average]
[info]   (min, avg, max) = (985528.182, 985529.602, 985535.268), stdev = 3.167
[info]   CI (99.9%): [985517.407, 985541.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1463.357 ±(99.9%) 684.402 MB/sec [Average]
[info]   (min, avg, max) = (1322.587, 1463.357, 1675.567), stdev = 177.737
[info]   CI (99.9%): [778.955, 2147.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   977221.723 ±(99.9%) 475308.618 B/op [Average]
[info]   (min, avg, max) = (879793.805, 977221.723, 1116247.536), stdev = 123436.139
[info]   CI (99.9%): [501913.105, 1452530.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.017 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11.127 ±(99.9%) 23.955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.127, 14.076), stdev = 6.221
[info]   CI (99.9%): [≈ 0, 35.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 75.00% complete, ETA 00:15:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6126.692 ops/s
[info] # Warmup Iteration   2: 8407.389 ops/s
[info] # Warmup Iteration   3: 8583.049 ops/s
[info] Iteration   1: 8505.079 ops/s
[info]                  ·gc.alloc.rate:                   1957.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369226.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.556 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 8580.306 ops/s
[info]                  ·gc.alloc.rate:                   1975.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368687.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.609 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8480.059 ops/s
[info]                  ·gc.alloc.rate:                   1952.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     375136.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.043 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8425.430 ops/s
[info]                  ·gc.alloc.rate:                   1939.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              362272.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379077.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.302 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 8443.054 ops/s
[info]                  ·gc.alloc.rate:                   1944.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              362295.457 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1695.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315938.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43.763 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8486.785 ±(99.9%) 234.248 ops/s [Average]
[info]   (min, avg, max) = (8425.430, 8486.785, 8580.306), stdev = 60.833
[info]   CI (99.9%): [8252.538, 8721.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1953.665 ±(99.9%) 53.557 MB/sec [Average]
[info]   (min, avg, max) = (1939.364, 1953.665, 1975.030), stdev = 13.909
[info]   CI (99.9%): [1900.108, 2007.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   362276.733 ±(99.9%) 40.306 B/op [Average]
[info]   (min, avg, max) = (362272.051, 362276.733, 362295.457), stdev = 10.467
[info]   CI (99.9%): [362236.427, 362317.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1950.285 ±(99.9%) 551.083 MB/sec [Average]
[info]   (min, avg, max) = (1695.291, 1950.285, 2029.330), stdev = 143.115
[info]   CI (99.9%): [1399.201, 2501.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   361613.283 ±(99.9%) 99709.555 B/op [Average]
[info]   (min, avg, max) = (315938.618, 361613.283, 379077.582), stdev = 25894.255
[info]   CI (99.9%): [261903.729, 461322.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.153 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.153, 0.235), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28.455 ±(99.9%) 44.403 B/op [Average]
[info]   (min, avg, max) = (11.556, 28.455, 43.763), stdev = 11.531
[info]   CI (99.9%): [≈ 0, 72.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 75.34% complete, ETA 00:15:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25294.420 ops/s
[info] # Warmup Iteration   2: 42601.610 ops/s
[info] # Warmup Iteration   3: 43058.297 ops/s
[info] Iteration   1: 43276.977 ops/s
[info]                  ·gc.alloc.rate:                   627.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.768 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23596.170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99.120 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 42475.509 ops/s
[info]                  ·gc.alloc.rate:               615.794 MB/sec
[info]                  ·gc.alloc.rate.norm:          22807.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:      649.073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24040.511 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 43402.962 ops/s
[info]                  ·gc.alloc.rate:                   628.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.783 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23527.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 43170.875 ops/s
[info]                  ·gc.alloc.rate:                   625.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.853 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23726.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42874.293 ops/s
[info]                  ·gc.alloc.rate:                   621.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.886 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23940.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   43040.123 ±(99.9%) 1429.331 ops/s [Average]
[info]   (min, avg, max) = (42475.509, 43040.123, 43402.962), stdev = 371.193
[info]   CI (99.9%): [41610.792, 44469.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   623.816 ±(99.9%) 20.219 MB/sec [Average]
[info]   (min, avg, max) = (615.794, 623.816, 628.994), stdev = 5.251
[info]   CI (99.9%): [603.597, 644.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.842 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (22807.768, 22807.842, 22807.921), stdev = 0.066
[info]   CI (99.9%): [22807.590, 22808.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   649.986 ±(99.9%) 6.142 MB/sec [Average]
[info]   (min, avg, max) = (648.814, 649.986, 652.439), stdev = 1.595
[info]   CI (99.9%): [643.844, 656.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23766.085 ±(99.9%) 846.197 B/op [Average]
[info]   (min, avg, max) = (23527.137, 23766.085, 24040.511), stdev = 219.755
[info]   CI (99.9%): [22919.889, 24612.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.587 ±(99.9%) 4.606 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.725), stdev = 1.196
[info]   CI (99.9%): [≈ 0, 5.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21.343 ±(99.9%) 167.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.343, 99.120), stdev = 43.497
[info]   CI (99.9%): [≈ 0, 188.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 75.68% complete, ETA 00:15:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56288.765 ops/s
[info] # Warmup Iteration   2: 65223.874 ops/s
[info] # Warmup Iteration   3: 65359.735 ops/s
[info] Iteration   1: 65877.492 ops/s
[info]                  ·gc.alloc.rate:                   496.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14036.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 66652.926 ops/s
[info]                  ·gc.alloc.rate:                   502.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7833.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.983 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 65460.115 ops/s
[info]                  ·gc.alloc.rate:                   493.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15919.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 65818.185 ops/s
[info]                  ·gc.alloc.rate:                   495.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7916.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.498 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 64782.346 ops/s
[info]                  ·gc.alloc.rate:                   488.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              11856.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16094.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   65718.213 ±(99.9%) 2619.793 ops/s [Average]
[info]   (min, avg, max) = (64782.346, 65718.213, 66652.926), stdev = 680.352
[info]   CI (99.9%): [63098.420, 68338.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   495.140 ±(99.9%) 19.715 MB/sec [Average]
[info]   (min, avg, max) = (488.008, 495.140, 502.114), stdev = 5.120
[info]   CI (99.9%): [475.424, 514.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11856.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11856.006, 11856.007, 11856.007), stdev = 0.001
[info]   CI (99.9%): [11856.006, 11856.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.074 ±(99.9%) 656.106 MB/sec [Average]
[info]   (min, avg, max) = (331.157, 515.074, 662.489), stdev = 170.389
[info]   CI (99.9%): [≈ 0, 1171.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12360.108 ±(99.9%) 16069.988 B/op [Average]
[info]   (min, avg, max) = (7833.059, 12360.108, 16094.964), stdev = 4173.325
[info]   CI (99.9%): [≈ 0, 28430.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.415 ±(99.9%) 3.217 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.415, 1.909), stdev = 0.835
[info]   CI (99.9%): [≈ 0, 3.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9.921 ±(99.9%) 76.830 B/op [Average]
[info]   (min, avg, max) = (0.498, 9.921, 45.608), stdev = 19.953
[info]   CI (99.9%): [≈ 0, 86.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 76.03% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70685.479 ops/s
[info] # Warmup Iteration   2: 78996.157 ops/s
[info] # Warmup Iteration   3: 79331.522 ops/s
[info] Iteration   1: 79352.761 ops/s
[info]                  ·gc.alloc.rate:      1.210 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 79144.912 ops/s
[info]                  ·gc.alloc.rate:      1.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 79070.497 ops/s
[info]                  ·gc.alloc.rate:      1.206 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 79103.586 ops/s
[info]                  ·gc.alloc.rate:      1.207 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 79179.258 ops/s
[info]                  ·gc.alloc.rate:      1.208 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   79170.203 ±(99.9%) 423.695 ops/s [Average]
[info]   (min, avg, max) = (79070.497, 79170.203, 79352.761), stdev = 110.032
[info]   CI (99.9%): [78746.508, 79593.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.208 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (1.206, 1.208, 1.210), stdev = 0.002
[info]   CI (99.9%): [1.201, 1.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.005), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 76.37% complete, ETA 00:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2800.551 ops/s
[info] # Warmup Iteration   2: 5826.147 ops/s
[info] # Warmup Iteration   3: 6019.883 ops/s
[info] Iteration   1: 6001.288 ops/s
[info]                  ·gc.alloc.rate:                   1792.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              470024.546 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1968.819 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516165.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.293 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5980.136 ops/s
[info]                  ·gc.alloc.rate:                   1786.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              470024.185 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1655.588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435679.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27.389 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5968.042 ops/s
[info]                  ·gc.alloc.rate:                   1782.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.819 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2003.712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528416.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.959 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5945.474 ops/s
[info]                  ·gc.alloc.rate:                   1775.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.909 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444943.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5953.793 ops/s
[info]                  ·gc.alloc.rate:                   1778.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              470023.665 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446107.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.508 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5969.747 ±(99.9%) 85.006 ops/s [Average]
[info]   (min, avg, max) = (5945.474, 5969.747, 6001.288), stdev = 22.076
[info]   CI (99.9%): [5884.740, 6054.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1783.143 ±(99.9%) 25.646 MB/sec [Average]
[info]   (min, avg, max) = (1775.692, 1783.143, 1792.822), stdev = 6.660
[info]   CI (99.9%): [1757.497, 1808.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   470024.025 ±(99.9%) 1.337 B/op [Average]
[info]   (min, avg, max) = (470023.665, 470024.025, 470024.546), stdev = 0.347
[info]   CI (99.9%): [470022.687, 470025.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1799.472 ±(99.9%) 659.979 MB/sec [Average]
[info]   (min, avg, max) = (1655.588, 1799.472, 2003.712), stdev = 171.394
[info]   CI (99.9%): [1139.493, 2459.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   474262.488 ±(99.9%) 170360.477 B/op [Average]
[info]   (min, avg, max) = (435679.647, 474262.488, 528416.252), stdev = 44242.075
[info]   CI (99.9%): [303902.011, 644622.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   23.038 ±(99.9%) 17.417 B/op [Average]
[info]   (min, avg, max) = (16.508, 23.038, 27.389), stdev = 4.523
[info]   CI (99.9%): [5.620, 40.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 76.71% complete, ETA 00:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4712858.201 ops/s
[info] # Warmup Iteration   2: 5122589.643 ops/s
[info] # Warmup Iteration   3: 5238122.126 ops/s
[info] Iteration   1: 5229212.004 ops/s
[info]                  ·gc.alloc.rate:                   1568.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     401.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5192334.797 ops/s
[info]                  ·gc.alloc.rate:                   1557.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5241153.540 ops/s
[info]                  ·gc.alloc.rate:                   1571.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     505.293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5171168.674 ops/s
[info]                  ·gc.alloc.rate:                   1550.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     411.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5242243.082 ops/s
[info]                  ·gc.alloc.rate:                   1572.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     508.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5215222.419 ±(99.9%) 122720.564 ops/s [Average]
[info]   (min, avg, max) = (5171168.674, 5215222.419, 5242243.082), stdev = 31870.141
[info]   CI (99.9%): [5092501.855, 5337942.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1564.029 ±(99.9%) 36.824 MB/sec [Average]
[info]   (min, avg, max) = (1550.821, 1564.029, 1572.151), stdev = 9.563
[info]   CI (99.9%): [1527.205, 1600.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.326 ±(99.9%) 719.760 MB/sec [Average]
[info]   (min, avg, max) = (1334.904, 1547.326, 1692.396), stdev = 186.919
[info]   CI (99.9%): [827.566, 2267.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   466.855 ±(99.9%) 212.833 B/op [Average]
[info]   (min, avg, max) = (401.788, 466.855, 508.101), stdev = 55.272
[info]   CI (99.9%): [254.021, 679.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.025 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.025, 0.038), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 77.05% complete, ETA 00:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129985.800 ops/s
[info] # Warmup Iteration   2: 350517.984 ops/s
[info] # Warmup Iteration   3: 359244.732 ops/s
[info] Iteration   1: 360783.074 ops/s
[info]                  ·gc.alloc.rate:                   1945.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8613.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.545 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 359802.179 ops/s
[info]                  ·gc.alloc.rate:                   1940.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8727.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.546 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 355723.868 ops/s
[info]                  ·gc.alloc.rate:                   1918.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7411.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 361041.183 ops/s
[info]                  ·gc.alloc.rate:                   1947.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8813.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 359517.530 ops/s
[info]                  ·gc.alloc.rate:                   1939.595 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8882.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.365 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   359373.567 ±(99.9%) 8234.526 ops/s [Average]
[info]   (min, avg, max) = (355723.868, 359373.567, 361041.183), stdev = 2138.480
[info]   CI (99.9%): [351139.041, 367608.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1938.442 ±(99.9%) 44.846 MB/sec [Average]
[info]   (min, avg, max) = (1918.423, 1938.442, 1947.236), stdev = 11.646
[info]   CI (99.9%): [1893.596, 1983.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.420 ±(99.9%) 575.324 MB/sec [Average]
[info]   (min, avg, max) = (1675.010, 1939.420, 2029.799), stdev = 149.410
[info]   CI (99.9%): [1364.095, 2514.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8489.555 ±(99.9%) 2353.704 B/op [Average]
[info]   (min, avg, max) = (7411.030, 8489.555, 8882.753), stdev = 611.249
[info]   CI (99.9%): [6135.851, 10843.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.383 ±(99.9%) 0.625 B/op [Average]
[info]   (min, avg, max) = (0.181, 0.383, 0.546), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 1.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 77.40% complete, ETA 00:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2880972.017 ops/s
[info] # Warmup Iteration   2: 3242979.578 ops/s
[info] # Warmup Iteration   3: 3313308.097 ops/s
[info] Iteration   1: 3277162.986 ops/s
[info]                  ·gc.alloc.rate:                   483.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282.328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.861 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3340817.697 ops/s
[info]                  ·gc.alloc.rate:               492.687 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.441 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   3: 3333367.335 ops/s
[info]                  ·gc.alloc.rate:                   491.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3329189.131 ops/s
[info]                  ·gc.alloc.rate:               490.757 MB/sec
[info]                  ·gc.alloc.rate.norm:          232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 156.828 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   5: 3336967.950 ops/s
[info]                  ·gc.alloc.rate:                   491.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              232.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     312.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3323501.020 ±(99.9%) 101114.010 ops/s [Average]
[info]   (min, avg, max) = (3277162.986, 3323501.020, 3340817.697), stdev = 26258.987
[info]   CI (99.9%): [3222387.010, 3424615.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   489.954 ±(99.9%) 15.085 MB/sec [Average]
[info]   (min, avg, max) = (483.061, 489.954, 492.687), stdev = 3.917
[info]   CI (99.9%): [474.869, 505.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   232.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (232.000, 232.000, 232.000), stdev = 0.001
[info]   CI (99.9%): [232.000, 232.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.757 ±(99.9%) 656.838 MB/sec [Average]
[info]   (min, avg, max) = (331.744, 515.757, 663.496), stdev = 170.579
[info]   CI (99.9%): [≈ 0, 1172.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   244.358 ±(99.9%) 312.132 B/op [Average]
[info]   (min, avg, max) = (156.441, 244.358, 313.265), stdev = 81.060
[info]   CI (99.9%): [≈ 0, 556.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.396 ±(99.9%) 3.011 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.396, 1.792), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.190 ±(99.9%) 1.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.190, 0.861), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 77.74% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100518.114 ops/s
[info] # Warmup Iteration   2: 332434.073 ops/s
[info] # Warmup Iteration   3: 346377.256 ops/s
[info] Iteration   1: 346121.455 ops/s
[info]                  ·gc.alloc.rate:                   1356.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7419.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 347494.270 ops/s
[info]                  ·gc.alloc.rate:                   1361.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1314.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5952.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 347253.853 ops/s
[info]                  ·gc.alloc.rate:                   1360.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5996.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.189 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 344095.624 ops/s
[info]                  ·gc.alloc.rate:                   1349.042 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6090.739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.286 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 344739.570 ops/s
[info]                  ·gc.alloc.rate:                   1351.098 MB/sec
[info]                  ·gc.alloc.rate.norm:              6168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339.347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6114.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   345940.954 ±(99.9%) 5781.624 ops/s [Average]
[info]   (min, avg, max) = (344095.624, 345940.954, 347494.270), stdev = 1501.469
[info]   CI (99.9%): [340159.331, 351722.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1355.984 ±(99.9%) 22.170 MB/sec [Average]
[info]   (min, avg, max) = (1349.042, 1355.984, 1361.926), stdev = 5.757
[info]   CI (99.9%): [1333.814, 1378.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6168.001, 6168.001, 6168.001), stdev = 0.001
[info]   CI (99.9%): [6168.001, 6168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1388.249 ±(99.9%) 526.670 MB/sec [Average]
[info]   (min, avg, max) = (1314.430, 1388.249, 1632.342), stdev = 136.775
[info]   CI (99.9%): [861.579, 1914.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6314.787 ±(99.9%) 2392.424 B/op [Average]
[info]   (min, avg, max) = (5952.898, 6314.787, 7419.856), stdev = 621.305
[info]   CI (99.9%): [3922.363, 8707.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 0.607 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.322, 0.566), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 78.08% complete, ETA 00:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 451827.486 ops/s
[info] # Warmup Iteration   2: 644258.525 ops/s
[info] # Warmup Iteration   3: 644849.510 ops/s
[info] Iteration   1: 646753.844 ops/s
[info]                  ·gc.alloc.rate:                   2357.160 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2344.549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5705.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 649136.819 ops/s
[info]                  ·gc.alloc.rate:                   2366.782 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2360.140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5719.902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.555 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 650636.652 ops/s
[info]                  ·gc.alloc.rate:                   2371.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2369.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5731.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.201 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 649240.431 ops/s
[info]                  ·gc.alloc.rate:                   2366.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2376.090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5760.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 650815.268 ops/s
[info]                  ·gc.alloc.rate:                   2372.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              5736.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5752.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.151 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   649316.603 ±(99.9%) 6266.734 ops/s [Average]
[info]   (min, avg, max) = (646753.844, 649316.603, 650815.268), stdev = 1627.451
[info]   CI (99.9%): [643049.869, 655583.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2366.740 ±(99.9%) 23.116 MB/sec [Average]
[info]   (min, avg, max) = (2357.160, 2366.740, 2372.293), stdev = 6.003
[info]   CI (99.9%): [2343.624, 2389.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5736.001, 5736.001, 5736.001), stdev = 0.001
[info]   CI (99.9%): [5736.001, 5736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2365.893 ±(99.9%) 53.850 MB/sec [Average]
[info]   (min, avg, max) = (2344.549, 2365.893, 2379.180), stdev = 13.985
[info]   CI (99.9%): [2312.043, 2419.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5733.920 ±(99.9%) 87.389 B/op [Average]
[info]   (min, avg, max) = (5705.311, 5733.920, 5760.164), stdev = 22.695
[info]   CI (99.9%): [5646.531, 5821.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.257 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.229), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 0.624 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.273, 0.555), stdev = 0.162
[info]   CI (99.9%): [≈ 0, 0.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 78.42% complete, ETA 00:13:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272946.647 ops/s
[info] # Warmup Iteration   2: 625946.005 ops/s
[info] # Warmup Iteration   3: 634535.754 ops/s
[info] Iteration   1: 639271.331 ops/s
[info]                  ·gc.alloc.rate:                   744.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2392.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6.755 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 640828.071 ops/s
[info]                  ·gc.alloc.rate:                   745.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          647.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 642442.820 ops/s
[info]                  ·gc.alloc.rate:                   747.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1589.498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 639311.273 ops/s
[info]                  ·gc.alloc.rate:                   744.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          976.919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2404.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 640421.132 ops/s
[info]                  ·gc.alloc.rate:                   745.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.829 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   640454.925 ±(99.9%) 5020.972 ops/s [Average]
[info]   (min, avg, max) = (639271.331, 640454.925, 642442.820), stdev = 1303.930
[info]   CI (99.9%): [635433.953, 645475.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   745.497 ±(99.9%) 5.855 MB/sec [Average]
[info]   (min, avg, max) = (744.083, 745.497, 747.798), stdev = 1.521
[info]   CI (99.9%): [739.642, 751.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   780.053 ±(99.9%) 683.181 MB/sec [Average]
[info]   (min, avg, max) = (647.874, 780.053, 976.919), stdev = 177.420
[info]   CI (99.9%): [96.872, 1463.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1917.511 ±(99.9%) 1692.300 B/op [Average]
[info]   (min, avg, max) = (1589.498, 1917.511, 2404.953), stdev = 439.485
[info]   CI (99.9%): [225.211, 3609.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.599 ±(99.9%) 4.619 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.599, 2.744), stdev = 1.200
[info]   CI (99.9%): [≈ 0, 5.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.474 ±(99.9%) 11.374 B/op [Average]
[info]   (min, avg, max) = (0.051, 1.474, 6.755), stdev = 2.954
[info]   CI (99.9%): [≈ 0, 12.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 5.000), stdev = 1.483
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 78.77% complete, ETA 00:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3297529.183 ops/s
[info] # Warmup Iteration   2: 3704305.936 ops/s
[info] # Warmup Iteration   3: 3750714.555 ops/s
[info] Iteration   1: 3735285.223 ops/s
[info]                  ·gc.alloc.rate:                   1480.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1334.308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     562.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3760394.200 ops/s
[info]                  ·gc.alloc.rate:                   1490.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3801150.471 ops/s
[info]                  ·gc.alloc.rate:                   1507.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     557.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 3748715.599 ops/s
[info]                  ·gc.alloc.rate:                   1486.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     707.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3755105.660 ops/s
[info]                  ·gc.alloc.rate:                   1488.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353.027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     567.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.035 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3760130.231 ±(99.9%) 95406.345 ops/s [Average]
[info]   (min, avg, max) = (3735285.223, 3760130.231, 3801150.471), stdev = 24776.725
[info]   CI (99.9%): [3664723.886, 3855536.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1490.818 ±(99.9%) 37.832 MB/sec [Average]
[info]   (min, avg, max) = (1480.939, 1490.818, 1507.065), stdev = 9.825
[info]   CI (99.9%): [1452.986, 1528.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1478.752 ±(99.9%) 709.996 MB/sec [Average]
[info]   (min, avg, max) = (1334.308, 1478.752, 1686.311), stdev = 184.384
[info]   CI (99.9%): [768.756, 2188.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   619.049 ±(99.9%) 300.711 B/op [Average]
[info]   (min, avg, max) = (557.029, 619.049, 707.987), stdev = 78.094
[info]   CI (99.9%): [318.338, 919.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.031, 0.035), stdev = 0.005
[info]   CI (99.9%): [0.013, 0.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 79.11% complete, ETA 00:12:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62863.763 ops/s
[info] # Warmup Iteration   2: 233404.053 ops/s
[info] # Warmup Iteration   3: 238403.902 ops/s
[info] Iteration   1: 235582.371 ops/s
[info]                  ·gc.alloc.rate:                   1643.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1964.092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13119.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.834 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 236771.942 ops/s
[info]                  ·gc.alloc.rate:                   1651.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1652.429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10983.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 236280.440 ops/s
[info]                  ·gc.alloc.rate:                   1647.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8869.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 237606.965 ops/s
[info]                  ·gc.alloc.rate:                   1657.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11090.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 238054.330 ops/s
[info]                  ·gc.alloc.rate:                   1660.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              10976.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11131.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.551 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   236859.210 ±(99.9%) 3831.516 ops/s [Average]
[info]   (min, avg, max) = (235582.371, 236859.210, 238054.330), stdev = 995.033
[info]   CI (99.9%): [233027.694, 240690.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1651.894 ±(99.9%) 26.338 MB/sec [Average]
[info]   (min, avg, max) = (1643.251, 1651.894, 1660.172), stdev = 6.840
[info]   CI (99.9%): [1625.556, 1678.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10976.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10976.002, 10976.002, 10976.002), stdev = 0.001
[info]   CI (99.9%): [10976.002, 10976.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1661.230 ±(99.9%) 863.470 MB/sec [Average]
[info]   (min, avg, max) = (1331.600, 1661.230, 1964.092), stdev = 224.241
[info]   CI (99.9%): [797.759, 2524.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11038.996 ±(99.9%) 5790.570 B/op [Average]
[info]   (min, avg, max) = (8869.955, 11038.996, 13119.040), stdev = 1503.793
[info]   CI (99.9%): [5248.426, 16829.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.581 ±(99.9%) 0.793 B/op [Average]
[info]   (min, avg, max) = (0.277, 0.581, 0.834), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 79.45% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 616448.629 ops/s
[info] # Warmup Iteration   2: 896761.588 ops/s
[info] # Warmup Iteration   3: 894115.056 ops/s
[info] Iteration   1: 906236.100 ops/s
[info]                  ·gc.alloc.rate:                   2183.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2004.194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3480.622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.253 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 889964.231 ops/s
[info]                  ·gc.alloc.rate:                   2144.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016.407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3566.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 899608.243 ops/s
[info]                  ·gc.alloc.rate:                   2167.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4136.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 902788.418 ops/s
[info]                  ·gc.alloc.rate:                   2175.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033.430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3544.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.109 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 908478.445 ops/s
[info]                  ·gc.alloc.rate:                   2189.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              3792.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4118.738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   901415.087 ±(99.9%) 27861.081 ops/s [Average]
[info]   (min, avg, max) = (889964.231, 901415.087, 908478.445), stdev = 7235.434
[info]   CI (99.9%): [873554.007, 929276.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   2172.124 ±(99.9%) 68.339 MB/sec [Average]
[info]   (min, avg, max) = (2144.144, 2172.124, 2189.849), stdev = 17.747
[info]   CI (99.9%): [2103.786, 2240.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3792.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3792.000, 3792.000, 3792.001), stdev = 0.001
[info]   CI (99.9%): [3792.000, 3792.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2159.364 ±(99.9%) 746.640 MB/sec [Average]
[info]   (min, avg, max) = (2004.194, 2159.364, 2378.537), stdev = 193.900
[info]   CI (99.9%): [1412.723, 2906.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3769.160 ±(99.9%) 1265.513 B/op [Average]
[info]   (min, avg, max) = (3480.622, 3769.160, 4136.199), stdev = 328.650
[info]   CI (99.9%): [2503.647, 5034.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.174 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.109, 0.174, 0.253), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 79.79% complete, ETA 00:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 693725.196 ops/s
[info] # Warmup Iteration   2: 1505789.246 ops/s
[info] # Warmup Iteration   3: 1554277.742 ops/s
[info] Iteration   1: 1563722.141 ops/s
[info]                  ·gc.alloc.rate:                   1025.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     980.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.063 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1559717.755 ops/s
[info]                  ·gc.alloc.rate:                   1022.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     986.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1567175.387 ops/s
[info]                  ·gc.alloc.rate:                   1027.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1554598.720 ops/s
[info]                  ·gc.alloc.rate:                   1019.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1574047.836 ops/s
[info]                  ·gc.alloc.rate:                   1032.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     992.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.042 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1563852.368 ±(99.9%) 28409.560 ops/s [Average]
[info]   (min, avg, max) = (1554598.720, 1563852.368, 1574047.836), stdev = 7377.873
[info]   CI (99.9%): [1535442.807, 1592261.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.428 ±(99.9%) 18.638 MB/sec [Average]
[info]   (min, avg, max) = (1019.381, 1025.428, 1032.118), stdev = 4.840
[info]   CI (99.9%): [1006.789, 1044.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   982.545 ±(99.9%) 29.696 MB/sec [Average]
[info]   (min, avg, max) = (973.853, 982.545, 992.890), stdev = 7.712
[info]   CI (99.9%): [952.848, 1012.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   988.850 ±(99.9%) 29.144 B/op [Average]
[info]   (min, avg, max) = (980.197, 988.850, 999.775), stdev = 7.569
[info]   CI (99.9%): [959.706, 1017.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.075 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.126), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.14% complete, ETA 00:12:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6028632.472 ops/s
[info] # Warmup Iteration   2: 6442455.003 ops/s
[info] # Warmup Iteration   3: 6523066.332 ops/s
[info] Iteration   1: 6595044.052 ops/s
[info]                  ·gc.alloc.rate:                   737.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 6814305.987 ops/s
[info]                  ·gc.alloc.rate:                   762.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6812952.457 ops/s
[info]                  ·gc.alloc.rate:                   761.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     153.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6617558.107 ops/s
[info]                  ·gc.alloc.rate:                   740.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6812521.976 ops/s
[info]                  ·gc.alloc.rate:                   761.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   6730476.516 ±(99.9%) 437576.330 ops/s [Average]
[info]   (min, avg, max) = (6595044.052, 6730476.516, 6814305.987), stdev = 113637.183
[info]   CI (99.9%): [6292900.186, 7168052.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   752.732 ±(99.9%) 48.619 MB/sec [Average]
[info]   (min, avg, max) = (737.623, 752.732, 762.013), stdev = 12.626
[info]   CI (99.9%): [704.113, 801.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   731.163 ±(99.9%) 574.951 MB/sec [Average]
[info]   (min, avg, max) = (663.509, 731.163, 998.250), stdev = 149.313
[info]   CI (99.9%): [156.212, 1306.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   171.254 ±(99.9%) 142.488 B/op [Average]
[info]   (min, avg, max) = (153.249, 171.254, 237.341), stdev = 37.004
[info]   CI (99.9%): [28.766, 313.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.017 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.017, 0.029), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 80.48% complete, ETA 00:12:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190519.460 ops/s
[info] # Warmup Iteration   2: 504012.452 ops/s
[info] # Warmup Iteration   3: 510685.050 ops/s
[info] Iteration   1: 514489.727 ops/s
[info]                  ·gc.alloc.rate:                   1791.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1641.722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5022.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 512224.578 ops/s
[info]                  ·gc.alloc.rate:                   1783.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1988.078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6108.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.448 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 514781.465 ops/s
[info]                  ·gc.alloc.rate:                   1792.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5107.872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 512377.737 ops/s
[info]                  ·gc.alloc.rate:                   1784.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1681.423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5164.462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.192 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 509877.382 ops/s
[info]                  ·gc.alloc.rate:                   1775.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              5480.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025.743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6253.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.450 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   512750.178 ±(99.9%) 7657.865 ops/s [Average]
[info]   (min, avg, max) = (509877.382, 512750.178, 514781.465), stdev = 1988.723
[info]   CI (99.9%): [505092.312, 520408.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1785.339 ±(99.9%) 26.620 MB/sec [Average]
[info]   (min, avg, max) = (1775.315, 1785.339, 1792.345), stdev = 6.913
[info]   CI (99.9%): [1758.720, 1811.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5480.001, 5480.001, 5480.001), stdev = 0.001
[info]   CI (99.9%): [5480.001, 5480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1801.520 ±(99.9%) 725.950 MB/sec [Average]
[info]   (min, avg, max) = (1641.722, 1801.520, 2025.743), stdev = 188.527
[info]   CI (99.9%): [1075.569, 2527.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5531.226 ±(99.9%) 2300.200 B/op [Average]
[info]   (min, avg, max) = (5022.127, 5531.226, 6253.017), stdev = 597.355
[info]   CI (99.9%): [3231.025, 7831.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.320 ±(99.9%) 0.496 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.320, 0.450), stdev = 0.129
[info]   CI (99.9%): [≈ 0, 0.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 80.82% complete, ETA 00:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407084.462 ops/s
[info] # Warmup Iteration   2: 636271.028 ops/s
[info] # Warmup Iteration   3: 637558.854 ops/s
[info] Iteration   1: 635342.509 ops/s
[info]                  ·gc.alloc.rate:                   2258.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2342.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5800.495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.206 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 645400.359 ops/s
[info]                  ·gc.alloc.rate:                   2293.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2357.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5749.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.406 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 645049.528 ops/s
[info]                  ·gc.alloc.rate:                   2292.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030.328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4951.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 628188.625 ops/s
[info]                  ·gc.alloc.rate:                   2232.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2375.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5949.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.313 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 641832.468 ops/s
[info]                  ·gc.alloc.rate:                   2280.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              5592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2378.148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5831.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.357 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   639162.698 ±(99.9%) 28277.663 ops/s [Average]
[info]   (min, avg, max) = (628188.625, 639162.698, 645400.359), stdev = 7343.619
[info]   CI (99.9%): [610885.035, 667440.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2271.454 ±(99.9%) 99.937 MB/sec [Average]
[info]   (min, avg, max) = (2232.687, 2271.454, 2293.198), stdev = 25.953
[info]   CI (99.9%): [2171.518, 2371.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5592.001, 5592.001, 5592.001), stdev = 0.001
[info]   CI (99.9%): [5592.001, 5592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2296.733 ±(99.9%) 576.163 MB/sec [Average]
[info]   (min, avg, max) = (2030.328, 2296.733, 2378.148), stdev = 149.628
[info]   CI (99.9%): [1720.570, 2872.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5656.415 ±(99.9%) 1543.088 B/op [Average]
[info]   (min, avg, max) = (4951.710, 5656.415, 5949.189), stdev = 400.735
[info]   CI (99.9%): [4113.327, 7199.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.121 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.167), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.297 ±(99.9%) 0.349 B/op [Average]
[info]   (min, avg, max) = (0.203, 0.297, 0.406), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.16% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4690796.159 ops/s
[info] # Warmup Iteration   2: 5072537.538 ops/s
[info] # Warmup Iteration   3: 5157195.222 ops/s
[info] Iteration   1: 5061979.201 ops/s
[info]                  ·gc.alloc.rate:               1260.684 MB/sec
[info]                  ·gc.alloc.rate.norm:          392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332.185 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 414.233 B/op
[info]                  ·gc.count:                    4.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 5148517.183 ops/s
[info]                  ·gc.alloc.rate:                   1282.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5073434.890 ops/s
[info]                  ·gc.alloc.rate:                   1263.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.006 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5055318.181 ops/s
[info]                  ·gc.alloc.rate:                   1259.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1009.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     314.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5039536.127 ops/s
[info]                  ·gc.alloc.rate:                   1255.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     421.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5075757.117 ±(99.9%) 163583.960 ops/s [Average]
[info]   (min, avg, max) = (5039536.127, 5075757.117, 5148517.183), stdev = 42482.235
[info]   CI (99.9%): [4912173.156, 5239341.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1264.276 ±(99.9%) 40.538 MB/sec [Average]
[info]   (min, avg, max) = (1255.183, 1264.276, 1282.311), stdev = 10.527
[info]   CI (99.9%): [1223.738, 1304.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1273.596 ±(99.9%) 569.463 MB/sec [Average]
[info]   (min, avg, max) = (1009.274, 1273.596, 1348.609), stdev = 147.888
[info]   CI (99.9%): [704.133, 1843.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   394.842 ±(99.9%) 174.678 B/op [Average]
[info]   (min, avg, max) = (314.101, 394.842, 421.177), stdev = 45.363
[info]   CI (99.9%): [220.164, 569.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.022 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 81.51% complete, ETA 00:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143250.910 ops/s
[info] # Warmup Iteration   2: 358165.872 ops/s
[info] # Warmup Iteration   3: 367929.437 ops/s
[info] Iteration   1: 367036.389 ops/s
[info]                  ·gc.alloc.rate:                   1916.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1974.459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8466.371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 365072.092 ops/s
[info]                  ·gc.alloc.rate:                   1905.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1995.114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8601.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.449 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 368928.815 ops/s
[info]                  ·gc.alloc.rate:                   1925.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7145.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.178 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 365291.543 ops/s
[info]                  ·gc.alloc.rate:                   1906.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8710.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 365014.524 ops/s
[info]                  ·gc.alloc.rate:                   1905.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8748.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   366268.672 ±(99.9%) 6564.535 ops/s [Average]
[info]   (min, avg, max) = (365014.524, 366268.672, 368928.815), stdev = 1704.789
[info]   CI (99.9%): [359704.137, 372833.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1912.064 ±(99.9%) 34.246 MB/sec [Average]
[info]   (min, avg, max) = (1905.583, 1912.064, 1925.943), stdev = 8.894
[info]   CI (99.9%): [1877.818, 1946.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1939.075 ±(99.9%) 574.672 MB/sec [Average]
[info]   (min, avg, max) = (1674.956, 1939.075, 2029.154), stdev = 149.241
[info]   CI (99.9%): [1364.403, 2513.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8334.394 ±(99.9%) 2594.255 B/op [Average]
[info]   (min, avg, max) = (7145.300, 8334.394, 8748.784), stdev = 673.720
[info]   CI (99.9%): [5740.139, 10928.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.322 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (0.178, 0.322, 0.449), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 81.85% complete, ETA 00:11:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237474.793 ops/s
[info] # Warmup Iteration   2: 469782.479 ops/s
[info] # Warmup Iteration   3: 455630.312 ops/s
[info] Iteration   1: 467754.876 ops/s
[info]                  ·gc.alloc.rate:                   1279.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1321.677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4447.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 466079.265 ops/s
[info]                  ·gc.alloc.rate:                   1274.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3360.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 465954.094 ops/s
[info]                  ·gc.alloc.rate:                   1274.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1332.279 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4500.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 467717.999 ops/s
[info]                  ·gc.alloc.rate:                   1279.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1338.932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4505.569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 466747.809 ops/s
[info]                  ·gc.alloc.rate:                   1276.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4532.892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.351 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   466850.809 ±(99.9%) 3323.254 ops/s [Average]
[info]   (min, avg, max) = (465954.094, 466850.809, 467754.876), stdev = 863.039
[info]   CI (99.9%): [463527.554, 470174.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1276.697 ±(99.9%) 9.038 MB/sec [Average]
[info]   (min, avg, max) = (1274.230, 1276.697, 1279.164), stdev = 2.347
[info]   CI (99.9%): [1267.659, 1285.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1266.486 ±(99.9%) 584.843 MB/sec [Average]
[info]   (min, avg, max) = (995.212, 1266.486, 1344.329), stdev = 151.882
[info]   CI (99.9%): [681.643, 1851.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4269.225 ±(99.9%) 1959.658 B/op [Average]
[info]   (min, avg, max) = (3360.547, 4269.225, 4532.892), stdev = 508.917
[info]   CI (99.9%): [2309.567, 6228.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.253 ±(99.9%) 0.363 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.253, 0.351), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.19% complete, ETA 00:11:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3075393.990 ops/s
[info] # Warmup Iteration   2: 3500422.987 ops/s
[info] # Warmup Iteration   3: 3515316.307 ops/s
[info] Iteration   1: 3585279.480 ops/s
[info]                  ·gc.alloc.rate:                   583.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     291.556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3598078.113 ops/s
[info]                  ·gc.alloc.rate:                   585.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     145.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 3481646.397 ops/s
[info]                  ·gc.alloc.rate:                   566.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3559351.809 ops/s
[info]                  ·gc.alloc.rate:                   578.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     293.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3561244.521 ops/s
[info]                  ·gc.alloc.rate:               579.359 MB/sec
[info]                  ·gc.alloc.rate.norm:          256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664.592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 293.662 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3557120.064 ±(99.9%) 174226.008 ops/s [Average]
[info]   (min, avg, max) = (3481646.397, 3557120.064, 3598078.113), stdev = 45245.941
[info]   CI (99.9%): [3382894.057, 3731346.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   578.688 ±(99.9%) 28.020 MB/sec [Average]
[info]   (min, avg, max) = (566.583, 578.688, 585.376), stdev = 7.277
[info]   CI (99.9%): [550.668, 606.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.640 ±(99.9%) 572.222 MB/sec [Average]
[info]   (min, avg, max) = (331.810, 597.640, 664.592), stdev = 148.604
[info]   CI (99.9%): [25.418, 1169.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   264.757 ±(99.9%) 257.837 B/op [Average]
[info]   (min, avg, max) = (145.109, 264.757, 299.925), stdev = 66.959
[info]   CI (99.9%): [6.920, 522.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.406 ±(99.9%) 3.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 1.823), stdev = 0.793
[info]   CI (99.9%): [≈ 0, 3.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.179 ±(99.9%) 1.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.179, 0.800), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 82.53% complete, ETA 00:10:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98713.226 ops/s
[info] # Warmup Iteration   2: 322793.705 ops/s
[info] # Warmup Iteration   3: 331631.648 ops/s
[info] Iteration   1: 328656.318 ops/s
[info]                  ·gc.alloc.rate:                   1211.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          978.366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4682.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.299 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 333497.834 ops/s
[info]                  ·gc.alloc.rate:                   1229.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1310.489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6182.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.589 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 333351.343 ops/s
[info]                  ·gc.alloc.rate:                   1228.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1319.243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6227.483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.491 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 334701.703 ops/s
[info]                  ·gc.alloc.rate:                   1233.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328.070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6244.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 333810.320 ops/s
[info]                  ·gc.alloc.rate:                   1230.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              5800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1001.216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4720.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.294 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   332803.503 ±(99.9%) 9152.514 ops/s [Average]
[info]   (min, avg, max) = (328656.318, 332803.503, 334701.703), stdev = 2376.879
[info]   CI (99.9%): [323650.989, 341956.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1226.725 ±(99.9%) 33.072 MB/sec [Average]
[info]   (min, avg, max) = (1211.730, 1226.725, 1233.585), stdev = 8.589
[info]   CI (99.9%): [1193.653, 1259.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5800.001, 5800.001, 5800.001), stdev = 0.001
[info]   CI (99.9%): [5800.001, 5800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1187.477 ±(99.9%) 696.000 MB/sec [Average]
[info]   (min, avg, max) = (978.366, 1187.477, 1328.070), stdev = 180.749
[info]   CI (99.9%): [491.477, 1883.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5611.504 ±(99.9%) 3199.426 B/op [Average]
[info]   (min, avg, max) = (4682.994, 5611.504, 6244.246), stdev = 830.881
[info]   CI (99.9%): [2412.078, 8810.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.394 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.394, 0.589), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 82.88% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 990571.970 ops/s
[info] # Warmup Iteration   2: 1912257.134 ops/s
[info] # Warmup Iteration   3: 1963484.334 ops/s
[info] Iteration   1: 1979344.610 ops/s
[info]                  ·gc.alloc.rate:                   3159.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3366.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2676.487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.066 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1972995.877 ops/s
[info]                  ·gc.alloc.rate:                   3149.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3048.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2431.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1989947.918 ops/s
[info]                  ·gc.alloc.rate:                   3176.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2686.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.099 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1983339.962 ops/s
[info]                  ·gc.alloc.rate:                   3166.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2430.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 1931572.862 ops/s
[info]                  ·gc.alloc.rate:                   3084.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              2512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2496.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   1971440.246 ±(99.9%) 89033.275 ops/s [Average]
[info]   (min, avg, max) = (1931572.862, 1971440.246, 1989947.918), stdev = 23121.659
[info]   CI (99.9%): [1882406.971, 2060473.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3147.203 ±(99.9%) 140.875 MB/sec [Average]
[info]   (min, avg, max) = (3084.153, 3147.203, 3176.189), stdev = 36.585
[info]   CI (99.9%): [3006.328, 3288.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2512.000, 2512.000, 2512.000), stdev = 0.001
[info]   CI (99.9%): [2512.000, 2512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3188.088 ±(99.9%) 681.517 MB/sec [Average]
[info]   (min, avg, max) = (3048.199, 3188.088, 3396.896), stdev = 176.988
[info]   CI (99.9%): [2506.571, 3869.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2544.238 ±(99.9%) 493.588 B/op [Average]
[info]   (min, avg, max) = (2430.683, 2544.238, 2686.554), stdev = 128.183
[info]   CI (99.9%): [2050.650, 3037.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.112 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.090 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.090, 0.133), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 9.000), stdev = 0.837
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.22% complete, ETA 00:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65944.481 ops/s
[info] # Warmup Iteration   2: 307404.624 ops/s
[info] # Warmup Iteration   3: 316322.410 ops/s
[info] Iteration   1: 316755.347 ops/s
[info]                  ·gc.alloc.rate:                   745.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          650.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3233.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 306982.370 ops/s
[info]                  ·gc.alloc.rate:                   722.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5012.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 316890.713 ops/s
[info]                  ·gc.alloc.rate:                   745.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          652.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3242.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 311284.237 ops/s
[info]                  ·gc.alloc.rate:                   732.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          654.541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3309.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.316 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 310620.615 ops/s
[info]                  ·gc.alloc.rate:               731.041 MB/sec
[info]                  ·gc.alloc.rate.norm:          3704.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      656.507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3326.354 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   312506.656 ±(99.9%) 16431.980 ops/s [Average]
[info]   (min, avg, max) = (306982.370, 312506.656, 316890.713), stdev = 4267.333
[info]   CI (99.9%): [296074.676, 328938.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   735.481 ±(99.9%) 38.576 MB/sec [Average]
[info]   (min, avg, max) = (722.515, 735.481, 745.780), stdev = 10.018
[info]   CI (99.9%): [696.904, 774.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3704.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3704.001, 3704.001, 3704.001), stdev = 0.001
[info]   CI (99.9%): [3704.001, 3704.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   718.475 ±(99.9%) 558.016 MB/sec [Average]
[info]   (min, avg, max) = (650.809, 718.475, 977.680), stdev = 144.915
[info]   CI (99.9%): [160.459, 1276.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3624.777 ±(99.9%) 2990.411 B/op [Average]
[info]   (min, avg, max) = (3233.751, 3624.777, 5012.118), stdev = 776.600
[info]   CI (99.9%): [634.365, 6615.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.504 ±(99.9%) 3.897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.313), stdev = 1.012
[info]   CI (99.9%): [≈ 0, 4.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.510 ±(99.9%) 19.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.510, 11.491), stdev = 5.026
[info]   CI (99.9%): [≈ 0, 21.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 83.56% complete, ETA 00:10:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 657410.753 ops/s
[info] # Warmup Iteration   2: 697427.458 ops/s
[info] # Warmup Iteration   3: 711725.530 ops/s
[info] Iteration   1: 723546.659 ops/s
[info]                  ·gc.alloc.rate:                   654.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1457.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.272 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 723176.520 ops/s
[info]                  ·gc.alloc.rate:                   654.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1455.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 706284.794 ops/s
[info]                  ·gc.alloc.rate:               639.196 MB/sec
[info]                  ·gc.alloc.rate.norm:          1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      334.500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 745.199 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 723879.183 ops/s
[info]                  ·gc.alloc.rate:                   654.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          668.833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1454.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.181 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 696039.761 ops/s
[info]                  ·gc.alloc.rate:                   629.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1424.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1513.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   714585.383 ±(99.9%) 49211.723 ops/s [Average]
[info]   (min, avg, max) = (696039.761, 714585.383, 723879.183), stdev = 12780.128
[info]   CI (99.9%): [665373.661, 763797.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   646.580 ±(99.9%) 44.431 MB/sec [Average]
[info]   (min, avg, max) = (629.767, 646.580, 654.959), stdev = 11.539
[info]   CI (99.9%): [602.149, 691.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.001, 1424.001, 1424.001), stdev = 0.001
[info]   CI (99.9%): [1424.001, 1424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   602.306 ±(99.9%) 576.474 MB/sec [Average]
[info]   (min, avg, max) = (334.500, 602.306, 669.824), stdev = 149.708
[info]   CI (99.9%): [25.832, 1178.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1325.173 ±(99.9%) 1252.213 B/op [Average]
[info]   (min, avg, max) = (745.199, 1325.173, 1513.836), stdev = 325.196
[info]   CI (99.9%): [72.959, 2577.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.109 ±(99.9%) 0.437 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.272), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 83.90% complete, ETA 00:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3374345.984 ops/s
[info] # Warmup Iteration   2: 3668092.697 ops/s
[info] # Warmup Iteration   3: 3662016.859 ops/s
[info] Iteration   1: 3705381.353 ops/s
[info]                  ·gc.alloc.rate:                   2203.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2356.385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1000.918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3733095.710 ops/s
[info]                  ·gc.alloc.rate:                   2220.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     855.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3742548.720 ops/s
[info]                  ·gc.alloc.rate:                   2226.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2373.418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     997.854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3733334.326 ops/s
[info]                  ·gc.alloc.rate:                   2220.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     859.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3698391.724 ops/s
[info]                  ·gc.alloc.rate:                   2199.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              936.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2380.157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3722550.367 ±(99.9%) 74712.595 ops/s [Average]
[info]   (min, avg, max) = (3698391.724, 3722550.367, 3742548.720), stdev = 19402.624
[info]   CI (99.9%): [3647837.772, 3797262.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   2213.918 ±(99.9%) 45.072 MB/sec [Average]
[info]   (min, avg, max) = (2199.439, 2213.918, 2226.298), stdev = 11.705
[info]   CI (99.9%): [2168.846, 2258.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   936.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (936.000, 936.000, 936.000), stdev = 0.001
[info]   CI (99.9%): [936.000, 936.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   2235.276 ±(99.9%) 711.214 MB/sec [Average]
[info]   (min, avg, max) = (2028.025, 2235.276, 2380.157), stdev = 184.700
[info]   CI (99.9%): [1524.062, 2946.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   945.211 ±(99.9%) 310.228 B/op [Average]
[info]   (min, avg, max) = (855.030, 945.211, 1012.907), stdev = 80.565
[info]   CI (99.9%): [634.982, 1255.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0.028 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.028, 0.053), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 84.25% complete, ETA 00:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6305293.423 ops/s
[info] # Warmup Iteration   2: 6835467.045 ops/s
[info] # Warmup Iteration   3: 6835725.674 ops/s
[info] Iteration   1: 6932154.707 ops/s
[info]                  ·gc.alloc.rate:                   810.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6998454.011 ops/s
[info]                  ·gc.alloc.rate:                   818.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1003.642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6997697.984 ops/s
[info]                  ·gc.alloc.rate:                   818.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     150.497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6939731.831 ops/s
[info]                  ·gc.alloc.rate:                   811.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     227.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6973791.777 ops/s
[info]                  ·gc.alloc.rate:                   815.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671.478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     151.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6968366.062 ±(99.9%) 120640.528 ops/s [Average]
[info]   (min, avg, max) = (6932154.707, 6968366.062, 6998454.011), stdev = 31329.962
[info]   CI (99.9%): [6847725.534, 7089006.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   814.872 ±(99.9%) 13.745 MB/sec [Average]
[info]   (min, avg, max) = (810.788, 814.872, 818.532), stdev = 3.570
[info]   CI (99.9%): [801.127, 828.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   803.726 ±(99.9%) 705.628 MB/sec [Average]
[info]   (min, avg, max) = (669.102, 803.726, 1005.282), stdev = 183.249
[info]   CI (99.9%): [98.098, 1509.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   181.478 ±(99.9%) 159.193 B/op [Average]
[info]   (min, avg, max) = (150.497, 181.478, 227.896), stdev = 41.342
[info]   CI (99.9%): [22.286, 340.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0.016 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.016, 0.023), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 84.59% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16518.674 ops/s
[info] # Warmup Iteration   2: 170756.475 ops/s
[info] # Warmup Iteration   3: 182887.623 ops/s
[info] Iteration   1: 187907.854 ops/s
[info]                  ·gc.alloc.rate:                   1567.317 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1304.618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10927.607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 189711.960 ops/s
[info]                  ·gc.alloc.rate:                   1582.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1642.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13622.463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 188001.750 ops/s
[info]                  ·gc.alloc.rate:                   1568.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1658.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13883.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.523 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 186830.222 ops/s
[info]                  ·gc.alloc.rate:                   1558.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14065.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 187008.248 ops/s
[info]                  ·gc.alloc.rate:                   1559.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              13128.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11302.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.526 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   187892.007 ±(99.9%) 4404.294 ops/s [Average]
[info]   (min, avg, max) = (186830.222, 187892.007, 189711.960), stdev = 1143.781
[info]   CI (99.9%): [183487.713, 192296.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1567.250 ±(99.9%) 36.775 MB/sec [Average]
[info]   (min, avg, max) = (1558.375, 1567.250, 1582.431), stdev = 9.550
[info]   CI (99.9%): [1530.475, 1604.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13128.002, 13128.002, 13128.002), stdev = 0.001
[info]   CI (99.9%): [13128.002, 13128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1523.559 ±(99.9%) 705.228 MB/sec [Average]
[info]   (min, avg, max) = (1304.618, 1523.559, 1669.700), stdev = 183.145
[info]   CI (99.9%): [818.331, 2228.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12760.330 ±(99.9%) 5837.865 B/op [Average]
[info]   (min, avg, max) = (10927.607, 12760.330, 14065.825), stdev = 1516.075
[info]   CI (99.9%): [6922.464, 18598.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.557 ±(99.9%) 1.186 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.557, 1.036), stdev = 0.308
[info]   CI (99.9%): [≈ 0, 1.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 84.93% complete, ETA 00:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 494031.938 ops/s
[info] # Warmup Iteration   2: 743786.251 ops/s
[info] # Warmup Iteration   3: 753120.602 ops/s
[info] Iteration   1: 748261.420 ops/s
[info]                  ·gc.alloc.rate:                   2883.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3027.587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6368.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 755474.519 ops/s
[info]                  ·gc.alloc.rate:                   2910.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707.238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5640.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.347 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 749802.836 ops/s
[info]                  ·gc.alloc.rate:                   2888.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3055.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6413.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.175 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 749654.169 ops/s
[info]                  ·gc.alloc.rate:                   2888.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720.455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5711.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.219 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 748721.769 ops/s
[info]                  ·gc.alloc.rate:                   2885.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              6064.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6439.880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.263 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   750382.943 ±(99.9%) 11235.064 ops/s [Average]
[info]   (min, avg, max) = (748261.420, 750382.943, 755474.519), stdev = 2917.710
[info]   CI (99.9%): [739147.879, 761618.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2891.223 ±(99.9%) 43.047 MB/sec [Average]
[info]   (min, avg, max) = (2883.005, 2891.223, 2910.751), stdev = 11.179
[info]   CI (99.9%): [2848.176, 2934.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6064.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6064.001, 6064.001, 6064.001), stdev = 0.001
[info]   CI (99.9%): [6064.001, 6064.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2914.961 ±(99.9%) 709.072 MB/sec [Average]
[info]   (min, avg, max) = (2707.238, 2914.961, 3063.961), stdev = 184.144
[info]   CI (99.9%): [2205.889, 3624.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6114.674 ±(99.9%) 1548.769 B/op [Average]
[info]   (min, avg, max) = (5640.020, 6114.674, 6439.880), stdev = 402.210
[info]   CI (99.9%): [4565.905, 7663.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.167), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 0.251 B/op [Average]
[info]   (min, avg, max) = (0.175, 0.244, 0.347), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.27% complete, ETA 00:09:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2520690.234 ops/s
[info] # Warmup Iteration   2: 3558844.483 ops/s
[info] # Warmup Iteration   3: 3597417.394 ops/s
[info] Iteration   1: 3565085.084 ops/s
[info]                  ·gc.alloc.rate:                   2301.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2350.342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1037.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3591734.880 ops/s
[info]                  ·gc.alloc.rate:                   2319.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2363.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1035.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3571901.609 ops/s
[info]                  ·gc.alloc.rate:                   2306.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     895.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.028 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3560902.004 ops/s
[info]                  ·gc.alloc.rate:                   2299.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1050.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.055 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3626125.875 ops/s
[info]                  ·gc.alloc.rate:                   2340.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2379.566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1032.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.045 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3583149.890 ±(99.9%) 103116.528 ops/s [Average]
[info]   (min, avg, max) = (3560902.004, 3583149.890, 3626125.875), stdev = 26779.035
[info]   CI (99.9%): [3480033.362, 3686266.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2313.398 ±(99.9%) 65.968 MB/sec [Average]
[info]   (min, avg, max) = (2299.728, 2313.398, 2340.856), stdev = 17.132
[info]   CI (99.9%): [2247.429, 2379.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2300.539 ±(99.9%) 578.572 MB/sec [Average]
[info]   (min, avg, max) = (2032.584, 2300.539, 2379.566), stdev = 150.253
[info]   CI (99.9%): [1721.968, 2879.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1010.290 ±(99.9%) 248.383 B/op [Average]
[info]   (min, avg, max) = (895.527, 1010.290, 1050.218), stdev = 64.504
[info]   CI (99.9%): [761.907, 1258.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.040, 0.055), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 85.62% complete, ETA 00:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68304.612 ops/s
[info] # Warmup Iteration   2: 278497.137 ops/s
[info] # Warmup Iteration   3: 280254.072 ops/s
[info] Iteration   1: 283071.935 ops/s
[info]                  ·gc.alloc.rate:                   2089.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              11616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2304.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12813.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.579 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 283507.882 ops/s
[info]                  ·gc.alloc.rate:                   2092.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              11616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1997.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11090.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.693 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 281564.983 ops/s
[info]                  ·gc.alloc.rate:                   2078.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              11616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11252.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 283850.898 ops/s
[info]                  ·gc.alloc.rate:                   2095.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              11616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11221.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.577 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 281334.137 ops/s
[info]                  ·gc.alloc.rate:                   2076.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              11616.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11370.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.582 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   282665.967 ±(99.9%) 4417.189 ops/s [Average]
[info]   (min, avg, max) = (281334.137, 282665.967, 283850.898), stdev = 1147.130
[info]   CI (99.9%): [278248.778, 287083.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2086.353 ±(99.9%) 31.916 MB/sec [Average]
[info]   (min, avg, max) = (2076.562, 2086.353, 2095.013), stdev = 8.289
[info]   CI (99.9%): [2054.436, 2118.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11616.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11616.002, 11616.002, 11616.002), stdev = 0.001
[info]   CI (99.9%): [11616.001, 11616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2074.447 ±(99.9%) 497.644 MB/sec [Average]
[info]   (min, avg, max) = (1997.795, 2074.447, 2304.469), stdev = 129.237
[info]   CI (99.9%): [1576.803, 2572.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11549.532 ±(99.9%) 2747.303 B/op [Average]
[info]   (min, avg, max) = (11090.701, 11549.532, 12813.349), stdev = 713.466
[info]   CI (99.9%): [8802.228, 14296.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.104 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.125), stdev = 0.015
[info]   CI (99.9%): [0.047, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.579 ±(99.9%) 0.310 B/op [Average]
[info]   (min, avg, max) = (0.465, 0.579, 0.693), stdev = 0.081
[info]   CI (99.9%): [0.269, 0.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 85.96% complete, ETA 00:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 554102.356 ops/s
[info] # Warmup Iteration   2: 833477.689 ops/s
[info] # Warmup Iteration   3: 856284.059 ops/s
[info] Iteration   1: 850511.775 ops/s
[info]                  ·gc.alloc.rate:                   1962.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1998.123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3697.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.193 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 848373.226 ops/s
[info]                  ·gc.alloc.rate:                   1957.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1675.633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.232 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 857749.231 ops/s
[info]                  ·gc.alloc.rate:                   1979.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3709.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.153 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 859464.944 ops/s
[info]                  ·gc.alloc.rate:                   1983.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3715.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.076 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 843669.876 ops/s
[info]                  ·gc.alloc.rate:                   1947.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              3632.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035.378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3796.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.194 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   851953.811 ±(99.9%) 25362.245 ops/s [Average]
[info]   (min, avg, max) = (843669.876, 851953.811, 859464.944), stdev = 6586.495
[info]   CI (99.9%): [826591.565, 877316.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1966.201 ±(99.9%) 58.781 MB/sec [Average]
[info]   (min, avg, max) = (1947.221, 1966.201, 1983.882), stdev = 15.265
[info]   CI (99.9%): [1907.421, 2024.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3632.001, 3632.001, 3632.001), stdev = 0.001
[info]   CI (99.9%): [3632.000, 3632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1952.114 ±(99.9%) 597.648 MB/sec [Average]
[info]   (min, avg, max) = (1675.633, 1952.114, 2035.378), stdev = 155.207
[info]   CI (99.9%): [1354.465, 2549.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3605.614 ±(99.9%) 1080.350 B/op [Average]
[info]   (min, avg, max) = (3108.595, 3605.614, 3796.433), stdev = 280.563
[info]   CI (99.9%): [2525.264, 4685.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.170 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.076, 0.170, 0.232), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.30% complete, ETA 00:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699431.433 ops/s
[info] # Warmup Iteration   2: 1405669.196 ops/s
[info] # Warmup Iteration   3: 1457239.152 ops/s
[info] Iteration   1: 1421968.761 ops/s
[info]                  ·gc.alloc.rate:                   817.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          973.643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1077.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.161 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1454390.898 ops/s
[info]                  ·gc.alloc.rate:                   835.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          648.945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     702.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1420285.980 ops/s
[info]                  ·gc.alloc.rate:                   816.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1453614.507 ops/s
[info]                  ·gc.alloc.rate:               834.955 MB/sec
[info]                  ·gc.alloc.rate.norm:          904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      653.528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 707.570 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 1432140.409 ops/s
[info]                  ·gc.alloc.rate:                   822.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          984.912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1082.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.114 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1436480.111 ±(99.9%) 64030.952 ops/s [Average]
[info]   (min, avg, max) = (1420285.980, 1436480.111, 1454390.898), stdev = 16628.635
[info]   CI (99.9%): [1372449.160, 1500511.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   825.252 ±(99.9%) 36.359 MB/sec [Average]
[info]   (min, avg, max) = (816.118, 825.252, 835.508), stdev = 9.442
[info]   CI (99.9%): [788.893, 861.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   847.662 ±(99.9%) 690.671 MB/sec [Average]
[info]   (min, avg, max) = (648.945, 847.662, 984.912), stdev = 179.365
[info]   CI (99.9%): [156.991, 1538.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   930.365 ±(99.9%) 792.772 B/op [Average]
[info]   (min, avg, max) = (702.143, 930.365, 1082.522), stdev = 205.880
[info]   CI (99.9%): [137.593, 1723.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.146), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.082 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.161), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 86.64% complete, ETA 00:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3787790.120 ops/s
[info] # Warmup Iteration   2: 4281601.037 ops/s
[info] # Warmup Iteration   3: 4377206.735 ops/s
[info] Iteration   1: 4387774.436 ops/s
[info]                  ·gc.alloc.rate:               334.533 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183.508 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   2: 4336108.786 ops/s
[info]                  ·gc.alloc.rate:                   330.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4359931.980 ops/s
[info]                  ·gc.alloc.rate:                   332.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119.874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4343518.929 ops/s
[info]                  ·gc.alloc.rate:                   331.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4346389.820 ops/s
[info]                  ·gc.alloc.rate:               331.400 MB/sec
[info]                  ·gc.alloc.rate.norm:          120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120.126 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4354744.790 ±(99.9%) 78466.982 ops/s [Average]
[info]   (min, avg, max) = (4336108.786, 4354744.790, 4387774.436), stdev = 20377.626
[info]   CI (99.9%): [4276277.808, 4433211.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   332.058 ±(99.9%) 5.940 MB/sec [Average]
[info]   (min, avg, max) = (330.602, 332.058, 334.533), stdev = 1.542
[info]   CI (99.9%): [326.119, 337.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   352.687 ±(99.9%) 364.881 MB/sec [Average]
[info]   (min, avg, max) = (255.796, 352.687, 511.580), stdev = 94.758
[info]   CI (99.9%): [≈ 0, 717.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   127.337 ±(99.9%) 129.178 B/op [Average]
[info]   (min, avg, max) = (92.847, 127.337, 183.508), stdev = 33.547
[info]   CI (99.9%): [≈ 0, 256.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.370 ±(99.9%) 3.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.370, 1.782), stdev = 0.790
[info]   CI (99.9%): [≈ 0, 3.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.134 ±(99.9%) 1.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.643), stdev = 0.285
[info]   CI (99.9%): [≈ 0, 1.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 86.99% complete, ETA 00:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180606.241 ops/s
[info] # Warmup Iteration   2: 468872.815 ops/s
[info] # Warmup Iteration   3: 482344.987 ops/s
[info] Iteration   1: 479237.627 ops/s
[info]                  ·gc.alloc.rate:                   1658.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5381.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.205 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 478108.469 ops/s
[info]                  ·gc.alloc.rate:                   1655.680 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1653.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5439.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.411 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 482926.929 ops/s
[info]                  ·gc.alloc.rate:                   1671.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5428.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 482345.796 ops/s
[info]                  ·gc.alloc.rate:                   1670.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1677.980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5473.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 481991.975 ops/s
[info]                  ·gc.alloc.rate:                   1669.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              5448.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1685.923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5503.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   480922.159 ±(99.9%) 8155.927 ops/s [Average]
[info]   (min, avg, max) = (478108.469, 480922.159, 482926.929), stdev = 2118.068
[info]   CI (99.9%): [472766.233, 489078.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1665.103 ±(99.9%) 28.185 MB/sec [Average]
[info]   (min, avg, max) = (1655.680, 1665.103, 1671.728), stdev = 7.319
[info]   CI (99.9%): [1636.918, 1693.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5448.001, 5448.001, 5448.001), stdev = 0.001
[info]   CI (99.9%): [5448.001, 5448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1664.257 ±(99.9%) 73.121 MB/sec [Average]
[info]   (min, avg, max) = (1638.630, 1664.257, 1685.923), stdev = 18.989
[info]   CI (99.9%): [1591.136, 1737.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5445.149 ±(99.9%) 177.429 B/op [Average]
[info]   (min, avg, max) = (5381.711, 5445.149, 5503.217), stdev = 46.078
[info]   CI (99.9%): [5267.720, 5622.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 0.471 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.286, 0.411), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.33% complete, ETA 00:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2912332.675 ops/s
[info] # Warmup Iteration   2: 3334053.275 ops/s
[info] # Warmup Iteration   3: 3377602.815 ops/s
[info] Iteration   1: 3369574.225 ops/s
[info]                  ·gc.alloc.rate:                   1592.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335.191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3335286.008 ops/s
[info]                  ·gc.alloc.rate:                   1577.272 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     790.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3304946.459 ops/s
[info]                  ·gc.alloc.rate:                   1562.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801.335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3376697.497 ops/s
[info]                  ·gc.alloc.rate:                   1596.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     787.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3383439.411 ops/s
[info]                  ·gc.alloc.rate:                   1599.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.029 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3353988.720 ±(99.9%) 127433.547 ops/s [Average]
[info]   (min, avg, max) = (3304946.459, 3353988.720, 3383439.411), stdev = 33094.087
[info]   CI (99.9%): [3226555.173, 3481422.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1585.729 ±(99.9%) 58.900 MB/sec [Average]
[info]   (min, avg, max) = (1562.977, 1585.729, 1599.400), stdev = 15.296
[info]   CI (99.9%): [1526.829, 1644.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1547.664 ±(99.9%) 713.968 MB/sec [Average]
[info]   (min, avg, max) = (1335.191, 1547.664, 1688.737), stdev = 185.415
[info]   CI (99.9%): [833.696, 2261.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   726.602 ±(99.9%) 351.371 B/op [Average]
[info]   (min, avg, max) = (623.688, 726.602, 801.335), stdev = 91.250
[info]   CI (99.9%): [375.230, 1077.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.031 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.031, 0.069), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 87.67% complete, ETA 00:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102303.632 ops/s
[info] # Warmup Iteration   2: 304807.747 ops/s
[info] # Warmup Iteration   3: 310054.869 ops/s
[info] Iteration   1: 309647.855 ops/s
[info]                  ·gc.alloc.rate:                   1624.245 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1638.647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8329.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.529 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 309615.727 ops/s
[info]                  ·gc.alloc.rate:                   1624.164 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6711.417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.635 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 310026.392 ops/s
[info]                  ·gc.alloc.rate:                   1626.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1663.616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8445.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 309289.080 ops/s
[info]                  ·gc.alloc.rate:                   1622.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8519.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 303433.591 ops/s
[info]                  ·gc.alloc.rate:                   1591.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              8256.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1684.369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8736.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   308402.529 ±(99.9%) 10743.216 ops/s [Average]
[info]   (min, avg, max) = (303433.591, 308402.529, 310026.392), stdev = 2789.979
[info]   CI (99.9%): [297659.312, 319145.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1617.750 ±(99.9%) 56.306 MB/sec [Average]
[info]   (min, avg, max) = (1591.700, 1617.750, 1626.197), stdev = 14.623
[info]   CI (99.9%): [1561.443, 1674.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8256.001, 8256.001, 8256.001), stdev = 0.001
[info]   CI (99.9%): [8256.001, 8256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1596.242 ±(99.9%) 597.575 MB/sec [Average]
[info]   (min, avg, max) = (1320.306, 1596.242, 1684.369), stdev = 155.188
[info]   CI (99.9%): [998.667, 2193.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8148.605 ±(99.9%) 3146.075 B/op [Average]
[info]   (min, avg, max) = (6711.417, 8148.605, 8736.665), stdev = 817.026
[info]   CI (99.9%): [5002.530, 11294.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 0.639 B/op [Average]
[info]   (min, avg, max) = (0.216, 0.424, 0.635), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 1.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.01% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231029.623 ops/s
[info] # Warmup Iteration   2: 478246.279 ops/s
[info] # Warmup Iteration   3: 487701.362 ops/s
[info] Iteration   1: 490335.910 ops/s
[info]                  ·gc.alloc.rate:                   1341.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1322.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4242.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.267 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 476084.627 ops/s
[info]                  ·gc.alloc.rate:                   1301.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4387.960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.275 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 478345.966 ops/s
[info]                  ·gc.alloc.rate:                   1308.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1333.950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4389.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 487146.564 ops/s
[info]                  ·gc.alloc.rate:                   1332.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4330.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.202 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 483795.344 ops/s
[info]                  ·gc.alloc.rate:                   1323.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4377.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.135 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   483141.682 ±(99.9%) 22863.893 ops/s [Average]
[info]   (min, avg, max) = (476084.627, 483141.682, 490335.910), stdev = 5937.680
[info]   CI (99.9%): [460277.789, 506005.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1321.399 ±(99.9%) 63.108 MB/sec [Average]
[info]   (min, avg, max) = (1301.921, 1321.399, 1341.329), stdev = 16.389
[info]   CI (99.9%): [1258.291, 1384.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4304.001, 4304.001, 4304.001), stdev = 0.001
[info]   CI (99.9%): [4304.001, 4304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1333.941 ±(99.9%) 37.170 MB/sec [Average]
[info]   (min, avg, max) = (1322.074, 1333.941, 1346.121), stdev = 9.653
[info]   CI (99.9%): [1296.770, 1371.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4345.392 ±(99.9%) 240.777 B/op [Average]
[info]   (min, avg, max) = (4242.217, 4345.392, 4389.131), stdev = 62.529
[info]   CI (99.9%): [4104.615, 4586.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.203, 0.275), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.36% complete, ETA 00:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2540024.162 ops/s
[info] # Warmup Iteration   2: 2957535.530 ops/s
[info] # Warmup Iteration   3: 3010774.966 ops/s
[info] Iteration   1: 3007152.968 ops/s
[info]                  ·gc.alloc.rate:                   565.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.927 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2995599.088 ops/s
[info]                  ·gc.alloc.rate:                   563.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2971295.879 ops/s
[info]                  ·gc.alloc.rate:                   559.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351.439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.044 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3017624.784 ops/s
[info]                  ·gc.alloc.rate:                   567.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     346.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3019880.188 ops/s
[info]                  ·gc.alloc.rate:               567.968 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172.892 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   3002310.581 ±(99.9%) 76375.377 ops/s [Average]
[info]   (min, avg, max) = (2971295.879, 3002310.581, 3019880.188), stdev = 19834.443
[info]   CI (99.9%): [2925935.205, 3078685.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   564.721 ±(99.9%) 14.034 MB/sec [Average]
[info]   (min, avg, max) = (559.028, 564.721, 567.968), stdev = 3.645
[info]   CI (99.9%): [550.687, 578.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   530.984 ±(99.9%) 700.237 MB/sec [Average]
[info]   (min, avg, max) = (331.746, 530.984, 664.141), stdev = 181.849
[info]   CI (99.9%): [≈ 0, 1231.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   278.453 ±(99.9%) 368.677 B/op [Average]
[info]   (min, avg, max) = (172.892, 278.453, 351.439), stdev = 95.744
[info]   CI (99.9%): [≈ 0, 647.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.388 ±(99.9%) 2.981 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.771), stdev = 0.774
[info]   CI (99.9%): [≈ 0, 3.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.203 ±(99.9%) 1.560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.203, 0.927), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 1.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 88.70% complete, ETA 00:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98550.501 ops/s
[info] # Warmup Iteration   2: 337027.037 ops/s
[info] # Warmup Iteration   3: 345529.009 ops/s
[info] Iteration   1: 341642.103 ops/s
[info]                  ·gc.alloc.rate:                   1305.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1302.986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6002.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 341415.792 ops/s
[info]                  ·gc.alloc.rate:                   1305.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1311.662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6046.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.384 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 343161.231 ops/s
[info]                  ·gc.alloc.rate:                   1311.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6055.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 344334.809 ops/s
[info]                  ·gc.alloc.rate:                   1316.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6077.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.381 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 345650.011 ops/s
[info]                  ·gc.alloc.rate:                   1321.219 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1337.658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6090.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   343240.789 ±(99.9%) 6913.480 ops/s [Average]
[info]   (min, avg, max) = (341415.792, 343240.789, 345650.011), stdev = 1795.409
[info]   CI (99.9%): [336327.309, 350154.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1312.147 ±(99.9%) 26.727 MB/sec [Average]
[info]   (min, avg, max) = (1305.079, 1312.147, 1321.219), stdev = 6.941
[info]   CI (99.9%): [1285.420, 1338.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.001, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1320.586 ±(99.9%) 53.605 MB/sec [Average]
[info]   (min, avg, max) = (1302.986, 1320.586, 1337.658), stdev = 13.921
[info]   CI (99.9%): [1266.981, 1374.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6054.570 ±(99.9%) 131.133 B/op [Average]
[info]   (min, avg, max) = (6002.402, 6054.570, 6090.852), stdev = 34.055
[info]   CI (99.9%): [5923.436, 6185.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 0.327 B/op [Average]
[info]   (min, avg, max) = (0.191, 0.324, 0.384), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.04% complete, ETA 00:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229437.682 ops/s
[info] # Warmup Iteration   2: 685600.717 ops/s
[info] # Warmup Iteration   3: 707693.293 ops/s
[info] Iteration   1: 708313.275 ops/s
[info]                  ·gc.alloc.rate:                   2113.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2000.817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4445.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 711805.471 ops/s
[info]                  ·gc.alloc.rate:                   2124.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013.085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4449.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.368 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 710079.894 ops/s
[info]                  ·gc.alloc.rate:                   2118.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2361.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5233.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 707351.121 ops/s
[info]                  ·gc.alloc.rate:                   2111.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4519.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 703979.585 ops/s
[info]                  ·gc.alloc.rate:                   2100.449 MB/sec
[info]                  ·gc.alloc.rate.norm:              4696.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036.362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4552.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.140 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   708305.869 ±(99.9%) 11394.053 ops/s [Average]
[info]   (min, avg, max) = (703979.585, 708305.869, 711805.471), stdev = 2958.999
[info]   CI (99.9%): [696911.816, 719699.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2113.763 ±(99.9%) 34.604 MB/sec [Average]
[info]   (min, avg, max) = (2100.449, 2113.763, 2124.500), stdev = 8.987
[info]   CI (99.9%): [2079.159, 2148.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4696.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4696.001, 4696.001, 4696.001), stdev = 0.001
[info]   CI (99.9%): [4696.001, 4696.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2088.737 ±(99.9%) 589.135 MB/sec [Average]
[info]   (min, avg, max) = (2000.817, 2088.737, 2361.208), stdev = 152.996
[info]   CI (99.9%): [1499.603, 2677.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4640.181 ±(99.9%) 1289.256 B/op [Average]
[info]   (min, avg, max) = (4445.025, 4640.181, 5233.438), stdev = 334.816
[info]   CI (99.9%): [3350.924, 5929.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.176 ±(99.9%) 0.440 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.176, 0.368), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.38% complete, ETA 00:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472817.651 ops/s
[info] # Warmup Iteration   2: 1442269.116 ops/s
[info] # Warmup Iteration   3: 1429300.582 ops/s
[info] Iteration   1: 1462566.268 ops/s
[info]                  ·gc.alloc.rate:                   1107.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1052.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1448300.410 ops/s
[info]                  ·gc.alloc.rate:                   1096.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.113 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1450372.097 ops/s
[info]                  ·gc.alloc.rate:                   1098.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1434511.535 ops/s
[info]                  ·gc.alloc.rate:                   1086.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1088.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1479260.166 ops/s
[info]                  ·gc.alloc.rate:                   1120.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.089 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1455002.095 ±(99.9%) 64774.517 ops/s [Average]
[info]   (min, avg, max) = (1434511.535, 1455002.095, 1479260.166), stdev = 16821.736
[info]   CI (99.9%): [1390227.578, 1519776.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1102.045 ±(99.9%) 48.568 MB/sec [Average]
[info]   (min, avg, max) = (1086.930, 1102.045, 1120.387), stdev = 12.613
[info]   CI (99.9%): [1053.478, 1150.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.615 ±(99.9%) 705.270 MB/sec [Average]
[info]   (min, avg, max) = (977.866, 1119.615, 1331.048), stdev = 183.156
[info]   CI (99.9%): [414.345, 1824.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1210.254 ±(99.9%) 736.529 B/op [Average]
[info]   (min, avg, max) = (1052.342, 1210.254, 1422.468), stdev = 191.274
[info]   CI (99.9%): [473.725, 1946.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.085 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.085, 0.113), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 89.73% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4961708.952 ops/s
[info] # Warmup Iteration   2: 5293197.929 ops/s
[info] # Warmup Iteration   3: 5554013.763 ops/s
[info] Iteration   1: 5560632.454 ops/s
[info]                  ·gc.alloc.rate:      169.580 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5554440.544 ops/s
[info]                  ·gc.alloc.rate:               169.422 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.481 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 5529708.390 ops/s
[info]                  ·gc.alloc.rate:               168.650 MB/sec
[info]                  ·gc.alloc.rate.norm:          48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72.803 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 5528564.651 ops/s
[info]                  ·gc.alloc.rate:      168.612 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5545914.103 ops/s
[info]                  ·gc.alloc.rate:                   169.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.012 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   5543852.028 ±(99.9%) 55524.694 ops/s [Average]
[info]   (min, avg, max) = (5528564.651, 5543852.028, 5560632.454), stdev = 14419.587
[info]   CI (99.9%): [5488327.335, 5599376.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   169.082 ±(99.9%) 1.695 MB/sec [Average]
[info]   (min, avg, max) = (168.612, 169.082, 169.580), stdev = 0.440
[info]   CI (99.9%): [167.387, 170.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   153.485 ±(99.9%) 539.521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.485, 255.832), stdev = 140.112
[info]   CI (99.9%): [≈ 0, 693.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.575 ±(99.9%) 153.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.575, 72.803), stdev = 39.778
[info]   CI (99.9%): [≈ 0, 196.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.008 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.002 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 1.000
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.07% complete, ETA 00:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41331.591 ops/s
[info] # Warmup Iteration   2: 214347.215 ops/s
[info] # Warmup Iteration   3: 221681.203 ops/s
[info] Iteration   1: 221990.133 ops/s
[info]                  ·gc.alloc.rate:                   1545.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1632.666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11575.594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.886 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 222137.167 ops/s
[info]                  ·gc.alloc.rate:                   1547.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11665.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 218596.927 ops/s
[info]                  ·gc.alloc.rate:                   1522.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1327.899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9559.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.300 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 219715.670 ops/s
[info]                  ·gc.alloc.rate:                   1530.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11965.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 223086.615 ops/s
[info]                  ·gc.alloc.rate:                   1553.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343.698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9479.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   221105.302 ±(99.9%) 7202.942 ops/s [Average]
[info]   (min, avg, max) = (218596.927, 221105.302, 223086.615), stdev = 1870.581
[info]   CI (99.9%): [213902.360, 228308.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1539.847 ±(99.9%) 50.121 MB/sec [Average]
[info]   (min, avg, max) = (1522.504, 1539.847, 1553.586), stdev = 13.016
[info]   CI (99.9%): [1489.726, 1589.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1524.289 ±(99.9%) 664.944 MB/sec [Average]
[info]   (min, avg, max) = (1327.899, 1524.289, 1670.357), stdev = 172.684
[info]   CI (99.9%): [859.346, 2189.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10848.877 ±(99.9%) 4708.158 B/op [Average]
[info]   (min, avg, max) = (9479.317, 10848.877, 11965.361), stdev = 1222.694
[info]   CI (99.9%): [6140.719, 15557.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.592 ±(99.9%) 1.057 B/op [Average]
[info]   (min, avg, max) = (0.300, 0.592, 0.886), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.41% complete, ETA 00:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497978.726 ops/s
[info] # Warmup Iteration   2: 966103.316 ops/s
[info] # Warmup Iteration   3: 997651.210 ops/s
[info] Iteration   1: 985040.161 ops/s
[info]                  ·gc.alloc.rate:                   1717.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2651.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.100 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 983176.022 ops/s
[info]                  ·gc.alloc.rate:                   1714.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2671.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 976087.465 ops/s
[info]                  ·gc.alloc.rate:                   1702.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1678.729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2705.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 964317.180 ops/s
[info]                  ·gc.alloc.rate:                   1681.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2751.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.102 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 987641.423 ops/s
[info]                  ·gc.alloc.rate:                   1721.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              2744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029.813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3234.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   979252.450 ±(99.9%) 36140.007 ops/s [Average]
[info]   (min, avg, max) = (964317.180, 979252.450, 987641.423), stdev = 9385.445
[info]   CI (99.9%): [943112.444, 1015392.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1707.512 ±(99.9%) 62.958 MB/sec [Average]
[info]   (min, avg, max) = (1681.270, 1707.512, 1721.982), stdev = 16.350
[info]   CI (99.9%): [1644.554, 1770.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2744.000, 2744.000, 2744.000), stdev = 0.001
[info]   CI (99.9%): [2744.000, 2744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1744.710 ±(99.9%) 614.893 MB/sec [Average]
[info]   (min, avg, max) = (1659.652, 1744.710, 2029.813), stdev = 159.686
[info]   CI (99.9%): [1129.817, 2359.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2803.113 ±(99.9%) 940.063 B/op [Average]
[info]   (min, avg, max) = (2651.760, 2803.113, 3234.534), stdev = 244.131
[info]   CI (99.9%): [1863.051, 3743.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.140 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.140, 0.200), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 90.75% complete, ETA 00:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 886904.120 ops/s
[info] # Warmup Iteration   2: 2469108.149 ops/s
[info] # Warmup Iteration   3: 2427943.443 ops/s
[info] Iteration   1: 2508318.684 ops/s
[info]                  ·gc.alloc.rate:                   1109.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          977.896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     613.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2457108.630 ops/s
[info]                  ·gc.alloc.rate:                   1086.704 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1309.158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     838.475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.120 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2461578.204 ops/s
[info]                  ·gc.alloc.rate:                   1088.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          987.608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     631.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.067 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2498730.316 ops/s
[info]                  ·gc.alloc.rate:                   1105.246 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     624.971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2474803.255 ops/s
[info]                  ·gc.alloc.rate:                   1094.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              696.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331.012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2480107.818 ±(99.9%) 87025.789 ops/s [Average]
[info]   (min, avg, max) = (2457108.630, 2480107.818, 2508318.684), stdev = 22600.321
[info]   CI (99.9%): [2393082.028, 2567133.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1096.840 ±(99.9%) 38.507 MB/sec [Average]
[info]   (min, avg, max) = (1086.704, 1096.840, 1109.204), stdev = 10.000
[info]   CI (99.9%): [1058.332, 1135.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   696.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (696.000, 696.000, 696.000), stdev = 0.001
[info]   CI (99.9%): [696.000, 696.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1119.625 ±(99.9%) 705.561 MB/sec [Average]
[info]   (min, avg, max) = (977.896, 1119.625, 1331.012), stdev = 183.232
[info]   CI (99.9%): [414.065, 1825.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   710.985 ±(99.9%) 462.916 B/op [Average]
[info]   (min, avg, max) = (613.608, 710.985, 846.436), stdev = 120.218
[info]   CI (99.9%): [248.069, 1173.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.096 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.096, 0.187), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.061 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.061, 0.120), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.10% complete, ETA 00:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4523981.629 ops/s
[info] # Warmup Iteration   2: 6468828.316 ops/s
[info] # Warmup Iteration   3: 6641371.680 ops/s
[info] Iteration   1: 6554344.839 ops/s
[info]                  ·gc.alloc.rate:                   533.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6657905.804 ops/s
[info]                  ·gc.alloc.rate:                   541.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     157.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6667948.711 ops/s
[info]                  ·gc.alloc.rate:               542.291 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.302 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   4: 6660924.668 ops/s
[info]                  ·gc.alloc.rate:                   541.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6675887.368 ops/s
[info]                  ·gc.alloc.rate:               542.963 MB/sec
[info]                  ·gc.alloc.rate.norm:          128.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      332.420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78.366 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6643402.278 ±(99.9%) 193553.971 ops/s [Average]
[info]   (min, avg, max) = (6554344.839, 6643402.278, 6675887.368), stdev = 50265.352
[info]   CI (99.9%): [6449848.307, 6836956.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.380 ±(99.9%) 15.457 MB/sec [Average]
[info]   (min, avg, max) = (533.267, 540.380, 542.963), stdev = 4.014
[info]   CI (99.9%): [524.924, 555.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   516.228 ±(99.9%) 658.050 MB/sec [Average]
[info]   (min, avg, max) = (331.738, 516.228, 664.493), stdev = 170.893
[info]   CI (99.9%): [≈ 0, 1174.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   122.369 ±(99.9%) 156.719 B/op [Average]
[info]   (min, avg, max) = (78.302, 122.369, 157.081), stdev = 40.700
[info]   CI (99.9%): [≈ 0, 279.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.386 ±(99.9%) 2.966 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.386, 1.762), stdev = 0.770
[info]   CI (99.9%): [≈ 0, 3.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.423), stdev = 0.185
[info]   CI (99.9%): [≈ 0, 0.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 1.924
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.44% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4469897.860 ops/s
[info] # Warmup Iteration   2: 6475974.888 ops/s
[info] # Warmup Iteration   3: 6478267.863 ops/s
[info] Iteration   1: 6472775.254 ops/s
[info]                  ·gc.alloc.rate:               394.806 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62.196 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Iteration   2: 6496060.236 ops/s
[info]                  ·gc.alloc.rate:                   396.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          588.551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     142.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.440 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6479252.177 ops/s
[info]                  ·gc.alloc.rate:                   395.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 6468333.512 ops/s
[info]                  ·gc.alloc.rate:                   394.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          331.739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.005 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6422661.002 ops/s
[info]                  ·gc.alloc.rate:               391.769 MB/sec
[info]                  ·gc.alloc.rate.norm:          96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 81.292 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6467816.436 ±(99.9%) 105319.844 ops/s [Average]
[info]   (min, avg, max) = (6422661.002, 6467816.436, 6496060.236), stdev = 27351.229
[info]   CI (99.9%): [6362496.592, 6573136.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   394.515 ±(99.9%) 6.404 MB/sec [Average]
[info]   (min, avg, max) = (391.769, 394.515, 396.229), stdev = 1.663
[info]   CI (99.9%): [388.110, 400.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   368.112 ±(99.9%) 491.268 MB/sec [Average]
[info]   (min, avg, max) = (255.786, 368.112, 588.551), stdev = 127.581
[info]   CI (99.9%): [≈ 0, 859.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   89.525 ±(99.9%) 118.443 B/op [Average]
[info]   (min, avg, max) = (62.196, 89.525, 142.597), stdev = 30.759
[info]   CI (99.9%): [≈ 0, 207.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0.380 ±(99.9%) 3.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.818), stdev = 0.804
[info]   CI (99.9%): [≈ 0, 3.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0.092 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.440), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 4.000), stdev = 1.342
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 91.78% complete, ETA 00:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48384.704 ops/s
[info] # Warmup Iteration   2: 299556.095 ops/s
[info] # Warmup Iteration   3: 312915.707 ops/s
[info] Iteration   1: 306635.513 ops/s
[info]                  ·gc.alloc.rate:                   1577.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1308.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6714.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.214 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 313515.908 ops/s
[info]                  ·gc.alloc.rate:                   1612.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1648.372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8274.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.941 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 310843.032 ops/s
[info]                  ·gc.alloc.rate:                   1598.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8410.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 310768.405 ops/s
[info]                  ·gc.alloc.rate:                   1598.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8474.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.211 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 313384.045 ops/s
[info]                  ·gc.alloc.rate:                   1612.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              8096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1682.776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8450.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.418 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   311029.381 ±(99.9%) 10743.258 ops/s [Average]
[info]   (min, avg, max) = (306635.513, 311029.381, 313515.908), stdev = 2789.990
[info]   CI (99.9%): [300286.123, 321772.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1600.009 ±(99.9%) 54.818 MB/sec [Average]
[info]   (min, avg, max) = (1577.658, 1600.009, 1612.735), stdev = 14.236
[info]   CI (99.9%): [1545.191, 1654.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8096.001, 8096.001, 8096.002), stdev = 0.001
[info]   CI (99.9%): [8096.001, 8096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1594.817 ±(99.9%) 618.267 MB/sec [Average]
[info]   (min, avg, max) = (1308.531, 1594.817, 1682.776), stdev = 160.562
[info]   CI (99.9%): [976.550, 2213.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8065.159 ±(99.9%) 2921.669 B/op [Average]
[info]   (min, avg, max) = (6714.935, 8065.159, 8474.759), stdev = 758.748
[info]   CI (99.9%): [5143.490, 10986.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.187), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 1.147 B/op [Average]
[info]   (min, avg, max) = (0.211, 0.441, 0.941), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.12% complete, ETA 00:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2214950.464 ops/s
[info] # Warmup Iteration   2: 3412993.106 ops/s
[info] # Warmup Iteration   3: 3404543.903 ops/s
[info] Iteration   1: 3378275.770 ops/s
[info]                  ·gc.alloc.rate:                   3073.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3035.515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1414.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3390299.054 ops/s
[info]                  ·gc.alloc.rate:                   3084.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3050.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3415014.874 ops/s
[info]                  ·gc.alloc.rate:                   3107.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3057.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.038 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3389408.314 ops/s
[info]                  ·gc.alloc.rate:                   3085.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3064.416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1422.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.058 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3404024.578 ops/s
[info]                  ·gc.alloc.rate:                   3097.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3063.625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1416.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.087 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   3395404.518 ±(99.9%) 54940.396 ops/s [Average]
[info]   (min, avg, max) = (3378275.770, 3395404.518, 3415014.874), stdev = 14267.846
[info]   CI (99.9%): [3340464.122, 3450344.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3089.571 ±(99.9%) 49.647 MB/sec [Average]
[info]   (min, avg, max) = (3073.692, 3089.571, 3107.192), stdev = 12.893
[info]   CI (99.9%): [3039.924, 3139.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3054.357 ±(99.9%) 46.019 MB/sec [Average]
[info]   (min, avg, max) = (3035.515, 3054.357, 3064.416), stdev = 11.951
[info]   CI (99.9%): [3008.337, 3100.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1415.686 ±(99.9%) 18.126 B/op [Average]
[info]   (min, avg, max) = (1409.296, 1415.686, 1422.384), stdev = 4.707
[info]   CI (99.9%): [1397.560, 1433.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.129 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.129, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.060 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (0.038, 0.060, 0.087), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1824846.628 ops/s
[info] # Warmup Iteration   2: 3887521.259 ops/s
[info] # Warmup Iteration   3: 3934821.951 ops/s
[info] Iteration   1: 3957973.248 ops/s
[info]                  ·gc.alloc.rate:                   2374.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2329.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.944 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3996642.609 ops/s
[info]                  ·gc.alloc.rate:                   2397.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2349.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     925.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3932876.273 ops/s
[info]                  ·gc.alloc.rate:                   2359.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2364.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3938094.119 ops/s
[info]                  ·gc.alloc.rate:                   2362.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2372.668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     948.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4003187.159 ops/s
[info]                  ·gc.alloc.rate:                   2401.079 MB/sec
[info]                  ·gc.alloc.rate.norm:              944.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2377.841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     934.864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.033 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3965754.682 ±(99.9%) 125691.259 ops/s [Average]
[info]   (min, avg, max) = (3932876.273, 3965754.682, 4003187.159), stdev = 32641.621
[info]   CI (99.9%): [3840063.423, 4091445.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2378.886 ±(99.9%) 74.539 MB/sec [Average]
[info]   (min, avg, max) = (2359.555, 2378.886, 2401.079), stdev = 19.358
[info]   CI (99.9%): [2304.347, 2453.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   944.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (944.000, 944.000, 944.000), stdev = 0.001
[info]   CI (99.9%): [944.000, 944.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2358.636 ±(99.9%) 76.153 MB/sec [Average]
[info]   (min, avg, max) = (2329.034, 2358.636, 2377.841), stdev = 19.777
[info]   CI (99.9%): [2282.484, 2434.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   936.013 ±(99.9%) 41.673 B/op [Average]
[info]   (min, avg, max) = (925.116, 936.013, 948.190), stdev = 10.822
[info]   CI (99.9%): [894.340, 977.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.092, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.048, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.036, 0.041), stdev = 0.004
[info]   CI (99.9%): [0.019, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 92.81% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6960399.054 ops/s
[info] # Warmup Iteration   2: 7500376.391 ops/s
[info] # Warmup Iteration   3: 7406273.589 ops/s
[info] Iteration   1: 7557634.945 ops/s
[info]                  ·gc.alloc.rate:                   1421.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1676.182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     348.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7536480.408 ops/s
[info]                  ·gc.alloc.rate:                   1417.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 7573687.499 ops/s
[info]                  ·gc.alloc.rate:                   1424.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347.619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.009 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7564900.360 ops/s
[info]                  ·gc.alloc.rate:                   1423.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280.921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.004 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7640214.548 ops/s
[info]                  ·gc.alloc.rate:                   1437.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354.099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7574583.552 ±(99.9%) 150878.180 ops/s [Average]
[info]   (min, avg, max) = (7536480.408, 7574583.552, 7640214.548), stdev = 39182.584
[info]   CI (99.9%): [7423705.371, 7725461.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1424.890 ±(99.9%) 28.776 MB/sec [Average]
[info]   (min, avg, max) = (1417.579, 1424.890, 1437.433), stdev = 7.473
[info]   CI (99.9%): [1396.114, 1453.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1414.636 ±(99.9%) 563.168 MB/sec [Average]
[info]   (min, avg, max) = (1344.458, 1414.636, 1676.182), stdev = 146.253
[info]   CI (99.9%): [851.468, 1977.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   293.903 ±(99.9%) 118.581 B/op [Average]
[info]   (min, avg, max) = (278.840, 293.903, 348.972), stdev = 30.795
[info]   CI (99.9%): [175.322, 412.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.014 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.014, 0.022), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.15% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1728145.078 ops/s
[info] # Warmup Iteration   2: 2728587.885 ops/s
[info] # Warmup Iteration   3: 2764647.356 ops/s
[info] Iteration   1: 2740707.106 ops/s
[info]                  ·gc.alloc.rate:                   1699.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1662.290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     954.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2766798.496 ops/s
[info]                  ·gc.alloc.rate:                   1716.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1673.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     951.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.071 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2774483.524 ops/s
[info]                  ·gc.alloc.rate:                   1720.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1680.513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     953.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.047 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2742061.248 ops/s
[info]                  ·gc.alloc.rate:                   1700.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1687.735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     968.710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.036 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2748435.772 ops/s
[info]                  ·gc.alloc.rate:                   1704.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1692.340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     969.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2754497.229 ±(99.9%) 58788.109 ops/s [Average]
[info]   (min, avg, max) = (2740707.106, 2754497.229, 2774483.524), stdev = 15267.085
[info]   CI (99.9%): [2695709.120, 2813285.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1708.268 ±(99.9%) 37.149 MB/sec [Average]
[info]   (min, avg, max) = (1699.522, 1708.268, 1720.603), stdev = 9.648
[info]   CI (99.9%): [1671.119, 1745.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1679.179 ±(99.9%) 46.022 MB/sec [Average]
[info]   (min, avg, max) = (1662.290, 1679.179, 1692.340), stdev = 11.952
[info]   CI (99.9%): [1633.157, 1725.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   959.405 ±(99.9%) 33.757 B/op [Average]
[info]   (min, avg, max) = (951.308, 959.405, 969.130), stdev = 8.767
[info]   CI (99.9%): [925.648, 993.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.052 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.052, 0.071), stdev = 0.013
[info]   CI (99.9%): [≈ 10⁻³, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.49% complete, ETA 00:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2575712.843 ops/s
[info] # Warmup Iteration   2: 5008708.148 ops/s
[info] # Warmup Iteration   3: 5193995.917 ops/s
[info] Iteration   1: 5150808.713 ops/s
[info]                  ·gc.alloc.rate:                   1597.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1646.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     503.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5156904.178 ops/s
[info]                  ·gc.alloc.rate:                   1599.103 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1659.550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     506.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5181363.848 ops/s
[info]                  ·gc.alloc.rate:                   1606.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1670.713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     507.494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5172340.616 ops/s
[info]                  ·gc.alloc.rate:                   1603.717 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342.913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     408.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.013 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5159705.194 ops/s
[info]                  ·gc.alloc.rate:                   1600.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     514.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.025 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   5164224.510 ±(99.9%) 47692.955 ops/s [Average]
[info]   (min, avg, max) = (5150808.713, 5164224.510, 5181363.848), stdev = 12385.709
[info]   CI (99.9%): [5116531.554, 5211917.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1601.471 ±(99.9%) 14.068 MB/sec [Average]
[info]   (min, avg, max) = (1597.445, 1601.471, 1606.539), stdev = 3.653
[info]   CI (99.9%): [1587.403, 1615.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1601.336 ±(99.9%) 559.151 MB/sec [Average]
[info]   (min, avg, max) = (1342.913, 1601.336, 1686.762), stdev = 145.210
[info]   CI (99.9%): [1042.185, 2160.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   487.985 ±(99.9%) 171.517 B/op [Average]
[info]   (min, avg, max) = (408.639, 487.985, 514.286), stdev = 44.542
[info]   CI (99.9%): [316.468, 659.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.067 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.020 ±(99.9%) 0.032 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.020, 0.032), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 93.84% complete, ETA 00:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6117768.476 ops/s
[info] # Warmup Iteration   2: 8077122.161 ops/s
[info] # Warmup Iteration   3: 8973807.018 ops/s
[info] Iteration   1: 9000537.828 ops/s
[info]                  ·gc.alloc.rate:                   869.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116.255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 9165365.198 ops/s
[info]                  ·gc.alloc.rate:                   885.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          996.590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.018 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 9027091.826 ops/s
[info]                  ·gc.alloc.rate:                   871.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          997.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 9197137.749 ops/s
[info]                  ·gc.alloc.rate:                   888.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666.779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9053305.187 ops/s
[info]                  ·gc.alloc.rate:                   874.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     174.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.011 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9088687.557 ±(99.9%) 336007.163 ops/s [Average]
[info]   (min, avg, max) = (9000537.828, 9088687.557, 9197137.749), stdev = 87259.993
[info]   CI (99.9%): [8752680.394, 9424694.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   877.782 ±(99.9%) 32.389 MB/sec [Average]
[info]   (min, avg, max) = (869.216, 877.782, 888.201), stdev = 8.411
[info]   CI (99.9%): [845.393, 910.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   865.694 ±(99.9%) 702.736 MB/sec [Average]
[info]   (min, avg, max) = (664.807, 865.694, 1002.425), stdev = 182.498
[info]   CI (99.9%): [162.959, 1568.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   149.941 ±(99.9%) 122.311 B/op [Average]
[info]   (min, avg, max) = (114.108, 149.941, 174.230), stdev = 31.764
[info]   CI (99.9%): [27.630, 272.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.013 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.013, 0.018), stdev = 0.003
[info]   CI (99.9%): [0.001, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.18% complete, ETA 00:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5605871.515 ops/s
[info] # Warmup Iteration   2: 7536934.374 ops/s
[info] # Warmup Iteration   3: 7494872.143 ops/s
[info] Iteration   1: 7494832.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7491204.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7492370.196 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7480359.032 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7482492.611 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7488251.798 ±(99.9%) 24689.926 ops/s [Average]
[info]   (min, avg, max) = (7480359.032, 7488251.798, 7494832.425), stdev = 6411.895
[info]   CI (99.9%): [7463561.871, 7512941.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.52% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3719865.666 ops/s
[info] # Warmup Iteration   2: 4990829.633 ops/s
[info] # Warmup Iteration   3: 5073157.590 ops/s
[info] Iteration   1: 5060793.135 ops/s
[info]                  ·gc.alloc.rate:                   1620.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1661.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     516.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.032 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4988659.133 ops/s
[info]                  ·gc.alloc.rate:                   1597.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1669.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     526.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.039 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5011952.146 ops/s
[info]                  ·gc.alloc.rate:                   1605.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1679.632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     527.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5021500.227 ops/s
[info]                  ·gc.alloc.rate:                   1608.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1686.071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 4999341.083 ops/s
[info]                  ·gc.alloc.rate:                   1600.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352.333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     425.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.020 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   5016449.145 ±(99.9%) 106800.655 ops/s [Average]
[info]   (min, avg, max) = (4988659.133, 5016449.145, 5060793.135), stdev = 27735.791
[info]   CI (99.9%): [4909648.489, 5123249.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1606.462 ±(99.9%) 34.013 MB/sec [Average]
[info]   (min, avg, max) = (1597.505, 1606.462, 1620.526), stdev = 8.833
[info]   CI (99.9%): [1572.450, 1640.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1609.733 ±(99.9%) 555.278 MB/sec [Average]
[info]   (min, avg, max) = (1352.333, 1609.733, 1686.071), stdev = 144.204
[info]   CI (99.9%): [1054.454, 2165.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   504.974 ±(99.9%) 171.553 B/op [Average]
[info]   (min, avg, max) = (425.728, 504.974, 528.459), stdev = 44.552
[info]   CI (99.9%): [333.422, 676.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.027, 0.039), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 94.86% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 999891.526 ops/s
[info] # Warmup Iteration   2: 1391067.339 ops/s
[info] # Warmup Iteration   3: 1409729.818 ops/s
[info] Iteration   1: 1423274.544 ops/s
[info]                  ·gc.alloc.rate:                   1939.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1671.294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.092 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1415997.065 ops/s
[info]                  ·gc.alloc.rate:                   1929.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014.453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2238.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1419940.455 ops/s
[info]                  ·gc.alloc.rate:                   1934.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024.447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2243.881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.069 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1406629.347 ops/s
[info]                  ·gc.alloc.rate:                   1916.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032.516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2273.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1410414.051 ops/s
[info]                  ·gc.alloc.rate:                   1921.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1696.706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1893.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.139 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1415251.092 ±(99.9%) 26162.698 ops/s [Average]
[info]   (min, avg, max) = (1406629.347, 1415251.092, 1423274.544), stdev = 6794.370
[info]   CI (99.9%): [1389088.394, 1441413.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1928.231 ±(99.9%) 35.625 MB/sec [Average]
[info]   (min, avg, max) = (1916.893, 1928.231, 1939.563), stdev = 9.252
[info]   CI (99.9%): [1892.606, 1963.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.000, 2144.000, 2144.000), stdev = 0.001
[info]   CI (99.9%): [2144.000, 2144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887.883 ±(99.9%) 717.935 MB/sec [Average]
[info]   (min, avg, max) = (1671.294, 1887.883, 2032.516), stdev = 186.445
[info]   CI (99.9%): [1169.948, 2605.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2099.389 ±(99.9%) 808.944 B/op [Average]
[info]   (min, avg, max) = (1847.455, 2099.389, 2273.322), stdev = 210.080
[info]   CI (99.9%): [1290.444, 2908.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.083 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (0.023, 0.083, 0.139), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.21% complete, ETA 00:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 503564.865 ops/s
[info] # Warmup Iteration   2: 1086520.618 ops/s
[info] # Warmup Iteration   3: 1076475.207 ops/s
[info] Iteration   1: 1071961.099 ops/s
[info]                  ·gc.alloc.rate:                   692.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961.436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1081596.488 ops/s
[info]                  ·gc.alloc.rate:                   698.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          982.084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1428.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.212 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1062282.920 ops/s
[info]                  ·gc.alloc.rate:                   685.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          655.993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     971.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.093 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1076817.134 ops/s
[info]                  ·gc.alloc.rate:                   695.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          656.820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     959.994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1083319.859 ops/s
[info]                  ·gc.alloc.rate:               699.644 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      659.131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 957.169 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1075195.500 ±(99.9%) 32605.863 ops/s [Average]
[info]   (min, avg, max) = (1062282.920, 1075195.500, 1083319.859), stdev = 8467.639
[info]   CI (99.9%): [1042589.637, 1107801.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   694.250 ±(99.9%) 21.094 MB/sec [Average]
[info]   (min, avg, max) = (685.921, 694.250, 699.644), stdev = 5.478
[info]   CI (99.9%): [673.156, 715.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   721.813 ±(99.9%) 560.283 MB/sec [Average]
[info]   (min, avg, max) = (655.039, 721.813, 982.084), stdev = 145.504
[info]   CI (99.9%): [161.531, 1282.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1055.821 ±(99.9%) 803.221 B/op [Average]
[info]   (min, avg, max) = (957.169, 1055.821, 1428.837), stdev = 208.594
[info]   CI (99.9%): [252.600, 1859.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.492 ±(99.9%) 3.703 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.492, 2.209), stdev = 0.962
[info]   CI (99.9%): [≈ 0, 4.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.722 ±(99.9%) 5.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.722, 3.243), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.55% complete, ETA 00:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1720799.519 ops/s
[info] # Warmup Iteration   2: 1829039.181 ops/s
[info] # Warmup Iteration   3: 1828031.031 ops/s
[info] Iteration   1: 1839244.818 ops/s
[info]                  ·gc.alloc.rate:                   345.887 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1783203.276 ops/s
[info]                  ·gc.alloc.rate:               335.369 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 225.767 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   3: 1838232.484 ops/s
[info]                  ·gc.alloc.rate:                   345.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     287.448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.505 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1842321.199 ops/s
[info]                  ·gc.alloc.rate:                   346.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          335.733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     286.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.053 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1822354.122 ops/s
[info]                  ·gc.alloc.rate:               342.744 MB/sec
[info]                  ·gc.alloc.rate.norm:          296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      335.081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 289.382 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1825071.180 ±(99.9%) 94947.441 ops/s [Average]
[info]   (min, avg, max) = (1783203.276, 1825071.180, 1842321.199), stdev = 24657.549
[info]   CI (99.9%): [1730123.738, 1920018.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   343.240 ±(99.9%) 17.841 MB/sec [Average]
[info]   (min, avg, max) = (335.369, 343.240, 346.492), stdev = 4.633
[info]   CI (99.9%): [325.399, 361.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (296.000, 296.000, 296.000), stdev = 0.001
[info]   CI (99.9%): [296.000, 296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   303.621 ±(99.9%) 168.149 MB/sec [Average]
[info]   (min, avg, max) = (255.777, 303.621, 335.733), stdev = 43.668
[info]   CI (99.9%): [135.472, 471.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   261.659 ±(99.9%) 138.621 B/op [Average]
[info]   (min, avg, max) = (218.887, 261.659, 289.382), stdev = 35.999
[info]   CI (99.9%): [123.037, 400.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.325 ±(99.9%) 2.544 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.325, 1.505), stdev = 0.661
[info]   CI (99.9%): [≈ 0, 2.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.278 ±(99.9%) 2.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.278, 1.289), stdev = 0.566
[info]   CI (99.9%): [≈ 0, 2.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 95.89% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820878.676 ops/s
[info] # Warmup Iteration   2: 1241881.286 ops/s
[info] # Warmup Iteration   3: 1269561.248 ops/s
[info] Iteration   1: 1272177.420 ops/s
[info]                  ·gc.alloc.rate:                   963.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          991.184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1226.317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.077 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1270590.860 ops/s
[info]                  ·gc.alloc.rate:                   962.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          992.868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1229.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.129 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1274417.187 ops/s
[info]                  ·gc.alloc.rate:               965.200 MB/sec
[info]                  ·gc.alloc.rate.norm:          1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663.473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 819.374 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   4: 1271944.012 ops/s
[info]                  ·gc.alloc.rate:                   963.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1235.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1271726.631 ops/s
[info]                  ·gc.alloc.rate:                   963.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1002.338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1240.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.052 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1272171.222 ±(99.9%) 5374.107 ops/s [Average]
[info]   (min, avg, max) = (1270590.860, 1272171.222, 1274417.187), stdev = 1395.639
[info]   CI (99.9%): [1266797.115, 1277545.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   963.609 ±(99.9%) 3.576 MB/sec [Average]
[info]   (min, avg, max) = (962.758, 963.609, 965.200), stdev = 0.929
[info]   CI (99.9%): [960.033, 967.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   929.624 ±(99.9%) 573.164 MB/sec [Average]
[info]   (min, avg, max) = (663.473, 929.624, 1002.338), stdev = 148.849
[info]   CI (99.9%): [356.460, 1502.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1150.096 ±(99.9%) 712.209 B/op [Average]
[info]   (min, avg, max) = (819.374, 1150.096, 1240.324), stdev = 184.958
[info]   CI (99.9%): [437.887, 1862.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0.050 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0.062 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.129), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.23% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1132378.857 ops/s
[info] # Warmup Iteration   2: 2362599.289 ops/s
[info] # Warmup Iteration   3: 2393484.076 ops/s
[info] Iteration   1: 2396108.409 ops/s
[info]                  ·gc.alloc.rate:                   1072.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          983.431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     645.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2395810.689 ops/s
[info]                  ·gc.alloc.rate:                   1071.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          985.212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2394121.572 ops/s
[info]                  ·gc.alloc.rate:                   1070.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1320.273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     867.949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.068 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2385147.075 ops/s
[info]                  ·gc.alloc.rate:                   1066.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     656.692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.014 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2400779.630 ops/s
[info]                  ·gc.alloc.rate:                   1073.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              704.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1000.260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2394393.475 ±(99.9%) 22061.729 ops/s [Average]
[info]   (min, avg, max) = (2385147.075, 2394393.475, 2400779.630), stdev = 5729.361
[info]   CI (99.9%): [2372331.746, 2416455.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1071.065 ±(99.9%) 9.952 MB/sec [Average]
[info]   (min, avg, max) = (1066.892, 1071.065, 1073.901), stdev = 2.585
[info]   CI (99.9%): [1061.113, 1081.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   704.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (704.000, 704.000, 704.000), stdev = 0.001
[info]   CI (99.9%): [704.000, 704.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1056.875 ±(99.9%) 567.619 MB/sec [Average]
[info]   (min, avg, max) = (983.431, 1056.875, 1320.273), stdev = 147.409
[info]   CI (99.9%): [489.256, 1624.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   694.683 ±(99.9%) 373.441 B/op [Average]
[info]   (min, avg, max) = (645.828, 694.683, 867.949), stdev = 96.981
[info]   CI (99.9%): [321.243, 1068.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.041, 0.068), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.58% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1841364.108 ops/s
[info] # Warmup Iteration   2: 2427060.284 ops/s
[info] # Warmup Iteration   3: 2448736.084 ops/s
[info] Iteration   1: 2509878.797 ops/s
[info]                  ·gc.alloc.rate:                   586.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     416.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.130 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2496301.693 ops/s
[info]                  ·gc.alloc.rate:               583.826 MB/sec
[info]                  ·gc.alloc.rate.norm:          368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209.156 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2496180.878 ops/s
[info]                  ·gc.alloc.rate:                   583.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          663.531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     418.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2490492.655 ops/s
[info]                  ·gc.alloc.rate:                   582.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2517284.173 ops/s
[info]                  ·gc.alloc.rate:                   588.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665.277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     415.861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.065 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2502027.639 ±(99.9%) 42811.014 ops/s [Average]
[info]   (min, avg, max) = (2490492.655, 2502027.639, 2517284.173), stdev = 11117.884
[info]   CI (99.9%): [2459216.625, 2544838.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   585.071 ±(99.9%) 10.056 MB/sec [Average]
[info]   (min, avg, max) = (582.328, 585.071, 588.712), stdev = 2.611
[info]   CI (99.9%): [575.016, 595.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   597.909 ±(99.9%) 572.775 MB/sec [Average]
[info]   (min, avg, max) = (331.823, 597.909, 665.277), stdev = 148.748
[info]   CI (99.9%): [25.134, 1170.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   375.991 ±(99.9%) 359.168 B/op [Average]
[info]   (min, avg, max) = (209.156, 375.991, 419.708), stdev = 93.275
[info]   CI (99.9%): [16.823, 735.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.415 ±(99.9%) 2.994 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.415, 1.802), stdev = 0.777
[info]   CI (99.9%): [≈ 0, 3.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 1.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.130), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 96.92% complete, ETA 00:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1972493.851 ops/s
[info] # Warmup Iteration   2: 2644996.606 ops/s
[info] # Warmup Iteration   3: 2649994.298 ops/s
[info] Iteration   1: 2642069.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2635864.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2645142.477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2648562.761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2651454.698 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2644618.814 ±(99.9%) 23239.004 ops/s [Average]
[info]   (min, avg, max) = (2635864.909, 2644618.814, 2651454.698), stdev = 6035.096
[info]   CI (99.9%): [2621379.810, 2667857.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.26% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1825396.447 ops/s
[info] # Warmup Iteration   2: 2345913.593 ops/s
[info] # Warmup Iteration   3: 2435393.909 ops/s
[info] Iteration   1: 2442909.993 ops/s
[info]                  ·gc.alloc.rate:                   1117.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1324.771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     853.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2448950.799 ops/s
[info]                  ·gc.alloc.rate:                   1120.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          995.903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     640.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2425464.174 ops/s
[info]                  ·gc.alloc.rate:                   1109.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          998.548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647.966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.041 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2444874.082 ops/s
[info]                  ·gc.alloc.rate:                   1118.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1336.288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     860.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.054 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2449224.421 ops/s
[info]                  ·gc.alloc.rate:                   1120.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1005.881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.040 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2442284.694 ±(99.9%) 37660.725 ops/s [Average]
[info]   (min, avg, max) = (2425464.174, 2442284.694, 2449224.421), stdev = 9780.371
[info]   CI (99.9%): [2404623.969, 2479945.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1117.350 ±(99.9%) 17.316 MB/sec [Average]
[info]   (min, avg, max) = (1109.556, 1117.350, 1120.454), stdev = 4.497
[info]   CI (99.9%): [1100.034, 1134.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1132.278 ±(99.9%) 697.199 MB/sec [Average]
[info]   (min, avg, max) = (995.903, 1132.278, 1336.288), stdev = 181.060
[info]   CI (99.9%): [435.079, 1829.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   729.561 ±(99.9%) 447.224 B/op [Average]
[info]   (min, avg, max) = (640.027, 729.561, 860.242), stdev = 116.143
[info]   CI (99.9%): [282.338, 1176.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0.046 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.046, 0.054), stdev = 0.007
[info]   CI (99.9%): [0.018, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.60% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5971.593 ops/s
[info] # Warmup Iteration   2: 9900.532 ops/s
[info] # Warmup Iteration   3: 11142.271 ops/s
[info] Iteration   1: 11894.665 ops/s
[info]                  ·gc.alloc.rate:                   1677.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              221952.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1654.330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     218890.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.263 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11899.124 ops/s
[info]                  ·gc.alloc.rate:                   1678.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              221952.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1665.526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     220296.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11690.534 ops/s
[info]                  ·gc.alloc.rate:                   1648.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              221957.220 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1674.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     225360.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5.408 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11788.427 ops/s
[info]                  ·gc.alloc.rate:                   1663.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1683.375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224637.688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16.674 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11918.741 ops/s
[info]                  ·gc.alloc.rate:                   1681.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              222008.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1688.545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     222978.445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.236 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   11838.298 ±(99.9%) 373.678 ops/s [Average]
[info]   (min, avg, max) = (11690.534, 11838.298, 11918.741), stdev = 97.043
[info]   CI (99.9%): [11464.620, 12211.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1669.829 ±(99.9%) 52.261 MB/sec [Average]
[info]   (min, avg, max) = (1648.764, 1669.829, 1681.197), stdev = 13.572
[info]   CI (99.9%): [1617.568, 1722.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   221975.473 ±(99.9%) 114.754 B/op [Average]
[info]   (min, avg, max) = (221952.036, 221975.473, 222008.037), stdev = 29.801
[info]   CI (99.9%): [221860.719, 222090.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1673.165 ±(99.9%) 52.891 MB/sec [Average]
[info]   (min, avg, max) = (1654.330, 1673.165, 1688.545), stdev = 13.736
[info]   CI (99.9%): [1620.274, 1726.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   222432.699 ±(99.9%) 10693.331 B/op [Average]
[info]   (min, avg, max) = (218890.350, 222432.699, 225360.904), stdev = 2777.024
[info]   CI (99.9%): [211739.368, 233126.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0.120 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (0.040, 0.120, 0.229), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15.971 ±(99.9%) 37.821 B/op [Average]
[info]   (min, avg, max) = (5.408, 15.971, 30.236), stdev = 9.822
[info]   CI (99.9%): [≈ 0, 53.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 97.95% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4334.412 ops/s
[info] # Warmup Iteration   2: 14672.174 ops/s
[info] # Warmup Iteration   3: 15204.606 ops/s
[info] Iteration   1: 15211.481 ops/s
[info]                  ·gc.alloc.rate:                   240.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26465.965 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.909 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15255.444 ops/s
[info]                  ·gc.alloc.rate:               241.161 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26389.644 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     3.000 ms
[info] Iteration   3: 15363.144 ops/s
[info]                  ·gc.alloc.rate:                   242.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          255.870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26204.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.771 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15295.504 ops/s
[info]                  ·gc.alloc.rate:               241.900 MB/sec
[info]                  ·gc.alloc.rate.norm:          24880.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26318.922 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   5: 15293.696 ops/s
[info]                  ·gc.alloc.rate:      241.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 24880.041 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15283.854 ±(99.9%) 215.812 ops/s [Average]
[info]   (min, avg, max) = (15211.481, 15283.854, 15363.144), stdev = 56.046
[info]   CI (99.9%): [15068.042, 15499.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   241.677 ±(99.9%) 3.519 MB/sec [Average]
[info]   (min, avg, max) = (240.501, 241.677, 242.941), stdev = 0.914
[info]   CI (99.9%): [238.159, 245.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24880.031 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (24880.028, 24880.031, 24880.041), stdev = 0.005
[info]   CI (99.9%): [24880.010, 24880.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204.677 ±(99.9%) 440.583 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.677, 255.890), stdev = 114.418
[info]   CI (99.9%): [≈ 0, 645.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   21075.739 ±(99.9%) 45368.634 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21075.739, 26465.965), stdev = 11782.090
[info]   CI (99.9%): [≈ 0, 66444.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2.136 ±(99.9%) 14.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.136, 8.771), stdev = 3.800
[info]   CI (99.9%): [≈ 0, 16.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.29% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18322.702 ops/s
[info] # Warmup Iteration   2: 21148.821 ops/s
[info] # Warmup Iteration   3: 26022.881 ops/s
[info] Iteration   1: 38386.218 ops/s
[info]                  ·gc.alloc.rate:               420.453 MB/sec
[info]                  ·gc.alloc.rate.norm:          17232.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      255.894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10487.672 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   2: 38173.091 ops/s
[info]                  ·gc.alloc.rate:               417.957 MB/sec
[info]                  ·gc.alloc.rate.norm:          17232.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511.602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21092.914 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Iteration   3: 36825.430 ops/s
[info]                  ·gc.alloc.rate:                   403.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14220.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.965 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 38286.991 ops/s
[info]                  ·gc.alloc.rate:                   419.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13677.435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 38276.413 ops/s
[info]                  ·gc.alloc.rate:                   419.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              17232.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          664.831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27336.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.856 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37989.628 ±(99.9%) 2522.811 ops/s [Average]
[info]   (min, avg, max) = (36825.430, 37989.628, 38386.218), stdev = 655.166
[info]   CI (99.9%): [35466.818, 40512.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   416.025 ±(99.9%) 27.447 MB/sec [Average]
[info]   (min, avg, max) = (403.373, 416.025, 420.453), stdev = 7.128
[info]   CI (99.9%): [388.578, 443.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   17232.018 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (17232.011, 17232.018, 17232.039), stdev = 0.012
[info]   CI (99.9%): [17231.972, 17232.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   419.596 ±(99.9%) 639.896 MB/sec [Average]
[info]   (min, avg, max) = (255.894, 419.596, 664.831), stdev = 166.179
[info]   CI (99.9%): [≈ 0, 1059.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17362.961 ±(99.9%) 26123.538 B/op [Average]
[info]   (min, avg, max) = (10487.672, 17362.961, 27336.055), stdev = 6784.200
[info]   CI (99.9%): [≈ 0, 43486.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.359 ±(99.9%) 2.955 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.359, 1.731), stdev = 0.768
[info]   CI (99.9%): [≈ 0, 3.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15.307 ±(99.9%) 126.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.307, 73.965), stdev = 32.799
[info]   CI (99.9%): [≈ 0, 141.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.63% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 881.499 ops/s
[info] # Warmup Iteration   2: 3128.682 ops/s
[info] # Warmup Iteration   3: 2819.569 ops/s
[info] Iteration   1: 3431.072 ops/s
[info]                  ·gc.alloc.rate:                   1058.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              485625.424 B/op
[info]                  ·gc.churn.PS_Eden_Space:          981.518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     450197.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28.643 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3593.535 ops/s
[info]                  ·gc.alloc.rate:                   1108.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              485608.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:          986.740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     432118.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.115 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3535.498 ops/s
[info]                  ·gc.alloc.rate:                   1090.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              485608.131 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1325.310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     589953.701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3614.125 ops/s
[info]                  ·gc.alloc.rate:               1115.356 MB/sec
[info]                  ·gc.alloc.rate.norm:          485608.120 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1000.999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 435818.932 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     5.000 ms
[info] Iteration   5: 3623.911 ops/s
[info]                  ·gc.alloc.rate:               1118.322 MB/sec
[info]                  ·gc.alloc.rate.norm:          485608.119 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1004.223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436062.985 B/op
[info]                  ·gc.count:                    3.000 counts
[info]                  ·gc.time:                     4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3559.628 ±(99.9%) 306.609 ops/s [Average]
[info]   (min, avg, max) = (3431.072, 3559.628, 3623.911), stdev = 79.625
[info]   CI (99.9%): [3253.019, 3866.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1098.445 ±(99.9%) 94.752 MB/sec [Average]
[info]   (min, avg, max) = (1058.759, 1098.445, 1118.322), stdev = 24.607
[info]   CI (99.9%): [1003.692, 1193.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   485611.583 ±(99.9%) 29.795 B/op [Average]
[info]   (min, avg, max) = (485608.119, 485611.583, 485625.424), stdev = 7.738
[info]   CI (99.9%): [485581.788, 485641.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1059.758 ±(99.9%) 572.788 MB/sec [Average]
[info]   (min, avg, max) = (981.518, 1059.758, 1325.310), stdev = 148.751
[info]   CI (99.9%): [486.970, 1632.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   468830.224 ±(99.9%) 262079.309 B/op [Average]
[info]   (min, avg, max) = (432118.315, 468830.224, 589953.701), stdev = 68061.164
[info]   CI (99.9%): [206750.914, 730909.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0.021 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.062), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9.405 ±(99.9%) 45.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.405, 28.643), stdev = 11.695
[info]   CI (99.9%): [≈ 0, 54.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.97% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25984.420 ops/s
[info] # Warmup Iteration   2: 58027.587 ops/s
[info] # Warmup Iteration   3: 59489.235 ops/s
[info] Iteration   1: 59814.864 ops/s
[info]                  ·gc.alloc.rate:                   763.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17010.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 58483.516 ops/s
[info]                  ·gc.alloc.rate:                   747.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          646.628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17398.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59821.401 ops/s
[info]                  ·gc.alloc.rate:                   764.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          971.529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25559.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.095 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 59780.022 ops/s
[info]                  ·gc.alloc.rate:               763.473 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:      650.811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17133.996 B/op
[info]                  ·gc.count:                    2.000 counts
[info]                  ·gc.time:                     2.000 ms
[info] Iteration   5: 60031.165 ops/s
[info]                  ·gc.alloc.rate:                   766.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          653.501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17132.796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   59586.193 ±(99.9%) 2404.017 ops/s [Average]
[info]   (min, avg, max) = (58483.516, 59586.193, 60031.165), stdev = 624.316
[info]   CI (99.9%): [57182.176, 61990.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   761.023 ±(99.9%) 30.490 MB/sec [Average]
[info]   (min, avg, max) = (747.040, 761.023, 766.678), stdev = 7.918
[info]   CI (99.9%): [730.533, 791.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.007 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (20099.949, 20100.007, 20100.052), stdev = 0.040
[info]   CI (99.9%): [20099.851, 20100.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   713.796 ±(99.9%) 554.908 MB/sec [Average]
[info]   (min, avg, max) = (646.508, 713.796, 971.529), stdev = 144.108
[info]   CI (99.9%): [158.888, 1268.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18847.108 ±(99.9%) 14459.967 B/op [Average]
[info]   (min, avg, max) = (17010.615, 18847.108, 25559.851), stdev = 3755.207
[info]   CI (99.9%): [4387.141, 33307.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1.542 ±(99.9%) 4.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.542, 2.729), stdev = 1.059
[info]   CI (99.9%): [≈ 0, 5.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.32% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58059.960 ops/s
[info] # Warmup Iteration   2: 78361.088 ops/s
[info] # Warmup Iteration   3: 78967.334 ops/s
[info] Iteration   1: 78613.697 ops/s
[info]                  ·gc.alloc.rate:                   515.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          587.867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11769.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1.874 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 78422.493 ops/s
[info]                  ·gc.alloc.rate:                   514.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          332.069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6664.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.253 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 78824.556 ops/s
[info]                  ·gc.alloc.rate:                   516.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13220.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1.247 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 79194.859 ops/s
[info]                  ·gc.alloc.rate:                   519.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          662.110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13158.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78571.313 ops/s
[info]                  ·gc.alloc.rate:               515.205 MB/sec
[info]                  ·gc.alloc.rate.norm:          10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      331.738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6645.002 B/op
[info]                  ·gc.count:                    1.000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   78725.384 ±(99.9%) 1152.295 ops/s [Average]
[info]   (min, avg, max) = (78422.493, 78725.384, 79194.859), stdev = 299.247
[info]   CI (99.9%): [77573.088, 79877.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   516.219 ±(99.9%) 7.555 MB/sec [Average]
[info]   (min, avg, max) = (514.238, 516.219, 519.296), stdev = 1.962
[info]   CI (99.9%): [508.664, 523.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.006, 10320.006), stdev = 0.001
[info]   CI (99.9%): [10320.005, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   515.182 ±(99.9%) 654.738 MB/sec [Average]
[info]   (min, avg, max) = (331.738, 515.182, 662.125), stdev = 170.033
[info]   CI (99.9%): [≈ 0, 1169.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10291.326 ±(99.9%) 12977.408 B/op [Average]
[info]   (min, avg, max) = (6645.002, 10291.326, 13220.083), stdev = 3370.192
[info]   CI (99.9%): [≈ 0, 23268.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0.408 ±(99.9%) 3.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.408, 1.874), stdev = 0.820
[info]   CI (99.9%): [≈ 0, 3.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8.169 ±(99.9%) 63.206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.169, 37.518), stdev = 16.414
[info]   CI (99.9%): [≈ 0, 71.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.483
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 1.8.0_161, VM 25.161-b12
[info] # VM invoker: /usr/lib/jvm/java-8-oracle/jre/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.66% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64145.955 ops/s
[info] # Warmup Iteration   2: 85713.280 ops/s
[info] # Warmup Iteration   3: 86037.969 ops/s
[info] Iteration   1: 85939.798 ops/s
[info]                  ·gc.alloc.rate:      5.680 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 85666.045 ops/s
[info]                  ·gc.alloc.rate:      5.661 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 85656.661 ops/s
[info]                  ·gc.alloc.rate:      5.660 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 85736.959 ops/s
[info]                  ·gc.alloc.rate:      5.666 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 85633.221 ops/s
[info]                  ·gc.alloc.rate:      5.659 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   85726.537 ±(99.9%) 482.633 ops/s [Average]
[info]   (min, avg, max) = (85633.221, 85726.537, 85939.798), stdev = 125.338
[info]   CI (99.9%): [85243.904, 86209.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.665 ±(99.9%) 0.033 MB/sec [Average]
[info]   (min, avg, max) = (5.659, 5.665, 5.680), stdev = 0.009
[info]   CI (99.9%): [5.632, 5.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   104.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.005, 104.005, 104.005), stdev = 0.001
[info]   CI (99.9%): [104.005, 104.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:02:04
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    801880.876 ±   28818.418   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2111.326 ±      75.922  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4144.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5      2087.978 ±     564.517  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5      4098.024 ±    1083.405    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5         0.079 ±       0.191  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5         0.155 ±       0.373    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        31.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        25.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1580605.258 ±   50964.520   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1269.449 ±      41.245  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1264.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5      1254.172 ±     569.824  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5      1249.684 ±     596.123    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5         0.083 ±       0.253  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.083 ±       0.256    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        19.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        18.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3579112.920 ±  254206.986   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       236.526 ±      16.827  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5       271.680 ±     136.548  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       119.400 ±      56.643    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.299 ±       2.486  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.130 ±       1.079    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         5.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         9.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    169782.981 ±    4374.203   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1329.233 ±      33.852  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     12320.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5      1320.387 ±      52.578  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5     12238.984 ±     763.379    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.067 ±       0.088  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.617 ±       0.802    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        20.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        20.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2142565.822 ±   98840.618   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       697.099 ±      32.481  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       512.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5       718.283 ±     571.197  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5       527.374 ±     412.826    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5         0.510 ±       3.903  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.382 ±       2.931    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        11.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        12.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   6903361.016 ±  412388.607   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       350.944 ±      21.070  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5       367.870 ±     651.925  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5        83.913 ±     149.666    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.364 ±       3.031  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.084 ±       0.701    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        10.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    311527.439 ±    5520.391   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5       988.334 ±      17.098  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      4992.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5       984.097 ±      27.753  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      4970.720 ±     185.421    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.054 ±       0.091  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.273 ±       0.460    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        15.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1637356.218 ±   37629.535   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2555.687 ±      60.054  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2456.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2570.303 ±     706.383  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      2470.209 ±     686.808    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.121 ±       0.067  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.116 ±       0.063    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        32.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2576383.897 ±   85330.728   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1807.443 ±      60.298  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1802.532 ±     712.163  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1100.785 ±     422.797    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.067  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.061 ±       0.042    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5   9600483.787 ±  361397.150   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1220.154 ±      46.404  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5      1209.962 ±     713.064  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       198.437 ±     119.847    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.067 ±       0.222  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.011 ±       0.037    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        18.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        14.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    634473.902 ±   15039.357   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1677.006 ±      39.801  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1728.910 ±     509.357  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4287.611 ±    1177.425    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.100 ±       0.105  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.248 ±       0.258    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        29.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   1918742.153 ±   19479.917   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1931.470 ±      18.632  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1584.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5      1951.709 ±     575.700  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      1600.452 ±     463.593    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.083 ±       0.127  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.068 ±       0.104    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        29.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6039605.325 ±  127437.611   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1657.905 ±      34.730  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1662.556 ±      74.873  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       433.201 ±      11.167    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.108 ±       0.132  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.028 ±       0.035    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        24.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  22474711.035 ±  594554.932   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       685.582 ±      18.354  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       731.211 ±     574.386  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        51.196 ±      40.206    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.399 ±       3.077  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.028 ±       0.218    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        11.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  26487415.966 ±   70764.248   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1103651.023 ±   25732.790   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1677.632 ±      39.599  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2392.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1664.665 ±      72.007  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2373.602 ±     123.420    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.100 ±       0.104  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.143 ±       0.150    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        25.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        26.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     14876.031 ±     541.327   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1323.778 ±      47.833  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    140048.057 ±       0.152    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1337.491 ±      31.478  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    141510.209 ±    6695.549    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.104 ±       0.113  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        11.007 ±      11.882    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     18550.668 ±     936.255   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       716.570 ±      36.370  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     60784.859 ±      55.780    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5       721.479 ±     568.624  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5     61163.387 ±   46928.442    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.079 ±       0.222  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         6.737 ±      19.046    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     17075.900 ±     111.266   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       316.869 ±       1.992  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     29200.028 ±       0.015    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       353.260 ±     364.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5     32562.744 ±   33803.807    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.352 ±       2.810  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        32.498 ±     259.238    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     16736.281 ±     683.898   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5       944.484 ±      38.565  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     88808.028 ±       0.015    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       988.848 ±      21.847  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     92988.623 ±    4641.802    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.208  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         6.272 ±      19.581    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        13.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     12477.605 ±     329.029   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1726.176 ±      45.808  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5    217715.154 ±     126.113    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1745.626 ±     602.408  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5    220183.944 ±   76677.892    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         9.462 ±      13.728    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        26.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     12330.203 ±     151.633   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1500.416 ±      17.438  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5    191496.068 ±       0.231    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1461.023 ±     705.916  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5    186505.707 ±   91552.750    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.092 ±       0.193  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5        11.692 ±      24.608    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        22.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     13272.173 ±     386.273   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1568.014 ±      45.079  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5    185904.035 ±       0.020    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5      1611.912 ±     577.097  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5    191157.900 ±   70398.028    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         9.389 ±      12.474    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        24.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     13507.868 ±     310.130   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1549.939 ±      35.824  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5    180568.034 ±       0.021    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5      1544.121 ±     688.727  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5    179895.443 ±   80311.359    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5         7.275 ±       6.595    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      4277.426 ±      29.432   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1180.463 ±       7.671  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    434296.104 ±       1.099    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1128.186 ±     700.939  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5    415147.464 ±  260499.534    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5        27.596 ±      68.088    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5      7427.361 ±     195.785   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1250.073 ±      33.598  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    264824.060 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1270.322 ±     561.361  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    268950.587 ±  112758.624    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        15.915 ±      35.589    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        19.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     25693.526 ±     835.180   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1104.310 ±      35.134  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     67642.479 ±      57.412    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1123.895 ±     707.916  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     68829.865 ±   42922.110    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.166  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.589 ±      10.121    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        17.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     30388.997 ±     254.602   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       551.665 ±       4.675  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     28568.015 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       533.093 ±     702.373  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     27604.639 ±   36352.527    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.356 ±       2.533  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        18.456 ±     131.289    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     13356.963 ±     203.110   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1441.395 ±      22.159  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5    169832.033 ±       0.350    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1460.716 ±     684.903  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    172141.069 ±   81976.729    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         6.863 ±      15.458    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     14346.698 ±     608.571   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1390.049 ±      58.325  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5    152456.033 ±       0.017    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5      1407.977 ±     579.577  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5    154555.519 ±   69795.569    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         9.621 ±      13.422    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        18.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     14849.279 ±     269.927   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1389.469 ±      25.722  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5    147248.031 ±       0.018    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5      1407.840 ±     593.113  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5    149171.989 ±   61632.239    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5         6.619 ±      10.402    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        21.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        16.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    325348.833 ±    4033.816   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1794.442 ±      22.580  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      8680.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1817.788 ±     695.966  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      8792.871 ±    3361.157    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.096 ±       0.156  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.463 ±       0.753    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        27.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    691238.086 ±   52127.640   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       572.852 ±      43.199  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       523.460 ±     688.882  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1185.677 ±    1491.481    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.483 ±       3.719  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         1.084 ±       8.341    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5         9.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1746128.785 ±   46042.811   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       337.319 ±       9.037  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       302.077 ±     162.593  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       272.127 ±     142.621    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.331 ±       2.742  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.298 ±       2.466    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    105789.132 ±    4461.348   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3843.364 ±     160.563  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      3804.803 ±     581.280  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     56600.511 ±    8020.296    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.142 ±       0.104  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.105 ±       1.527    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        47.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    373129.363 ±   11621.056   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1272.721 ±      39.317  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      5368.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1268.062 ±     595.152  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      5351.067 ±    2593.594    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.334 ±       0.445    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        19.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5    884877.357 ±   44197.433   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       625.288 ±      31.158  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       655.318 ±       6.369  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1165.562 ±      59.597    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.457 ±       3.490  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.821 ±       6.273    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        10.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2057685.483 ±   97948.709   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       952.058 ±      45.174  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       999.906 ±      13.676  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       764.672 ±      34.332    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.061 ±       0.052    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        15.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2242147.456 ±   23381.616   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    509435.149 ±    4772.362   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       595.568 ±       5.578  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5       591.791 ±     566.976  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1827.991 ±    1747.289    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.441 ±       3.527  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.358 ±      10.873    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    177223.645 ±    3518.487   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2176.409 ±      43.309  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     19328.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.580 ±     741.201  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     19206.839 ±    6665.004    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.121 ±       0.067  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.072 ±       0.592    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    423325.142 ±   31421.615   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       350.759 ±      25.857  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       349.494 ±     368.757  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1303.851 ±    1478.632    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.453 ±       3.812  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         1.669 ±      14.044    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5    989073.759 ±    6076.210   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       191.100 ±       1.069  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       204.539 ±     440.286  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       325.555 ±     700.784    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.006 ±       0.036  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.010 ±       0.057    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     82372.976 ±     938.566   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3399.515 ±      39.141  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3391.093 ±      63.208  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     64791.575 ±    1435.719    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.167 ±       0.150  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         3.182 ±       2.862    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        50.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        48.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    275607.273 ±    9377.976   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1520.204 ±      50.926  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      8680.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1473.731 ±     709.397  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      8419.036 ±    4213.143    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.108 ±       0.119  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.619 ±       0.690    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        22.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        18.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1810069.773 ±   58783.865   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       487.668 ±      15.551  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       515.975 ±     657.250  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       449.184 ±     578.881    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.395 ±       3.001  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.344 ±       2.615    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1941237.771 ±   10434.700   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     39002.166 ±     601.739   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1708.759 ±      26.720  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     68944.601 ±       5.077    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1674.346 ±      55.505  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67555.627 ±    1637.313    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.358 ±       3.938    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     25440.890 ±     525.054   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1601.989 ±      33.559  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     99097.971 ±      55.945    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1611.323 ±     564.902  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     99700.640 ±   36054.127    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.156  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         5.661 ±       9.618    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     57909.830 ±     894.176   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1015.029 ±      16.006  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     27584.008 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       988.777 ±      25.661  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     26870.548 ±     495.760    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.926 ±       4.545    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        15.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     68052.250 ±     328.293   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       457.723 ±       1.994  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10584.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.423 ±     766.353  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     10418.532 ±   17759.442    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.346 ±       2.702  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         8.005 ±      62.483    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     33579.959 ±     782.350   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1718.671 ±      39.883  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80536.014 ±       0.010    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1738.970 ±     524.640  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     81519.082 ±   26584.021    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.117 ±       0.156  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         5.472 ±       7.491    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39354.423 ±     734.927   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       620.795 ±      11.573  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24824.246 ±       2.022    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5       660.616 ±       3.757  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     26417.115 ±     532.852    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.411 ±       2.910  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        16.515 ±     117.282    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5        10.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     41310.844 ±    1124.787   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       415.458 ±      11.467  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     15824.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       429.440 ±     573.720  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     16354.807 ±   21746.169    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.440 ±       3.517  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        16.703 ±     133.599    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     44087.835 ±    1228.215   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       432.530 ±      12.124  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     15440.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       434.339 ±     578.301  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     15530.642 ±   21113.306    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.376 ±       2.918  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5        13.344 ±     103.414    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     44397.977 ±    1958.775   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       384.844 ±      16.720  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     13640.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5       368.039 ±     309.326  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5     13040.471 ±   10827.278    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5         0.370 ±       2.908  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5        13.011 ±     102.330    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     15452.174 ±     776.164   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      1103.132 ±      55.558  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5    112347.724 ±      26.172    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1133.255 ±     709.984  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    115483.736 ±   74183.658    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.086 ±       9.193    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        17.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     16386.974 ±     643.740   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       994.318 ±      38.984  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     95483.353 ±      58.078    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5       989.073 ±      24.414  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5     94984.820 ±    3136.395    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.075 ±       0.108  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         7.204 ±      10.415    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     74966.238 ±    1964.169   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       195.099 ±       5.105  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       204.634 ±     440.490  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4296.669 ±    9249.962    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.006 ±       0.054  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.132 ±       1.136    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         6.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     13384.415 ±     589.770   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1282.555 ±      56.715  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5    150800.214 ±       1.565    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1261.084 ±     560.160  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    148300.185 ±   66542.266    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         7.320 ±      14.634    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        19.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     56303.634 ±    1479.641   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1396.101 ±      36.175  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     39016.008 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1337.403 ±      33.878  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     37377.682 ±    1688.938    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         1.750 ±       3.214    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        20.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    283060.856 ±   19296.716   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       449.040 ±      30.469  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       449.634 ±     764.005  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      2506.577 ±    4347.075    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.399 ±       2.980  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         2.272 ±      17.041    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         8.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    337932.847 ±     619.062   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     73465.751 ±    1871.552   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1387.050 ±      35.653  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     29712.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1399.267 ±     538.318  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5     29970.406 ±   11307.816    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.873 ±       3.296    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        21.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        17.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     26733.101 ±     727.578   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       593.827 ±      16.151  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     34960.018 ±       0.013    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5       593.469 ±     567.715  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     34933.578 ±   33349.344    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.405 ±       3.045  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        24.009 ±     180.682    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    124051.888 ±    1717.591   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       484.299 ±       6.706  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.004 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       516.699 ±     658.174  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      6553.631 ±    8337.953    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.365 ±       2.740  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         4.605 ±      34.569    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     21676.940 ±     711.947   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1211.491 ±      39.672  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     87960.055 ±       0.284    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1254.015 ±     571.356  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     91079.231 ±   42478.491    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.058 ±       0.088  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.236 ±       6.376    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        20.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    167650.296 ±    5204.310   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1096.879 ±      33.798  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     10296.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1131.141 ±     695.529  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10614.110 ±    6408.266    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.664 ±       0.403    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    566341.147 ±    7482.926   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       434.690 ±       5.776  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       383.038 ±     617.544  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1064.095 ±    1708.737    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.375 ±       2.964  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.045 ±       8.256    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    591658.772 ±   52567.449   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    337259.757 ±     875.640   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       932.759 ±       1.972  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5       984.293 ±      25.221  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      4592.434 ±     108.785    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.311 ±       0.614    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        15.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     35499.498 ±    1256.234   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1672.796 ±      59.234  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     74159.924 ±       0.762    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1680.267 ±      42.863  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     74495.430 ±    2907.327    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.133 ±       0.224  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         5.897 ±       9.793    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5     95602.585 ±    2199.882   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1115.797 ±      25.463  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     18368.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1123.783 ±     697.173  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     18498.476 ±   11435.501    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.167 ±       1.524    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        17.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    156356.258 ±   11191.351   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       101.757 ±       7.212  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       102.322 ±     539.516  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1015.981 ±    5357.402    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.448 ±       3.858  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         4.493 ±      38.686    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     38760.309 ±     871.987   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2031.956 ±      45.915  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     82504.012 ±       0.007    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      2015.398 ±      67.131  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     81835.985 ±    4128.215    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.087 ±       0.036  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.550 ±       1.426    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        27.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     86210.727 ±     158.915   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       688.985 ±       1.353  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12576.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5       661.736 ±       4.909  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12078.627 ±      86.605    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.058 ±       0.183  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         1.064 ±       3.336    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5     98192.177 ±    2432.806   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       387.319 ±       9.624  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      6208.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       363.856 ±     485.495  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5836.937 ±    7874.311    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.444 ±       3.598  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         7.146 ±      57.971    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    111809.504 ±    1922.779   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       413.776 ±       7.155  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      5824.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       434.250 ±     577.728  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      6110.856 ±    8107.996    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.374 ±       2.964  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.253 ±      41.601    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    113726.377 ±    2430.755   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       331.272 ±       7.161  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      4584.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5       352.827 ±     364.736  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5      4887.128 ±    5166.287    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5         0.371 ±       3.015  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5         5.125 ±      41.653    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5         9.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9295.703 ±     104.050   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1541.587 ±      17.322  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    260931.381 ±      27.287    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1541.954 ±     686.170  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5    260983.738 ±  115694.348    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.170  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        14.115 ±      28.959    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5     10106.744 ±      98.025   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1554.819 ±      15.509  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    242113.215 ±      54.299    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1532.716 ±     691.831  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5    238631.320 ±  106103.224    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.071 ±       0.122  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5        11.026 ±      18.959    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        23.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        22.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    102958.781 ±    2214.355   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       267.974 ±       5.614  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       220.171 ±     491.251  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      3367.019 ±    7509.803    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.316 ±       2.724  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         4.833 ±      41.615    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         4.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5104.107 ±      36.844   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1357.865 ±       9.782  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    418664.086 ±       0.011    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1395.339 ±     608.750  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5    430170.267 ±  185289.459    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.062 ±       0.127  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        19.248 ±      39.048    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        18.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     23958.992 ±     842.805   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1763.893 ±      61.592  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5    115855.891 ±     126.422    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5      1747.510 ±     600.332  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5    114774.581 ±   38895.271    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.468 ±       5.211    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        26.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    333174.519 ±    9881.603   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       734.973 ±      21.792  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       731.145 ±     578.499  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      3452.175 ±    2677.157    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.143  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.373 ±       0.671    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    383786.664 ±    1798.053   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28507.676 ±     709.387   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1869.312 ±      46.288  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5    103200.016 ±       0.009    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      1879.708 ±     676.957  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5    103744.525 ±   35796.203    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         5.053 ±       9.167    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    129069.185 ±    3039.076   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2223.229 ±      53.199  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     27104.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      2230.733 ±     730.876  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5     27189.730 ±    8570.833    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.104 ±       0.188  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         1.268 ±       2.270    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    308654.291 ±    2282.146   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       436.178 ±       3.227  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       429.301 ±     573.818  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5      2189.680 ±    2936.816    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.450 ±       3.541  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.296 ±      18.064    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    720629.113 ±    8151.273   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       468.873 ±       5.341  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       450.320 ±     629.012  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       983.282 ±    1370.266    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.344 ±       2.651  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.751 ±       5.793    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70978.972 ±    1135.694   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3015.841 ±      48.238  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66856.296 ±       2.499    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      2980.828 ±     563.692  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5     66082.964 ±   12722.072    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.117 ±       0.146  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         2.587 ±       3.269    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        37.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    211917.118 ±    5241.436   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1725.937 ±      41.994  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     12816.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1680.053 ±      45.002  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     12475.633 ±     421.607    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.092 ±       0.108  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.681 ±       0.803    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    840614.994 ±   29732.114   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       662.321 ±      23.529  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       720.940 ±     560.709  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      1348.660 ±    1014.791    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.447 ±       3.582  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.848 ±       6.806    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1022260.618 ±   42260.932   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       556.068 ±      22.898  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       531.252 ±     700.650  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       819.217 ±    1095.702    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.396 ±       3.013  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.609 ±       4.628    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1003400.555 ±    4806.926   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     30326.555 ±     457.437   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1668.892 ±      25.199  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     86587.100 ±      26.565    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1673.831 ±      51.227  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     86843.144 ±    2141.888    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.119  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         4.099 ±       6.121    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        25.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    191791.907 ±    6716.948   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1144.558 ±      40.160  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      9392.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5      1189.651 ±     698.249  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      9767.559 ±    5882.117    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.513 ±       0.818    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        18.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        16.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    261214.305 ±    4497.382   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       849.851 ±      14.467  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5       800.782 ±     702.502  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      4823.101 ±    4202.217    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.351 ±       0.866    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     67023.889 ±    1104.310   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2785.664 ±      46.373  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     65408.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2768.712 ±     621.707  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     65015.138 ±   15000.179    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.121 ±       0.143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.835 ±       3.368    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        41.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        41.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    557477.968 ±   22824.672   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       563.951 ±      23.158  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       522.725 ±     690.130  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1477.922 ±    1976.005    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.458 ±       3.680  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         1.285 ±      10.300    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         8.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    547489.482 ±   33248.141   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       420.286 ±      25.444  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       434.390 ±     578.254  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      1249.923 ±    1686.988    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.383 ±       2.973  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         1.123 ±       8.741    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    616452.688 ±    2897.593   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    322049.379 ±   13904.998   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       887.320 ±      38.342  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5       917.885 ±     572.080  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4487.990 ±    2854.957    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.468 ±       0.587    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        14.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        15.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5      9180.003 ±     264.936   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1202.576 ±      34.693  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    206147.269 ±      27.512    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1202.016 ±     709.128  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5    206109.645 ±  123131.158    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5        11.451 ±      30.101    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5      9609.278 ±     127.058   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1151.605 ±      14.986  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    188599.679 ±      53.446    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5      1190.838 ±     698.971  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5    195000.986 ±  113746.436    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5        10.916 ±      19.472    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        18.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        17.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    148979.536 ±    4153.565   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       969.459 ±      26.493  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       935.918 ±     578.825  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5      9885.202 ±    6099.764    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.571 ±       0.954    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        14.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        12.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      7280.165 ±      79.765   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1355.877 ±      14.311  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    293080.061 ±       0.009    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1330.008 ±      41.791  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5    287485.259 ±    6143.070    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        17.099 ±      22.608    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     20077.767 ±     650.394   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1066.693 ±      34.281  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     83606.791 ±     112.257    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1064.331 ±     571.328  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5     83503.811 ±   47963.957    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.075 ±       0.146  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         5.874 ±      11.375    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        13.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    699623.990 ±   24720.557   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1262.463 ±      44.765  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1271.739 ±     585.464  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      2861.951 ±    1350.605    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.079 ±       0.105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.178 ±       0.231    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    546914.196 ±    1658.349   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     21290.859 ±     999.060   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       981.843 ±      46.109  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     72567.806 ±      30.860    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5       992.436 ±      22.143  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5     73363.319 ±    5010.255    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         4.921 ±       2.517    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     23458.243 ±    1130.204   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1313.922 ±      64.046  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     88134.232 ±      32.787    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1270.802 ±     568.366  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5     85220.806 ±   37243.935    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         5.576 ±       6.419    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        19.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     28125.263 ±     953.317   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1302.665 ±      44.642  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     72888.496 ±      53.525    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1327.000 ±      46.147  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5     74256.349 ±    4174.212    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.054 ±       0.044  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         3.030 ±       2.491    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    250102.845 ±    4138.131   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       650.978 ±      11.039  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       666.761 ±       2.595  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      4195.380 ±      79.169    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.050 ±       0.201  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.314 ±       1.262    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         7.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     15856.218 ±     530.392   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1621.944 ±      53.872  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    160984.030 ±       0.020    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1603.292 ±     593.650  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    159078.558 ±   56253.129    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         8.264 ±      12.534    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        22.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     43144.494 ±    1071.957   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1371.957 ±      34.660  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     50040.010 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1403.439 ±     545.834  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     51184.267 ±   19642.587    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.129 ±       3.846    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1094273.367 ±    8624.646   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1173.761 ±       8.936  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1203.524 ±     706.149  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1731.213 ±    1027.636    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.090 ±       0.081    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        15.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    698236.341 ±     497.177   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     50147.261 ±    2017.462   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1329.026 ±      53.495  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     41704.009 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5      1331.852 ±      41.171  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5     41797.619 ±    2551.764    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5         2.747 ±       2.815    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     14998.857 ±     301.344   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1362.208 ±      27.241  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    142922.305 ±      25.295    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1405.549 ±     578.960  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5    147497.524 ±   62097.646    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        10.046 ±       9.581    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     15913.522 ±     331.192   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1296.285 ±      27.439  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    128196.006 ±      53.524    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5      1327.131 ±      45.370  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5    131246.787 ±    3709.970    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.083 ±       0.170  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         8.224 ±      16.683    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        20.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        18.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    262940.436 ±   20381.403   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       684.339 ±      53.178  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       666.708 ±       2.610  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      3991.832 ±     324.554    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.046 ±       0.183  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.270 ±       1.079    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     11812.988 ±     178.341   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1623.490 ±      23.423  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    216280.524 ±       4.194    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1603.177 ±     593.045  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5    213521.678 ±   76595.406    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.036  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         8.874 ±       4.755    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        24.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     41184.879 ±     866.354   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1564.157 ±      33.335  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     59768.011 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1541.352 ±     698.491  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5     58905.960 ±   27017.448    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         2.702 ±       3.455    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1090435.532 ±   11868.606   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       992.225 ±      10.856  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       933.355 ±     566.542  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1347.351 ±     825.041    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.096 ±       0.191    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        12.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1277900.428 ±   37911.974   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5      3590.243 ±      13.436   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       484.777 ±       1.761  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5    212496.122 ±       0.016    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5       445.473 ±     753.154  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5    195301.108 ±  330478.732    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5         0.429 ±       3.476  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5       188.244 ±    1524.528    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    118676.976 ±    2503.874   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2204.853 ±      46.658  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     29240.004 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      2162.173 ±     718.907  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5     28678.017 ±    9747.190    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.079 ±       0.183  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         1.048 ±       2.416    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    253450.129 ±    6407.785   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       556.613 ±      13.750  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5       574.444 ±     545.607  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5      3568.821 ±    3417.907    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.461 ±       3.742  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         2.854 ±      23.186    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        12.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    484983.463 ±    7747.887   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       611.425 ±       9.441  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       665.954 ±       3.283  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      2160.975 ±      42.267    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.356 ±       2.760  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.154 ±       8.939    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     69980.053 ±    1541.912   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3032.611 ±      60.733  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68198.404 ±     261.731    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      3048.228 ±      67.563  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5     68550.660 ±    1785.685    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.129 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         2.900 ±       2.889    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        45.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        41.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    183724.080 ±    3317.880   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1874.351 ±      33.713  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     16056.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1816.706 ±     714.168  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     15560.621 ±    6033.602    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.112 ±       0.122  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.963 ±       1.047    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        27.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        22.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    476078.358 ±    6823.327   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       488.838 ±       7.078  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       509.073 ±     650.196  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1684.206 ±    2165.234    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.458 ±       3.590  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.522 ±      11.928    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    572834.091 ±    8974.063   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       448.416 ±       6.881  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       449.543 ±     764.076  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      1236.535 ±    2115.892    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.386 ±       3.097  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.061 ±       8.519    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    659539.053 ±    3541.495   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     27404.402 ±     698.895   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1506.447 ±      38.424  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     86516.291 ±      26.791    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1535.831 ±     704.589  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     88176.103 ±   39317.303    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         4.543 ±       3.851    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        23.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      7154.084 ±      32.613   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1131.444 ±       4.769  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    248864.062 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1133.369 ±     710.114  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    249308.742 ±  156850.515    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.188  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5        13.747 ±      41.398    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    100553.668 ±    2116.968   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       974.375 ±      20.913  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5      1002.610 ±      12.492  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5     15690.032 ±     172.514    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         1.175 ±       1.928    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        11.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      6822.656 ±     158.348   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1245.259 ±      28.830  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    287232.065 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1193.673 ±     699.943  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    275171.163 ±  156408.957    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.042 ±       0.057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         9.593 ±      12.958    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        18.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     16917.951 ±     373.633   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       998.057 ±      22.806  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     92844.391 ±     117.865    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5       995.775 ±      19.559  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5     92636.363 ±    3674.140    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5         6.588 ±       8.546    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    496545.116 ±   17247.083   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1125.904 ±      39.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5      1135.999 ±     717.565  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5      3599.989 ±    2270.588    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5         0.224 ±       0.293    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    418287.042 ±     946.599   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     18114.488 ±     469.400   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       917.279 ±      24.360  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     79682.823 ±      28.624    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5       925.500 ±     577.318  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5     80458.596 ±   51528.875    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5         0.075 ±       0.185  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5         6.509 ±      16.101    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     11816.626 ±     287.104   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1218.382 ±      29.455  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    162264.058 ±       0.185    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      1201.605 ±     697.788  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5    160102.138 ±   95059.787    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        10.537 ±       8.973    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     12252.114 ±     346.089   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1137.121 ±      32.442  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    146064.702 ±      61.874    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1123.839 ±     697.290  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5    144415.930 ±   91258.985    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         9.624 ±      11.647    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    169430.488 ±    3021.059   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       980.089 ±      17.575  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.003 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       935.818 ±     572.723  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      8687.825 ±    5198.535    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.058 ±       0.143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.540 ±       1.331    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        12.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     27533.374 ±     548.866   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1208.439 ±      23.201  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     69072.109 ±     106.724    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1199.784 ±     696.540  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5     68564.604 ±   39406.003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         3.812 ±       8.284    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        16.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    653837.836 ±    7081.382   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       897.369 ±       9.767  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       865.335 ±     698.946  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      2082.735 ±    1678.948    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.150 ±       0.236    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        11.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    757802.241 ±   73265.598   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     17662.193 ±     728.100   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5       854.520 ±      35.300  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     76136.034 ±       0.054    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5       863.018 ±     701.526  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     76895.464 ±   62456.914    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.046 ±       0.132  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         4.059 ±      11.642    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        13.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        11.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     23046.959 ±     954.143   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       920.044 ±      37.756  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     62813.908 ±      53.713    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       920.211 ±     568.017  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     62781.580 ±   37668.711    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         5.396 ±      10.523    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    177308.470 ±     593.233   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       461.468 ±       1.473  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       450.999 ±     767.258  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      4004.113 ±    6823.123    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.337 ±       2.682  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.997 ±      23.832    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     15904.146 ±     360.073   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1194.142 ±      26.937  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    118152.277 ±       1.522    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1190.989 ±     699.190  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    117903.604 ±   70977.139    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         7.006 ±      16.439    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     81059.109 ±    1425.138   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1601.577 ±      28.194  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     31096.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1609.305 ±     552.866  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     31244.352 ±   10637.439    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.091  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         1.374 ±       1.780    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        20.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    134999.404 ±    2054.162   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1426.025 ±      22.049  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     16624.003 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5      1463.601 ±     687.622  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     17057.871 ±    7839.208    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.777 ±       1.391    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    441582.493 ±   28807.049   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       489.392 ±      31.852  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       516.017 ±     657.120  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1841.210 ±    2359.978    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.381 ±       2.929  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         1.397 ±      10.771    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    530296.645 ±    5479.876   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    120813.243 ±    5643.831   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1491.866 ±      70.229  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19432.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1470.310 ±     733.194  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     19141.601 ±    9117.653    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.195 ±       0.961    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        17.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    148842.362 ±    5514.252   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2565.140 ±      95.081  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     27120.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2574.492 ±     741.477  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5     27214.707 ±    7508.899    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.104 ±       0.260  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         1.101 ±       2.748    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        38.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    358200.593 ±    2801.197   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       366.004 ±       2.971  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       363.627 ±     637.694  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1597.073 ±    2794.550    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.451 ±       3.771  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.982 ±      16.577    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    901086.310 ±   17616.499   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       311.507 ±       6.264  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       286.755 ±     715.366  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       501.366 ±    1251.344    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.334 ±       2.672  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.581 ±       4.655    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     76387.602 ±    1207.719   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3276.816 ±      51.474  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      3254.977 ±     741.655  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5     67052.954 ±   14502.823    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.154 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         3.172 ±       2.455    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        48.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        41.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    235751.325 ±    3594.784   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1806.239 ±      26.559  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12056.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1815.882 ±     695.975  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     12119.719 ±    4608.484    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.583 ±       1.024    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        27.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1243019.934 ±   10885.844   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       815.113 ±       6.874  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       788.511 ±     691.608  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       998.478 ±     879.233    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.100 ±       0.167    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1259837.381 ±   68051.485   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       518.784 ±      27.687  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       464.844 ±     699.573  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       579.877 ±     862.409    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.382 ±       2.936  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.475 ±       3.644    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1380001.390 ±    2650.941   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     34253.112 ±     406.054   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1733.273 ±      20.640  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     79633.830 ±      15.649    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1742.088 ±     584.520  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     80033.780 ±   26537.475    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.146  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         4.208 ±       6.677    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     18529.205 ±     225.345   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1944.852 ±      24.349  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    165172.314 ±      28.359    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1954.906 ±     556.585  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5    166056.477 ±   48974.588    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.117 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         9.901 ±      10.327    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        29.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     97780.220 ±    4808.362   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1283.454 ±      63.072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     20656.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5      1326.388 ±      46.656  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     21349.231 ±    1105.569    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.872 ±       1.468    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        20.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    233470.131 ±    6792.900   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       759.601 ±      21.804  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       733.238 ±     573.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      4940.084 ±    3791.373    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.054 ±       0.193  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.365 ±       1.304    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     16299.677 ±     338.170   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2141.921 ±      42.909  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    206800.201 ±       1.477    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      2153.082 ±     720.039  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5    207894.040 ±   70254.386    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         8.839 ±      11.672    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        32.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        30.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     20570.359 ±     969.317   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1664.968 ±      77.561  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    127370.883 ±      69.990    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      1678.109 ±      46.727  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    128387.411 ±    5546.225    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.108 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         8.277 ±       6.527    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        21.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     88513.600 ±    2167.459   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1212.647 ±      28.844  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.010 ±       0.095    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1191.362 ±     689.124  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     21179.223 ±   12168.249    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.062 ±       0.160  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         1.110 ±       2.839    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        16.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    224395.027 ±   15135.078   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       715.217 ±      47.986  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       730.941 ±     570.169  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5      5123.616 ±    3892.129    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.079 ±       0.236  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.556 ±       1.656    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    254404.185 ±    1386.586   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     25772.033 ±     883.026   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1757.219 ±      60.296  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    107312.007 ±       0.282    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1809.942 ±     690.745  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    110462.418 ±   38353.436    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         5.085 ±       6.037    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        27.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        24.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     70247.031 ±    1567.423   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1580.355 ±      34.930  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     35400.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1606.255 ±     592.731  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5     35969.481 ±   12771.110    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.191  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         2.237 ±       4.255    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        21.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     93466.976 ±    5335.156   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1164.696 ±      66.914  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     19608.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5      1187.308 ±     696.001  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     20009.534 ±   12272.098    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.071 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         1.191 ±       0.704    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    105061.021 ±    3474.243   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1228.883 ±      39.758  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     18408.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1201.540 ±     711.756  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     18007.631 ±   10919.379    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.062 ±       0.113  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.935 ±       1.688    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     46455.559 ±     956.459   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      2212.387 ±      44.221  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     74944.010 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      2217.456 ±     694.366  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5     75117.640 ±   23592.208    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.108  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         3.102 ±       3.622    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        33.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    119486.368 ±    3430.748   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1121.338 ±      32.199  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     14768.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5      1060.583 ±     570.288  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5     13964.152 ±    7343.331    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.062 ±       0.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.822 ±       2.230    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        15.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    341601.811 ±   16730.047   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       507.022 ±      24.784  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       507.316 ±     647.722  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      2335.547 ±    2953.037    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.537 ±       4.362  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.499 ±      20.302    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    666669.079 ±   49955.473   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       826.874 ±      61.794  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       862.949 ±     700.959  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      2041.096 ±    1728.160    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.087 ±       0.164  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.206 ±       0.381    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        13.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    723041.781 ±   24320.140   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    213896.381 ±    6120.432   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       699.130 ±      19.734  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5       655.915 ±       7.427  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      4826.170 ±      90.246    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.183  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.492 ±       1.359    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        10.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    185214.089 ±    6449.007   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1104.569 ±      38.025  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      9384.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      1124.140 ±     707.973  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5      9550.419 ±    6008.078    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.530 ±       0.470    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        17.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        15.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    320191.851 ±   10389.147   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       621.846 ±      20.208  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5       666.813 ±       3.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      3277.155 ±      95.708    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.358 ±       2.593  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.751 ±      12.668    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    536749.449 ±    6206.867   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       529.348 ±       5.670  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5       509.114 ±     648.172  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5      1491.783 ±    1888.305    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.450 ±       3.608  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         1.319 ±      10.577    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1014971.112 ±   18850.302   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       753.250 ±      14.251  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       731.312 ±     573.749  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5      1134.813 ±     914.041    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.097 ±       0.123    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        11.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1150892.500 ±    5719.109   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5       661.303 ±      11.856   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1380.643 ±      24.430  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5   3284912.735 ±       0.500    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1398.441 ±     539.388  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5   3327558.465 ± 1297588.206    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5       148.498 ±     232.389    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        18.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     30175.733 ±     343.931   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       545.184 ±       6.113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     28432.016 ±       0.010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       514.980 ±     655.773  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5     26852.387 ±   34164.829    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.451 ±       3.704  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5        23.411 ±     192.240    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        10.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5       667.716 ±      18.506   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1429.433 ±      38.826  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5   3368478.662 ±      73.254    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5      1458.224 ±     716.216  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5   3438667.129 ± 1775254.809    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5         0.037 ±       0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5        88.418 ±     159.367    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        22.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        20.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     13057.559 ±     306.284   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1051.768 ±      24.451  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5    126750.760 ±     133.282    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5      1059.063 ±     593.774  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5    127605.559 ±   70496.662    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.054 ±       0.072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         6.523 ±       8.611    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    272334.161 ±    8221.644   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       960.691 ±      28.877  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.002 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       930.606 ±     577.149  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5      5375.570 ±    3271.855    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.083 ±       0.127  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.481 ±       0.735    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        12.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    299750.437 ±    1701.220   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15255.118 ±     497.198   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1010.977 ±      33.061  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5    104280.353 ±       2.806    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1053.828 ±     552.978  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5    108662.496 ±   55312.104    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.067 ±       0.207  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         6.842 ±      21.281    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        15.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    880961.761 ±   14785.059   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2879.798 ±      47.558  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5144.001 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5      2847.488 ±     687.324  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5      5085.833 ±    1188.712    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5         0.092 ±       0.091  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5         0.164 ±       0.166    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        42.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        34.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1660877.473 ±   25245.901   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1561.951 ±      22.744  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5      1530.085 ±     709.415  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5      1450.143 ±     684.545    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.096 ±       0.166  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.091 ±       0.159    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        23.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        28.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   7201199.485 ±  243807.437   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2159.683 ±      73.530  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       472.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5      2165.443 ±     723.848  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       473.149 ±     150.810    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.092 ±       0.122  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.020 ±       0.027    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        32.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        24.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    326766.441 ±    7408.812   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1991.640 ±      45.621  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5      1938.739 ±     536.887  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5      9339.088 ±    2693.483    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.079 ±       0.154  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.380 ±       0.737    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1066928.958 ±   23633.224   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2457.152 ±      54.168  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3624.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5      2501.185 ±     698.179  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      3688.117 ±     968.749    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.121 ±       0.154  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.178 ±       0.227    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        37.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        30.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3345473.972 ±   93504.149   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1938.599 ±      54.109  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       912.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1939.389 ±     537.057  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5       912.640 ±     267.809    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.100 ±       0.154  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.047 ±       0.072    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        29.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        29.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5  14955624.279 ±  835898.128   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       912.338 ±      50.517  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       866.479 ±     700.303  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5        91.254 ±      75.172    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.087 ±       0.067  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.009 ±       0.007    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        13.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        11.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    467869.434 ±   12661.144   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1683.861 ±      45.664  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5664.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1664.155 ±      72.947  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      5598.023 ±     317.875    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.087 ±       0.104  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.294 ±       0.349    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        25.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        26.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2036626.749 ±  117416.811   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1315.072 ±      75.069  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1016.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5      1322.726 ±      52.306  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5      1022.164 ±      87.976    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5         0.079 ±       0.200  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.061 ±       0.156    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        20.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        21.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5322342.196 ±  239841.078   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       703.404 ±      31.738  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5       665.893 ±       4.226  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       196.930 ±       9.295    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.079 ±       0.191  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.023 ±       0.056    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    401708.039 ±    5905.298   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1884.980 ±      26.997  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7384.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5      1937.064 ±     575.155  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5      7588.974 ±    2301.419    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5         0.117 ±       0.209  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.457 ±       0.822    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        29.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        30.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2603386.586 ±   56650.707   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1376.444 ±      30.186  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5      1391.989 ±     596.859  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5       841.252 ±     352.619    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5         0.083 ±       0.080  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.050 ±       0.049    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        21.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        20.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6452630.988 ±  225146.154   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       983.968 ±      34.378  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5       999.381 ±      14.678  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5       243.776 ±       9.286    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.083 ±       0.057  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.020 ±       0.013    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        15.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    646132.688 ±   17269.136   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1911.507 ±      50.853  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4656.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5      1939.137 ±     574.879  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5      4724.477 ±    1459.709    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.105  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.213 ±       0.258    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        29.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        29.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    810549.268 ±   22961.304   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2690.763 ±      75.435  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5224.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2640.897 ±     567.879  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5127.450 ±    1116.087    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.112 ±       0.166  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.218 ±       0.323    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        35.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    993481.099 ±   45606.217   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1232.185 ±      56.420  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5      1188.046 ±     686.963  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5      1882.731 ±    1105.939    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.067 ±       0.067  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.105 ±       0.103    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        18.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   7872039.481 ±   69525.555   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       360.151 ±       3.043  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       370.575 ±     662.144  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        74.108 ±     132.736    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.316 ±       2.540  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.063 ±       0.509    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         8.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    268004.983 ±    7501.747   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1377.272 ±      38.617  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8088.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1387.537 ±     572.941  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5      8147.315 ±    3303.768    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.104 ±       0.127  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.612 ±       0.761    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        21.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        22.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      8034.397 ±     334.189   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2067.522 ±      85.770  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    405000.055 ±       0.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5      2019.720 ±      55.068  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5    395657.203 ±   12357.661    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5         0.137 ±       0.258  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5        26.869 ±      49.970    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        30.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     13370.657 ±     583.355   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       360.641 ±      15.666  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     42440.033 ±       0.005    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5       347.794 ±     370.317  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5     40905.924 ±   43278.760    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.530 ±       4.538  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        61.553 ±     527.368    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5        13.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     23571.215 ±     549.107   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       441.084 ±      10.579  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     29448.020 ±       0.011    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5       383.731 ±     619.095  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     25611.860 ±   41259.818    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.359 ±       2.846  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        24.106 ±     191.216    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         7.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2357.678 ±      65.230   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1476.525 ±      41.111  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    985529.602 ±      12.196    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5      1463.357 ±     684.402  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5    977221.723 ±  475308.618    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5         0.017 ±       0.036  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        11.127 ±      23.955    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        22.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        22.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      8486.785 ±     234.248   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1953.665 ±      53.557  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    362276.733 ±      40.306    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5      1950.285 ±     551.083  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5    361613.283 ±   99709.555    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5         0.153 ±       0.238  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        28.455 ±      44.403    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        29.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        25.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     43040.123 ±    1429.331   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       623.816 ±      20.219  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.842 ±       0.253    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5       649.986 ±       6.142  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5     23766.085 ±     846.197    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5         0.587 ±       4.606  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        21.343 ±     167.492    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     65718.213 ±    2619.793   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       495.140 ±      19.715  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11856.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5       515.074 ±     656.106  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5     12360.108 ±   16069.988    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.415 ±       3.217  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         9.921 ±      76.830    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     79170.203 ±     423.695   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.208 ±       0.006  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5969.747 ±      85.006   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1783.143 ±      25.646  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    470024.025 ±       1.337    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1799.472 ±     659.979  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5    474262.488 ±  170360.477    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.067  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        23.038 ±      17.417    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        27.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5215222.419 ±  122720.564   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1564.029 ±      36.824  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5      1547.326 ±     719.760  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       466.855 ±     212.833    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.083 ±       0.160  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.025 ±       0.048    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        23.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        20.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    359373.567 ±    8234.526   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1938.442 ±      44.846  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5      1939.420 ±     575.324  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5      8489.555 ±    2353.704    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5         0.087 ±       0.143  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.383 ±       0.625    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        29.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3323501.020 ±  101114.010   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       489.954 ±      15.085  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       232.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       515.757 ±     656.838  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5       244.358 ±     312.132    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.396 ±       3.011  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.190 ±       1.447    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    345940.954 ±    5781.624   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1355.984 ±      22.170  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6168.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1388.249 ±     526.670  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5      6314.787 ±    2392.424    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.134  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.322 ±       0.607    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        21.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        21.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    649316.603 ±    6266.734   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2366.740 ±      23.116  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5736.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5      2365.893 ±      53.850  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5      5733.920 ±      87.389    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5         0.112 ±       0.257  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5         0.273 ±       0.624    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        35.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        27.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    640454.925 ±    5020.972   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       745.497 ±       5.855  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5       780.053 ±     683.181  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5      1917.511 ±    1692.300    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5         0.599 ±       4.619  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         1.474 ±      11.374    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        12.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        14.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3760130.231 ±   95406.345   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1490.818 ±      37.832  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5      1478.752 ±     709.996  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       619.049 ±     300.711    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.044  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.031 ±       0.019    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        18.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    236859.210 ±    3831.516   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1651.894 ±      26.338  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10976.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5      1661.230 ±     863.470  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5     11038.996 ±    5790.570    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5         0.087 ±       0.119  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.581 ±       0.793    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        25.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    901415.087 ±   27861.081   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      2172.124 ±      68.339  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3792.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2159.364 ±     746.640  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      3769.160 ±    1265.513    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.100 ±       0.132  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.174 ±       0.228    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        32.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        28.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1563852.368 ±   28409.560   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1025.428 ±      18.638  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1032.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       982.545 ±      29.696  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5       988.850 ±      29.144    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.075 ±       0.146  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.075 ±       0.147    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        15.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   6730476.516 ±  437576.330   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       752.732 ±      48.619  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       731.163 ±     574.951  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       171.254 ±     142.488    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.071 ±       0.185  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.017 ±       0.043    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        11.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5         9.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    512750.178 ±    7657.865   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1785.339 ±      26.620  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5480.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1801.520 ±     725.950  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5      5531.226 ±    2300.200    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.104 ±       0.160  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.320 ±       0.496    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        27.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        28.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    639162.698 ±   28277.663   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2271.454 ±      99.937  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5592.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5      2296.733 ±     576.163  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5      5656.415 ±    1543.088    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5         0.121 ±       0.143  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5         0.297 ±       0.349    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        34.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        30.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5075757.117 ±  163583.960   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1264.276 ±      40.538  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5      1273.596 ±     569.463  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5       394.842 ±     174.678    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5         0.071 ±       0.224  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.022 ±       0.069    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        19.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        15.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    366268.672 ±    6564.535   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1912.064 ±      34.246  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8216.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5      1939.075 ±     574.672  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5      8334.394 ±    2594.255    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5         0.075 ±       0.091  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5         0.322 ±       0.397    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        29.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        31.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    466850.809 ±    3323.254   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1276.697 ±       9.038  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4304.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5      1266.486 ±     584.843  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5      4269.225 ±    1959.658    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5         0.075 ±       0.108  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5         0.253 ±       0.363    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        19.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        16.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3557120.064 ±  174226.008   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       578.688 ±      28.020  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       256.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5       597.640 ±     572.222  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5       264.757 ±     257.837    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5         0.406 ±       3.053  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.179 ±       1.340    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         9.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        12.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    332803.503 ±    9152.514   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1226.725 ±      33.072  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5800.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5      1187.477 ±     696.000  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5      5611.504 ±    3199.426    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5         0.083 ±       0.113  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5         0.394 ±       0.533    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        20.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   1971440.246 ±   89033.275   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3147.203 ±     140.875  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5      3188.088 ±     681.517  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5      2544.238 ±     493.588    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5         0.112 ±       0.156  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.090 ±       0.126    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        47.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    312506.656 ±   16431.980   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       735.481 ±      38.576  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      3704.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5       718.475 ±     558.016  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5      3624.777 ±    2990.411    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5         0.504 ±       3.897  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5         2.510 ±      19.355    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5        11.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5        12.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    714585.383 ±   49211.723   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       646.580 ±      44.431  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1424.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5       602.306 ±     576.474  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5      1325.173 ±    1252.213    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5         0.050 ±       0.201  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5         0.109 ±       0.437    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         9.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         6.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3722550.367 ±   74712.595   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      2213.918 ±      45.072  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       936.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5      2235.276 ±     711.214  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5       945.211 ±     310.228    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5         0.067 ±       0.132  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.028 ±       0.055    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        33.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        25.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   6968366.062 ±  120640.528   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       814.872 ±      13.745  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       184.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5       803.726 ±     705.628  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5       181.478 ±     159.193    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5         0.071 ±       0.091  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5         0.016 ±       0.021    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5        12.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    187892.007 ±    4404.294   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1567.250 ±      36.775  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     13128.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5      1523.559 ±     705.228  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5     12760.330 ±    5837.865    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5         0.067 ±       0.143  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.557 ±       1.186    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        23.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    750382.943 ±   11235.064   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2891.223 ±      43.047  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6064.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5      2914.961 ±     709.072  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5      6114.674 ±    1548.769    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5         0.117 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5         0.244 ±       0.251    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        43.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        35.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3583149.890 ±  103116.528   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2313.398 ±      65.968  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5      2300.539 ±     578.572  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5      1010.290 ±     248.383    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.092 ±       0.108  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.040 ±       0.047    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        34.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        27.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    282665.967 ±    4417.189   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2086.353 ±      31.916  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11616.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5      2074.447 ±     497.644  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5     11549.532 ±    2747.303    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5         0.104 ±       0.057  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.579 ±       0.310    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        31.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        30.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    851953.811 ±   25362.245   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1966.201 ±      58.781  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3632.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5      1952.114 ±     597.648  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5      3605.614 ±    1080.350    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5         0.092 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.170 ±       0.228    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        29.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1436480.111 ±   64030.952   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       825.252 ±      36.359  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       904.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5       847.662 ±     690.671  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5       930.365 ±     792.772    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5         0.075 ±       0.238  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5         0.082 ±       0.262    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        13.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4354744.790 ±   78466.982   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       332.058 ±       5.940  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5       352.687 ±     364.881  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       127.337 ±     129.178    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.370 ±       3.041  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.134 ±       1.097    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5         9.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    480922.159 ±    8155.927   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1665.103 ±      28.185  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5448.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5      1664.257 ±      73.121  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5      5445.149 ±     177.429    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5         0.087 ±       0.143  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.286 ±       0.471    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3353988.720 ±  127433.547   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1585.729 ±      58.900  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5      1547.664 ±     713.968  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       726.602 ±     351.371    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.067 ±       0.174  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.031 ±       0.082    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        23.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        21.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    308402.529 ±   10743.216   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1617.750 ±      56.306  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8256.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1596.242 ±     597.575  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8148.605 ±    3146.075    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.083 ±       0.127  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.424 ±       0.639    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    483141.682 ±   22863.893   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1321.399 ±      63.108  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      4304.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5      1333.941 ±      37.170  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5      4345.392 ±     240.777    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5         0.062 ±       0.080  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5         0.203 ±       0.260    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   3002310.581 ±   76375.377   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       564.721 ±      14.034  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       296.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5       530.984 ±     700.237  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       278.453 ±     368.677    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5         0.388 ±       2.981  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5         0.203 ±       1.560    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    343240.789 ±    6913.480   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1312.147 ±      26.727  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      6016.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5      1320.586 ±      53.605  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5      6054.570 ±     131.133    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5         0.071 ±       0.072  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5         0.324 ±       0.327    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        21.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    708305.869 ±   11394.053   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2113.763 ±      34.604  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4696.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      2088.737 ±     589.135  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5      4640.181 ±    1289.256    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.079 ±       0.200  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5         0.176 ±       0.440    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1455002.095 ±   64774.517   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1102.045 ±      48.568  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5      1119.615 ±     705.270  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5      1210.254 ±     736.529    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.079 ±       0.088  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         0.085 ±       0.094    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        17.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   5543852.028 ±   55524.694   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       169.082 ±       1.695  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       153.485 ±     539.521  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        43.575 ±     153.173    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.008 ±       0.072  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.002 ±       0.020    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         3.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         5.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    221105.302 ±    7202.942   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1539.847 ±      50.121  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1524.289 ±     664.944  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5     10848.877 ±    4708.158    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.083 ±       0.150  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         0.592 ±       1.057    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        23.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    979252.450 ±   36140.007   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1707.512 ±      62.958  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2744.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5      1744.710 ±     614.893  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5      2803.113 ±     940.063    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5         0.087 ±       0.105  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5         0.140 ±       0.165    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        26.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2480107.818 ±   87025.789   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1096.840 ±      38.507  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       696.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5      1119.625 ±     705.561  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5       710.985 ±     462.916    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.096 ±       0.231  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.061 ±       0.148    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        17.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        16.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   6643402.278 ±  193553.971   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       540.380 ±      15.457  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       128.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       516.228 ±     658.050  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5       122.369 ±     156.719    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.386 ±       2.966  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.092 ±       0.712    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6467816.436 ±  105319.844   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       394.515 ±       6.404  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5       368.112 ±     491.268  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5        89.525 ±     118.443    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5         0.380 ±       3.096  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.092 ±       0.750    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5         8.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    311029.381 ±   10743.258   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1600.009 ±      54.818  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8096.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5      1594.817 ±     618.267  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5      8065.159 ±    2921.669    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5         0.087 ±       0.230  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5         0.441 ±       1.147    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        24.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        25.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   3395404.518 ±   54940.396   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3089.571 ±      49.647  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1432.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5      3054.357 ±      46.019  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5      1415.686 ±      18.126    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5         0.129 ±       0.183  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         0.060 ±       0.085    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        45.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        36.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   3965754.682 ±  125691.259   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2378.886 ±      74.539  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       944.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5      2358.636 ±      76.153  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5       936.013 ±      41.673    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5         0.092 ±       0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.036 ±       0.017    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        35.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   7574583.552 ±  150878.180   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5      1424.890 ±      28.776  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       296.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5      1414.636 ±     563.168  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       293.903 ±     118.581    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.067 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.014 ±       0.027    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        21.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2754497.229 ±   58788.109   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1708.268 ±      37.149  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       976.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5      1679.179 ±      46.022  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5       959.405 ±      33.757    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5         0.092 ±       0.091  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         0.052 ±       0.052    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        25.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        20.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   5164224.510 ±   47692.955   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1601.471 ±      14.068  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5      1601.336 ±     559.151  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5       487.985 ±     171.517    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5         0.067 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5         0.020 ±       0.032    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   9088687.557 ±  336007.163   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       877.782 ±      32.389  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5       865.694 ±     702.736  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5       149.941 ±     122.311    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5         0.075 ±       0.072  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5         0.013 ±       0.012    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7488251.798 ±   24689.926   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   5016449.145 ±  106800.655   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1606.462 ±      34.013  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5      1609.733 ±     555.278  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5       504.974 ±     171.553    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5         0.087 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.027 ±       0.033    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        24.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        21.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1415251.092 ±   26162.698   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1928.231 ±      35.625  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2144.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5      1887.883 ±     717.935  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5      2099.389 ±     808.944    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5         0.075 ±       0.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5         0.083 ±       0.162    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        28.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        23.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1075195.500 ±   32605.863   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       694.250 ±      21.094  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1016.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5       721.813 ±     560.283  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5      1055.821 ±     803.221    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5         0.492 ±       3.703  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5         0.722 ±       5.435    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        11.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1825071.180 ±   94947.441   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       343.240 ±      17.841  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       296.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5       303.621 ±     168.149  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       261.659 ±     138.621    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.325 ±       2.544  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.278 ±       2.178    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         7.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1272171.222 ±    5374.107   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       963.609 ±       3.576  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1192.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5       929.624 ±     573.164  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5      1150.096 ±     712.209    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5         0.050 ±       0.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5         0.062 ±       0.180    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        12.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2394393.475 ±   22061.729   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5      1071.065 ±       9.952  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       704.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5      1056.875 ±     567.619  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5       694.683 ±     373.441    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5         0.062 ±       0.150  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5         0.041 ±       0.099    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        16.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        15.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2502027.639 ±   42811.014   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       585.071 ±      10.056  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5       597.909 ±     572.775  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5       375.991 ±     359.168    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5         0.415 ±       2.994  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5         0.260 ±       1.877    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2644618.814 ±   23239.004   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2442284.694 ±   37660.725   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1117.350 ±      17.316  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5      1132.278 ±     697.199  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5       729.561 ±     447.224    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5         0.071 ±       0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5         0.046 ±       0.028    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        17.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     11838.298 ±     373.678   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1669.829 ±      52.261  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    221975.473 ±     114.754    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5      1673.165 ±      52.891  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5    222432.699 ±   10693.331    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5         0.120 ±       0.287  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5        15.971 ±      37.821    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        25.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        21.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15283.854 ±     215.812   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       241.677 ±       3.519  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     24880.031 ±       0.021    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5       204.677 ±     440.583  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5     21075.739 ±   45368.634    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5         0.021 ±       0.143  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5         2.136 ±      14.632    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37989.628 ±    2522.811   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       416.025 ±      27.447  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     17232.018 ±       0.046    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5       419.596 ±     639.896  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     17362.961 ±   26123.538    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.359 ±       2.955  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        15.307 ±     126.297    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3559.628 ±     306.609   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1098.445 ±      94.752  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    485611.583 ±      29.795    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5      1059.758 ±     572.788  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5    468830.224 ±  262079.309    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5         0.021 ±       0.098  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5         9.405 ±      45.035    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        16.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        28.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     59586.193 ±    2404.017   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       761.023 ±      30.490  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.007 ±       0.156    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5       713.796 ±     554.908  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5     18847.108 ±   14459.967    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5         0.058 ±       0.154  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5         1.542 ±       4.077    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        11.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     78725.384 ±    1152.295   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       516.219 ±       7.555  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10320.006 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5       515.182 ±     654.738  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5     10291.326 ±   12977.408    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5         0.408 ±       3.157  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5         8.169 ±      63.206    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         9.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     85726.537 ±     482.633   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5         5.665 ±       0.033  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       104.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk8.json
[success] Total time: 3776 s, completed Feb 24, 2018 7:41:38 PM
